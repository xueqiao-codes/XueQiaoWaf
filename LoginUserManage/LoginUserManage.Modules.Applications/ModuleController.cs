using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using IDLAutoGenerated.Util;
using System.Timers;
using System.Threading;
using XueQiaoWaf.LoginUserManage.Modules.Applications.Properties;
using lib.xqclient_base.logger;
using xueqiao.trade.hosting.proxy;
using XueQiaoWaf.LoginUserManage.Modules.Applications.Controllers;
using lib.xqclient_base.thriftapi_mediation;
using xueqiao.trade.hosting.terminal.ao;
using lib.xqclient_base.thriftapi_mediation.Interface;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.BusinessResources.Constants;
using AppAssembler.Interfaces.Applications;
using business_foundation_lib.xq_thriftlib_config;
using System.ComponentModel.Composition.Hosting;
using xueqiao.graph.xiaoha.chart.terminal.ao.thriftapi;

namespace XueQiaoWaf.LoginUserManage.Modules.Applications
{
    /// <summary>
    /// Responsible for the whole module. This controller delegates the tasks to other controllers.
    /// </summary>
    [Export(typeof(IModuleController)), Export(typeof(ILoginUserManageService)), Export(typeof(ILoginDataService))
        , PartCreationPolicy(CreationPolicy.Shared)]
    internal class ModuleController : IModuleController, ILoginUserManageService, ILoginDataService
    {
        private readonly CompositionContainer compositionContainer;
        private readonly ExportFactory<LoginDialogController> loginDialogCtrlFactory;
        private readonly ExportFactory<UpdateLoginPwdDialogCtrl> updateLoginPwdDialogCtrlFactory;
        private readonly ExportFactory<UserAppVersionInfoDialogCtrl> userAppVersionInfoDialogCtrlFactory;
        private readonly ExportFactory<Link2TouyanUserDialogCtrl> link2TouyanUserDialogCtrlFactory;
        private readonly Lazy<IAppAssemblerService> appAssemblerService;

        private IEnumerable<ILoginModuleServiceCtrl> moduleServiceCtrls;

        private System.Timers.Timer sessionHeartbeatTimer;

        private string _loginUserCompanyCode;
        private ProxyCompanyGroup _loginUserCompanyGroup;
        private ProxyLoginResp _proxyLoginResp;
        private LandingInfo _landingInfo;
        private AppVersion _loginUserAppUpdateInfo;
        private XiaohaChartLandingInfo _xiaohaChartLandingInfo;
        private bool _loginUserHasLink2TouyanUser;
        private bool _isPersonalUserLogin;

        private bool shutdowned;

        [ImportingConstructor]
        public ModuleController(
            CompositionContainer compositionContainer,
            ExportFactory<LoginDialogController> loginDialogCtrlFactory,
            ExportFactory<UpdateLoginPwdDialogCtrl> updateLoginPwdDialogCtrlFactory,
            ExportFactory<UserAppVersionInfoDialogCtrl> userAppVersionInfoDialogCtrlFactory,
            ExportFactory<Link2TouyanUserDialogCtrl> link2TouyanUserDialogCtrlFactory,
            Lazy<IAppAssemblerService> appAssemblerService)
        {
            this.compositionContainer = compositionContainer;
            this.loginDialogCtrlFactory = loginDialogCtrlFactory;
            this.updateLoginPwdDialogCtrlFactory = updateLoginPwdDialogCtrlFactory;
            this.userAppVersionInfoDialogCtrlFactory = userAppVersionInfoDialogCtrlFactory;
            this.link2TouyanUserDialogCtrlFactory = link2TouyanUserDialogCtrlFactory;
            this.appAssemblerService = appAssemblerService;
        }

        public void Initialize()
        {
            // Upgrade the settings from a previous version when the new version starts the first time.
            // IsUpgradeNeeded default value is true
            if (Settings.Default.IsUpgradeNeeded)
            {
                try
                {
                    // 如果没加 GetPreviousVersion 这行程序，Upgrade 会默认找上一个版本（比如当前为1.0.1，它会默认找1.0.0）的数据进行升级。
                    // 如果没有找到，则数据不会升级过来。
                    // 加上 GetPreviousVersion 会找所有的版本，如果不存在 1.0.0， 则会找 0.0.9 版本的数据进行升级
                    Settings.Default.GetPreviousVersion(nameof(Settings.Default.IsUpgradeNeeded));
                    Settings.Default.Upgrade();
                    Settings.Default.IsUpgradeNeeded = false;
                    SaveCurrentModuleSettings();
                }
                catch
                {
                    // do nothing
                }
            }

            this.HasLogined += RecvUserHasLogined;
            appAssemblerService.Value.AppShutdown += RecvAppShutdown;
        }

        public void Run()
        {
            moduleServiceCtrls = compositionContainer.GetExportedValues<ILoginModuleServiceCtrl>();
            if (moduleServiceCtrls != null)
            {
                foreach (var _ctrl in moduleServiceCtrls)
                {
                    _ctrl.Initialize();
                }
            }

            StartSessionHeartbeatTimerIfNeed();
        }
        
        public void Shutdown()
        {
            if (this.shutdowned) return;
            this.shutdowned = true;

            this.HasLogined -= RecvUserHasLogined;
            appAssemblerService.Value.AppShutdown -= RecvAppShutdown;

            StopSessionHeartbeatTimer();
            SaveCurrentModuleSettings();

            DisposeSameLoginUserAtDeviceMutex();

            if (moduleServiceCtrls != null)
            {
                foreach (var _ctrl in moduleServiceCtrls)
                {
                    _ctrl.Shutdown();
                }
            }
        }


        #region ILoginDataService

        public string CompanyCode => _loginUserCompanyCode;
        public ProxyCompanyGroup CompanyGroup => _loginUserCompanyGroup;
        public ProxyLoginResp ProxyLoginResp => _proxyLoginResp;
        public LandingInfo LandingInfo => _landingInfo;
        public AppVersion LoginUserAppUpdateInfo => _loginUserAppUpdateInfo;
        public XiaohaChartLandingInfo XiaohaTouyanAuthLandingInfo => _xiaohaChartLandingInfo;
        public bool HasLink2TouyanUser => _loginUserHasLink2TouyanUser;
        public bool IsPersonalUserLogin => _isPersonalUserLogin;

        #endregion

        #region ILoginUserManageService

        public event HasLogined HasLogined;
        public event IsLogouting IsLogouting;
        public event HasLogouted HasLogouted;
        public event AuthTouyanUserHasLogouted AuthTouyanUserHasLogouted;
        public event AppUpdateInfoQueried LoginUserAppUpdateInfoQueried;
        
        public bool? ShowLoginDialog(object dialogOwner, Action dialogContentRendered)
        {
            var dialogCtrl = loginDialogCtrlFactory.CreateExport().Value;
            dialogCtrl.DialogOwner = dialogOwner;
            dialogCtrl.DialogContentRendered = dialogContentRendered;
            dialogCtrl.DidLoginedHandler = (_ctrl, _loginReqInfo, _loginCompanyGroup, 
                _loginRespData, _updateInfo, _authTouyanRespData, _hasLink2TouyanUser, _isPersonalUser) => 
            {
                this._loginUserCompanyCode = _loginReqInfo?.CompanyCode;
                this._loginUserCompanyGroup = _loginCompanyGroup;
                this._proxyLoginResp = _loginRespData;
                this._landingInfo = _loginRespData?.HostingSession?.HostingSession2LandingInfo();
                this._loginUserAppUpdateInfo = _updateInfo;
                this._xiaohaChartLandingInfo = _authTouyanRespData;
                this._loginUserHasLink2TouyanUser = _hasLink2TouyanUser;
                this._isPersonalUserLogin = _isPersonalUser;

                // 更新 sameLoginUserAtDeviceMutex
                InvalidateSameLoginUserAtDeviceMutex();

                HasLogined?.Invoke();
            };

            dialogCtrl.Initialize();
            dialogCtrl.Run();
            dialogCtrl.Shutdown();

            return dialogCtrl.LoginResult;
        }


        public void DoSignout()
        {
            var lastLoginResp = this._proxyLoginResp;
            var lastXiaohaChartLandingInfo = this._xiaohaChartLandingInfo;
            if (lastLoginResp == null)
            {
                // 已经登出，无需再次退出
                return;
            }
            
            // 发布将要退出的通知
            IsLogouting?.Invoke(lastLoginResp);
            
            StopSessionHeartbeatTimer();
            this._loginUserCompanyCode = null;
            this._loginUserCompanyGroup = null;
            this._proxyLoginResp = null;
            this._landingInfo = null;
            this._loginUserAppUpdateInfo = null;
            this._xiaohaChartLandingInfo = null;
            this._loginUserHasLink2TouyanUser = false;
            this._isPersonalUserLogin = false;

            DisposeSameLoginUserAtDeviceMutex();

            // 发布已经退出的通知
            HasLogouted?.Invoke(lastLoginResp);
            AuthTouyanUserHasLogouted?.Invoke(lastXiaohaChartLandingInfo);
        }

        public void ShowLoginPwdUpdateDialog(object dialogOwner)
        {
            var dialogCtrl = updateLoginPwdDialogCtrlFactory.CreateExport().Value;
            dialogCtrl.DialogOwner = dialogOwner;
            dialogCtrl.Initialize();
            dialogCtrl.Run();
            dialogCtrl.Shutdown();
        }

        public void ShowUserAppVersionInfoDialog(object dialogOwner)
        {
            var dialogCtrl = userAppVersionInfoDialogCtrlFactory.CreateExport().Value;
            dialogCtrl.DialogOwner = dialogOwner;
            dialogCtrl.Initialize();
            dialogCtrl.Run();
            dialogCtrl.Shutdown();
        }
        
        public Task<IInterfaceInteractResponse<AppVersion>> QueryLoginUserAppUpdateInfo()
        {
            return Task.Run(() => 
            {
                var companyId = _proxyLoginResp?.CompanyId;
                if (companyId == null)
                {
                    AppLog.Warn("User not login, can't query version info.");
                    return null;
                }

                var ver = AppVersionHelper.GetApplicationVersion();
                var reqInfo = new UpdateInfoReq
                {
                    CompanyId = companyId.Value,
                    AppKey = XueQiaoConstants.QueryUpdateInfoAppKey,
                    VersionNum = new VersionNum { MajorVersionNum = ver.Major, MinorVersionNum = ver.Minor, BuildVersionNum = ver.Build, ReversionNum = ver.Revision }
                };
                var iip = new StubInterfaceInteractParams { TransportConnectTimeoutMS = 1000, TransportReadTimeoutMS = 1000 };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingProxyHttpStub.queryUpdateInfo(reqInfo, iip);
                
                // Update current update info after queried update info
                var updateInfo = resp?.CorrectResult;

                this._loginUserAppUpdateInfo = updateInfo;
                if (updateInfo != null)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() => 
                    {
                        LoginUserAppUpdateInfoQueried?.Invoke(updateInfo);
                    });
                }

                return resp;
            });
        }

        public bool IsSameUserLoginAtThisDevice(lib.xqclient_base.thriftapi_mediation.Environment apilib_environment,
            string companyCode, string companyGroupCode, string userName, bool isPersonalUser)
        {
            var mutextName = GetLoginUserMutexName(apilib_environment, companyCode, companyGroupCode, userName, isPersonalUser);
            var mutex = new Mutex(false, mutextName, out bool createdNew);
            return !createdNew;
        }
        
        private static string GetLoginUserMutexName(lib.xqclient_base.thriftapi_mediation.Environment apilib_environment,
            string companyCode, string companyGroupCode, string userName, bool isPersonalUser)
        {
            return $"ENV_{apilib_environment}|CC_{companyCode}|CGC_{companyGroupCode}|UN_{userName?.ToUpper()}|PU_{isPersonalUser.ToString()}";
        }

        public bool? ShowLink2TouyanUserDialog(object dialogOwner)
        {
            // 显示关联投研用户弹窗

            var dialogCtrl = link2TouyanUserDialogCtrlFactory.CreateExport().Value;
            dialogCtrl.DialogOwner = dialogOwner;
            dialogCtrl.DidLink2TouyanUserHandler = (_ctrl, _landingInfo) => 
            {
                if (this._xiaohaChartLandingInfo?.Token != _landingInfo?.Token)
                {
                    return;
                }

                this._loginUserHasLink2TouyanUser = true;
                Link2TouyanUserStateChanged?.Invoke(true);
            };

            dialogCtrl.Initialize();
            dialogCtrl.Run();
            dialogCtrl.Shutdown();

            return dialogCtrl.LinkResult;
        }

        public event Link2TouyanUserStateChanged Link2TouyanUserStateChanged;
        
        #endregion

        private void RecvUserHasLogined()
        {
            StartSessionHeartbeatTimerIfNeed();
        }

        private void RecvAppShutdown()
        {
            Shutdown();
        }

        private void StartSessionHeartbeatTimerIfNeed()
        {
            StopSessionHeartbeatTimer();
            if (this._proxyLoginResp != null)
            {
                sessionHeartbeatTimer = new System.Timers.Timer();
                sessionHeartbeatTimer.Elapsed += SessionHeartbeatTimer_Elapsed;
                sessionHeartbeatTimer.Interval = 15000;
                sessionHeartbeatTimer.Start();
            }
        }

        private void StopSessionHeartbeatTimer()
        {
            if (sessionHeartbeatTimer != null)
            {
                sessionHeartbeatTimer.Stop();
                sessionHeartbeatTimer.Elapsed -= SessionHeartbeatTimer_Elapsed;
                sessionHeartbeatTimer.Dispose();
                sessionHeartbeatTimer = null;
            }
        }

        private void SessionHeartbeatTimer_Elapsed(object sender, ElapsedEventArgs e)
        {
            var landingInfo = this._proxyLoginResp?.HostingSession.HostingSession2LandingInfo();
            if (landingInfo != null)
            {
                var interactParams = new StubInterfaceInteractParams { TransportConnectTimeoutMS = 2000, TransportReadTimeoutMS = 2000 };
                var task = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.heartBeatAsync(landingInfo, CancellationToken.None, interactParams);
                task.ContinueWith(t => 
                {
                    // do nothing
                });
            }
        }
        
        private void SaveCurrentModuleSettings()
        {
            try
            {
                Settings.Default.Save();
            }
            catch (Exception e)
            {
                // When more application instances are closed at the same time then an exception occurs.
                AppLog.Error($"Save settings error: {e}");
            }
        }

        /// <summary>
        /// 设备的同一登录用户互斥量
        /// </summary>
        private Mutex sameLoginUserAtDeviceMutex;

        /// <summary>
        /// 更新 <see cref="sameLoginUserAtDeviceMutex"/>
        /// </summary>
        private void InvalidateSameLoginUserAtDeviceMutex()
        {
            DisposeSameLoginUserAtDeviceMutex();

            var loginResp = this._proxyLoginResp;
            if (loginResp == null)
                return;

            var companyCode = this._loginUserCompanyCode;
            var companyGroupCode = this._loginUserCompanyGroup?.GroupCode;
            var loginUserName = loginResp.LoginUserInfo?.LoginName;
            var isPersonalUser = this._isPersonalUserLogin;

            var mutextName = GetLoginUserMutexName(XqThriftLibConfigurationManager.SharedInstance.ThriftHttpLibEnvironment, companyCode, companyGroupCode, loginUserName, isPersonalUser);
            sameLoginUserAtDeviceMutex = new Mutex(false, mutextName);
        }

        /// <summary>
        /// 销毁 <see cref="sameLoginUserAtDeviceMutex"/>
        /// </summary>
        private void DisposeSameLoginUserAtDeviceMutex()
        {
            if (sameLoginUserAtDeviceMutex != null)
            {
                sameLoginUserAtDeviceMutex.Close();
                sameLoginUserAtDeviceMutex = null;
            }
        }
    }
}
