using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using xueqiao.trade.hosting.proxy;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Modules.Applications.ViewModels;
using IDLAutoGenerated.Util;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.BusinessResources.Helpers;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using System.Net;
using lib.xqclient_base.logger;
using AppAssembler.Interfaces.Applications;
using business_foundation_lib.helper;

namespace XueQiaoWaf.LoginUserManage.Modules.Applications.Controllers
{
    /// <summary>
    /// 应用更新弹窗 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class UserAppUpdateDialogCtrl : IController
    {
        private readonly UserAppUpdateVM contentVM;
        private readonly IMessageWindowService messageWindowService;
        
        private readonly IEventAggregator eventAggregator;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly IAppAssemblerService appAssemblerService;
        private readonly DelegateCommand updateNowCmd;
        private readonly DelegateCommand cancelUpdateCmd;
        private readonly DelegateCommand cancelDownloadCmd;
        
        private IMessageWindow dialog;
        private WebClient packageDownloadWebClient;
        private bool isDownloading;
        private string packageSavePath;

        [ImportingConstructor]
        public UserAppUpdateDialogCtrl(
            UserAppUpdateVM contentVM,
            IMessageWindowService messageWindowService,
            IAppAssemblerService appAssemblerService,
            IEventAggregator eventAggregator,
            Lazy<ILoginUserManageService> loginUserManageService)
        {
            this.contentVM = contentVM;
            this.messageWindowService = messageWindowService;
            this.appAssemblerService = appAssemblerService;
            this.eventAggregator = eventAggregator;
            this.loginUserManageService = loginUserManageService;

            updateNowCmd = new DelegateCommand(UpdateNow, CanUpdateNow);
            cancelUpdateCmd = new DelegateCommand(CancelUpdate, CanCancelUpdate);
            cancelDownloadCmd = new DelegateCommand(CancelDownload);
            
            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
        }

        /// <summary>
        /// 窗口 owner
        /// </summary>
        public object DialogOwner { get; set; }

        /// <summary>
        /// 应用更新信息
        /// </summary>
        public AppVersion UpdateInfo { get; set; }

        public void Initialize()
        {
            if (UpdateInfo == null) throw new ArgumentNullException("`UpdateInfo` can't be null before call Initialize.");

            contentVM.UpdateNowCmd = updateNowCmd;
            contentVM.CancelUpdateCmd = cancelUpdateCmd;
            contentVM.DownloadProgressDataContext.CancelDownloadCmd = cancelDownloadCmd;

            GenerateDisplayInfos(UpdateInfo, out bool isForeUpdate, out string dialogTitle, out string updateDesc);
            contentVM.IsForceUpdate = isForeUpdate;
            contentVM.AppUpdateDesc = updateDesc;

            dialog = messageWindowService.CreateContentCustomWindow(DialogOwner, null, null, true, false, true, dialogTitle, contentVM.View);
            dialog.Closing += Dialog_DialogClosing;
        }

        public void Run()
        {
            dialog?.ShowDialog();
        }

        public void Shutdown()
        {
            DisposePackageDownloadWebClient();
            InternalCloseDialog();
            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
        }
        
        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            Shutdown();
        }

        private bool CanUpdateNow()
        {
            return isDownloading == false;
        }

        private void UpdateNow()
        {
            this.packageSavePath = XueQiaoBusinessHelper.GetAppInstallPackageSavePath();
            if (packageSavePath == null)
            {
                messageWindowService.ShowMessageDialog(UIHelper.GetWindowOfUIElement(contentVM.View), null, null, "错误", "安装包下载路径的获取失败！");
                return;
            }

            var downloadUrl = FoundationHelper.GetPackageDownloadUrlDependOnCurrentProcessBitMode(UpdateInfo);
            if (string.IsNullOrEmpty(downloadUrl))
            {
                messageWindowService.ShowMessageDialog(UIHelper.GetWindowOfUIElement(contentVM.View), null, null, "错误", "未提供下载地址！请联系客服！");
                return;
            }

            try
            {
                SetupPackageDownloadWebClient();
                packageDownloadWebClient.DownloadFileAsync(new Uri(downloadUrl), this.packageSavePath);
            }
            catch (Exception e)
            {
                AppLog.Error("Download update package failed.", e);
                DisposePackageDownloadWebClient();
                messageWindowService.ShowMessageDialog(UIHelper.GetWindowOfUIElement(contentVM.View), null, null, "错误", "下载出错，请稍后再试，或联系客服!");
            }
        }

        private bool CanCancelUpdate()
        {
            return isDownloading == false;
        }

        private void CancelUpdate()
        {
            DisposePackageDownloadWebClient();
            contentVM.DownloadProgressDataContext.IsDownloading = false;
            contentVM.DownloadProgressDataContext.DownloadProgress = 0;

            InternalCloseDialog();
        }

        private void CancelDownload()
        {
            DisposePackageDownloadWebClient();

            UpdateIsDownloading(false);
            contentVM.DownloadProgressDataContext.IsDownloading = false;
            contentVM.DownloadProgressDataContext.DownloadProgress = 0;
        }

        private void Dialog_DialogClosing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            var owner = UIHelper.GetWindowOfUIElement(contentVM.View);
            if (messageWindowService.ShowQuestionDialog(owner, null, null, null, "确定退出更新吗？", false, "不退出", "退出") == false)
            {
                e.Cancel = false;
                if (contentVM.IsForceUpdate)
                {
                    appAssemblerService.ShutdownApplication();
                }
                return;
            }
            e.Cancel = true;
        }

        private void GenerateDisplayInfos(AppVersion updateInfo,
            out bool isForeUpdate, out string dialogTitle, out string updateDesc)
        {
            isForeUpdate = false;
            dialogTitle = null;
            updateDesc = null;

            if (updateInfo.UpdateType == UpdateType.FORCE_UPDATE)
            {
                isForeUpdate = true;
                dialogTitle = "更新版本";
                updateDesc = "当前软件版本无法使用，请下载更新。";
            }
            else
            {
                isForeUpdate = false;
                dialogTitle = "新版本";

                var descSb = new StringBuilder();
                var newVersion = updateInfo.VersionNum.ToLocalVersion();
                descSb.Append($"发现新版本，v{newVersion.ToString()}\n");
                descSb.Append(FoundationHelper.JoinAppVersionUpdateNotes(updateInfo.UpdateNotes) ?? "");
                updateDesc = descSb.ToString();
            }
        }

        private void InternalCloseDialog()
        {
            if (dialog != null)
            {
                try
                {
                    dialog.Closing -= Dialog_DialogClosing;
                    dialog.Close();
                }
                catch (Exception) { }
                finally
                {
                    dialog = null;
                }
            }
        }

        private void SetupPackageDownloadWebClient()
        {
            DisposePackageDownloadWebClient();
            packageDownloadWebClient = new WebClient();
            packageDownloadWebClient.DownloadFileCompleted += PackageDownloadWebClient_DownloadFileCompleted;
            packageDownloadWebClient.DownloadProgressChanged += PackageDownloadWebClient_DownloadProgressChanged;
        }

        private void DisposePackageDownloadWebClient()
        {
            if (packageDownloadWebClient != null)
            {
                packageDownloadWebClient.DownloadFileCompleted -= PackageDownloadWebClient_DownloadFileCompleted;
                packageDownloadWebClient.DownloadProgressChanged -= PackageDownloadWebClient_DownloadProgressChanged;
                packageDownloadWebClient.CancelAsync();
                packageDownloadWebClient.Dispose();
                packageDownloadWebClient = null;
            }
        }
        
        private void PackageDownloadWebClient_DownloadFileCompleted(object sender, System.ComponentModel.AsyncCompletedEventArgs e)
        {
            UpdateIsDownloading(false);
            contentVM.DownloadProgressDataContext.IsDownloading = false;

            if (e.Cancelled == false && e.Error == null)
            {
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    //下载完成之后开始安装
                    FoundationHelper.StartupAppPackageInstallProcess(this.packageSavePath);
                    appAssemblerService.ShutdownApplication();
                });
            }
            else if (e.Cancelled == true)
            {

            }
            else if (e.Error != null)
            {
                AppLog.Error("Download install package failed.", e.Error);
                DispatcherHelper.CheckBeginInvokeOnUI(() => 
                {
                    var owner = UIHelper.GetWindowOfUIElement(contentVM.View);
                    if (owner != null)
                    {
                        messageWindowService.ShowMessageDialog(owner, null, null, "发生错误", "发生错误，下载失败，请重试或联系客服！");
                    }
                });
            }
        }

        private void PackageDownloadWebClient_DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e)
        {
            UpdateIsDownloading(true);
            contentVM.DownloadProgressDataContext.IsDownloading = true;
            contentVM.DownloadProgressDataContext.DownloadProgress = e.ProgressPercentage;
        }

        private void UpdateIsDownloading(bool value)
        {
            this.isDownloading = value;
            DispatcherHelper.CheckBeginInvokeOnUI(() => 
            {
                updateNowCmd?.RaiseCanExecuteChanged();
                cancelUpdateCmd?.RaiseCanExecuteChanged();
            });
        }
    }
}
