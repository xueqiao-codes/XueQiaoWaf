using AppAssembler.Interfaces.Applications;
using lib.xqclient_base.thriftapi_mediation;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Waf.Applications;
using xueqiao.trade.hosting.proxy;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.LoginUserManage.Modules.Applications.Properties;
using XueQiaoWaf.LoginUserManage.Modules.Applications.ViewModels;
using XueQiaoFoundation.BusinessResources.Constants;
using XueQiaoFoundation.BusinessResources.Helpers;
using IDLAutoGenerated.Util;
using business_foundation_lib.xq_thriftlib_config;
using business_foundation_lib.helper;
using xueqiao.graph.xiaoha.chart.terminal.ao.thriftapi;
using System.Windows;

namespace XueQiaoWaf.LoginUserManage.Modules.Applications.Controllers
{
    internal delegate void LoginDialogDidLogined(LoginDialogController ctrl,
        ProxyLoginReq loginReqInfo, ProxyCompanyGroup loginCompanyGroup, 
        ProxyLoginResp loginRespData, AppVersion loginUserAppUpdateInfo,
        XiaohaChartLandingInfo authTouyanRespData, bool hasLink2TouyanUser, bool _isPersonalUser);

    /// <summary>
    /// 登录流程 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class LoginDialogController
    {
        private const string HOSTING_MODE_REAL = "REAL";
        private const string HOSTING_MODE_SIMULATTION = "SIMULATTION";

        private readonly IMessageWindowService messageWindowService;
        private readonly LoginDialogContentViewModel contentViewModel;
        private readonly CompanyUserLoginOperateVM companyUserLoginOperateVM;
        private readonly PersonalUserLoginOperateVM personalUserLoginOperateVM;
        private readonly IAppAssemblerService appAssemblerService;
        private readonly ILoginUserManageService loginUserManageService;
        private readonly ExportFactory<SelectCompanyGroupDialogController> selectCompanyGroupDialogCtrlFactory;
        private readonly ExportFactory<UserAppUpdateDialogCtrl> appUpdateDialogCtrlFactory;
        
        private readonly DelegateCommand companyUserLoginCmd;
        private readonly DelegateCommand companyUserForgetPwdCmd;
        private readonly DelegateCommand personalUserLoginCmd;
        private readonly DelegateCommand personalUserRegisterCmd;
        private readonly DelegateCommand reqGetVerifyCodeCmd;
        
        private IMessageWindow dialog;
        private bool IsLoginViewClosed;

        private bool isLogining;
        private bool isRequestingGetVerifyCode;

        private System.Timers.Timer getVerifyCodeEnabledCountDownTimer;
        private int getVerifyCodeEnabledCountDownSeconds;
        private bool isCountingDownGetVerifyCodeEnabled;

        [ImportingConstructor]
        public LoginDialogController(
            IMessageWindowService messageWindowService,
            LoginDialogContentViewModel contentViewModel,
            CompanyUserLoginOperateVM companyUserLoginOperateVM,
            PersonalUserLoginOperateVM personalUserLoginOperateVM,
            IAppAssemblerService appAssemblerService,
            ILoginUserManageService loginUserManageService,
            ExportFactory<SelectCompanyGroupDialogController> selectCompanyGroupDialogCtrlFactory,
            ExportFactory<UserAppUpdateDialogCtrl> appUpdateDialogCtrlFactory)
        {
            this.messageWindowService = messageWindowService;
            this.contentViewModel = contentViewModel;
            this.companyUserLoginOperateVM = companyUserLoginOperateVM;
            this.personalUserLoginOperateVM = personalUserLoginOperateVM;
            this.appAssemblerService = appAssemblerService;
            this.loginUserManageService = loginUserManageService;
            this.selectCompanyGroupDialogCtrlFactory = selectCompanyGroupDialogCtrlFactory;
            this.appUpdateDialogCtrlFactory = appUpdateDialogCtrlFactory;

            companyUserLoginCmd = new DelegateCommand(CompanyUserLogin, CanCompanyUserLogin);
            companyUserForgetPwdCmd = new DelegateCommand(ShowCompanyUserForgetPwdDialog);

            personalUserLoginCmd = new DelegateCommand(PersonalUserLogin, CanPersonalUserLogin);
            personalUserRegisterCmd = new DelegateCommand(ShowPersonalUserRegisterPage);
            reqGetVerifyCodeCmd = new DelegateCommand(ReqGetVerifyCode, CanReqGetVerifyCode);
        }

        public object DialogOwner { get; set; }

        public Action DialogContentRendered { get; set; }

        public LoginDialogDidLogined DidLoginedHandler { get; set; }
        
        /// <summary>
        /// 登录结果
        /// </summary>
        public bool? LoginResult { get; private set; }

        public void Initialize()
        {
            var lastHostingModeIsSimulation = Settings.Default.RememberSelectHostingMode == HOSTING_MODE_SIMULATTION;
            var personalUserLastHostingModeIsSimulation = Settings.Default.PersonalUserSelectHostingMode == HOSTING_MODE_SIMULATTION;

            // initial config companyUserLoginOperateVM
            companyUserLoginOperateVM.ViewMargin = new Thickness(0,15,0,0);
            companyUserLoginOperateVM.LoginCommand = companyUserLoginCmd;
            companyUserLoginOperateVM.ForgetPwdCmd = companyUserForgetPwdCmd;
            
            var isRememberLoginInfo = Settings.Default.IsRememberLoginInfo;
            companyUserLoginOperateVM.IsRememberLoginInfo = isRememberLoginInfo;
            if (isRememberLoginInfo)
            {
                companyUserLoginOperateVM.CompanyCode = Settings.Default.RememberCompanyCode;
                companyUserLoginOperateVM.UserName = Settings.Default.RememberUserName;
            }
            companyUserLoginOperateVM.IsSelectRealHostingMode = (lastHostingModeIsSimulation == false);
            companyUserLoginOperateVM.IsSelectSimulatorHostingMode = lastHostingModeIsSimulation;


            // initial config personalUserLoginOperateVM
            personalUserLoginOperateVM.TelNumber = Settings.Default.PersonalUserLoginTelNumer;
            personalUserLoginOperateVM.ViewMargin = new Thickness(0, 20, 0, 0);
            personalUserLoginOperateVM.LoginCommand = personalUserLoginCmd;
            personalUserLoginOperateVM.RegisterCmd = personalUserRegisterCmd;
            personalUserLoginOperateVM.ReqGetVerifyCodeCmd = reqGetVerifyCodeCmd;
            personalUserLoginOperateVM.IsSelectRealHostingMode = (personalUserLastHostingModeIsSimulation == false);
            personalUserLoginOperateVM.IsSelectSimulatorHostingMode = personalUserLastHostingModeIsSimulation;


            // initial config contentViewModel
            contentViewModel.SelectedApiEnvironment = XqThriftLibConfigurationManager.SharedInstance.ThriftHttpLibEnvironment;

            var isDevelopOpenStr = XueQiaoBusinessHelper.GetApplicationRegistryKey(XueQiaoConstants.RegistryKey_IsDevelopOpen);
            var isDevelopOpen = ("true" == isDevelopOpenStr.ToString()?.ToLower());
            contentViewModel.ShowApiEnvironmentSelectBox = isDevelopOpen;

            var currentVersion = AppVersionHelper.GetApplicationVersion();
            contentViewModel.CurrentVersionStr = $"v{currentVersion.ToString()}";

            contentViewModel.CompanyUserLoginOperateView = companyUserLoginOperateVM.View;
            contentViewModel.PersonalUserLoginOperateView = personalUserLoginOperateVM.View;

            ApplyCompanyUserLoginIsRememberLoginInfoChanged();
            PropertyChangedEventManager.AddHandler(companyUserLoginOperateVM, CompanyUserLoginOperateVMPropChanged, "");
            PropertyChangedEventManager.AddHandler(contentViewModel, LoginDialogContentVMPropertyChanged, "");
        }

        public void Run()
        {
            dialog = messageWindowService.CreateContentCustomWindow(DialogOwner, null, null, true, false, 
                true, null, contentViewModel.View);
            dialog.ContentRendered += LoginDialogContentRendered;
            dialog.ShowDialog();
        }

        public void Shutdown()
        {
            InternalCloseDialog();
            DialogContentRendered = null;
            DidLoginedHandler = null;
            PropertyChangedEventManager.RemoveHandler(companyUserLoginOperateVM, CompanyUserLoginOperateVMPropChanged, "");
            PropertyChangedEventManager.RemoveHandler(contentViewModel, LoginDialogContentVMPropertyChanged, "");
            DisposeGetVerifyCodeEnabledCountDownTimer();
        }

        private void LoginDialogContentRendered(object sender, EventArgs e)
        {
            this.DialogContentRendered?.Invoke();
        }

        private void LoginDialogContentVMPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(LoginDialogContentViewModel.SelectedApiEnvironment))
            {
                XqThriftLibConfigurationManager.SharedInstance.ThriftHttpLibEnvironment = contentViewModel.SelectedApiEnvironment;
                return;
            }
        }

        private void CompanyUserLoginOperateVMPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(CompanyUserLoginOperateVM.IsRememberLoginInfo))
            {
                ApplyCompanyUserLoginIsRememberLoginInfoChanged();
                return;
            }
        }

        private void ApplyCompanyUserLoginIsRememberLoginInfoChanged()
        {
            var isRemeberLoginInfo = companyUserLoginOperateVM.IsRememberLoginInfo;
            Settings.Default.IsRememberLoginInfo = isRemeberLoginInfo;
            if (!isRemeberLoginInfo)
            {
                Settings.Default.RememberCompanyCode = null;
                Settings.Default.RememberCompanyGroupCode = null;
                Settings.Default.RememberUserName = null;
                Settings.Default.RememberSelectHostingMode = null;
            }
            Settings.Default.Save();
        }
        
        private void InternalCloseDialog()
        {
            if (dialog != null)
            {
                dialog.ContentRendered -= LoginDialogContentRendered;
                dialog.Close();
                dialog = null;
            }
            IsLoginViewClosed = true;
        }

        private void UpdateIsLogining(bool value)
        {
            this.isLogining = value;
            DispatcherHelper.CheckBeginInvokeOnUI(() => 
            {
                personalUserLoginOperateVM.IsLogining = value;
                companyUserLoginOperateVM.IsLogining = value;
                companyUserLoginCmd?.RaiseCanExecuteChanged();
                personalUserLoginCmd?.RaiseCanExecuteChanged();
                reqGetVerifyCodeCmd?.RaiseCanExecuteChanged();
            });
        }

        private bool CanCompanyUserLogin()
        {
            return !isLogining;
        }

        private void CompanyUserLogin()
        {
            DoLogin(false);
        }

        private bool CanPersonalUserLogin()
        {
            return !isLogining;
        }

        private void PersonalUserLogin()
        {
            DoLogin(true);
        }

        private void ShowPersonalUserRegisterPage()
        {
            System.Diagnostics.Process.Start("https://www.xueqiao.cn");
        }

        private bool CanReqGetVerifyCode()
        {
            return !isLogining && !isRequestingGetVerifyCode && !isCountingDownGetVerifyCodeEnabled;
        }

        private void ReqGetVerifyCode()
        {
            if (isRequestingGetVerifyCode) return;

            var telNumber = personalUserLoginOperateVM.TelNumber?.Trim();
            if (!StringHelper.IsNotNagtive(telNumber))
            {
                messageWindowService.ShowMessageDialog(UIHelper.GetWindowOfUIElement(contentViewModel.View), null, null, null, 
                    "请输入正确格式的手机号码"); ;
                return;
            }

            UpdateIsRequestingGetVerifyCode(true);
            var siip = new StubInterfaceInteractParams { TransportConnectTimeoutMS = 2000, TransportReadTimeoutMS = 2000 };
            XqThriftLibConfigurationManager.SharedInstance.XiaohaChartTerminalAoHttpStub
                .sendVerifyCodeAsync(telNumber, CancellationToken.None, siip)
                .ContinueWith(t =>
                {
                    var resp = t.Result;
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        UpdateIsRequestingGetVerifyCode(false);

                        if (resp == null || resp.SourceException != null)
                        {
                            // 失败
                            var errMsg = FoundationHelper.FormatResponseDisplayErrorMsg(resp, "请求获取验证码失败\n");
                            messageWindowService.ShowMessageDialog(UIHelper.GetWindowOfUIElement(contentViewModel.View), null, null, null, errMsg, "知道了");
                            return;
                        }

                        DisposeGetVerifyCodeEnabledCountDownTimer();
                        InitGetVerifyCodeEnabledCountDownTimerIfNeed();
                        UpdateGetVerifyCodeEnabledCountDownSeconds(60);
                        UpdateIsCountingDownGetVerifyCodeEnabled(true);
                        this.getVerifyCodeEnabledCountDownTimer.Start();
                    });
                });
        }


        private void GetAndVerifyPersonalUserLoginInputInfo(
            out string  _verifyErrorMsg,
            out bool    _isLoginByVerifyCode,
            out string  _telNumber,
            out string  _loginPasswordMd5,
            out string  _loginVerifyCode,
            out ProxyTradeType _proxyTradeType)
        {
            _verifyErrorMsg = null;
            _isLoginByVerifyCode = false;
            _telNumber = null;
            _loginPasswordMd5 = null;
            _loginVerifyCode = null;
            _proxyTradeType = ProxyTradeType.REAL;

            _isLoginByVerifyCode = personalUserLoginOperateVM.IsLoginByVerifyCode;

            {
                var telNum = personalUserLoginOperateVM.TelNumber?.Trim();
                if (!StringHelper.IsNotNagtive(telNum))
                {
                    _verifyErrorMsg = "请填写格式正确的手机号码";
                    return;
                }
                _telNumber = telNum;
            }

            {
                if (_isLoginByVerifyCode)
                {
                    var vfCode = personalUserLoginOperateVM.VerifyCode;
                    if (string.IsNullOrEmpty(vfCode))
                    {
                        _verifyErrorMsg = "请输入验证码";
                        return;
                    }
                    _loginVerifyCode = vfCode;
                }
                else
                {
                    var originPassword = FoundationHelper.ConvertToUnsecureString(personalUserLoginOperateVM.SecurePassword);
                    if (string.IsNullOrEmpty(originPassword))
                    {
                        _verifyErrorMsg = "请输入用户密码";
                        return;
                    }
                    using (MD5 md5Hash = MD5.Create())
                    {
                        _loginPasswordMd5 = FoundationHelper.GetMd5Hash(md5Hash, originPassword);
                    }
                }
            }

            {
                if (personalUserLoginOperateVM.IsSelectRealHostingMode)
                {
                    _proxyTradeType = ProxyTradeType.REAL;
                }
                else if (personalUserLoginOperateVM.IsSelectSimulatorHostingMode)
                {
                    _proxyTradeType = ProxyTradeType.SIM;
                }
            }
        }

        private void GetAndVerifyCompanyUserLoginInputInfo(
            out string _verifyErrorMsg,
            out string _loginCompanyCode,
            out string _loginUserName,
            out string _loginPasswordMd5,
            out ProxyTradeType _proxyTradeType)
        {
            _verifyErrorMsg = null;
            _loginCompanyCode = null;
            _loginUserName = null;
            _loginPasswordMd5 = null;
            _proxyTradeType = ProxyTradeType.REAL;

            {
                var cpyCode = companyUserLoginOperateVM.CompanyCode;
                if (string.IsNullOrEmpty(cpyCode))
                {
                    _verifyErrorMsg = "请输入公司登录名";
                    return;
                }
                _loginCompanyCode = cpyCode;
            }

            {
                var userName = companyUserLoginOperateVM.UserName;
                if (string.IsNullOrEmpty(userName))
                {
                    _verifyErrorMsg = "请输入用户名";
                    return;
                }
                _loginUserName = userName;
            }
            
            {
                var originPassword = FoundationHelper.ConvertToUnsecureString(companyUserLoginOperateVM.SecurePassword);
                if (string.IsNullOrEmpty(originPassword))
                {
                    _verifyErrorMsg = "请输入用户密码";
                    return;
                }
                using (MD5 md5Hash = MD5.Create())
                {
                    _loginPasswordMd5 = FoundationHelper.GetMd5Hash(md5Hash, originPassword);
                }
            }

            {
                if (companyUserLoginOperateVM.IsSelectRealHostingMode)
                {
                    _proxyTradeType = ProxyTradeType.REAL;
                }
                else if (companyUserLoginOperateVM.IsSelectSimulatorHostingMode)
                {
                    _proxyTradeType = ProxyTradeType.SIM;
                }
            }
        }

        private void FillProxyFakeLoginReq(ProxyFakeLoginReq fakeLoginReq,
            bool isPersonalUserLogin,
            bool _isLoginByVerifyCode,
            string _loginPasswordMd5,
            string _loginVerifyCode,
            string _companyUserLoginCompanyCode,
            string _loginUserName)
        {
            if (fakeLoginReq == null) return;

            fakeLoginReq.LoginUserType = isPersonalUserLogin ? LoginUserType.XQ_COMPANY_PERSONAL_USER : LoginUserType.NORMAL_COMPANY_USER;
            fakeLoginReq.UserName = _loginUserName;

            if (isPersonalUserLogin)
            {
                
                if (_isLoginByVerifyCode)
                {
                    fakeLoginReq.VerifyCode = _loginVerifyCode;
                }
                else
                {
                    fakeLoginReq.PasswordMd5 = _loginPasswordMd5;
                }
            }
            else
            {
                fakeLoginReq.CompanyCode = _companyUserLoginCompanyCode;
                fakeLoginReq.PasswordMd5 = _loginPasswordMd5;
            }
        }

        private void FillProxyLoginReqByTemplateFakeReq(ProxyLoginReq loginReq, ProxyFakeLoginReq templateFakeReq)
        {
            if (loginReq == null) return;

            if (templateFakeReq != null)
            {
                if (templateFakeReq.__isset.companyCode)
                {
                    loginReq.CompanyCode = templateFakeReq.CompanyCode;
                }
                if (templateFakeReq.__isset.userName)
                {
                    loginReq.UserName = templateFakeReq.UserName;
                }
                if (templateFakeReq.__isset.passwordMd5)
                {
                    loginReq.PasswordMd5 = templateFakeReq.PasswordMd5;
                }
                if (templateFakeReq.__isset.verifyCode)
                {
                    loginReq.VerifyCode = templateFakeReq.VerifyCode;
                }
            }
        }

        private static string GetPersonalUserCompanyCode(lib.xqclient_base.thriftapi_mediation.Environment apiEnv)
        {
            string companyCode = null;
            if (apiEnv == lib.xqclient_base.thriftapi_mediation.Environment.DEV)
            {
                companyCode = XueQiaoBusinessHelper.GetApplicationRegistryKey(XueQiaoConstants.RegistryKey_PersonalUserCompanyCode_DEV)?.ToString();
                if (string.IsNullOrEmpty(companyCode))
                {
                    companyCode = XueQiaoConstants.DefaultValue_PersonalUserCompanyCode_DEV;
                }
            }
            else if (apiEnv == lib.xqclient_base.thriftapi_mediation.Environment.GAMMA)
            {
                companyCode = XueQiaoBusinessHelper.GetApplicationRegistryKey(XueQiaoConstants.RegistryKey_PersonalUserCompanyCode_GAMMA)?.ToString();
                if (string.IsNullOrEmpty(companyCode))
                {
                    companyCode = XueQiaoConstants.DefaultValue_PersonalUserCompanyCode_GAMMA;
                }
            }
            else if (apiEnv == lib.xqclient_base.thriftapi_mediation.Environment.IDC)
            {
                companyCode = XueQiaoBusinessHelper.GetApplicationRegistryKey(XueQiaoConstants.RegistryKey_PersonalUserCompanyCode_IDC)?.ToString();
                if (string.IsNullOrEmpty(companyCode))
                {
                    companyCode = XueQiaoConstants.DefaultValue_PersonalUserCompanyCode_IDC;
                }
            }

            if (string.IsNullOrEmpty(companyCode))
                companyCode = XueQiaoConstants.DefaultValue_PersonalUserCompanyCode_IDC;

            return companyCode;
        }
        
        private void DoLogin(bool isPersonalUserLogin)
        {
            if (isLogining) return;

            bool _isPersonalUser = isPersonalUserLogin;
            string _verifyErrorMsg = null;
            bool _isLoginByVerifyCode = false;
            string _loginPasswordMd5 = null;
            string _loginVerifyCode = null;

            string _personalUserLoginTelNumber = null;
            string _companyUserLoginCompanyCode = null;
            string _loginUserName = null;
            ProxyTradeType _proxyTradeType = ProxyTradeType.REAL;
            
            if (isPersonalUserLogin)
            {
                GetAndVerifyPersonalUserLoginInputInfo(
                    out _verifyErrorMsg,
                    out _isLoginByVerifyCode,
                    out _personalUserLoginTelNumber,
                    out _loginPasswordMd5,
                    out _loginVerifyCode,
                    out _proxyTradeType);

                // 个人用户 
                _loginUserName = _personalUserLoginTelNumber;
                // 个人用户的 company code 改为从 fake login 返回数据中获取
                //_loginCompanyCode = GetPersonalUserCompanyCode(XqThriftLibConfigurationManager.SharedInstance.ThriftHttpLibEnvironment);
            }
            else
            {
                GetAndVerifyCompanyUserLoginInputInfo(
                    out _verifyErrorMsg,
                    out _companyUserLoginCompanyCode,
                    out _loginUserName,
                    out _loginPasswordMd5,
                    out _proxyTradeType);
            }

            if (!string.IsNullOrEmpty(_verifyErrorMsg))
            {
                messageWindowService.ShowMessageDialog(UIHelper.GetWindowOfUIElement(contentViewModel.View), null, null, null,
                    _verifyErrorMsg);
                return;
            }

            UpdateIsLogining(true);
            Task.Run(() => 
            {
                // Step1：fake login 获取到 company groups
                var fakeLoginReq = new ProxyFakeLoginReq { TradeType = _proxyTradeType };
                FillProxyFakeLoginReq(fakeLoginReq,
                    _isPersonalUser, _isLoginByVerifyCode, _loginPasswordMd5, 
                    _loginVerifyCode, _companyUserLoginCompanyCode, _loginUserName);
                
                var fakeLoginResp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingProxyHttpStub
                    .fakeLogin(fakeLoginReq, new StubInterfaceInteractParams { LogInterfaceRequestArgs = false });

                if (IsLoginViewClosed) return;

                if (fakeLoginResp?.CorrectResult == null || fakeLoginResp?.SourceException != null)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        var dialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                        UpdateIsLogining(false);
                        if (fakeLoginResp?.HasTransportException == true)
                        {
                            messageWindowService.ShowMessageDialog(dialogOwner, null, null, "提示", "网络通讯出错，请检查！");
                        }
                        else
                        {
                            var errMsg = FoundationHelper.FormatResponseDisplayErrorMsg(fakeLoginResp, "获取公司组信息出错！\n");
                            messageWindowService.ShowMessageDialog(dialogOwner, null, null, null, errMsg);
                        }
                    });
                    return;
                }

                var _loginUserCompanyCode = fakeLoginResp.CorrectResult.CompanyCode;
                var companyGroups = fakeLoginResp.CorrectResult.CompanyGroups;
                if (companyGroups?.Any() != true)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        var dialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                        UpdateIsLogining(false);
                        messageWindowService.ShowMessageDialog(dialogOwner, null, null, "提示", "该用户目前没有开通交易服务，\n请联系系统管理员开通");
                    });
                    return;
                }


                // Step2: 获取应用更新信息
                var appVer = AppVersionHelper.GetApplicationVersion();
                var reqInfo = new UpdateInfoReq
                {
                    CompanyCode = _loginUserCompanyCode,
                    AppKey = XueQiaoConstants.QueryUpdateInfoAppKey,
                    VersionNum = new VersionNum { MajorVersionNum = appVer.Major, MinorVersionNum = appVer.Minor, BuildVersionNum = appVer.Build, ReversionNum = appVer.Revision }
                };
                var iip = new StubInterfaceInteractParams { TransportConnectTimeoutMS = 10000, TransportReadTimeoutMS = 10000 };
                var updateInfoResp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingProxyHttpStub.queryUpdateInfo(reqInfo, iip);

                var updateInfo = updateInfoResp?.CorrectResult;
                if (updateInfo == null)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        var dialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                        UpdateIsLogining(false);
                        if (updateInfoResp?.HasTransportException == true)
                        {
                            messageWindowService.ShowMessageDialog(dialogOwner, null, null, "提示", "网络通讯出错，请检查！");
                        }
                        else
                        {
                            var errMsg = FoundationHelper.FormatResponseDisplayErrorMsg(updateInfoResp, "获取更新信息失败！\n");
                            messageWindowService.ShowMessageDialog(dialogOwner, null, null, null, errMsg);
                        }
                    });
                    return;
                }
                if (IsLoginViewClosed) return;
                
                // 如果版本不一致显示更新信息
                ShowAppUpdateDialogIfNeed(updateInfo);
                if (IsLoginViewClosed) return;

                
                // Step3：选择 Company group
                var selectGroup = SelectCompanyGroupFromQueriedGroups(companyGroups);
                if (selectGroup == null)
                {
                    // 未选择分组，则放弃登录
                    UpdateIsLogining(false);
                    return;
                }

                if (IsLoginViewClosed) return;


                // Step4：检查是否当前设备存在相同登录用户的应用实例
                // Refer:https://blog.csdn.net/yl2isoft/article/details/46005031
                if (loginUserManageService.IsSameUserLoginAtThisDevice(XqThriftLibConfigurationManager.SharedInstance.ThriftHttpLibEnvironment,
                        _loginUserCompanyCode, selectGroup.GroupCode, _loginUserName, _isPersonalUser))
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        var dialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                        UpdateIsLogining(false);
                        messageWindowService.ShowMessageDialog(dialogOwner, null, null, "提示",
                            "您的账号已在本机登录相同云服务，不能重复登录", "确定");
                    });
                    return;
                }


                // Step5：正式登录
                var loginReq = new ProxyLoginReq();
                FillProxyLoginReqByTemplateFakeReq(loginReq, fakeLoginReq);
                loginReq.CompanyCode = _loginUserCompanyCode;
                loginReq.CompanyGroupCode = selectGroup.GroupCode;
               
                var loginResp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingProxyHttpStub
                    .login(loginReq, new StubInterfaceInteractParams { LogInterfaceRequestArgs = false });

                var loginRespData = loginResp?.CorrectResult;
                if (loginRespData == null)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        var dialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                        if (dialogOwner == null) return;
                        UpdateIsLogining(false);
                        var errMsg = FoundationHelper.FormatResponseDisplayErrorMsg(loginResp, "登录失败！\n");
                        messageWindowService.ShowMessageDialog(dialogOwner, null, null, null, errMsg);
                    });
                    return;
                }

                if (IsLoginViewClosed) return;
                

                // Step6: 授权小哈投研
                var appSession = new XueQiaoAppSession
                {
                    MachineId = loginRespData.HostingSession.MachineId,
                    SubUserId = loginRespData.HostingSession.SubUserId,
                    Token = loginRespData.HostingSession.Token
                };
                var authTouyanResp = XqThriftLibConfigurationManager.SharedInstance.XiaohaChartTerminalAoHttpStub.authorizeXueQiaoApp(appSession);

                var authTouyanRespData = authTouyanResp?.CorrectResult;
                if (authTouyanRespData == null)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        var dialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                        if (dialogOwner == null) return;
                        UpdateIsLogining(false);
                        var errMsg = FoundationHelper.FormatResponseDisplayErrorMsg(authTouyanResp, "投研用户授权失败！\n");
                        messageWindowService.ShowMessageDialog(dialogOwner, null, null, null, errMsg);
                    });
                    return;
                }

                // Step7: 查询是否关联投研用户
                var link2TouyanUserStateResp = XqThriftLibConfigurationManager.SharedInstance.XiaohaChartTerminalAoHttpStub.getLinkState(authTouyanRespData);
                var link2TouyanUserStateRespData = link2TouyanUserStateResp?.CorrectResult;
                if (link2TouyanUserStateRespData == null)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        var dialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                        if (dialogOwner == null) return;
                        UpdateIsLogining(false);
                        var errMsg = FoundationHelper.FormatResponseDisplayErrorMsg(link2TouyanUserStateResp, "投研用户关联状态查询失败！\n");
                        messageWindowService.ShowMessageDialog(dialogOwner, null, null, null, errMsg);
                    });
                    return;
                }
                
                // Step8: 最后处理
                DispatcherHelper.CheckBeginInvokeOnUI(() => 
                {
                    if (IsLoginViewClosed) return;
                    UpdateIsLogining(false);

                    this.LoginResult = true;

                    if (!_isPersonalUser)
                    {
                        // 机构用户登录，保存上次登录信息
                        if (Settings.Default.IsRememberLoginInfo)
                        {
                            // Save into setting
                            Settings.Default.RememberCompanyCode = loginReq.CompanyCode;
                            Settings.Default.RememberCompanyGroupCode = loginReq.CompanyGroupCode;
                            Settings.Default.RememberUserName = loginReq.UserName;
                            Settings.Default.RememberSelectHostingMode = 
                                (_proxyTradeType == ProxyTradeType.REAL) ? HOSTING_MODE_REAL : HOSTING_MODE_SIMULATTION;
                            Settings.Default.Save();
                        }
                    }
                    else
                    {
                        Settings.Default.PersonalUserLoginTelNumer = _personalUserLoginTelNumber;
                        Settings.Default.PersonalUserSelectHostingMode =
                            (_proxyTradeType == ProxyTradeType.REAL) ? HOSTING_MODE_REAL : HOSTING_MODE_SIMULATTION;
                        Settings.Default.Save();
                    }
                    
                    DidLoginedHandler?.Invoke(this, loginReq, selectGroup,
                        loginRespData, updateInfo, 
                        authTouyanRespData, (link2TouyanUserStateRespData == LinkState.LINKED),
                        _isPersonalUser);
                    InternalCloseDialog();
                });
            });
        }
        
        private static bool IsDebug()
        {
#if DEBUG
            return true;
#endif
            return false;
        }

        private void ShowAppUpdateDialogIfNeed(AppVersion updateInfo)
        {
            // DEBUG 模式下不弹出升级弹窗
            if (!IsDebug())
            {
                var newVersion = updateInfo.VersionNum.ToLocalVersion();
                var currentVersion = AppVersionHelper.GetApplicationVersion();
                if (newVersion != currentVersion)
                {
                    DispatcherHelper.UIDispatcher.Invoke(() =>
                    {
                        var appUpdateDialogCtrl = appUpdateDialogCtrlFactory.CreateExport().Value;
                        appUpdateDialogCtrl.DialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                        appUpdateDialogCtrl.UpdateInfo = updateInfo;
                        appUpdateDialogCtrl.Initialize();
                        appUpdateDialogCtrl.Run();
                        appUpdateDialogCtrl.Shutdown();
                    });
                }
            }
        }

        private ProxyCompanyGroup SelectCompanyGroupFromQueriedGroups(IEnumerable<ProxyCompanyGroup> queriedGroups)
        {
            if (queriedGroups == null) return null;
            ProxyCompanyGroup selectGroup = null;
            var workingGroups = queriedGroups.Where(i => i.Status == HostingServiceStatus.WORKING).ToArray();
            if (workingGroups.Count() == 1)
            {
                selectGroup = workingGroups.First();
            }
            else
            {
                // 阻塞当前线程，从 UI 中获取到选中的分组
                DispatcherHelper.UIDispatcher.Invoke(() =>
                {
                    var selectGroupDialogCtrl = selectCompanyGroupDialogCtrlFactory.CreateExport().Value;
                    selectGroupDialogCtrl.DialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                    selectGroupDialogCtrl.AvailableCompanyGroups = queriedGroups;
                    selectGroupDialogCtrl.Initialize();
                    selectGroupDialogCtrl.Run();
                    selectGroupDialogCtrl.Shutdown();
                    selectGroup = selectGroupDialogCtrl.SelectedGroup;
                });
            }

            return selectGroup;
        }
        
        private void ShowCompanyUserForgetPwdDialog()
        {
            messageWindowService.ShowMessageDialog(UIHelper.GetWindowOfUIElement(contentViewModel.View), null, null, 
                "忘记密码", "请联系贵公司相关负责人重置密码", "知道了");
        }

        private void UpdateIsRequestingGetVerifyCode(bool value)
        {
            this.isRequestingGetVerifyCode = value;
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                reqGetVerifyCodeCmd?.RaiseCanExecuteChanged();
            });
        }

        private void InitGetVerifyCodeEnabledCountDownTimerIfNeed()
        {
            var timer = this.getVerifyCodeEnabledCountDownTimer;
            if (timer == null)
            {
                timer = new System.Timers.Timer(1000);
                timer.Elapsed += GetVerifyCodeEnabledCountDownTimer_Elapsed;
                this.getVerifyCodeEnabledCountDownTimer = timer;
            }
        }

        private void DisposeGetVerifyCodeEnabledCountDownTimer()
        {
            if (getVerifyCodeEnabledCountDownTimer != null)
            {
                getVerifyCodeEnabledCountDownTimer.Elapsed -= GetVerifyCodeEnabledCountDownTimer_Elapsed;
                getVerifyCodeEnabledCountDownTimer.Stop();
                getVerifyCodeEnabledCountDownTimer.Dispose();
                getVerifyCodeEnabledCountDownTimer = null;
            }
        }

        private void UpdateGetVerifyCodeEnabledCountDownSeconds(int value)
        {
            this.getVerifyCodeEnabledCountDownSeconds = value;
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                personalUserLoginOperateVM.GetVerifyCodeEnabledCountDownSeconds = value;
            });
        }

        private void UpdateIsCountingDownGetVerifyCodeEnabled(bool value)
        {
            this.isCountingDownGetVerifyCodeEnabled = value;
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                personalUserLoginOperateVM.IsCountingDownGetVerifyCodeEnabled = value;
                reqGetVerifyCodeCmd?.RaiseCanExecuteChanged();
            });
        }

        private void GetVerifyCodeEnabledCountDownTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            if (!isCountingDownGetVerifyCodeEnabled) return;

            var coundownSecs = getVerifyCodeEnabledCountDownSeconds - 1;
            if (coundownSecs <= 0)
            {
                // stop timer
                var timer = getVerifyCodeEnabledCountDownTimer;
                if (timer != null)
                {
                    timer.Stop();
                }
                UpdateIsCountingDownGetVerifyCodeEnabled(false);
            }
            UpdateGetVerifyCodeEnabledCountDownSeconds(coundownSecs);
        }
    }
}
