using AppAssembler.Interfaces.Applications;
using ContainerShell.Applications.DataModels;
using ContainerShell.Applications.Properties;
using ContainerShell.Applications.ViewModels;
using ContainerShell.Interfaces.DataModels;
using IDLAutoGenerated.Util;
using Manage.Interfaces.Applications;
using Newtonsoft.Json;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Waf.Applications;
using System.Windows.Media;
using xueqiao.trade.hosting;
using xueqiao.trade.hosting.terminal.ao;
using XueQiaoFoundation.BusinessResources.Constants;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.BusinessResources.Models;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Interfaces.Applications;
using xueqiao.config.contractlistrule.thriftapi;
using Thrift.Collections;
using System.Windows.Controls.Primitives;
using System.Windows;
using lib.xqclient_base.thriftapi_mediation.Interface;
using lib.xqclient_base.logger;
using System.Collections.Concurrent;
using XueQiaoFoundation.Shared.Model;
using Touyan.Interface.application;
using business_foundation_lib.xq_thriftlib_config;

namespace ContainerShell.Applications.Controllers
{
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class ContainerShellController : IController
    {
        private readonly ContainerShellViewModel shellViewModel;
        private readonly AppStatusBarViewController appStatusBarViewController;
        private readonly ILoginDataService loginDataService;
        private readonly IUserSettingSyncController userSettingSyncController;
        private readonly IUserComposeViewQueryController userComposeViewQueryController;
        private readonly ICommodityQueryController commodityQueryController;
        private readonly IExchangeQueryController exchangeQueryController;
        private readonly IUserSubAccountRelatedItemQueryController userSubAccountRelatedItemQueryCtrl;
        private readonly ISubAccountXQEffectOrderQueryController subAccountXQEffectOrderQueryCtrl;
        private readonly Lazy<ITradeModuleService> tradeModuleService;
        private readonly Lazy<IManageModuleService> manageModuleService;
        private readonly Lazy<IPersonalUserManageModuleService> personalUserManageModuleService;
        private readonly ExportFactory<ITouyanModuleRootViewCtrl> touyanModuleRootViewCtrlFactory;
        private readonly IEventAggregator eventAggregator;
        private readonly IMessageWindowService messageWindowService;
        private readonly Lazy<IAppAssemblerService> appAssemblerService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly ExportFactory<MorePopupCtrl> moreFunctionPopupCtrlFactory;
        private readonly ExportFactory<UserMessagePanelWindowCtrl> userMsgPanelWindowCtrlFactory;
        
        private UserMessagePanelWindowCtrl userMsgPanelWindowCtrl;
        private ITouyanModuleRootViewCtrl touyanModuleRootViewCtrl;

        private readonly InitializeDataRoot _initializeDataRoot;

        private CancellationTokenSource initializeCancelTokenSource;
        private TaskFactory initializeTaskFactory = new TaskFactory(new LimitedConcurrencyLevelTaskScheduler(5));
        private InitializeItem userSettingsInitialItem;         // 用户设置数据初始化项
        private InitializeItem userComposeViewsInitialItem;     // 组合视图列表的初始化项
        private InitializeItem exchangesInitialItem;            // 交易所列表初始化项
        private InitializeItem commoditiesInitialItem;          // 商品列表初始化项
        private InitializeItem subAccountRelatedDataInitialItem; // 关联的操作账户相关数据初始化项

        private readonly DelegateCommand showMoreFunctionCmd;
        private readonly DelegateCommand showUserMsgPanelCmd;
        private readonly DelegateCommand retryFailedInitializeCmd;
        private readonly DelegateCommand skipFailedInitializeCmd;
        
        private ContainerShellTabNodeItem lastSelectedTabNode;

        private readonly ChromeWindowCaptionDataHolder windowCaptionDataHolder = new ChromeWindowCaptionDataHolder();

        [ImportingConstructor]
        public ContainerShellController(
            ContainerShellViewModel shellViewModel,
            AppStatusBarViewController appStatusBarViewController,
            ILoginDataService loginDataService,
            IUserSettingSyncController userSettingSyncController,
            IUserComposeViewQueryController userComposeViewQueryController,
            ICommodityQueryController commodityQueryController,
            IExchangeQueryController exchangeQueryController,
            IUserSubAccountRelatedItemQueryController userSubAccountRelatedItemQueryCtrl,
            ISubAccountXQEffectOrderQueryController subAccountXQEffectOrderQueryCtrl,
            Lazy<ITradeModuleService> tradeModuleService,
            Lazy<IManageModuleService> manageModuleService,
            Lazy<IPersonalUserManageModuleService> personalUserManageModuleService,
            ExportFactory<ITouyanModuleRootViewCtrl> touyanModuleRootViewCtrlFactory,
            IEventAggregator eventAggregator,
            IMessageWindowService messageWindowService,
            Lazy<IAppAssemblerService> appAssemblerService,
            Lazy<ILoginUserManageService> loginUserManageService,
            ExportFactory<MorePopupCtrl> moreFunctionPopupCtrlFactory,
            ExportFactory<UserMessagePanelWindowCtrl> userMsgPanelWindowCtrlFactory)
        {
            this.shellViewModel = shellViewModel;
            this.appStatusBarViewController = appStatusBarViewController;
            this.loginDataService = loginDataService;
            this.userSettingSyncController = userSettingSyncController;
            this.userComposeViewQueryController = userComposeViewQueryController;
            this.commodityQueryController = commodityQueryController;
            this.exchangeQueryController = exchangeQueryController;
            this.userSubAccountRelatedItemQueryCtrl = userSubAccountRelatedItemQueryCtrl;
            this.subAccountXQEffectOrderQueryCtrl = subAccountXQEffectOrderQueryCtrl;
            this.tradeModuleService = tradeModuleService;
            this.manageModuleService = manageModuleService;
            this.personalUserManageModuleService = personalUserManageModuleService;
            this.touyanModuleRootViewCtrlFactory = touyanModuleRootViewCtrlFactory;
            this.eventAggregator = eventAggregator;
            this.messageWindowService = messageWindowService;
            this.appAssemblerService = appAssemblerService;
            this.loginUserManageService = loginUserManageService;
            this.moreFunctionPopupCtrlFactory = moreFunctionPopupCtrlFactory;
            this.userMsgPanelWindowCtrlFactory = userMsgPanelWindowCtrlFactory;

            showMoreFunctionCmd = new DelegateCommand(ShowMoreFunction);
            showUserMsgPanelCmd = new DelegateCommand(ShowUserMsgPanel);
            retryFailedInitializeCmd = new DelegateCommand(RetryFailedInitializeItems);
            skipFailedInitializeCmd = new DelegateCommand(SkipFailedInitializeItems);
            
            _initializeDataRoot = new InitializeDataRoot
            {
                LoginUserSettingDataTreePackage = new UserSettingDataTreesPackage(),
                // 初始化 ContractChooseListRules。后台下发的合约列表已经过滤了
                //ContractChooseListRules = new ContractListRule[] 
                //{
                //    new ContractListRule
                //    {
                //        RuleType = ContractListRuleType.SpecificContractCodesOfExchange,
                //        SpecificContractCodesOfExchangeRule = new SpecificContractCodesOfExchangeContractListRule
                //        { ExchangeMic = "XLME", SpecificContractCodes = new THashSet<string>{"3M"} },
                //    }
                //},
            };
        }

        public event Action<InitializeDataRoot> XqDataInitialized;
        
        public event CancelEventHandler ShellClosing;

        public event EventHandler ShellClosed;

        /// <summary>
        /// 获取到当前 Shell 窗体
        /// </summary>
        public Window ShellWindow => shellViewModel.View as Window;
        
        public InitializeDataRoot InitializeDataRoot => _initializeDataRoot;
        
        public void Initialize()
        {
            shellViewModel.Closing += OnShellClosing;
            shellViewModel.Closed += OnShellClosed;

            appStatusBarViewController.Initialize();
            appStatusBarViewController.Run();
            shellViewModel.AppStatusBarView = appStatusBarViewController.ContentView;
            
            shellViewModel.RetryFailedInitializeCmd = retryFailedInitializeCmd;
            shellViewModel.SkipFailedInitializeCmd = skipFailedInitializeCmd;
            shellViewModel.ShowMoreFunctionCmd = showMoreFunctionCmd;
            shellViewModel.ShowUserMessagePanelCmd = showUserMsgPanelCmd;
            shellViewModel.WindowCaptionDataHolder = this.windowCaptionDataHolder;
            
            PropertyChangedEventManager.AddHandler(shellViewModel, ShellViewModelPropertyChanged, "");
        }

        public void Run()
        {
            shellViewModel.Show();
            
            // 先初始化数据
            InitializeDatas(true, out userSettingsInitialItem,
                true, out userComposeViewsInitialItem,
                true, out exchangesInitialItem,
                true, out commoditiesInitialItem,
                true, out subAccountRelatedDataInitialItem);
        }

        public void Shutdown()
        {
            shellViewModel.Closing -= OnShellClosing;
            shellViewModel.Closed -= OnShellClosed;

            appStatusBarViewController?.Shutdown();

            userMsgPanelWindowCtrl?.Shutdown();
            userMsgPanelWindowCtrl = null;

            touyanModuleRootViewCtrl?.Shutdown();
            touyanModuleRootViewCtrl = null;

            PropertyChangedEventManager.RemoveHandler(shellViewModel, ShellViewModelPropertyChanged, "");

            foreach (var node in shellViewModel.TabNodes)
            {
                node.ShowAction = null;
                node.CloseAction = null;
            }
            shellViewModel.TabNodes.Clear();
            shellViewModel.SelectedTabNode = null;
            shellViewModel.TabNodeContentView = null;

            if (initializeCancelTokenSource != null)
            {
                initializeCancelTokenSource.Cancel();
                initializeCancelTokenSource.Dispose();
                initializeCancelTokenSource = null;
            }
        }
        
        private void OnShellClosing(object sender, CancelEventArgs e)
        {
            ShellClosing?.Invoke(this, e);
        }

        private void OnShellClosed(object sender, EventArgs e)
        {
            ShellClosed?.Invoke(this, e);
        }

        private void ShellViewModelPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(ContainerShellViewModel.SelectedTabNode))
            {
                var selectedTabNode = shellViewModel.SelectedTabNode;
                if (selectedTabNode != null)
                {
                    selectedTabNode.ShowAction?.Invoke(selectedTabNode);
                }

                if (this.lastSelectedTabNode != null)
                {
                    this.lastSelectedTabNode.CloseAction?.Invoke(lastSelectedTabNode);
                }
                this.lastSelectedTabNode = selectedTabNode;
            }
        }
        
        private void ShowMoreFunction()
        {
            var popupCtrl = moreFunctionPopupCtrlFactory.CreateExport().Value;
            popupCtrl.PopupPalcementTarget = shellViewModel.ShowMoreFunctionTriggerElement;
            popupCtrl.PopupPlacement = PlacementMode.Top;
            popupCtrl.PopupClosed = _ctrl =>
            {
                _ctrl.PopupPalcementTarget = null;
            };

            popupCtrl.Initialize();
            popupCtrl.Run();
        }

        private void ShowUserMsgPanel()
        {
            if (userMsgPanelWindowCtrl == null)
            {
                userMsgPanelWindowCtrl = userMsgPanelWindowCtrlFactory.CreateExport().Value;
                userMsgPanelWindowCtrl.WindowOwner = UIHelper.GetWindowOfUIElement(shellViewModel.View);
                userMsgPanelWindowCtrl.ClosedHandler = () => 
                {
                    this.userMsgPanelWindowCtrl?.Shutdown();
                    this.userMsgPanelWindowCtrl = null;
                };
                userMsgPanelWindowCtrl.Initialize();
                userMsgPanelWindowCtrl.Run();
            }

            if (userMsgPanelWindowCtrl.WindowIsShow)
            {
                userMsgPanelWindowCtrl.Hide();
            }
            else
            {
                userMsgPanelWindowCtrl.Show();
            }
        }

        private void ToSignout()
        {
            if (messageWindowService.ShowQuestionDialog(UIHelper.GetWindowOfUIElement(shellViewModel.View), null, null,
                "提示", "确定要退出吗？", false, "退出", "取消") == true)
            {
                loginUserManageService.Value.DoSignout();
                if (!appAssemblerService.Value.IsShowingStartupWindow)
                {
                    appAssemblerService.Value.ShowStartupUI();
                }
            }
        }

        private void InitializeDatas(bool initialUserSettings, out InitializeItem _userSettingsInitializeItem,
            bool initialUserComposeViews, out InitializeItem _userComposeViewsInitializeItem,
            bool initialExchanges, out InitializeItem _exchangesInitializeItem,
            bool initialCommodities, out InitializeItem _commoditiesInitializeItem,
            bool initialSubAccountRelatedData, out InitializeItem _subAccountRelatedDataInitializeItem)
        {
            _userSettingsInitializeItem = null;
            _userComposeViewsInitializeItem = null;
            _exchangesInitializeItem = null;
            _commoditiesInitializeItem = null;
            _subAccountRelatedDataInitializeItem = null;

            if (initializeCancelTokenSource != null)
            {
                initializeCancelTokenSource.Cancel();
                initializeCancelTokenSource.Dispose();
                initializeCancelTokenSource = null;
            }

            List<InitializeItem> currentInitializeItems = new List<InitializeItem>();
            initializeCancelTokenSource = new CancellationTokenSource();
            var initializeTaskCancelToken = initializeCancelTokenSource.Token;
            List<Task> initializeTasks = new List<Task>();

            // 用户设置数据加载
            if (initialUserSettings)
            {
                var initializeItem = new InitializeItem { CanSkipWhenFailed = false };
                _userSettingsInitializeItem = initializeItem;

                currentInitializeItems.Add(initializeItem);
                shellViewModel.InitializeItemCollectionDC.InitializeItems.Add(initializeItem);
                Task initializeTask = null;
                StartInitializeTask_LoadCloudUserSettings(initializeTaskFactory, initializeTaskCancelToken, ref initializeItem, out initializeTask);
                initializeTasks.Add(initializeTask);
            }


            // 用户组合视图加载
            if (initialUserComposeViews)
            {
                var initializeItem = new InitializeItem { CanSkipWhenFailed = false };
                _userComposeViewsInitializeItem = initializeItem;

                currentInitializeItems.Add(initializeItem);
                shellViewModel.InitializeItemCollectionDC.InitializeItems.Add(initializeItem);
                Task initializeTask = null;
                StartInitializeTask_LoadUserComposeViews(initializeTaskFactory, initializeTaskCancelToken, ref initializeItem, out initializeTask);
                initializeTasks.Add(initializeTask);
            }

            // 交易所加载
            if (initialExchanges)
            {
                var initializeItem = new InitializeItem { CanSkipWhenFailed = false };
                _exchangesInitializeItem = initializeItem;

                currentInitializeItems.Add(initializeItem);
                shellViewModel.InitializeItemCollectionDC.InitializeItems.Add(initializeItem);
                Task initializeTask = null;
                StartInitializeTask_LoadAllExchanges(initializeTaskFactory, initializeTaskCancelToken, ref initializeItem, out initializeTask);
                initializeTasks.Add(initializeTask);
            }

            // 商品加载
            if (initialCommodities)
            {
                var initializeItem = new InitializeItem { CanSkipWhenFailed = false };
                _commoditiesInitializeItem = initializeItem;

                currentInitializeItems.Add(initializeItem);
                shellViewModel.InitializeItemCollectionDC.InitializeItems.Add(initializeItem);
                Task initializeTask = null;
                StartInitializeTask_LoadAllCommodities(initializeTaskFactory, initializeTaskCancelToken, ref initializeItem, out initializeTask);
                initializeTasks.Add(initializeTask);
            }

            // 登录用户关联的操作账户相关数据加载
            if (initialSubAccountRelatedData)
            {
                var initializeItem = new InitializeItem { CanSkipWhenFailed = false };
                _subAccountRelatedDataInitializeItem = initializeItem;

                currentInitializeItems.Add(initializeItem);
                shellViewModel.InitializeItemCollectionDC.InitializeItems.Add(initializeItem);
                Task initializeTask = null;
                StartInitializeTask_LoadSubAccountRelatedData(initializeTaskFactory, initializeTaskCancelToken, ref initializeItem, out initializeTask);
                initializeTasks.Add(initializeTask);
            }

            var taskArr = initializeTasks.ToArray();
            if (!taskArr.Any()) return;

            initializeTaskFactory.ContinueWhenAll(taskArr, completedTasks =>
            {
                if (initializeTaskCancelToken.IsCancellationRequested) return;
                if (currentInitializeItems.All(i => i.IsInitializing == false && i.IsSuccess == true))
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        HandleInitializeDataAllSuccessInitialized();
                    },
                    System.Windows.Threading.DispatcherPriority.Normal);
                }

            }, initializeTaskCancelToken);
        }

        private void RetryFailedInitializeItems()
        {
            // 先初始化数据
            var failedInitializeItems = shellViewModel.InitializeItemCollectionDC.InitializeItems.ToArray().Where(i => i.IsSuccess == false);
            bool reInitialUserSettings = false;
            bool reInitialUserComposeViews = false;
            bool reInitialExchanges = false;
            bool reInitialCommodities = false;
            bool reInitialSubAccountRelatedData = false;

            if (userSettingsInitialItem != null && failedInitializeItems.Contains(userSettingsInitialItem))
            {
                reInitialUserSettings = true;
                shellViewModel.InitializeItemCollectionDC.InitializeItems.Remove(userSettingsInitialItem);
            }

            if (userComposeViewsInitialItem != null && failedInitializeItems.Contains(userComposeViewsInitialItem))
            {
                reInitialUserComposeViews = true;
                shellViewModel.InitializeItemCollectionDC.InitializeItems.Remove(userComposeViewsInitialItem);
            }

            if (exchangesInitialItem != null && failedInitializeItems.Contains(exchangesInitialItem))
            {
                reInitialExchanges = true;
                shellViewModel.InitializeItemCollectionDC.InitializeItems.Remove(exchangesInitialItem);
            }

            if (commoditiesInitialItem != null && failedInitializeItems.Contains(commoditiesInitialItem))
            {
                reInitialCommodities = true;
                shellViewModel.InitializeItemCollectionDC.InitializeItems.Remove(commoditiesInitialItem);
            }

            if (subAccountRelatedDataInitialItem != null && failedInitializeItems.Contains(subAccountRelatedDataInitialItem))
            {
                reInitialSubAccountRelatedData = true;
                shellViewModel.InitializeItemCollectionDC.InitializeItems.Remove(subAccountRelatedDataInitialItem);
            }

            InitializeDatas(reInitialUserSettings, out userSettingsInitialItem,
                reInitialUserComposeViews, out userComposeViewsInitialItem,
                reInitialExchanges, out exchangesInitialItem,
                reInitialCommodities, out commoditiesInitialItem,
                reInitialSubAccountRelatedData, out subAccountRelatedDataInitialItem);
        }

        private void StartInitializeTask_LoadUserComposeViews(TaskFactory initializeTaskFactory,
            CancellationToken initializeTaskCancelToken,
            ref InitializeItem initializeItem,
            out Task initializeTask)
        {
            initializeTask = null;

            var landingInfo = loginDataService.LandingInfo;
            if (landingInfo == null) return;

            var internalInitializeItem = initializeItem;
            if (internalInitializeItem != null)
            {
                internalInitializeItem.Status = "组合列表加载...";
                internalInitializeItem.IsInitializing = true;
            }
            initializeTask = initializeTaskFactory.StartNew(() =>
            {
                if (initializeTaskCancelToken.IsCancellationRequested) return;
                var resp = userComposeViewQueryController.QueryCurrentComposeViewList(initializeTaskCancelToken);
                this._initializeDataRoot.LoginUserAllComposeViews = resp?.CorrectResult?.ToArray();

                if (internalInitializeItem != null)
                {
                    internalInitializeItem.IsInitializing = false;
                    if (resp == null || resp.SourceException != null)
                    {
                        internalInitializeItem.Status = "组合列表加载失败";
                        internalInitializeItem.IsSuccess = false;
                    }
                    else
                    {
                        internalInitializeItem.Status = "组合列表加载完成";
                        internalInitializeItem.IsSuccess = true;
                    }
                }
            }, initializeTaskCancelToken);
        }

        private void StartInitializeTask_LoadAllExchanges(TaskFactory initializeTaskFactory,
            CancellationToken initializeTaskCancelToken,
            ref InitializeItem initializeItem,
            out Task initializeTask)
        {
            initializeTask = null;

            var internalInitializeItem = initializeItem;
            if (internalInitializeItem != null)
            {
                internalInitializeItem.Status = "交易所列表初始化...";
                internalInitializeItem.IsInitializing = true;
            }
            initializeTask = initializeTaskFactory.StartNew(() =>
            {
                if (initializeTaskCancelToken.IsCancellationRequested) return;
                var resp = exchangeQueryController.QueryAllExchanges(initializeTaskCancelToken);
                this._initializeDataRoot.AllExchanges = resp?.CorrectResult?.ToArray();
                if (internalInitializeItem != null)
                {
                    internalInitializeItem.IsInitializing = false;
                    if (resp == null || resp.SourceException != null)
                    {
                        internalInitializeItem.Status = "交易所列表初始化失败";
                        internalInitializeItem.IsSuccess = false;
                    }
                    else
                    {
                        internalInitializeItem.Status = "交易所列表初始化成功";
                        internalInitializeItem.IsSuccess = true;
                    }
                }
            }, initializeTaskCancelToken);
        }

        private void StartInitializeTask_LoadAllCommodities(TaskFactory initializeTaskFactory,
            CancellationToken initializeTaskCancelToken,
            ref InitializeItem initializeItem,
            out Task initializeTask)
        {
            initializeTask = null;

            var internalInitializeItem = initializeItem;
            if (internalInitializeItem != null)
            {
                internalInitializeItem.Status = "商品列表初始化...";
                internalInitializeItem.IsInitializing = true;
            }
            initializeTask = initializeTaskFactory.StartNew(() =>
            {
                if (initializeTaskCancelToken.IsCancellationRequested) return;
                var resp = commodityQueryController.QueryAllCommodities(initializeTaskCancelToken);
                this._initializeDataRoot.AllCommodities = resp?.CorrectResult?.ToArray();
                if (internalInitializeItem != null)
                {
                    internalInitializeItem.IsInitializing = false;
                    if (resp == null || resp.SourceException != null)
                    {
                        internalInitializeItem.Status = "商品列表初始化失败";
                        internalInitializeItem.IsSuccess = false;
                    }
                    else
                    {
                        internalInitializeItem.Status = "商品列表初始化成功";
                        internalInitializeItem.IsSuccess = true;
                    }
                }
            }, initializeTaskCancelToken);
        }

        private void StartInitializeTask_LoadSubAccountRelatedData(TaskFactory initializeTaskFactory,
            CancellationToken initializeTaskCancelToken,
            ref InitializeItem initializeItem,
            out Task initializeTask)
        {
            initializeTask = null;

            var internalInitializeItem = initializeItem;
            internalInitializeItem.Status = "操作账户数据初始化...";
            internalInitializeItem.IsInitializing = true;

            initializeTask = initializeTaskFactory.StartNew(() =>
            {
                if (initializeTaskCancelToken.IsCancellationRequested) return;
                // 1.先查询用户的子账户
                var subAccountsQueryResp = userSubAccountRelatedItemQueryCtrl.QueryUserSubAccountRelatedItems(initializeTaskCancelToken);
                var userRelatedSubAccountItems = subAccountsQueryResp?.CorrectResult?.ToArray() ?? new HostingSubAccountRelatedItem[] { };

                this._initializeDataRoot.LoginUserRelatedSubAccountItems = userRelatedSubAccountItems;

                if (subAccountsQueryResp == null || subAccountsQueryResp.SourceException != null)
                {
                    internalInitializeItem.Status = "操作账户数据初始化失败";
                    internalInitializeItem.IsInitializing = false;
                    internalInitializeItem.IsSuccess = false;
                    return;
                }
                
                // 2.查询个人用户是否配置了交易路由
                if (loginDataService.IsPersonalUserLogin && userRelatedSubAccountItems?.Count() > 0)
                {
                    if (initializeTaskCancelToken.IsCancellationRequested) return;

                    var landingInfo = loginDataService.LandingInfo;
                    var PUORTResp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                        .getPersonalUserHostingOrderRouteTree(landingInfo, userRelatedSubAccountItems.First().SubAccountId);
                    var PUORT = PUORTResp?.CorrectResult;
                    if (PUORT == null)
                    {
                        internalInitializeItem.Status = "操作账户数据初始化失败";
                        internalInitializeItem.IsInitializing = false;
                        internalInitializeItem.IsSuccess = false;
                        return;
                    }

                    this._initializeDataRoot.PersonalLoginUserOrderRouteTree = PUORT;
                }

                internalInitializeItem.IsInitializing = false;
                internalInitializeItem.IsSuccess = true;
                internalInitializeItem.Status = "操作账户数据初始化完成";

            }, initializeTaskCancelToken);
        }

        private void ParseLoadedUserSetting<T>(IInterfaceInteractResponse resp,
            string userSettingContent, 
            string userSettingKey,
            out T parsedUserSettingObj,
            out UserSettingLoadExceptionHolder loadExceptionHolder)
        {
            parsedUserSettingObj = default(T);
            loadExceptionHolder = null;

            if (resp == null) return;
            UserSettingLoadExceptionHolder loadExpHolder = null;
            if (resp.SourceException != null)
            {
                loadExpHolder = new UserSettingLoadExceptionHolder
                {
                    HasTransportException = resp.HasTransportException,
                    BusinessErrorCode = resp.CustomParsedExceptionResult?.BusinessErrorCode,
                    BusinessErrorMsg = resp.CustomParsedExceptionResult?.BusinessErrorMessage
                };
            }
            else
            {
                ParseUserSettingContent(userSettingContent, userSettingKey, out T data, out bool parseSuccess);
                if (!parseSuccess)
                {
                    loadExpHolder = new UserSettingLoadExceptionHolder { IsContentParseFailed = true };
                }
                else
                {
                    parsedUserSettingObj = data;
                }
            }
        }

        private class UserSettingLoadExceptionHolder
        {
            public bool HasTransportException;

            public int? BusinessErrorCode;

            public string BusinessErrorMsg;
            
            public bool IsContentParseFailed;
        }
        
        private static void ParseUserSettingContent<T>(string content, string key, 
            out T parsedObj, out bool isParseSuccess)
        {
            parsedObj = default(T);
            isParseSuccess = true;

            if (string.IsNullOrEmpty(content)) return;

            try
            {
                parsedObj = JsonConvert.DeserializeObject<T>(content);
                isParseSuccess = true;
            }
            catch (Exception e)
            {
                AppLog.Error($"Deserialize user setting failed. key:{key}, dest type:{typeof(T).Name}, content:{content}\n e:{e}");
                isParseSuccess = false;
            }
        }

        private void StartInitializeTask_LoadCloudUserSettings(TaskFactory initializeTaskFactory,
            CancellationToken initializeTaskCancelToken,
            ref InitializeItem initializeItem,
            out Task initializeTask)
        {
            initializeTask = null;

            var landingInfo = loginDataService.LandingInfo;
            if (landingInfo == null) return;

            var internalInitializeItem = initializeItem;
            if (internalInitializeItem != null)
            {
                internalInitializeItem.Status = "加载用户设置数据...";
                internalInitializeItem.IsInitializing = true;
            }
            initializeTask = initializeTaskFactory.StartNew(() =>
            {
                if (initializeTaskCancelToken.IsCancellationRequested) return;
                var loadTaskFactory = new TaskFactory(new LimitedConcurrencyLevelTaskScheduler(4));
                var loadTasks = new List<Task>();
                var dataLoadExpHolders = new ConcurrentBag<UserSettingLoadExceptionHolder>();
                var userSettingData = new UserSettingDataTreesPackage();

                // load TradeComponentListColumnInfosDataTree
                loadTasks.Add(loadTaskFactory.StartNew(() =>
                {
                    initializeTaskCancelToken.ThrowIfCancellationRequested();
                    var key = XueQiaoConstants.UserSettingKey_TradeComponentListColumnInfosData;
                    var content = userSettingSyncController.LoadUserSetting(new UserSettingLoadReq(key, landingInfo)
                        , out IInterfaceInteractResponse resp);

                    ParseLoadedUserSetting(resp, content, key,
                        out TradeComponentListColumnInfosDataTree data, out UserSettingLoadExceptionHolder loadExpHolder);
                    userSettingData.TradeComponentListColumnInfosDT = data;
                    if (loadExpHolder != null)
                        dataLoadExpHolders.Add(loadExpHolder);

                    initializeTaskCancelToken.ThrowIfCancellationRequested();
                }));

                // load TradeWorkspaceTemplateDataTree
                loadTasks.Add(loadTaskFactory.StartNew(() =>
                {
                    initializeTaskCancelToken.ThrowIfCancellationRequested();

                    var key = XueQiaoConstants.UserSettingKey_TradeWorkspaceTemplateData;
                    var content = userSettingSyncController.LoadUserSetting(new UserSettingLoadReq(key, landingInfo)
                        , out IInterfaceInteractResponse resp);

                    ParseLoadedUserSetting(resp, content, key,
                        out TradeWorkspaceTemplateDataTree data, out UserSettingLoadExceptionHolder loadExpHolder);
                    userSettingData.TradeWorkspaceTemplateDT = data;
                    if (loadExpHolder != null)
                        dataLoadExpHolders.Add(loadExpHolder);

                    initializeTaskCancelToken.ThrowIfCancellationRequested();
                }));

                // load TradeWorkspaceWindowTree
                loadTasks.Add(loadTaskFactory.StartNew(() =>
                {
                    initializeTaskCancelToken.ThrowIfCancellationRequested();

                    var key = XueQiaoConstants.UserSettingKey_TradeWorkspaceWindowTree;
                    var content = userSettingSyncController.LoadUserSetting(new UserSettingLoadReq(key, landingInfo)
                        , out IInterfaceInteractResponse resp);
                    
                    ParseLoadedUserSetting(resp, content, key,
                        out WorkspaceWindowTree data, out UserSettingLoadExceptionHolder loadExpHolder);
                    userSettingData.TradeWorkspaceWindowTree = data;
                    if (loadExpHolder != null)
                    {
                        dataLoadExpHolders.Add(loadExpHolder);
                        initializeTaskCancelToken.ThrowIfCancellationRequested();
                        return;
                    }

                    // 加载详细的Trade工作空间数据树
                    if (data != null)
                    {
                        initializeTaskCancelToken.ThrowIfCancellationRequested();

                        IEnumerable<string> workspaceKeys = new string[] { };
                        workspaceKeys = workspaceKeys.Union(data.MainWindowWorkspaceKeyList ?? new string[] { });
                        var intertabWins = data.WorkspaceInterTabWindowList ?? new TabWorkspaceWindow[] { };
                        foreach (var win in intertabWins)
                        {
                            workspaceKeys = workspaceKeys.Union(win.ChildWorkspaceKeys ?? new string[] { });
                        }

                        var wsListLoadResult = LoadAllTradeWorkspaceList(workspaceKeys, landingInfo, initializeTaskCancelToken);
                        if (wsListLoadResult != null)
                        {
                            dataLoadExpHolders.AddFromEnumerable(wsListLoadResult.Where(i => i.Item2 != null).Select(i => i.Item2).ToArray());
                            var wsList = wsListLoadResult.Where(i => i.Item1 != null).Select(i => i.Item1).ToArray();
                            userSettingData.TradeWorkspaceList = wsList;
                        }
                    }

                    initializeTaskCancelToken.ThrowIfCancellationRequested();
                }));

                // load UserSubscribeDataTree
                loadTasks.Add(loadTaskFactory.StartNew(() =>
                {
                    initializeTaskCancelToken.ThrowIfCancellationRequested();

                    var key = XueQiaoConstants.UserSettingKey_UserSubscribeData;
                    var content = userSettingSyncController.LoadUserSetting(new UserSettingLoadReq(key, landingInfo)
                        , out IInterfaceInteractResponse resp);
                    Debug.Assert(resp != null);
                    ParseLoadedUserSetting(resp, content, key,
                        out UserSubscribeDataTree data, out UserSettingLoadExceptionHolder loadExpHolder);
                    userSettingData.SubscribeDataTree = data;
                    if (loadExpHolder != null)
                        dataLoadExpHolders.Add(loadExpHolder);

                    initializeTaskCancelToken.ThrowIfCancellationRequested();
                }));

                // load XqTPIDataTree
                loadTasks.Add(loadTaskFactory.StartNew(() =>
                {
                    initializeTaskCancelToken.ThrowIfCancellationRequested();

                    var key = XueQiaoConstants.UserSettingKey_XqTPIData;
                    var content = userSettingSyncController.LoadUserSetting(new UserSettingLoadReq(key, landingInfo)
                        , out IInterfaceInteractResponse resp);
                    
                    ParseLoadedUserSetting(resp, content, key,
                        out XqTPIDataTree data, out UserSettingLoadExceptionHolder loadExpHolder);
                    userSettingData.XqTPIDataTree = data;
                    if (loadExpHolder != null)
                        dataLoadExpHolders.Add(loadExpHolder);

                    initializeTaskCancelToken.ThrowIfCancellationRequested();
                }));

                // load PPADataTree
                loadTasks.Add(loadTaskFactory.StartNew(() =>
                {
                    initializeTaskCancelToken.ThrowIfCancellationRequested();

                    var key = XueQiaoConstants.UserSettingKey_PPAData;
                    var content = userSettingSyncController.LoadUserSetting(new UserSettingLoadReq(key, landingInfo)
                        , out IInterfaceInteractResponse resp);
                    
                    ParseLoadedUserSetting(resp, content, key,
                        out PPADataTree data, out UserSettingLoadExceptionHolder loadExpHolder);
                    userSettingData.PPADataTree = data;
                    if (loadExpHolder != null)
                        dataLoadExpHolders.Add(loadExpHolder);

                    initializeTaskCancelToken.ThrowIfCancellationRequested();
                }));

                // load XQComposeOrderEPTDataTree
                loadTasks.Add(loadTaskFactory.StartNew(() =>
                {
                    initializeTaskCancelToken.ThrowIfCancellationRequested();

                    var key = XueQiaoConstants.UserSettingKey_XQComposeOrderEPTData;
                    var content = userSettingSyncController.LoadUserSetting(new UserSettingLoadReq(key, landingInfo)
                        , out IInterfaceInteractResponse resp);
                    
                    ParseLoadedUserSetting(resp, content, key,
                        out XQComposeOrderEPTDataTree data, out UserSettingLoadExceptionHolder loadExpHolder);
                    userSettingData.XQComposeOrderEPTDataTree = data;
                    if (loadExpHolder != null)
                        dataLoadExpHolders.Add(loadExpHolder);

                    initializeTaskCancelToken.ThrowIfCancellationRequested();
                }));

                // load ResearchWorkspaceWindowTree
                loadTasks.Add(loadTaskFactory.StartNew(() =>
                {
                    initializeTaskCancelToken.ThrowIfCancellationRequested();

                    var key = XueQiaoConstants.UserSettingKey_ResearchWorkspaceWindowTree;
                    var content = userSettingSyncController.LoadUserSetting(new UserSettingLoadReq(key, landingInfo)
                        , out IInterfaceInteractResponse resp);
                    Debug.Assert(resp != null);
                    ParseLoadedUserSetting(resp, content, key,
                        out WorkspaceWindowTree data, out UserSettingLoadExceptionHolder loadExpHolder);
                    userSettingData.ResearchWorkspaceWindowTree = data;
                    if (loadExpHolder != null)
                    {
                        dataLoadExpHolders.Add(loadExpHolder);
                        initializeTaskCancelToken.ThrowIfCancellationRequested();
                        return;
                    }
                    
                    // 加载详细的Research工作空间数据树
                    if (data != null)
                    {
                        initializeTaskCancelToken.ThrowIfCancellationRequested();

                        IEnumerable<string> workspaceKeys = new string[] { };
                        workspaceKeys = workspaceKeys.Union(data.MainWindowWorkspaceKeyList ?? new string[] { });
                        var intertabWins = data.WorkspaceInterTabWindowList ?? new TabWorkspaceWindow[] { };
                        foreach (var win in intertabWins)
                        {
                            workspaceKeys = workspaceKeys.Union(win.ChildWorkspaceKeys ?? new string[] { });
                        }

                        var wsListLoadResult = LoadAllResearchWorkspaceList(workspaceKeys, landingInfo, initializeTaskCancelToken);
                        if (wsListLoadResult != null)
                        {
                            dataLoadExpHolders.AddFromEnumerable(wsListLoadResult.Where(i => i.Item2 != null).Select(i => i.Item2).ToArray());
                            var wsList = wsListLoadResult.Where(i => i.Item1 != null).Select(i=>i.Item1).ToArray();
                            userSettingData.ResearchWorkspaceList = wsList;
                        }
                    }

                    initializeTaskCancelToken.ThrowIfCancellationRequested();
                }));

                var taskArr = loadTasks.ToArray();

                try
                {
                    Task.WaitAll(taskArr);
                }
                catch (AggregateException _ae)
                {
                    if (!initializeTaskCancelToken.IsCancellationRequested)
                    {
                        var exps = _ae.Flatten()?.InnerExceptions;
                        if (exps?.Any() == true)
                        {
                            foreach (var exp in exps)
                            {
                                AppLog.Error($"Failed StartInitializeTask_LoadCloudUserSettings in task, {exp.GetType().Name}");
                            }
                        }

                        // 加载发生出错
                        internalInitializeItem.CanSkipWhenFailed = false;
                        internalInitializeItem.Status = "用户设置数据加载发生异常，请重试";
                        internalInitializeItem.IsInitializing = false;
                        internalInitializeItem.IsSuccess = false;
                    }
                    return;
                }
            
                if (dataLoadExpHolders.Any())
                {
                    if (dataLoadExpHolders.Any(i => i.HasTransportException))
                    {
                        // 某项加载存在网络异常
                        internalInitializeItem.CanSkipWhenFailed = false;
                        internalInitializeItem.Status = "用户设置数据加载网络异常，请重试";
                        internalInitializeItem.IsInitializing = false;
                        internalInitializeItem.IsSuccess = false;
                    }
                    else if (dataLoadExpHolders.All(i => i.BusinessErrorCode == ErrorCodeConstants.ERROR_CONFIG_LOST || i.IsContentParseFailed))
                    {
                        // 全部加载都是 key lost 或解析出错，可跳过进入下一步
                        internalInitializeItem.CanSkipWhenFailed = true;
                        internalInitializeItem.Status = "非常抱歉，部分用户设置数据丢失或解析出错";
                        internalInitializeItem.IsInitializing = false;
                        internalInitializeItem.IsSuccess = false;
                    }
                    else
                    {
                        internalInitializeItem.CanSkipWhenFailed = false;
                        internalInitializeItem.Status = "用户设置数据加载发生异常，请重试";
                        internalInitializeItem.IsInitializing = false;
                        internalInitializeItem.IsSuccess = false;
                    }
                }
                else
                {
                    internalInitializeItem.CanSkipWhenFailed = true;
                    internalInitializeItem.Status = "用户设置数据加载完成";
                    internalInitializeItem.IsInitializing = false;
                    internalInitializeItem.IsSuccess = true;

                    _initializeDataRoot.LoginUserSettingDataTreePackage.TradeComponentListColumnInfosDT = userSettingData.TradeComponentListColumnInfosDT;
                    _initializeDataRoot.LoginUserSettingDataTreePackage.TradeWorkspaceTemplateDT = userSettingData.TradeWorkspaceTemplateDT;
                    _initializeDataRoot.LoginUserSettingDataTreePackage.TradeWorkspaceWindowTree = userSettingData.TradeWorkspaceWindowTree;
                    _initializeDataRoot.LoginUserSettingDataTreePackage.TradeWorkspaceList = userSettingData.TradeWorkspaceList;
                    _initializeDataRoot.LoginUserSettingDataTreePackage.SubscribeDataTree = userSettingData.SubscribeDataTree;
                    _initializeDataRoot.LoginUserSettingDataTreePackage.XqTPIDataTree = userSettingData.XqTPIDataTree;
                    _initializeDataRoot.LoginUserSettingDataTreePackage.PPADataTree = userSettingData.PPADataTree;
                    _initializeDataRoot.LoginUserSettingDataTreePackage.XQComposeOrderEPTDataTree = userSettingData.XQComposeOrderEPTDataTree;
                    _initializeDataRoot.LoginUserSettingDataTreePackage.ResearchWorkspaceWindowTree = userSettingData.ResearchWorkspaceWindowTree;
                    _initializeDataRoot.LoginUserSettingDataTreePackage.ResearchWorkspaceList = userSettingData.ResearchWorkspaceList;
                }
            }, initializeTaskCancelToken);
        }

        private IEnumerable<Tuple<TradeWorkspaceItemTree, UserSettingLoadExceptionHolder>> LoadAllTradeWorkspaceList(IEnumerable<string> workspaceKeys,
            LandingInfo landingInfo, CancellationToken initializeTaskCancelToken)
        {
            if (workspaceKeys?.Any() != true) return null;
            if (landingInfo == null) return null;

            var taskThreadNum = workspaceKeys.Count();
            if (taskThreadNum > 5) taskThreadNum = 5;

            var taskFactory = new TaskFactory(new LimitedConcurrencyLevelTaskScheduler(taskThreadNum));
            var tasks = new List<Task<Tuple<TradeWorkspaceItemTree, UserSettingLoadExceptionHolder>>>();
            foreach (var workspaceKey in workspaceKeys)
            {
                tasks.Add(taskFactory.StartNew(() =>
                {
                    initializeTaskCancelToken.ThrowIfCancellationRequested();
                    var content = userSettingSyncController.LoadUserSetting(new UserSettingLoadReq(workspaceKey, landingInfo)
                        , out IInterfaceInteractResponse resp);
                    
                    ParseLoadedUserSetting(resp, content, workspaceKey,
                        out TradeWorkspaceItemTree data, out UserSettingLoadExceptionHolder __loadExpHolder);
                    
                    initializeTaskCancelToken.ThrowIfCancellationRequested();
                    return new Tuple<TradeWorkspaceItemTree, UserSettingLoadExceptionHolder>(data, __loadExpHolder);
                }));
            }

            var taskArr = tasks.ToArray();
            try
            {
                Task.WaitAll(taskArr);
            }
            catch (AggregateException _ae)
            {
                if (!initializeTaskCancelToken.IsCancellationRequested)
                {
                    var exps = _ae.Flatten()?.InnerExceptions;
                    if (exps?.Any() == true)
                    {
                        foreach (var exp in exps)
                        {
                            AppLog.Error($"Failed LoadAllTradeWorkspaceList in task, {exp.GetType().Name}");
                        }
                    }
                }
                return null;
            }

            return taskArr.Select(i => i.Result).ToArray();
        }


        private IEnumerable<Tuple<ResearchWorkspaceItemTree, UserSettingLoadExceptionHolder>> LoadAllResearchWorkspaceList(IEnumerable<string> workspaceKeys,
            LandingInfo landingInfo, CancellationToken initializeTaskCancelToken)
        {
            if (workspaceKeys?.Any() != true) return null;
            if (landingInfo == null) return null;

            var taskThreadNum = workspaceKeys.Count();
            if (taskThreadNum > 5) taskThreadNum = 5;

            var taskFactory = new TaskFactory(new LimitedConcurrencyLevelTaskScheduler(taskThreadNum));
            var tasks = new List<Task<Tuple<ResearchWorkspaceItemTree, UserSettingLoadExceptionHolder>>>();
            foreach (var workspaceKey in workspaceKeys)
            {
                tasks.Add(taskFactory.StartNew(() =>
                {
                    initializeTaskCancelToken.ThrowIfCancellationRequested();
                    var content = userSettingSyncController.LoadUserSetting(new UserSettingLoadReq(workspaceKey, landingInfo)
                        , out IInterfaceInteractResponse resp);

                    ParseLoadedUserSetting(resp, content, workspaceKey,
                        out ResearchWorkspaceItemTree data, out UserSettingLoadExceptionHolder __loadExpHolder);

                    initializeTaskCancelToken.ThrowIfCancellationRequested();
                    return new Tuple<ResearchWorkspaceItemTree, UserSettingLoadExceptionHolder>(data, __loadExpHolder);
                }));
            }

            var taskArr = tasks.ToArray();

            try
            {
                Task.WaitAll(taskArr);
            }
            catch (AggregateException _ae)
            {
                if (!initializeTaskCancelToken.IsCancellationRequested)
                {
                    var exps = _ae.Flatten()?.InnerExceptions;
                    if (exps?.Any() == true)
                    {
                        foreach (var exp in exps)
                        {
                            AppLog.Error($"Failed LoadAllResearchWorkspaceList in task, {exp.GetType().Name}");
                        }
                    }
                }
                return null;
            }
            
            return taskArr.Select(i => i.Result).ToArray();
        }


        private void SkipFailedInitializeItems()
        {
            if (!shellViewModel.InitializeItemCollectionDC.InitializeItems.Any(i => i.IsSuccess == false && i.CanSkipWhenFailed == false))
            {
                HandleInitializeDataAllSuccessInitialized();
            }
        }

        private void HandleInitializeDataAllSuccessInitialized()
        {
            DispatcherHelper.CheckBeginInvokeOnUI(() => 
            {
                shellViewModel.InitializeItemCollectionDC.InitializeItems.Clear();

                var data = this._initializeDataRoot.Clone() as InitializeDataRoot;
                XqDataInitialized?.Invoke(data);

                if (CheckAndHandleCanSetupTabNodes())
                {
                    SetupTabNodes();
                    AfterSetupTabNodes();
                }
            });
        }

        private ContainerShellTabNodeItem CreateTabNode_PersonalUserTradeManage()
        {
            const ContainerShellTabNodeType itemType = ContainerShellTabNodeType.PersonalUserTradeManage;
            var tabNodeItem = new ContainerShellTabNodeItem(itemType)
            {
                NodeTitle = "账户",
                NodeIconGeometry = CreateManageTabNodeGeometry(),
                ShowAction = tab =>
                {
                    var contentView = personalUserManageModuleService.Value.GetPersonalUserManageModuleRootView(() => this.windowCaptionDataHolder,
                        out Action showAction, out Action closeAction);

                    shellViewModel.TabNodeContentView = contentView;
                    tab.CloseAction = _tab => closeAction?.Invoke();

                    showAction?.Invoke();

                    // 更新上次选中 tab
                    Settings.Default.LastSelectedTab = itemType.ToString();
                }
            };
            return tabNodeItem;
        }

        private ContainerShellTabNodeItem CreateTabNode_CompanyUserTradeManage()
        {
            const ContainerShellTabNodeType itemType = ContainerShellTabNodeType.Manage;
            var tabNodeItem = new ContainerShellTabNodeItem(itemType)
            {
                NodeTitle = "管理",
                NodeIconGeometry = CreateManageTabNodeGeometry(),
                ShowAction = tab =>
                {
                    var contentView = manageModuleService.Value.GetManageModuleRootView(() => this.windowCaptionDataHolder,
                        out Action showAction, out Action closeAction);

                    shellViewModel.TabNodeContentView = contentView;
                    tab.CloseAction = _tab => closeAction?.Invoke();

                    showAction?.Invoke();

                    // 更新上次选中 tab
                    Settings.Default.LastSelectedTab = itemType.ToString();
                }
            };
            return tabNodeItem;
        }

        private ContainerShellTabNodeItem CreateTabNode_Trade()
        {
            const ContainerShellTabNodeType itemType = ContainerShellTabNodeType.Trade;
            var tabNodeItem = new ContainerShellTabNodeItem(itemType)
            {
                NodeTitle = "交易",
                NodeIconGeometry = CreateTradeTabNodeGeometry(),
                ShowAction = tab =>
                {
                    var contentView = tradeModuleService.Value.GetTradeModuleRootView(() => this.windowCaptionDataHolder,
                            out Action showAction, out Action closeAction);

                    shellViewModel.TabNodeContentView = contentView;
                    tab.CloseAction = _tab => closeAction?.Invoke();

                    showAction?.Invoke();

                    // 更新上次选中 tab
                    Settings.Default.LastSelectedTab = itemType.ToString();
                }
            };
            return tabNodeItem;
        }

        private ContainerShellTabNodeItem CreateTabNode_Touyan()
        {
            const ContainerShellTabNodeType itemType = ContainerShellTabNodeType.Research;
            var tabNodeItem = new ContainerShellTabNodeItem(itemType)
            {
                NodeTitle = "投研",
                NodeIconGeometry = CreateResearchTabNodeGeometry(),
                ShowAction = tab =>
                {
                    var contentView = GetTouyanModuleRootView(() => this.windowCaptionDataHolder,
                            out Action showAction, out Action closeAction);

                    shellViewModel.TabNodeContentView = contentView;
                    tab.CloseAction = _tab => closeAction?.Invoke();

                    showAction?.Invoke();

                    // 更新上次选中 tab
                    Settings.Default.LastSelectedTab = itemType.ToString();
                }
            };
            return tabNodeItem;
        }

        private void SetupTabNodes()
        {
            var loginResp = loginDataService.ProxyLoginResp;
            if (loginResp == null) return;

            shellViewModel.TabNodes.Clear();

            var isPersonalUserLogin = loginDataService.IsPersonalUserLogin;
            if (isPersonalUserLogin)
            {
                shellViewModel.TabNodes.Add(CreateTabNode_PersonalUserTradeManage());
                shellViewModel.TabNodes.Add(CreateTabNode_Trade());
                shellViewModel.TabNodes.Add(CreateTabNode_Touyan());
            }
            else
            {
                // 根据用户的角色，根据角色显示 Tab Nodes
                var userRole = loginResp.LoginUserInfo?.UserRoleValue;
                if (userRole != null)
                {
                    if (userRole >= EHostingUserRole.AdminGroup.GetHashCode()) {
                        shellViewModel.TabNodes.Add(CreateTabNode_CompanyUserTradeManage());
                    }
                    shellViewModel.TabNodes.Add(CreateTabNode_Trade());
                }
                shellViewModel.TabNodes.Add(CreateTabNode_Touyan());
            }
            
            // 设置选中项
            ContainerShellTabNodeType? lastSelectedTabType = null;
            if (Enum.TryParse(Settings.Default.LastSelectedTab ?? "", out ContainerShellTabNodeType result))
            {
                lastSelectedTabType = result;
            }

            ContainerShellTabNodeItem toSelectNode = null;
            if (lastSelectedTabType != null)
                toSelectNode = shellViewModel.TabNodes.FirstOrDefault(i => i.TabNodeType == lastSelectedTabType);
            if (toSelectNode == null)
                toSelectNode = shellViewModel.TabNodes.FirstOrDefault();

            shellViewModel.SelectedTabNode = toSelectNode;
        }

        private bool CheckAndHandleCanSetupTabNodes()
        {
            if (loginDataService.IsPersonalUserLogin)
            {
                // 个人用户的 SubAccount 数量小于 1，提示联系工作人员进行处理
                var initializedSubAccountItems = this._initializeDataRoot?.LoginUserRelatedSubAccountItems;
                if (initializedSubAccountItems?.Any() != true)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() => 
                    {
                        messageWindowService.ShowMessageDialog(UIHelper.GetWindowOfUIElement(shellViewModel.View), null, null, null,
                            "\n交易服务开通中，服务完成会有短信通知，\n请耐心等待\n", "关闭程序");
                        appAssemblerService.Value.ShutdownApplication();
                    });
                    return false;
                }
            }
            return true;
        }

        private void AfterSetupTabNodes()
        {
            if (loginDataService.IsPersonalUserLogin)
            {
                var PUORT = this._initializeDataRoot?.PersonalLoginUserOrderRouteTree;
                if (PUORT == null || PUORT.SubExchangeNodes?.Any() != true)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        var qResult = messageWindowService.ShowQuestionDialog(UIHelper.GetWindowOfUIElement(shellViewModel.View), null, null, "提示",
                            "\n您还未设置资金账户或未生效，是否前往设置？\n", false, "前往", "取消");
                        if (qResult == true)
                        {
                            var tarTabNode = shellViewModel.TabNodes?.FirstOrDefault(i => i.TabNodeType == ContainerShellTabNodeType.PersonalUserTradeManage);
                            if (tarTabNode != null)
                            {
                                shellViewModel.SelectedTabNode = tarTabNode;
                            }
                        }
                    });
                }
            }
        }
        

        private object GetTouyanModuleRootView(Func<ChromeWindowCaptionDataHolder> embedInWindowCaptionDataHolderGetter,
            out Action showAction, out Action closeAction)
        {
            closeAction = null;
            showAction = null;

            if (touyanModuleRootViewCtrl == null)
            {
                touyanModuleRootViewCtrl = touyanModuleRootViewCtrlFactory.CreateExport().Value;
                touyanModuleRootViewCtrl.EmbedInWindowCaptionDataHolder = embedInWindowCaptionDataHolderGetter?.Invoke();
                touyanModuleRootViewCtrl.Initialize();
                touyanModuleRootViewCtrl.Run();
            }

            return touyanModuleRootViewCtrl.ContentView;
        }

        private static Geometry CreateManageTabNodeGeometry()
        {
            var iconGeometry = ResourceDictionaryHelper.FindResource("MainTabManageIconGeometry");
            return iconGeometry as Geometry;
        }

        private static Geometry CreateTradeTabNodeGeometry()
        {
            var iconGeometry = ResourceDictionaryHelper.FindResource("MainTabTradeIconGeometry");
            return iconGeometry as Geometry;
        }

        private static Geometry CreateResearchTabNodeGeometry()
        {
            var iconGeometry = ResourceDictionaryHelper.FindResource("MainTabResearchIconGeometry");
            return iconGeometry as Geometry;
        }
    }
}
