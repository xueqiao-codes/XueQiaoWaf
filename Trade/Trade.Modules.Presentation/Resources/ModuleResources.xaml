<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:convert="clr-namespace:XueQiaoFoundation.BusinessResources.Converters;assembly=XueQiaoFoundation.BusinessResources"
                    xmlns:uiconvert="clr-namespace:XueQiaoFoundation.UI.Converters;assembly=XueQiaoFoundation.UI"
                    xmlns:uiextra_convert="clr-namespace:XueQiaoFoundation.UI.Extra.converter;assembly=XueQiaoFoundation.UI.Extra"
                    xmlns:moduleconvert="clr-namespace:XueQiaoWaf.Trade.Modules.Presentation.Converters"
                    xmlns:datamodel="clr-namespace:XueQiaoWaf.Trade.Modules.Applications.DataModels;assembly=XueQiaoWaf.Trade.Modules.Applications"
                    xmlns:ComponentModel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
                    xmlns:bsView="clr-namespace:BolapanControl.ItemsFilter.View;assembly=ItemsFilter"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:uiextra_helper="clr-namespace:XueQiaoFoundation.UI.Extra.helper;assembly=XueQiaoFoundation.UI.Extra"
                    xmlns:res_dm="clr-namespace:XueQiaoFoundation.BusinessResources.DataModels;assembly=XueQiaoFoundation.BusinessResources">
    
    <uiconvert:EqualityToVisibilityConverter x:Key="EqualToCollapsedConverter" CollapsedWhenEquals="True" CollapsedWhenNotEquals="False"/>

    <uiextra_convert:Timestamp2StringConverter x:Key="TimestampMs2TimeStringConverter" 
                                       ValueType="Millisecond" 
                                       Convert2StringFormatType="Time"/>

    <convert:CommodityType2NameConverter x:Key="CommodityType2NameConverter"/>
    <convert:TradeDirection2NameConverter x:Key="TradeDirection2NameConverter"/>
    <convert:ClientXQOrderTargetType2NameConverter x:Key="ClientXQOrderTargetType2NameConverter"/>
    <convert:HostingXQOrderType2NameConverter x:Key="HostingXQOrderType2NameConverter" IncludeTargetTypeName="False"/>
    <uiextra_convert:Timestamp2StringConverter x:Key="OrderTimeConverter" 
                                       ValueType="Millisecond" 
                                       Convert2StringFormatType="DateTimeIgnoreYearWithMs"/>

    <moduleconvert:TargetComposeLegTradeSummaryTextAssembler x:Key="TargetComposeLegTradeSummaryTextAssembler"/>

    <SolidColorBrush x:Key="TransparentBrush" Color="Transparent"/>
    <ImageBrush x:Key="ComponentGroupRadioItemNoneBgBrush" ImageSource="Images/GroupItemNoneBg.png"/>

    
    <Style x:Key="ListBoxItemComponentTabStyle"
           TargetType="{x:Type ListBoxItem}" 
           BasedOn="{StaticResource ListBoxItemTabStyle}">
        <Setter Property="FontSize" Value="{DynamicResource RegularTitleFontSize}"/>
    </Style>
    
    <!-- 组合标的腿成交概要表头 data template -->
    <DataTemplate x:Key="TargetComposeLegTradeSummarysColumnHeaderDT">
        <TextBlock Foreground="{DynamicResource ContentBrush1}">
            <Run Text="概要（均价 或 "/><!--
         --><Run Text="计算价格" Foreground="{DynamicResource ContentBrush3}"/><!--
         --><Run Text="）"/>
        </TextBlock>
    </DataTemplate>

    <!-- 组合标的腿成交概要文字描述 data template -->
    <DataTemplate x:Key="TargetComposeLegTradeSummarysTextDT"
                  DataType="{x:Type res_dm:TargetComposeLegTradeSummarysContainer}">
        <Grid>
            <!-- CollectionViewSource should be declared as a resource of parent container of the ItemsControl. 
                     Otherwise there will be an exception of StaticResourceHolder -->
            <Grid.Resources>
                <CollectionViewSource x:Key="SortingLegTradeSummarysViewSource"  Source="{Binding LegTradeSummarys}"
                                  IsLiveSortingRequested="True">
                    <CollectionViewSource.LiveSortingProperties>
                        <sys:String>LegVariableName</sys:String>
                    </CollectionViewSource.LiveSortingProperties>
                    <CollectionViewSource.SortDescriptions>
                        <ComponentModel:SortDescription PropertyName="LegVariableName" Direction="Ascending"/>
                    </CollectionViewSource.SortDescriptions>
                </CollectionViewSource>
            </Grid.Resources>
            <ItemsControl ItemsSource="{Binding Source={StaticResource SortingLegTradeSummarysViewSource}}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" IsItemsHost="True"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="{x:Type res_dm:TargetComposeLegTradeSummary}">
                        <TextBlock TextWrapping="Wrap" x:Name="ItemSummaryTextBlock">
                            <Run x:Name="ItemSeperator" Text="  "/><!--
                         --><Run x:Name="LegVariableName" Text="{Binding LegVariableName, Mode=OneWay, StringFormat={}{0}: }"/><!--
                         --><Run x:Name="TradeVolume" Text="{Binding TradeVolume, Mode=OneWay}"/><!--
                         --><Run x:Name="VolumeFractionSeperator" Text="/"/><!--
                         --><Run x:Name="TotalVolume" Text="{Binding TotalVolume, Mode=OneWay}"/><!--
                         --><Run x:Name="SummaryPrice" Text="{Binding SummaryPrice, Mode=OneWay, StringFormat= ({0})}"/>
                            <!--<Run>
                                <MultiBinding Converter="{StaticResource TargetComposeLegTradeSummaryTextAssembler}" Mode="OneWay">
                                    <Binding Path="LegVariableName"/>
                                    <Binding Path="TradeVolume"/>
                                    <Binding Path="TotalVolume"/>
                                    <Binding Path="SummaryPrice"/>
                                </MultiBinding>
                            </Run>-->
                        </TextBlock>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource PreviousData}}" Value="{x:Null}">
                                <Setter TargetName="ItemSeperator" Property="Text" Value="{x:Null}"/>
                            </DataTrigger>
                            
                            <DataTrigger Binding="{Binding TradeVolume}" Value="{x:Null}">
                                <Setter TargetName="TradeVolume" Property="Text" Value="{x:Null}"/>
                                <Setter TargetName="VolumeFractionSeperator" Property="Text" Value="{x:Null}"/>
                            </DataTrigger>
                            
                            <DataTrigger Binding="{Binding TotalVolume}" Value="{x:Null}">
                                <Setter TargetName="TotalVolume" Property="Text" Value="{x:Null}"/>
                                <Setter TargetName="VolumeFractionSeperator" Property="Text" Value="{x:Null}"/>
                            </DataTrigger>
                            
                            <DataTrigger Binding="{Binding SummaryPrice}" Value="{x:Null}">
                                <Setter TargetName="SummaryPrice" Property="Text" Value="{x:Null}"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding SummaryPriceType}" Value="{x:Static res_dm:LegTradeSummaryPriceType.CalculatePrice}">
                                <Setter TargetName="SummaryPrice" Property="Foreground" Value="{DynamicResource ContentBrush3}"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </Grid>
    </DataTemplate>
    
    <!-- 订单列表资源 -->
    <DataTemplate x:Key="OrderListDirectionDataTemplate">
        <TextBlock Text="{Binding Direction, Converter={StaticResource TradeDirection2NameConverter}}"/>
    </DataTemplate>

    <DataTemplate x:Key="OrderListTargetTypeDataTemplate">
        <TextBlock Text="{Binding TargetType, Converter={StaticResource ClientXQOrderTargetType2NameConverter}}"/>
    </DataTemplate>

    <DataTemplate x:Key="OrderListOrderTypeDataTemplate">
        <TextBlock Text="{Binding OrderType, Converter={StaticResource HostingXQOrderType2NameConverter}}"/>
    </DataTemplate>

    <DataTemplate x:Key="OrderListOrderTimeDataTemplate">
        <TextBlock Text="{Binding OrderTimestampMs, Converter={StaticResource OrderTimeConverter}, TargetNullValue={StaticResource NullValueDataDefaultDisplayText}}"/>
    </DataTemplate>

    <DataTemplate x:Key="OrderListOrderIdDataTemplate">
        <TextBox IsReadOnly="True" 
                Text="{Binding OrderId, Mode=OneWay}"
                AutoWordSelection="True"
                Background="Transparent"
                Padding="0, 0"
                BorderThickness="0"
                ScrollViewer.CanContentScroll="False">
            <i:Interaction.Behaviors>
                <uiextra_helper:TextBoxDoubleClickSelectAllTextBehavior/>
            </i:Interaction.Behaviors>
        </TextBox>
    </DataTemplate>

    <DataTemplate x:Key="OrderListCreatorUserNameDataTemplate">
        <TextBlock Text="{Binding SubAccountFields.SubUserName}"/>
    </DataTemplate>

    <DataTemplate x:Key="OrderListSubAccountNameDataTemplate">
        <TextBlock Text="{Binding SubAccountFields.SubAccountName}"/>
    </DataTemplate>

    <DataTemplate x:Key="OrderListUpdateTimeDataTemplate">
        <TextBlock Text="{Binding UpdateTimestampMs, Converter={StaticResource OrderTimeConverter}, TargetNullValue={StaticResource NullValueDataDefaultDisplayText}}"/>
    </DataTemplate>

    <DataTemplate x:Key="OrderListCreatorUserIdDataTemplate">
        <TextBlock Text="{Binding SubAccountFields.SubUserId}"/>
    </DataTemplate>

    <DataTemplate x:Key="OrderListSubAccountIdDataTemplate">
        <TextBlock Text="{Binding SubAccountFields.SubAccountId}"/>
    </DataTemplate>

    <DataTemplate x:Key="OrderListDataVersionDataTemplate">
        <TextBlock Text="{Binding Version}"/>
    </DataTemplate>
    
    
    <!-- ItemsFilter Item Template -->
    <DataTemplate x:Key="OrderTargetKeyFilterViewDataTemplate" >
        <bsView:MultiValueFilterView  
            Model="{Binding}" 
            Style="{StaticResource XQMultiValueFilterViewDefault}">
            <bsView:MultiValueFilterView.ValueItemTemplate>
                <DataTemplate DataType="{x:Type res_dm:OrderItemDataModel}">
                    <CheckBox Content="{Binding}" 
                              ContentTemplate="{StaticResource XqTargetNameDT}"
                              IsChecked="{Binding IsSelected, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                </DataTemplate>
            </bsView:MultiValueFilterView.ValueItemTemplate>
        </bsView:MultiValueFilterView>
    </DataTemplate>


    <!-- 订单执行参数`挂单量`的提示按钮样式 -->
    <Style TargetType="Button"
           x:Key="OrderExecuteParam_SendQuantityTipButton"
           BasedOn="{StaticResource CornerTipButton}">
        <Setter Property="Content" Value="?"/>
        <Setter Property="ToolTipService.ShowDuration" Value="60000"/>
        <Setter Property="ToolTip">
            <Setter.Value>
                <ToolTip Style="{StaticResource XQToolTipStyle}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="挂单量：" Margin="0,0,10,0"/>
                        <StackPanel Orientation="Vertical" Grid.Column="1">
                            <TextBlock Text="（市价并发）各腿挂单量=已挂单+本次挂单"/>

                            <TextBlock Text="（市价逐腿）后手腿挂单量=已有挂单+已挂单+本次挂单" 
                                       Margin="0,6,0,0"/>
                            <TextBlock Text="已有挂单量=市价逐腿方式已产生的挂单"/>

                            <TextBlock Text="（限价逐腿）各腿挂单量=已有挂单+已挂单+本次挂单" 
                                       Margin="0,6,0,0"/>
                            <TextBlock Text="已有挂单量=限价逐腿方式已产生的挂单市价逐腿方式已产生的挂单"/>
                        </StackPanel>
                    </Grid>
                </ToolTip>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 订单执行参数`滑价上限`的提示按钮样式 -->
    <Style TargetType="Button"
           x:Key="OrderExecuteParam_LegChaseProtectPriceRatioTipButton"
           BasedOn="{StaticResource CornerTipButton}">
        <Setter Property="Content" Value="?"/>
        <Setter Property="ToolTipService.ShowDuration" Value="60000"/>
        <Setter Property="ToolTip">
            <Setter.Value>
                <ToolTip Style="{StaticResource XQToolTipStyle}">
                    <StackPanel Orientation="Vertical" MaxWidth="300">
                        <TextBlock Text="各腿执行的最大滑价价位控制。低流动性和上限点数设置过小会产生单腿风险，雪橇会及时反馈异常。"
                                   TextWrapping="Wrap"/>

                        <TextBlock Text="以沪金为例，若现在价格为270元，最小变动价位为0.05元/克，如参数设置为1‰，则计算方式为(270*1‰)/0.05，结果约为5个Tick。" 
                                   TextWrapping="Wrap"
                                   Margin="0,6,0,0"/>
                    </StackPanel>
                </ToolTip>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 订单执行参数`提前收市暂停时间`的提示按钮样式 -->
    <Style TargetType="Button"
           x:Key="OrderExecuteParam_EarlySuspendedForMarketSecondsTipButton"
           BasedOn="{StaticResource CornerTipButton}">
        <Setter Property="Content" Value="?"/>
        <Setter Property="ToolTipService.ShowDuration" Value="60000"/>
        <Setter Property="ToolTip">
            <Setter.Value>
                <ToolTip Style="{StaticResource XQToolTipStyle}">
                    <StackPanel Orientation="Vertical" MaxWidth="300">
                        <TextBlock Text="不建议设置小于5秒的值，小于5秒可能导致盘尾订单无法撤回而增大瘸腿的概率。"
                                   TextWrapping="Wrap"/>
                    </StackPanel>
                </ToolTip>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 订阅状态图标视图数据模板 -->
    <DataTemplate DataType="{x:Type datamodel:IMarketSubscribeData}"
                  x:Key="SubscribeStateIconViewDT">
        <Ellipse Width="8" Height="8" ToolTip="{Binding SubscribeStateMsg}"
                 Fill="{DynamicResource SubscribeStateBrush3}"
                 x:Name="Icon"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding SubscribeState}" Value="{x:Static datamodel:MarketSubscribeState.Subscribed}">
                <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource SubscribeStateBrush1}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubscribeState}" Value="{x:Static datamodel:MarketSubscribeState.Subscribing}">
                <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource SubscribeStateBrush2}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubscribeState}" Value="{x:Static datamodel:MarketSubscribeState.Unsubscribing}">
                <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource SubscribeStateBrush2}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
</ResourceDictionary>