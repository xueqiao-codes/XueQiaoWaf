using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.logger;
using NativeModel.Trade;
using Prism.Events;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Waf.Applications;
using System.Windows;
using XueQiaoFoundation.BusinessResources.Models;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Interfaces.Applications;
using XueQiaoWaf.Trade.Interfaces.DataModels;
using XueQiaoWaf.Trade.Modules.Applications.Controllers.Events;
using XueQiaoWaf.Trade.Modules.Applications.DataModels;
using XueQiaoWaf.Trade.Modules.Applications.Helper;
using XueQiaoWaf.Trade.Modules.Applications.ServiceControllers;
using XueQiaoWaf.Trade.Modules.Applications.ServiceControllers.Events;
using XueQiaoWaf.Trade.Modules.Applications.ViewModels;

namespace XueQiaoWaf.Trade.Modules.Applications.Controllers
{
    /// <summary>
    /// 分组的订阅合约列表 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class GroupedComposeListController : IController
    {
        private readonly ComposeListViewModel listViewModel;
        private readonly ExportFactory<DisplayColumnsComposeListConfigDialogController> listColumnsConfigDialogFactory;
        private readonly ExportFactory<EditComposeNameDialogController> editComposeNameCtrlFactory;
        private readonly ExportFactory<EditComposeViewPrecisionNumberDialogCtrl> editPrecisionNumberDialogCtrlFactory;
        private readonly ExportFactory<AddComposeDialogController> addComposeDialogCtrlFactory;
        private readonly ISubscribeComposeController subscribeComposeController;
        private readonly IEventAggregator eventAggregator;
        private readonly IMessageWindowService messageWindowService;
        private readonly ILoginDataService loginDataService;
        private readonly ITradeModuleService tradeModuleService;
        private readonly IUserComposeViewQueryController userComposeViewQueryCtrl;

        private readonly DelegateCommand toConfigureListDisplayColumnsCmd;
        private readonly DelegateCommand toApplyListDefaultDisplayColumnsCmd;
        private readonly DelegateCommand clickItemTargetKeyRelatedColumnCmd;
        private readonly DelegateCommand clickItemPriceRelatedColumnCmd;
        
        private readonly DelegateCommand composesSelectionChangedCmd;
        private readonly DelegateCommand subSelComposesQuotationCmd;
        private readonly DelegateCommand unsubSelComposesQuotationCmd;
        private readonly DelegateCommand removeSelComposesCmd;
        private readonly DelegateCommand addSelComposesToGroupCmd;
        private readonly DelegateCommand removeSelComposesFromGroupCmd;
        private readonly DelegateCommand openPlaceOrderForSelComposesCmd;
        private readonly DelegateCommand renameComposeCmd;
        private readonly DelegateCommand editPrecisionNumberCmd;
        private readonly DelegateCommand createNewFromCopyCmd;

        private readonly SelectedComposesOperateCommands selectedComposesOptCommands;
        private IEnumerable<SubscribeComposeDataModel> selectedComposeItems;

        [ImportingConstructor]
        public GroupedComposeListController(ComposeListViewModel listViewModel,
            ExportFactory<DisplayColumnsComposeListConfigDialogController> listColumnsConfigDialogFactory,
            ExportFactory<EditComposeNameDialogController> editComposeNameCtrlFactory,
            ExportFactory<EditComposeViewPrecisionNumberDialogCtrl> editPrecisionNumberDialogCtrlFactory,
            ExportFactory<AddComposeDialogController> addComposeDialogCtrlFactory,
            ISubscribeComposeController subscribeComposeController,
            IEventAggregator eventAggregator,
            IMessageWindowService messageWindowService,
            ILoginDataService loginDataService,
            ITradeModuleService tradeModuleService,
            IUserComposeViewQueryController userComposeViewQueryCtrl)
        {
            this.listViewModel = listViewModel;
            this.listColumnsConfigDialogFactory = listColumnsConfigDialogFactory;
            this.editComposeNameCtrlFactory = editComposeNameCtrlFactory;
            this.editPrecisionNumberDialogCtrlFactory = editPrecisionNumberDialogCtrlFactory;
            this.addComposeDialogCtrlFactory = addComposeDialogCtrlFactory;
            this.subscribeComposeController = subscribeComposeController;
            this.eventAggregator = eventAggregator;
            this.messageWindowService = messageWindowService;
            this.loginDataService = loginDataService;
            this.tradeModuleService = tradeModuleService;
            this.userComposeViewQueryCtrl = userComposeViewQueryCtrl;

            toConfigureListDisplayColumnsCmd = new DelegateCommand(ToConfigureListDisplayColumns);
            toApplyListDefaultDisplayColumnsCmd = new DelegateCommand(ToApplyListDefaultDisplayColumns);
            clickItemTargetKeyRelatedColumnCmd = new DelegateCommand(ClickItemTargetKeyRelatedColumn);
            clickItemPriceRelatedColumnCmd = new DelegateCommand(ClickItemPriceRelatedColumn);

            subSelComposesQuotationCmd = new DelegateCommand(SubSelComposesQuotation, CanSubSelComposesQuotation);
            unsubSelComposesQuotationCmd = new DelegateCommand(UnsubSelComposesQuotation, CanUnsubSelComposesQuotation);
            removeSelComposesCmd = new DelegateCommand(RemoveSelComposes, CanRemoveSelComposes);
            addSelComposesToGroupCmd = new DelegateCommand(AddSelComposesToGroup, CanAddSelComposesToGroup);
            removeSelComposesFromGroupCmd = new DelegateCommand(RemoveSelComposesFromGroup, CanRemoveSelComposesFromGroup);
            openPlaceOrderForSelComposesCmd = new DelegateCommand(OpenPlaceOrderForSelComposes, CanOpenPlaceOrderForSelComposes);
            renameComposeCmd = new DelegateCommand(RenameCompose, CanRenameCompose);
            editPrecisionNumberCmd = new DelegateCommand(EditPrecisionNumber, CanEditPrecisionNumber);
            createNewFromCopyCmd = new DelegateCommand(CreateNewFromCopy, CanCreateNewFromCopy);

            composesSelectionChangedCmd = new DelegateCommand(ComposesSelectionChanged);
            selectedComposesOptCommands = new SelectedComposesOperateCommands
            {
                ItemsSelectionChangedCmd = composesSelectionChangedCmd,
                SubscribeQuotationCmd = subSelComposesQuotationCmd,
                UnsubscribeQuotationCmd = unsubSelComposesQuotationCmd,
                RemoveItemCmd = removeSelComposesCmd,
                AddToGroupCmd = addSelComposesToGroupCmd,
                RemoveFromGroupCmd = removeSelComposesFromGroupCmd,
                OpenPlaceOrderComponentCmd = openPlaceOrderForSelComposesCmd,
                RenameCmd = renameComposeCmd,
                EditPrecisionNumberCmd = editPrecisionNumberCmd,
                CreateNewFromCopyCmd = createNewFromCopyCmd,
            };
        }
        
        /// <summary>
        /// 组件信息
        /// </summary>
        public XueQiaoFoundation.BusinessResources.DataModels.TradeComponent Component { get; set; }

        /// <summary>
        /// 所在工作空间
        /// </summary>
        public XueQiaoFoundation.BusinessResources.DataModels.TabWorkspace ParentWorkspace { get; set; }

        /// <summary>
        /// 标的关联处理器
        /// </summary>
        public ITradeComponentXqTargetAssociateHandler XqTargetAssociateHandler { get; set; }

        /// <summary>
        /// 所在分组
        /// </summary>
        public SubscribeDataGroup GroupTab { get; set; }

        /// <summary>
        /// 列表内容视图。在 Initialize 后可获得
        /// </summary>
        public object ListContentView => listViewModel.View;

        public void Initialize()
        {
            if (Component == null) throw new ArgumentNullException("`Component` can't be null before initialize.");
            if (ParentWorkspace == null) throw new ArgumentNullException("`ParentWorkspace` must be setted before initialize.");
            if (GroupTab == null) throw new ArgumentNullException("GroupTab");
            if (Component.SubscribeDataContainerComponentDetail == null) throw new ArgumentNullException("Component.SubscribeDataContainerComponentDetail");
            if (Component.SubscribeDataContainerComponentDetail.ComposeListComponentDetail == null) throw new ArgumentNullException("Component.SubscribeDataContainerComponentDetail.ComposeListComponentDetail");

            listViewModel.GroupTab = this.GroupTab;
            listViewModel.AddibleCustomGroups.Clear();
            listViewModel.AddibleCustomGroups.AddRange(tradeModuleService.SubscribeDataGroupsDataRoot?.ComposeGroups?
                .Where(i => i.GroupType == SubscribeDataGroupType.Custom)
                .Select(i => new AddSubscribeDataToGroupDM(i, this.addSelComposesToGroupCmd))
                .ToArray());
            listViewModel.ToConfigureListDisplayColumnsCmd = toConfigureListDisplayColumnsCmd;
            listViewModel.ToApplyListDefaultDisplayColumnsCmd = toApplyListDefaultDisplayColumnsCmd;
            listViewModel.SelectedItemsOptCommands = selectedComposesOptCommands;
            listViewModel.ClickItemTargetKeyRelatedColumnCmd = clickItemTargetKeyRelatedColumnCmd;
            listViewModel.ClickItemPriceRelatedColumnCmd = clickItemPriceRelatedColumnCmd;

            // configure compose list initial display columns
            var initialColumns = Component.SubscribeDataContainerComponentDetail.ComposeListComponentDetail.ComposeListColumns;
            ApplyListDisplayColumnsIfNeed(initialColumns);

            listViewModel.PresentSubAccountId = ParentWorkspace.SubAccountId;

            eventAggregator.GetEvent<GlobalApplyComposeListDisplayColumnsEvent>().Subscribe(ReceiveGlobalApplyComposeListDisplayColumnsEvent);
            eventAggregator.GetEvent<ComposeListCustomGroupsChangedEvent>().Subscribe(ReceiveComposeListCustomGroupsChanged);
            PropertyChangedEventManager.AddHandler(ParentWorkspace, ParentWorkspacePropertyChanged, "");
        }

        public void Run()
        {

        }

        public void Shutdown()
        {
            eventAggregator.GetEvent<GlobalApplyComposeListDisplayColumnsEvent>().Unsubscribe(ReceiveGlobalApplyComposeListDisplayColumnsEvent);
            eventAggregator.GetEvent<ComposeListCustomGroupsChangedEvent>().Unsubscribe(ReceiveComposeListCustomGroupsChanged);
            PropertyChangedEventManager.RemoveHandler(ParentWorkspace, ParentWorkspacePropertyChanged, "");
        }

        private void ParentWorkspacePropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(TabWorkspace.SubAccountId))
            {
                listViewModel.PresentSubAccountId = ParentWorkspace.SubAccountId;
            }
        }

        private void ReceiveComposeListCustomGroupsChanged(SubscribeDataGroupsChangedEventArgs args)
        {
            var newCustomGroups = (args.NewGroups ?? new SubscribeDataGroup[] { })
                .Where(i => i.GroupType == SubscribeDataGroupType.Custom)
                .ToArray();

            listViewModel.AddibleCustomGroups.Clear();
            listViewModel.AddibleCustomGroups.AddRange(newCustomGroups
                    .Select(i => new AddSubscribeDataToGroupDM(i, this.addSelComposesToGroupCmd))
                    .ToArray());
        }

        private void ReceiveGlobalApplyComposeListDisplayColumnsEvent(IEnumerable<ListColumnInfo> msg)
        {
            ApplyListDisplayColumnsIfNeed(msg);
        }

        private void ApplyListDisplayColumnsIfNeed(IEnumerable<ListColumnInfo> displayColumnInfos)
        {
            var currentDisplayColumnInfos = this.listViewModel.ListDisplayColumnInfos ?? new ListColumnInfo[] { };
            if (displayColumnInfos?.SequenceEqual(currentDisplayColumnInfos) != true)
            {
                Component.SubscribeDataContainerComponentDetail.ComposeListComponentDetail.ComposeListColumns
                    = displayColumnInfos.ToArray();
                this.listViewModel.ResetListDisplayColumns(displayColumnInfos);
            }
        }


        private void AddPropertyChangedHandlerForComposeItems(IEnumerable<SubscribeComposeDataModel> composeItems)
        {
            if (composeItems == null) return;
            foreach (var o in composeItems)
            {
                PropertyChangedEventManager.RemoveHandler(o, ComposeItemPropChanged, "");
                PropertyChangedEventManager.AddHandler(o, ComposeItemPropChanged, "");
            }
        }

        private void RemovePropertyChangedHandlerForComposeItems(IEnumerable<SubscribeComposeDataModel> composeItems)
        {
            if (composeItems == null) return;
            foreach (var o in composeItems)
            {
                PropertyChangedEventManager.RemoveHandler(o, ComposeItemPropChanged, "");
            }
        }

        private void ComposeItemPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(SubscribeComposeDataModel.SubscribeState))
            {
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    subSelComposesQuotationCmd?.RaiseCanExecuteChanged();
                    unsubSelComposesQuotationCmd?.RaiseCanExecuteChanged();
                });
            }
            else if (e.PropertyName == nameof(SubscribeComposeDataModel.OnTradingSubAccountIds)
                || e.PropertyName == nameof(SubscribeComposeDataModel.ExistPositionSubAccountIds)
                || e.PropertyName == nameof(SubscribeComposeDataModel.CustomGroupKeys))
            {
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    addSelComposesToGroupCmd?.RaiseCanExecuteChanged();
                    removeSelComposesFromGroupCmd?.RaiseCanExecuteChanged();
                });
            }
        }

        private void ComposesSelectionChanged(object obj)
        {
            var oldSelComposeItems = this.selectedComposeItems;
            RemovePropertyChangedHandlerForComposeItems(oldSelComposeItems);

            var newSelComposes = (obj as IList)?.Cast<SubscribeComposeDataModel>().ToArray();

            this.selectedComposeItems = newSelComposes;
            AddPropertyChangedHandlerForComposeItems(newSelComposes);

            subSelComposesQuotationCmd?.RaiseCanExecuteChanged();
            unsubSelComposesQuotationCmd?.RaiseCanExecuteChanged();
            removeSelComposesCmd?.RaiseCanExecuteChanged();
            addSelComposesToGroupCmd?.RaiseCanExecuteChanged();
            removeSelComposesFromGroupCmd?.RaiseCanExecuteChanged();
            openPlaceOrderForSelComposesCmd?.RaiseCanExecuteChanged();
            renameComposeCmd?.RaiseCanExecuteChanged();
            editPrecisionNumberCmd?.RaiseCanExecuteChanged();
            createNewFromCopyCmd?.RaiseCanExecuteChanged();
        }

        private void ToConfigureListDisplayColumns()
        {
            var dialogCtrl = listColumnsConfigDialogFactory.CreateExport().Value;
            dialogCtrl.DialogOwner = UIHelper.GetWindowOfUIElement(listViewModel.View);
            dialogCtrl.OriginDisplayingColumnInfos = listViewModel.ListDisplayColumnInfos?
                .Select(i=>i.Clone() as ListColumnInfo).ToArray();
            dialogCtrl.Initialize();
            dialogCtrl.Run();
            dialogCtrl.Shutdown();
            if (dialogCtrl.ConfiguredDisplayColomunsResult != null)
            {
                ApplyListDisplayColumnsIfNeed(dialogCtrl.ConfiguredDisplayColomunsResult);
            }
        }

        private void ToApplyListDefaultDisplayColumns()
        {
            var defaultDisplayColumnCodes = TradeWorkspaceDataDisplayHelper.DefaultComposeListDisplayColumns.Select(i => i.GetHashCode()).ToArray();
            var currentDisplayColumnInfos = listViewModel.ListDisplayColumnInfos?.ToArray() ?? new ListColumnInfo[] { };

            var currentDisplayColumnCodes = currentDisplayColumnInfos.Select(i => i.ColumnCode).ToArray();
            if (currentDisplayColumnCodes.SequenceEqual(defaultDisplayColumnCodes)) return;

            var resetItems = new List<ListColumnInfo>();
            foreach (var columnCode in defaultDisplayColumnCodes)
            {
                var columnInfo = currentDisplayColumnInfos.FirstOrDefault(i => i.ColumnCode == columnCode);
                if (columnInfo == null)
                {
                    columnInfo = new ListColumnInfo { ColumnCode = columnCode };
                }
                resetItems.Add(columnInfo);
            }

            ApplyListDisplayColumnsIfNeed(resetItems);
        }

        private void ClickItemTargetKeyRelatedColumn(object obj)
        {
            var item = obj as SubscribeComposeDataModel;
            if (item == null || item.IsXqTargetExpired == true) return;

            var associateArgs = new TradeComponentXqTargetAssociateArgs(this.ParentWorkspace, this.Component, 
                ClientXQOrderTargetType.COMPOSE_TARGET, $"{item.ComposeId}");
            XqTargetAssociateHandler?.HandleXqTargetAssociate(UIHelper.GetWindowOfUIElement(listViewModel.View),
                SubscribeItemAppropriateShowDialogLocation(item), associateArgs);
        }

        private void ClickItemPriceRelatedColumn(object obj)
        {
            var args = obj as object[];
            if (args?.Count() != 2) return;

            var item = args[0] as SubscribeComposeDataModel;
            var price = args[1] as double?;

            if (item == null || item.IsXqTargetExpired == true) return;

            var associateCustomInfos = new Dictionary<string, object>();
            if (price != null)
                associateCustomInfos.Add(TradeComponentAssociateConstants.ComponentAssociateArg_Price, price.Value);

            // 联动
            var associateArgs = new TradeComponentXqTargetAssociateArgs(this.ParentWorkspace, this.Component, 
                ClientXQOrderTargetType.COMPOSE_TARGET, $"{item.ComposeId}", associateCustomInfos);
            XqTargetAssociateHandler?.HandleXqTargetAssociate(UIHelper.GetWindowOfUIElement(listViewModel.View),
                            SubscribeItemAppropriateShowDialogLocation(item), associateArgs);
        }

        private void SubSelComposesQuotation()
        {
            var selectedComposes = this.selectedComposeItems;
            if (selectedComposes?.Any() != true) return;

            var waitSubItems = selectedComposes.Where(i => i.SubscribeState == MarketSubscribeState.Unkown || i.SubscribeState == MarketSubscribeState.Unsubscribed).ToArray();
            if (!waitSubItems.Any()) return;

            Task.Run(() =>
            {
                var s_tasks = new List<Task<CombQuotationSubscribeInteractInfo>>();
                foreach (var subscribeItem in waitSubItems)
                {
                    s_tasks.Add(subscribeComposeController.SubscribeCombQuotationAsync(subscribeItem.ComposeId));
                }
                Task.WaitAll(s_tasks.ToArray());

                // 如果存在订阅上限限制错误，则提示
                var results = s_tasks.Select(i => i.Result).ToArray();
                var tooManySubscribeErrorCount = results.Count(i => i.HasRequestApi && i.ApiResponse?.CustomParsedExceptionResult?.BusinessErrorCode == ErrorCodeConstants.ERROR_COMPOSE_VIEW_SUBSCRIBE_TOO_MANY);
                if (tooManySubscribeErrorCount > 0)
                {
                    var errMsg = "组合行情订阅失败！\n组合行情订阅数到达上限，请退订部分组合行情";
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        var owner = UIHelper.GetWindowOfUIElement(this.listViewModel.View);
                        if (owner != null)
                        {
                            messageWindowService.ShowMessageDialog(owner, null, null, null, errMsg);
                        }
                    });
                }
            });
        }

        private bool CanSubSelComposesQuotation()
        {
            return this.selectedComposeItems?
                .Any(i => i.SubscribeState == MarketSubscribeState.Unkown || i.SubscribeState == MarketSubscribeState.Unsubscribed)
                ?? false;
        }

        private void UnsubSelComposesQuotation()
        {
            var selectedComposes = this.selectedComposeItems;
            if (selectedComposes?.Any() != true) return;

            var waitUnsubItems = selectedComposes.Where(i => i.SubscribeState == MarketSubscribeState.Unkown || i.SubscribeState == MarketSubscribeState.Subscribed).ToArray();
            foreach (var subscribeItem in waitUnsubItems)
            {
                subscribeComposeController.UnsubscribeCombQuotationAsync(subscribeItem.ComposeId);
            }
        }

        private bool CanUnsubSelComposesQuotation()
        {
            return this.selectedComposeItems?
                .Any(i => i.SubscribeState == MarketSubscribeState.Unkown || i.SubscribeState == MarketSubscribeState.Subscribed)
                ?? false;
        }

        private void RemoveSelComposes(object obj)
        {
            var groupTab = obj as SubscribeDataGroup;
            if (SubscribeDataGroupType.All != groupTab?.GroupType && SubscribeDataGroupType.IsExpired != groupTab?.GroupType) return;

            var selectedComposes = this.selectedComposeItems;
            if (selectedComposes?.Count() != 1) return;

            var rmItem = selectedComposes.FirstOrDefault();
            if (rmItem == null) return;

            var dialogOwner = UIHelper.GetWindowOfUIElement(listViewModel.View);
            var dialogShowLocation = SubscribeItemAppropriateShowDialogLocation(rmItem);

            if (messageWindowService.ShowQuestionDialog(dialogOwner, dialogShowLocation, null, null, "确认要删除选中的项目吗？", false, "删除", "取消") != true)
                return;

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            var UIThreadContextTaskSchedular = TaskScheduler.FromCurrentSynchronizationContext();
            var reqTask = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.delComposeViewAsync(landingInfo, rmItem.ComposeId, CancellationToken.None);
            reqTask.ContinueWith(task =>
            {
                var resp = task.Result;
                if (resp != null
                    && resp?.SourceException == null
                    && resp?.HasTransportException == false)
                {
                    // FIXME: 改成删除该组合的全部订阅???
                    //subscribeComposeController.RemoveSubscribeCompose(rmItem.ComposeId, rmItem.SubscribeGroupKey);
                    subscribeComposeController.RemoveSubscribeCompose(rmItem.ComposeId);
                }
                else
                {
                    var msg = resp?.CustomParsedExceptionResult?.BusinessErrorMessage ?? "删除组合失败";
                    messageWindowService.ShowMessageDialog(dialogOwner, dialogShowLocation, null, null, msg);
                }
            }, UIThreadContextTaskSchedular);
        }

        private bool CanRemoveSelComposes(object obj)
        {
            var groupTab = obj as SubscribeDataGroup;
            if (SubscribeDataGroupType.All != groupTab?.GroupType && SubscribeDataGroupType.IsExpired != groupTab?.GroupType) return false;
            if (this.selectedComposeItems?.Count() != 1) return false;
            return true;
        }

        private void AddSelComposesToGroup(object obj)
        {
            var groupTab = obj as SubscribeDataGroup;
            if (SubscribeDataGroupType.Custom != groupTab?.GroupType) return;
            var selectedComposes = this.selectedComposeItems;
            if (selectedComposes?.Any() != true) return;

            foreach (var subscribeItem in selectedComposes)
            {
                var newCustomGroupKeys = (subscribeItem.CustomGroupKeys ?? new string[] { }).Union(new string[] { groupTab.GroupKey });
                subscribeComposeController.UpdateSubscribeComposesWithSameId(subscribeItem.ComposeId,
                    _composeItem => new SubscribeComposeUpdateTemplate { CustomGroupKeys = new Tuple<IEnumerable<string>>(newCustomGroupKeys) });
            }
        }

        private bool CanAddSelComposesToGroup(object obj)
        {
            var groupTab = obj as SubscribeDataGroup;
            if (SubscribeDataGroupType.Custom != groupTab?.GroupType) return false;
            if (this.selectedComposeItems?.Any() != true) return false;
            return true;
        }

        private void RemoveSelComposesFromGroup(object obj)
        {
            var groupTab = obj as SubscribeDataGroup;
            if (SubscribeDataGroupType.Custom != groupTab?.GroupType) return;
            var selectedComposes = this.selectedComposeItems;
            if (selectedComposes?.Any() != true) return;

            foreach (var subscribeItem in selectedComposes)
            {
                var newCustomGroupKeys = (subscribeItem.CustomGroupKeys ?? new string[] { }).Except(new string[] { groupTab.GroupKey });
                subscribeComposeController.UpdateSubscribeComposesWithSameId(subscribeItem.ComposeId,
                    _composeItem => new SubscribeComposeUpdateTemplate { CustomGroupKeys = new Tuple<IEnumerable<string>>(newCustomGroupKeys) });
            }
        }

        private bool CanRemoveSelComposesFromGroup(object obj)
        {
            var groupTab = obj as SubscribeDataGroup;
            if (SubscribeDataGroupType.Custom != groupTab?.GroupType) return false;
            if (this.selectedComposeItems?.Any() != true) return false;
            return true;
        }

        private void OpenPlaceOrderForSelComposes()
        {
            var selItems = this.selectedComposeItems;
            var tarItem = selItems?.FirstOrDefault(i => i.IsXqTargetExpired != true);
            if (selItems?.Any() != true) return;

            if (tarItem != null)
            {
                var associateArgs = new TradeComponentXqTargetAssociateArgs(this.ParentWorkspace, this.Component,
                    ClientXQOrderTargetType.COMPOSE_TARGET, $"{tarItem.ComposeId}");
                XqTargetAssociateHandler?.NewXqTargetPlaceOrderComponent(UIHelper.GetWindowOfUIElement(listViewModel.View),
                    SubscribeItemAppropriateShowDialogLocation(tarItem), associateArgs);
            }
        }

        private bool CanOpenPlaceOrderForSelComposes()
        {
            var selItems = this.selectedComposeItems;
            if (selItems?.Count(i => i.IsXqTargetExpired != true) == 1) return true;
            return false;
        }
        
        private void RenameCompose()
        {
            var selectedComposes = this.selectedComposeItems;
            if (selectedComposes?.Count() != 1) return;
            
            var selItem = selectedComposes.FirstOrDefault();
            if (selItem == null) return;
            
            var dialogOwner = UIHelper.GetWindowOfUIElement(listViewModel.View);
            var dialogShowLocation = SubscribeItemAppropriateShowDialogLocation(selItem);

            var editNameCtrl = editComposeNameCtrlFactory.CreateExport().Value;
            editNameCtrl.DialogOwner = dialogOwner;
            editNameCtrl.DialogShowLocationRelativeToScreen = dialogShowLocation;
            editNameCtrl.EditComposeViewContainer = selItem.UserComposeViewContainer;

            editNameCtrl.Initialize();
            editNameCtrl.Run();
            editNameCtrl.Shutdown();

            var newAliasName = editNameCtrl.UpdatedAliasName;
            if (newAliasName != null)
            {
                RefreshUserComposeViewAndPublishEvent(selItem.ComposeId);
            }
        }
        
        private bool CanRenameCompose()
        {
            if (this.selectedComposeItems?.Count() != 1) return false;
            return true;
        }

        private void EditPrecisionNumber()
        {
            var selectedComposes = this.selectedComposeItems;
            if (selectedComposes?.Count() != 1) return;

            var selItem = selectedComposes.FirstOrDefault();
            if (selItem == null) return;

            var dialogOwner = UIHelper.GetWindowOfUIElement(listViewModel.View);
            var dialogShowLocation = SubscribeItemAppropriateShowDialogLocation(selItem);

            var editNameCtrl = editPrecisionNumberDialogCtrlFactory.CreateExport().Value;
            editNameCtrl.DialogOwner = dialogOwner;
            editNameCtrl.DialogShowLocationRelativeToScreen = dialogShowLocation;
            editNameCtrl.EditComposeViewContainer = selItem.UserComposeViewContainer;

            editNameCtrl.Initialize();
            editNameCtrl.Run();
            editNameCtrl.Shutdown();

            var newPN = editNameCtrl.UpdatedPrecisionNumber;
            if (newPN != null)
            {
                RefreshUserComposeViewAndPublishEvent(selItem.ComposeId);
            }
        }

        private bool CanEditPrecisionNumber()
        {
            if (this.selectedComposeItems?.Count() != 1) return false;
            return true;
        }

        private void CreateNewFromCopy()
        {
            var selectedComposes = this.selectedComposeItems;
            if (selectedComposes?.Count() != 1) return;

            var selItem = selectedComposes.FirstOrDefault();
            if (selItem == null) return;

            var dialogOwner = UIHelper.GetWindowOfUIElement(listViewModel.View);
            var dialogShowLocation = SubscribeItemAppropriateShowDialogLocation(selItem);

            var dialogCtrl = addComposeDialogCtrlFactory.CreateExport().Value;
            dialogCtrl.DialogTitle = "组合换月";
            dialogCtrl.DialogOwner = dialogOwner;
            dialogCtrl.DialogShowLocationRelativeToScreen = dialogShowLocation;
            dialogCtrl.NewFromCopyComposeId = selItem.ComposeId;

            dialogCtrl.Initialize();
            dialogCtrl.Run();
            dialogCtrl.Shutdown();

            var createdComposeId = dialogCtrl.CreatedComposeId;
            if (createdComposeId != null)
            {
                subscribeComposeController.AddOrUpdateSubscribeCompose(createdComposeId.Value,
                    SubscribeComposeDataModel.SharedListComposeGroupKey,
                    e =>
                    {
                        if (e) return null;
                        return new SubscribeComposeUpdateTemplate
                        {
                            SubscribeState = new Tuple<MarketSubscribeState>(MarketSubscribeState.Unkown)
                        };
                    });

                // 立即订阅
                subscribeComposeController.SubscribeCombQuotationAsync(createdComposeId.Value)
                    .ContinueWith(t =>
                    {
                        var result = t.Result;
                        if (result.HasRequestApi && result.ApiResponse?.CustomParsedExceptionResult?.BusinessErrorCode == ErrorCodeConstants.ERROR_COMPOSE_VIEW_SUBSCRIBE_TOO_MANY)
                        {
                            var errMsg = "组合行情订阅失败！\n组合行情订阅数到达上限，请退订部分组合行情";
                            DispatcherHelper.CheckBeginInvokeOnUI(() =>
                            {
                                var owner = UIHelper.GetWindowOfUIElement(this.listViewModel.View);
                                if (owner != null)
                                {
                                    messageWindowService.ShowMessageDialog(owner, null, null, null, errMsg);
                                }
                            });
                        }
                    });

                if (dialogCtrl.IsComposeViewCreatedByReference == true)
                {
                    // 查询组合视图信息，然后发布更新信息
                    RefreshUserComposeViewAndPublishEvent(createdComposeId.Value);
                }
            }
        }

        private bool CanCreateNewFromCopy()
        {
            if (this.selectedComposeItems?.Count() != 1) return false;
            return true;
        }

        private Point? SubscribeItemAppropriateShowDialogLocation(SubscribeComposeDataModel subscribeItem)
        {
            var itemUIElement = listViewModel.SubscribeItemElement(subscribeItem);
            if (itemUIElement == null) return null;
            var itemUIElementSize = itemUIElement.RenderSize;
            var screenPoint = itemUIElement.PointToScreen(new Point(itemUIElementSize.Width / 4, itemUIElementSize.Height / 4));
            var location = UIHelper.TransformToWpfPoint(screenPoint, itemUIElement);
            return location;
        }
        
        private void RefreshUserComposeViewAndPublishEvent(long composeId)
        {
            Task.Run(() =>
            {
                var _resp = userComposeViewQueryCtrl.QueryCurrentComposeView(composeId);
                var _userComposeView = _resp?.CorrectResult?.UserComposeView;
                if (_userComposeView == null)
                {
                    AppLog.Error($"RefreshUserComposeViewAndPublishEvent(composeId:{composeId}). Failed to query user compose view.");
                    return;
                }
                if (_userComposeView.ComposeGraphId == composeId)
                {
                    // 发布组合视图已更新事件
                    eventAggregator.GetEvent<UserComposeViewUpdatedEvent>().Publish(_userComposeView);
                }
            });
        }
    }
}
