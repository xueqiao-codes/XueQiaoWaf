using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Modules.Applications.ViewModels;
using IDLAutoGenerated.Util;
using Thrift.Collections;
using System.Threading;
using xueqiao.trade.hosting.arbitrage.thriftapi;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoWaf.Trade.Modules.Applications.Helper;
using System.Windows;

using XueQiaoFoundation.BusinessResources.DataModels;
using xueqiao.trade.hosting.proxy;
using business_foundation_lib.xq_thriftlib_config;

namespace XueQiaoWaf.Trade.Modules.Applications.Controllers
{
    /// <summary>
    /// 相关订单显示 dialog controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class RelatedOrderDialogCtrl : IController
    {
        private readonly IMessageWindowService messageWindowService;
        private readonly IEventAggregator eventAggregator;
        private readonly ILoginDataService loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly IUserSubAccountRelatedItemQueryController subAccountRelatedItemQueryController;
        private readonly IUserSubAccountRelatedItemCacheController subAccountRelatedItemCacheController;
        private readonly IHostingUserQueryController hostingUserQueryController;
        private readonly IHostingUserCacheController hostingUserCacheController;
        private readonly IComposeGraphCacheController composeGraphCacheController;
        private readonly IComposeGraphQueryController composeGraphQueryController;
        private readonly IUserComposeViewCacheController userComposeViewCacheController;
        private readonly IUserComposeViewQueryController userComposeViewQueryController;
        private readonly IContractItemTreeQueryController contractItemTreeQueryController;
        private readonly ICommodityCacheController commodityCacheController;
        private readonly RelatedOrderVM contentVM;

        private IMessageWindow dialog;

        [ImportingConstructor]
        public RelatedOrderDialogCtrl(
            IMessageWindowService messageWindowService,
            IEventAggregator eventAggregator,
            ILoginDataService loginDataService,
            Lazy<ILoginUserManageService> loginUserManageService,
            IUserSubAccountRelatedItemQueryController subAccountRelatedItemQueryController,
            IUserSubAccountRelatedItemCacheController subAccountRelatedItemCacheController,
            IHostingUserQueryController hostingUserQueryController,
            IHostingUserCacheController hostingUserCacheController,
            IComposeGraphCacheController composeGraphCacheController,
            IComposeGraphQueryController composeGraphQueryController,
            IUserComposeViewCacheController userComposeViewCacheController,
            IUserComposeViewQueryController userComposeViewQueryController,
            IContractItemTreeQueryController contractItemTreeQueryController,
            ICommodityCacheController commodityCacheController,
            RelatedOrderVM contentVM)
        {
            this.messageWindowService = messageWindowService;
            this.eventAggregator = eventAggregator;
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.subAccountRelatedItemQueryController = subAccountRelatedItemQueryController;
            this.subAccountRelatedItemCacheController = subAccountRelatedItemCacheController;
            this.hostingUserQueryController = hostingUserQueryController;
            this.hostingUserCacheController = hostingUserCacheController;
            this.composeGraphCacheController = composeGraphCacheController;
            this.composeGraphQueryController = composeGraphQueryController;
            this.userComposeViewCacheController = userComposeViewCacheController;
            this.userComposeViewQueryController = userComposeViewQueryController;
            this.contractItemTreeQueryController = contractItemTreeQueryController;
            this.commodityCacheController = commodityCacheController;
            this.contentVM = contentVM;

            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
        }

        public object DialogOwner { get; set; }

        /// <summary>
        /// 当前订单 id
        /// </summary>
        public OrderItemDataModel CurrentOrder { get; set; }
        
        public void Initialize()
        {
            if (CurrentOrder == null) throw new ArgumentNullException("CurrentOrder");

            contentVM.CurrentOrder = CurrentOrder;
        }

        public void Run()
        {
            LoadRelatedOrders();

            dialog = messageWindowService.CreateContentCustomWindow(DialogOwner, null, new Size(800, 600), true, true,
                true, "相关订单", contentVM.View);
            dialog.ShowDialog();
        }

        public void Shutdown()
        {
            if (dialog != null)
            {
                dialog.Close();
                dialog = null;
            }

            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            Shutdown();
        }

        private void LoadRelatedOrders()
        {
            var currentOrderId = CurrentOrder.OrderId;
            var parentOrderId = CurrentOrder.SourceOrderId;
            var childOrderId = CurrentOrder.ActionOrderId;
            var queryOrderIds = new THashSet<string>();
            if (!string.IsNullOrEmpty(parentOrderId)) queryOrderIds.Add(parentOrderId);
            if (!string.IsNullOrEmpty(childOrderId)) queryOrderIds.Add(childOrderId);

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getXQOrderWithTradeListsAsync(landingInfo,
                queryOrderIds, CancellationToken.None)
            .ContinueWith(t => 
            {
                var resp = t.Result;
                if (resp == null) return;
                DispatcherHelper.CheckBeginInvokeOnUI(() => 
                {
                    if (!string.IsNullOrEmpty(parentOrderId))
                    {
                        HostingXQOrderWithTradeList tarOrderDetail = null;
                        HostingXQOrder tarOrder = null;
                        if (true == resp.CorrectResult?.TryGetValue(parentOrderId, out tarOrderDetail))
                        {
                            tarOrder = tarOrderDetail.Order;
                        }
                        if (tarOrder != null)
                            contentVM.ParentOrder = CreateOrderDMItem(tarOrder);
                        else
                            contentVM.ParentOrder = null;
                    }

                    if (!string.IsNullOrEmpty(childOrderId))
                    {
                        HostingXQOrderWithTradeList tarOrderDetail = null;
                        HostingXQOrder tarOrder = null;
                        if (true == resp.CorrectResult?.TryGetValue(childOrderId, out tarOrderDetail))
                        {
                            tarOrder = tarOrderDetail.Order;
                        }
                        if (tarOrder != null)
                            contentVM.ChildOrder = CreateOrderDMItem(tarOrder);
                        else
                            contentVM.ChildOrder = null;
                    }
                });
            });
        }

        private OrderItemDataModel CreateOrderDMItem(HostingXQOrder hostingOrder)
        {
            var orderDMItem = OrderItemDataModelCreateHelper.CreateOrderItem(hostingOrder,
                        subAccountRelatedItemQueryController, subAccountRelatedItemCacheController,
                        hostingUserQueryController, hostingUserCacheController,
                        composeGraphCacheController, composeGraphQueryController,
                        userComposeViewCacheController, userComposeViewQueryController,
                        contractItemTreeQueryController, commodityCacheController);
            return orderDMItem;
        }
    } 
}
