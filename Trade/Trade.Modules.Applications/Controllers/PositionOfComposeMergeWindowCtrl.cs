using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation;
using lib.xqclient_base.thriftapi_mediation.Interface;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Waf.Applications;
using xueqiao.trade.hosting.arbitrage.thriftapi;
using xueqiao.trade.hosting.position.statis;
using XueQiaoFoundation.BusinessResources.DataModels;
using XueQiaoFoundation.BusinessResources.Helpers;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Modules.Applications.DataModels;
using XueQiaoWaf.Trade.Modules.Applications.Helper;
using XueQiaoWaf.Trade.Modules.Applications.ViewModels;
using NativeModel.Trade;
using System.Windows;
using XueQiaoFoundation.BusinessResources.Models;
using XueQiaoFoundation.Interfaces.Helper;
using lib.xqclient_base.logger;
using business_foundation_lib.xq_thriftlib_config;
using business_foundation_lib.helper;

namespace XueQiaoWaf.Trade.Modules.Applications.Controllers
{
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class PositionOfComposeMergeWindowCtrl : IController
    {
        private readonly PositionOfComposeMergeVM contentVM;
        private readonly IMessageWindowService messageWindowService;
        private readonly ILoginDataService loginDataService;
        private readonly ExportFactory<ComposeSearchPopupController> composeSearchPopupCtrlFactory;
        private readonly ExportFactory<ChooseLegPositions2MergeDialogCtrl> chooseLegPositions2MergeDialogCtrlFactory;
        private readonly IComposeGraphCacheController composeGraphCacheController;
        private readonly IComposeGraphQueryController composeGraphQueryController;
        private readonly IUserComposeViewCacheController userComposeViewCacheController;
        private readonly IUserComposeViewQueryController userComposeViewQueryController;
        private readonly IContractItemTreeQueryController contractItemTreeQueryController;
        
        private readonly DelegateCommand triggerSelectComposeCmd;
        private readonly DelegateCommand toChooseLegPositionsCmd;
        private readonly DelegateCommand mergePriceInputItemAutoCalculateCheckedCmd;
        private readonly DelegateCommand toMergeCmd;
        
        private IMessageWindow window;
        private long? currentSelectComposeId;
        private TargetCompose_ComposeDetail currentComposeDetailContainer;

        private CancellationTokenSource legPositionsRefreshTaskCts;
        private bool isReqMerging;

        private Dictionary<int, IEnumerable<StatPositionItem>> queriedLegPositions;
        private readonly List<CPMergeLegInfoSynchronizer> mergeLegInfoSynchronizers = new List<CPMergeLegInfoSynchronizer>();

        [ImportingConstructor]
        public PositionOfComposeMergeWindowCtrl(
            PositionOfComposeMergeVM contentVM,
            IMessageWindowService messageWindowService,
            ILoginDataService loginDataService,
            ExportFactory<ComposeSearchPopupController> composeSearchPopupCtrlFactory,
            ExportFactory<ChooseLegPositions2MergeDialogCtrl> chooseLegPositions2MergeDialogCtrlFactory,
            IComposeGraphCacheController composeGraphCacheController,
            IComposeGraphQueryController composeGraphQueryController,
            IUserComposeViewCacheController userComposeViewCacheController,
            IUserComposeViewQueryController userComposeViewQueryController,
            IContractItemTreeQueryController contractItemTreeQueryController)
        {
            this.contentVM = contentVM;
            this.messageWindowService = messageWindowService;
            this.loginDataService = loginDataService;
            this.composeSearchPopupCtrlFactory = composeSearchPopupCtrlFactory;
            this.chooseLegPositions2MergeDialogCtrlFactory = chooseLegPositions2MergeDialogCtrlFactory;
            this.composeGraphCacheController = composeGraphCacheController;
            this.composeGraphQueryController = composeGraphQueryController;
            this.userComposeViewCacheController = userComposeViewCacheController;
            this.userComposeViewQueryController = userComposeViewQueryController;
            this.contractItemTreeQueryController = contractItemTreeQueryController;

            triggerSelectComposeCmd = new DelegateCommand(TriggerSelectCompose, CanTriggerSelectCompose);
            toChooseLegPositionsCmd = new DelegateCommand(ToChooseLegPositions, CanChooseLegPositions);
            mergePriceInputItemAutoCalculateCheckedCmd = new DelegateCommand(MergePriceInputItemAutoCalculateChecked, CanMergePriceInputItemAutoCalculateChecked);
            toMergeCmd = new DelegateCommand(ToMerge2ComposePosition, CanMerge2ComposePosition);
        }

        public object WindowOwner { get; set; }

        public long SubAccountId { get; set; }

        public void Initialize()
        {
            contentVM.TriggerSelectComposeCmd = triggerSelectComposeCmd;
            contentVM.ToChooseLegPositionsCmd = toChooseLegPositionsCmd;
            contentVM.MergePriceInputItemAutoCalculateCheckedCmd = mergePriceInputItemAutoCalculateCheckedCmd;
            contentVM.ToMergeCmd = toMergeCmd;
            contentVM.MergeTargetDirection = ClientTradeDirection.BUY;
            contentVM.NeedHideMergeOptAreaView = true;
            PropertyChangedEventManager.AddHandler(contentVM, ContentVMPropChanged, "");
        }

        public void Run()
        {
            this.window = messageWindowService.CreateContentCustomWindow(WindowOwner, null, new Size(700, 600), true, true, true,
                "合约持仓合并成组合", contentVM.View);
            this.window.Closed += Window_Closed;
            this.window.Show(false);
        }
        
        public void Shutdown()
        {
            InternalCloseWindow();
            CancelLegPositionsRefreshTask();
            PropertyChangedEventManager.RemoveHandler(contentVM, ContentVMPropChanged, "");
            this.mergeLegInfoSynchronizers.Clear();
            this.contentVM.MergeLegInfoItems.Clear();
            this.contentVM.MergePriceInputItems.Clear();
            this.contentVM.AutoCalculateMergePriceInputItem = null;
        }

        private void ActivateOwnerWindow()
        {
            // This is a workaround. Without this line the main window might hide behind
            // another running application.
            var ownerWin = (WindowOwner as Window) ?? Application.Current.MainWindow;
            ownerWin?.Activate();
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            this.window.Closing -= Window_Closed;

            this.window = null;

            ActivateOwnerWindow();

            Shutdown();
        }
        
        private void ContentVMPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(PositionOfComposeMergeVM.MergeTargetDirection))
            {
                ApplyMergeTargetDirectionChanged();
                return;
            }
            if (e.PropertyName == nameof(PositionOfComposeMergeVM.MergeTargetQuantity))
            {
                ApplyMergeTargetQuantityChanged();
                return;
            }
            if (e.PropertyName == nameof(PositionOfComposeMergeVM.AutoCalculateMergePriceInputItem))
            {
                InvalidateAutoCalculateMergePriceInputItemPrice();
                return;
            }
        }

        private void ApplyMergeTargetDirectionChanged()
        {
            InvalidateMergeData();
        }

        private void ApplyMergeTargetQuantityChanged()
        {
            var mergeTarQuantity = this.contentVM.MergeTargetQuantity;
            foreach (var legMergeInfoItem in contentVM.MergeLegInfoItems)
            {
                legMergeInfoItem.DemandVolume = mergeTarQuantity * legMergeInfoItem.LegDetail.BasicLeg.Quantity;
            }
            toChooseLegPositionsCmd?.RaiseCanExecuteChanged();
        }

        private bool CanTriggerSelectCompose(object triggerElement)
        {
            return !isReqMerging;
        }

        private void TriggerSelectCompose(object triggerElement)
        {
            var popCtrl = composeSearchPopupCtrlFactory.CreateExport().Value;
            popCtrl.PopupPalcementTarget = triggerElement;
            popCtrl.PopupCloseHandler = (_ctrl, _selectComposeId) =>
            {
                _ctrl.Shutdown();
                if (_selectComposeId != null && this.currentSelectComposeId != _selectComposeId)
                {
                    this.currentSelectComposeId = _selectComposeId;
                    this.currentComposeDetailContainer = new TargetCompose_ComposeDetail(_selectComposeId.Value);

                    contentVM.SelectedComposeDetailContainer = this.currentComposeDetailContainer;
                    contentVM.SelectedUserComposeViewContainer = new UserComposeViewContainer(_selectComposeId.Value);

                    RefreshCurrentComposeDetail();
                    XueQiaoFoundationHelper.SetupUserComposeView(contentVM.SelectedUserComposeViewContainer,
                        userComposeViewCacheController, userComposeViewQueryController, false, true);
                }
            };
            popCtrl.Initialize();
            popCtrl.Run();
        }

        private bool CanChooseLegPositions(object obj)
        {
            return !isReqMerging && this.contentVM.MergeTargetQuantity > 0;
        }

        private void ToChooseLegPositions(object obj)
        {
            var mergeLegInfoItem = obj as CPMergeLegInfoItem;
            if (mergeLegInfoItem == null) return;
            var mergeLegInfoSynchronizer = mergeLegInfoSynchronizers.FirstOrDefault(i => i.MergeLegInfoItem == mergeLegInfoItem);
            if (mergeLegInfoSynchronizer == null) return;

            var ctrl = chooseLegPositions2MergeDialogCtrlFactory.CreateExport().Value;
            ctrl.DialogOwner = UIHelper.GetWindowOfUIElement(contentVM.View);
            ctrl.MergeLegInfoSynchronizer = mergeLegInfoSynchronizer;
            ctrl.Initialize();
            ctrl.Run();
            ctrl.Shutdown();
        }

        private bool CanMergePriceInputItemAutoCalculateChecked(object obj)
        {
            return !isReqMerging;
        }

        private void MergePriceInputItemAutoCalculateChecked(object obj)
        {
            var item = obj as CPMergePriceInputItem;
            if (item == null) return;
            contentVM.AutoCalculateMergePriceInputItem = item;
        }

        private bool CanMerge2ComposePosition()
        {
            if (isReqMerging) return false;
            ValidateCanMerge2ComposePositionAndGenerateMergeReqInfo(out string validateErr,
                out StatMergeToComposeReq mergeReqInfo);
            this.contentVM.MergeValidateErrorText = validateErr;
            return string.IsNullOrEmpty(validateErr);
        }

        private void ToMerge2ComposePosition()
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            ValidateCanMerge2ComposePositionAndGenerateMergeReqInfo(out string validateErr,
                out StatMergeToComposeReq mergeReqInfo);
            if (!string.IsNullOrEmpty(validateErr))
            {
                var msg = $"合并验证不通过！\n{validateErr}";
                messageWindowService.ShowMessageDialog(UIHelper.GetWindowOfUIElement(contentVM.View), null, null, null, msg);
                return;
            }

            UpdateIsReqMerging(true);
            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                .mergeToComposeAsync(landingInfo, mergeReqInfo, CancellationToken.None)
                .ContinueWith(t => 
                {
                    var resp = t.Result;
                    DispatcherHelper.CheckBeginInvokeOnUI(() => 
                    {
                        UpdateIsReqMerging(false);
                        var owner = UIHelper.GetWindowOfUIElement(this.contentVM.View);
                        if (owner == null) return;
                        if (resp == null || resp?.SourceException != null)
                        {
                            var err = FoundationHelper.FormatResponseDisplayErrorMsg(resp, "合并发生出错！\n");
                            messageWindowService.ShowMessageDialog(owner, null, null, null, err);
                            return;
                        }

                        messageWindowService.ShowMessageDialog(owner, null, null, null, "合并成功！");
                        RefreshLegUnarchivedPositions(this.currentComposeDetailContainer?.BasicComposeGraph);
                    });
                });

        }

        private void ValidateCanMerge2ComposePositionAndGenerateMergeReqInfo(
            out string __validateErr, 
            out StatMergeToComposeReq __mergeReqInfo)
        {
            __validateErr = null;
            __mergeReqInfo = null;

            var composeGraphId = this.currentSelectComposeId;
            if (composeGraphId == null)
            {
                __validateErr = "未选择组合";
                return;
            }

            var priceDiffInputItem = this.contentVM.MergePriceInputItems.FirstOrDefault(i => i.ItemType == CPMergePriceInputItemType.PriceDiffInputItem);
            if (priceDiffInputItem == null)
            {
                __validateErr = "不存在价差项";
                return;
            }

            var notJoinTradeLegPriceInputItems = this.contentVM.MergePriceInputItems.Where(i => i.ItemType == CPMergePriceInputItemType.LegPriceInputItem).ToArray();

            var mergeVolume = this.contentVM.MergeTargetQuantity;
            var mergeDir = this.contentVM.MergeTargetDirection;

            if (mergeVolume <= 0)
            {
                __validateErr = "合并数量需要 > 0";
                return;
            }

            var joinTradeMergeLegInfoItems = this.contentVM.MergeLegInfoItems.Where(i => i.LegDetail?.BasicLeg?.Quantity > 0).ToArray();
            if (joinTradeMergeLegInfoItems.Any(i => i.CurrentVolume != i.DemandVolume))
            {
                __validateErr = "未选择足够数量的持仓进行合并";
                return;
            }

            // 填充各腿的合并数据列表
            var legMergeDataList = new List<MergeComposeLegData>();
            // 填充参与交易腿的持仓合并信息
            foreach (var joinTradeMergeLegInfoItem in joinTradeMergeLegInfoItems)
            {
                var synchronizer = this.mergeLegInfoSynchronizers.FirstOrDefault(i => i.MergeLegInfoItem == joinTradeMergeLegInfoItem);
                if (synchronizer != null)
                {
                    var toMergePositionItems = synchronizer.LegPositionMergeEditItems.Where(i => i.InputQuantity > 0).ToArray();
                    foreach (var pItem in toMergePositionItems)
                    {
                        var tarItem = new MergeComposeLegData
                        {
                            PositionItemId = pItem.DetailItemId,
                            SledContractId = Convert.ToInt64(pItem.TargetKey),
                            Quantity = pItem.InputQuantity,
                            Diretion = pItem.Direction.ToStatDirection()
                        };
                        legMergeDataList.Add(tarItem);
                    }
                }
            }

            // 填充不参与腿的合并信息
            foreach (var legPriceInputItem in notJoinTradeLegPriceInputItems)
            {
                var tarItem = new MergeComposeLegData
                {
                    SledContractId = legPriceInputItem.LegDetail.BasicLeg.SledContractId,
                    Price = legPriceInputItem.Price
                };
                legMergeDataList.Add(tarItem);
            }

            __mergeReqInfo = new StatMergeToComposeReq
            {
                SubAccountId = this.SubAccountId,
                ComposeGraphId = composeGraphId.Value,
                ComposePrice = priceDiffInputItem.Price,
                Volume = mergeVolume,
                Diretion = mergeDir.ToStatDirection(),
                MergeComposeLegDataList = legMergeDataList
            };
        }

        private void RefreshCurrentComposeDetail()
        {
            var currentComposeContainer = this.currentComposeDetailContainer;
            if (currentComposeContainer == null) return;

            contentVM.NeedHideMergeOptAreaView = true;
            XueQiaoFoundationHelper.SetupTargetCompose_ComposeDetail(currentComposeContainer,
                    composeGraphCacheController, composeGraphQueryController,
                    userComposeViewCacheController, contractItemTreeQueryController,
                    XqContractNameFormatType.CommodityAcronym_Code_ContractCode,
                    _container =>
                    {
                        if (_container != this.currentComposeDetailContainer) return;
                        DispatcherHelper.CheckBeginInvokeOnUI(() =>
                        {
                            RefreshLegUnarchivedPositions(_container.BasicComposeGraph);
                        });
                    });
        }

        private void RefreshLegUnarchivedPositions(NativeComposeGraph composeGraph)
        {
            var legContractIds = composeGraph?.Legs?
                                .Select(i => (int)i.SledContractId).ToArray();
            if (legContractIds == null) legContractIds = new int[] { };

            if (legPositionsRefreshTaskCts == null)
                legPositionsRefreshTaskCts = new CancellationTokenSource();
            var cancelToken = legPositionsRefreshTaskCts.Token;
            Task.Run(() =>
            {
                if (cancelToken.IsCancellationRequested) return;
                var legPositions = QueryLegUnarchivedPositions(legContractIds, cancelToken);
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    this.queriedLegPositions = legPositions;
                    this.contentVM.NeedHideMergeOptAreaView = false;
                    InvalidateMergeData();
                });
            });
        }

        private void InternalCloseWindow()
        {
            if (window != null)
            {
                try
                {
                    window.Closing -= Window_Closed;
                    window.Close();
                    ActivateOwnerWindow();
                }
                catch (Exception e)
                { Console.WriteLine(e); }
                finally { window = null; }
            }
        }

        private void CancelLegPositionsRefreshTask()
        {
            try
            {
                legPositionsRefreshTaskCts?.Cancel();
                legPositionsRefreshTaskCts?.Dispose();
                legPositionsRefreshTaskCts = null;
            }
            catch (Exception) { }
        }

        /// <summary>
        /// 获取用于合并的腿持仓的方向
        /// </summary>
        /// <param name="mergeTargetDirection">合并目标持仓方向</param>
        /// <param name="composeLegDirection">组合腿的方向</param>
        private static ClientTradeDirection GetLegPositionDirectionForMerge(ClientTradeDirection mergeTargetDirection, 
            ClientTradeDirection composeLegDirection)
        {
            if (mergeTargetDirection == ClientTradeDirection.BUY)
            {
                return composeLegDirection;
            }
            else if (mergeTargetDirection == ClientTradeDirection.SELL)
            {
                if (composeLegDirection == ClientTradeDirection.BUY)
                    return ClientTradeDirection.SELL;
                else if (composeLegDirection == ClientTradeDirection.SELL)
                    return ClientTradeDirection.BUY;
            }
            throw new NotSupportedException("目标交易方向不支持");
        }

        private static int CalculateMaxCanMergeQuantity(NativeComposeGraph composeGraph,
            ClientTradeDirection mergeTargetDirection,
            Dictionary<int, IEnumerable<StatPositionItem>> legPositionsKeyedByContractId)
        {
            if (composeGraph == null || legPositionsKeyedByContractId == null) return 0;
            var joinTradeLegs = composeGraph.Legs?.Where(i => i.Quantity > 0).ToArray();
            int maxCanMergeQuantity = 0;
            if (joinTradeLegs != null)
            {
                maxCanMergeQuantity = int.MaxValue;
                foreach (var leg in joinTradeLegs)
                {
                    IEnumerable<StatPositionItem> legPositionsObj = null;
                    if (legPositionsKeyedByContractId.TryGetValue((int)leg.SledContractId, out legPositionsObj) 
                        && legPositionsObj != null)
                    {
                        var tarPositionDir = GetLegPositionDirectionForMerge(mergeTargetDirection, leg.TradeDirection).ToStatDirection();
                        var legTarPositions = legPositionsObj.Where(i => i.Direction == tarPositionDir).ToArray(); 
                        var canMergeQuantity = legTarPositions.Sum(i => i.Quantity) / leg.Quantity;
                        maxCanMergeQuantity = Math.Min(maxCanMergeQuantity, canMergeQuantity);
                    }
                }
            }
            return maxCanMergeQuantity;
        }

        private static IEnumerable<CPMergeLegInfoItem> GenerateMergeLegInfoItems(
            TargetCompose_ComposeDetail composeDetail,
            ClientTradeDirection mergeTargetDirection,
            int mergeTargetQuantity)
        {
            var detailLegs = composeDetail?.DetailLegs;
            if (detailLegs == null) return null;

            var infoItems = new List<CPMergeLegInfoItem>();
            foreach (var detailLeg in detailLegs)
            {
                ClientTradeDirection? legPositionDirForMerge = null;
                if (detailLeg.BasicLeg.Quantity != 0)
                    legPositionDirForMerge = GetLegPositionDirectionForMerge(mergeTargetDirection, detailLeg.BasicLeg.TradeDirection);
                var legMergeInfoItem = new CPMergeLegInfoItem(detailLeg, legPositionDirForMerge)
                {
                    DemandVolume = mergeTargetQuantity * detailLeg.BasicLeg.Quantity
                };
                infoItems.Add(legMergeInfoItem);
            }
            return infoItems;
        }

        private static IEnumerable<CPMergePriceInputItem> GenerateMergePriceInputItems(TargetCompose_ComposeDetail composeDetail)
        {
            var detailLegs = composeDetail?.DetailLegs;
            if (detailLegs == null) return null;

            var inputItems = new List<CPMergePriceInputItem>();
            inputItems.Add(new CPMergePriceInputItem(CPMergePriceInputItemType.PriceDiffInputItem));
            foreach (var detailLeg in detailLegs)
            {
                // 不参与交易的腿添加为价格输入项
                if (detailLeg.BasicLeg.Quantity == 0)
                {
                    var inputItem = new CPMergePriceInputItem(CPMergePriceInputItemType.LegPriceInputItem)
                    {
                        LegDetail = detailLeg
                    };
                    inputItems.Add(inputItem);
                }
            }
            return inputItems;
        }

        private static IEnumerable<CPMergeLegInfoSynchronizer> GenerateMergeLegInfoSynchronizers(
            IEnumerable<CPMergeLegInfoItem> mergeLegInfoItems,
            ClientTradeDirection mergeTargetDirection,
            Dictionary<int, IEnumerable<StatPositionItem>> legPositionsKeyedByContractId,
            int maxCanMergeQuantity)
        {
            if (mergeLegInfoItems == null) return null;
            var synchronizers = new List<CPMergeLegInfoSynchronizer>();
            foreach (var mergeLegInfo in mergeLegInfoItems)
            {
                var legBasicInfo = mergeLegInfo.LegDetail.BasicLeg;
                var legContractId = (int)legBasicInfo.SledContractId;
                var legPositionMergeEditItems = new ObservableCollection<XqTargetDetailPositionDM_MergeEdit>();
                IEnumerable<StatPositionItem> legPositionsObj = null;
                if (true == legPositionsKeyedByContractId?.TryGetValue(legContractId, out legPositionsObj)
                    && legPositionsObj != null)
                {
                    var tarPositionDir = GetLegPositionDirectionForMerge(mergeTargetDirection, legBasicInfo.TradeDirection).ToStatDirection();
                    var legTarPositions = legPositionsObj.Where(i => i.Direction == tarPositionDir);
                    foreach (var p in legTarPositions)
                    {
                        var mergeEdit = new XqTargetDetailPositionDM_MergeEdit(p.TargetKey, p.TargetType.ToClientXQOrderTargetType(), p.SubAccountId, p.PositionItemId)
                        {
                            Direction = p.Direction.ToClientTradeDirection(),
                            Price = p.Price,
                            Quantity = p.Quantity,
                            SourceDataTimestampMs = p.Source.SourceDataTimestampMs,
                            SourceDataChannel = p.Source.SourceDataChannel.ToXqTargetPositionDataSourceChannel(),
                            MaximumInputQuantity = Math.Min(maxCanMergeQuantity, p.Quantity)
                        };
                        legPositionMergeEditItems.Add(mergeEdit);
                    }
                }
                var synchronizer = new CPMergeLegInfoSynchronizer(mergeLegInfo, legPositionMergeEditItems);
                synchronizers.Add(synchronizer);
            }
            return synchronizers;
        }

        private void MergeLegInfoPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(CPMergeLegInfoItem.CurrentAvgPrice))
            {
                InvalidateAutoCalculateMergePriceInputItemPrice();
                return;
            }

            if (e.PropertyName == nameof(CPMergeLegInfoItem.CurrentVolume)
                || e.PropertyName == nameof(CPMergeLegInfoItem.DemandVolume))
            {
                toMergeCmd?.RaiseCanExecuteChanged();
                return;
            }
        }

        private void InvalidateAutoCalculateMergePriceInputItemPrice()
        {
            var autoCalPriceItem = contentVM.AutoCalculateMergePriceInputItem;
            if (autoCalPriceItem == null) return;

            var formula = this.currentComposeDetailContainer.BasicComposeGraph.Formular;
            if (string.IsNullOrEmpty(formula)) return;

            var priceDiffVarName = "Z";
            var solveExprStr = $"{formula}-{priceDiffVarName}";

            // 参与交易腿的价格填入
            var joinTradeLegMergeInfoItems = contentVM.MergeLegInfoItems.Where(i => i.LegDetail?.BasicLeg?.Quantity > 0).ToArray();
            foreach (var legMergeInfoItem in joinTradeLegMergeInfoItems)
            {
                var legVarName = legMergeInfoItem.LegDetail?.BasicLeg?.VariableName;
                if (!string.IsNullOrEmpty(legVarName))
                {
                    // 加上括号
                    solveExprStr = solveExprStr.Replace(legVarName, $"({legMergeInfoItem.CurrentAvgPrice??0})");
                }
            }

            // 不参与交易腿或价差的价格填入
            var notAutoCalInputPriceItems = contentVM.MergePriceInputItems.Where(i => i != autoCalPriceItem).ToArray();
            foreach (var item in notAutoCalInputPriceItems)
            {
                if (item.ItemType == CPMergePriceInputItemType.LegPriceInputItem)
                {
                    var legVarName = item.LegDetail?.BasicLeg?.VariableName;
                    if (!string.IsNullOrEmpty(legVarName))
                    {
                        // 加上括号
                        solveExprStr = solveExprStr.Replace(legVarName, $"({item.Price})");
                    }
                    else if (item.ItemType == CPMergePriceInputItemType.PriceDiffInputItem)
                    {
                        // 加上括号
                        solveExprStr = solveExprStr.Replace(priceDiffVarName, $"({item.Price})");
                    }
                }
            }

            var solveVarName = priceDiffVarName;
            if (autoCalPriceItem.ItemType == CPMergePriceInputItemType.LegPriceInputItem)
                solveVarName = autoCalPriceItem.LegDetail?.BasicLeg?.VariableName;

            //
            // <see href=http://mathparser.org/mxparser-tutorial/solving-equation-fx-0/>
            // <see href=https://github.com/mariuszgromada/MathParser.org-mXparser/issues/19>
            var solveExpr = new org.mariuszgromada.math.mxparser.Expression($"solve( {solveExprStr},{solveVarName},{Int32.MinValue},{Int32.MaxValue} )");
            var calValue = solveExpr.calculate();
            if (!Double.IsNaN(calValue))
            {
                autoCalPriceItem.Price = calValue;
            }
            else
            {
                autoCalPriceItem.Price = 0;
            }
        }

        private void InvalidateMergeData()
        {
            var currentComposeContainer = this.currentComposeDetailContainer;
            var queriedLegPositions = this.queriedLegPositions;
            var mergeTargetDirection = this.contentVM.MergeTargetDirection;

            PropertyChangedEventManager.RemoveHandler(contentVM, ContentVMPropChanged, "");
            
            var maxCanMergeQuantity = CalculateMaxCanMergeQuantity(currentComposeContainer?.BasicComposeGraph,
                mergeTargetDirection, queriedLegPositions);
            var mergeTargetQuantity = Math.Min(contentVM.MergeTargetQuantity, maxCanMergeQuantity);

            var mergeLegInfos = GenerateMergeLegInfoItems(currentComposeContainer,
                mergeTargetDirection, mergeTargetQuantity);
            var mergeLegInfoSynchronizers = GenerateMergeLegInfoSynchronizers(mergeLegInfos, 
                mergeTargetDirection, queriedLegPositions, maxCanMergeQuantity);
            var mergePriceInputItems = GenerateMergePriceInputItems(currentComposeContainer);

            this.mergeLegInfoSynchronizers.Clear();
            this.contentVM.MergeLegInfoItems.Clear();
            this.contentVM.MergePriceInputItems.Clear();
            this.contentVM.AutoCalculateMergePriceInputItem = null;

            this.contentVM.MaxCanMergeQuantity = maxCanMergeQuantity;
            this.contentVM.MergeTargetQuantity = mergeTargetQuantity;

            if (mergeLegInfoSynchronizers != null)
                this.mergeLegInfoSynchronizers.AddRange(mergeLegInfoSynchronizers);

            if (mergeLegInfos != null)
            {
                this.contentVM.MergeLegInfoItems.AddRange(mergeLegInfos);
                foreach (var mergeLegInfo in mergeLegInfos)
                {
                    PropertyChangedEventManager.AddHandler(mergeLegInfo, MergeLegInfoPropChanged, "");
                }
            }
            
            if (mergePriceInputItems != null)
            {
                this.contentVM.MergePriceInputItems.AddRange(mergePriceInputItems);
                this.contentVM.AutoCalculateMergePriceInputItem = mergePriceInputItems.FirstOrDefault();
            }
            InvalidateAutoCalculateMergePriceInputItemPrice();
            toMergeCmd?.RaiseCanExecuteChanged();

            PropertyChangedEventManager.AddHandler(contentVM, ContentVMPropChanged, "");
        }

        private void UpdateIsReqMerging(bool value)
        {
            this.isReqMerging = value;
            this.contentVM.IsReqMerging = value;
            DispatcherHelper.CheckBeginInvokeOnUI(() => 
            {
                triggerSelectComposeCmd?.RaiseCanExecuteChanged();
                toChooseLegPositionsCmd?.RaiseCanExecuteChanged();
                mergePriceInputItemAutoCalculateCheckedCmd?.RaiseCanExecuteChanged();
                toMergeCmd?.RaiseCanExecuteChanged();
            });
        }

        private Dictionary<int, IEnumerable<StatPositionItem>> QueryLegUnarchivedPositions(int[] legContractIds, CancellationToken cancelToken)
        {
            if (legContractIds?.Any() != true) return null;
            if (cancelToken.IsCancellationRequested) return null;
            
            var tf = new TaskFactory();
            var ts = new List<Task<Tuple<int, IEnumerable<StatPositionItem>>>>();

            foreach (var legContractId in legContractIds.Distinct().ToArray())
            {
                ts.Add(tf.StartNew(() => 
                {
                    cancelToken.ThrowIfCancellationRequested();

                    var positionItems = QueryUnarchivedDetailPositions(HostingXQTargetType.CONTRACT_TARGET, $"{legContractId}", cancelToken)?.CorrectResult;
                    if (positionItems == null) { positionItems = new StatPositionItem[] { }; }

                    cancelToken.ThrowIfCancellationRequested();

                    return new Tuple<int, IEnumerable<StatPositionItem>>(legContractId, positionItems);
                }));
            }

            var taskArr = ts.ToArray();
            try
            {
                Task.WaitAll(taskArr);
            }
            catch (AggregateException _ae)
            {
                if (!cancelToken.IsCancellationRequested)
                {
                    var exps = _ae.Flatten()?.InnerExceptions;
                    if (exps?.Any() == true)
                    {
                        foreach (var exp in exps)
                        {
                            AppLog.Error($"Failed QueryLegUnarchivedPositions in task, {exp.GetType().Name}");
                        }
                    }
                }
                return null;
            }

            var resultDict = new Dictionary<int, IEnumerable<StatPositionItem>>();
            foreach (var task in taskArr)
            {
                var tr = task.Result;
                resultDict[tr.Item1] = tr.Item2;
            }
            return resultDict;
        }


        private IInterfaceInteractResponse<IEnumerable<StatPositionItem>> QueryUnarchivedDetailPositions(
            HostingXQTargetType targetType, string targetKey, CancellationToken cancelToken)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;
            var subAccountId = this.SubAccountId;

            var queryPageSize = 50;
            IInterfaceInteractResponse<StatPositionItemPage> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<StatPositionItem>(pageIndex => {

                if (cancelToken.IsCancellationRequested) return null;

                var option = new QueryStatPositionItemOption
                {
                    SubAccountId = subAccountId,
                    TargetKey = targetKey,
                    TargetType = targetType
                };
                var pageOption = new IndexedPageOption { NeedTotalCount = true, PageIndex = pageIndex, PageSize = queryPageSize };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.queryStatPositionItemPage(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<StatPositionItem>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.TotalNum,
                    Page = pageInfo?.StatPositionItemList?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.PositionItemId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<StatPositionItem>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems)
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };

            return tarResp;
        }
    }
}
