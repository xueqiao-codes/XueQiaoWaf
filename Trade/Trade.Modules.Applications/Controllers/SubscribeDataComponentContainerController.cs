using ContainerShell.Interfaces.Applications;
using IDLAutoGenerated.Util;
using lib.xqclient_base.logger;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using System.Windows;
using XueQiaoFoundation.BusinessResources.Constants;
using XueQiaoFoundation.BusinessResources.Models;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.Shared.Model;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Modules.Applications.DataModels;
using XueQiaoWaf.Trade.Modules.Applications.Helper;
using XueQiaoWaf.Trade.Modules.Applications.ServiceControllers;
using XueQiaoWaf.Trade.Modules.Applications.ServiceControllers.Events;
using XueQiaoWaf.Trade.Modules.Applications.ViewModels;

namespace XueQiaoWaf.Trade.Modules.Applications.Controllers
{
    /// <summary>
    /// 订阅数据组件容器控制器
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class SubscribeDataComponentContainerController : ITradeComponentController
    {
        private readonly SubscribeDataComponentHeaderViewModel componentHeaderViewModel;
        private readonly Lazy<ComponentTabListSelectionViewModel> tabListSelectionViewModel;
        private readonly ComponentHeaderLayoutCtrl headerLayoutCtrl;
        private readonly BlankContentViewModel componentContentContainerModel;
        private readonly ExportFactory<ContractListComponentContentController> contractListContentCtrlFactory;
        private readonly ExportFactory<ComposeListComponentContentController> composeListContentCtrlFactory;
        private readonly IContainerShellService containerShellService;
        private readonly ExportFactory<AddComposeDialogController> addComposeControllerFactory;
        private readonly ISubscribeContractController subscribeContractController;
        private readonly ISubscribeComposeController subscribeComposeController;
        private readonly IUserComposeViewQueryController userComposeViewQueryCtrl;
        private readonly ILoginDataService loginDataService;
        private readonly IEventAggregator eventAggregator;
        private readonly IMessageWindowService messageWindowService;

        private readonly Dictionary<int, IController> tabPageControllers = new Dictionary<int, IController>();

        private DelegateCommand componentTypeCheckCommand;
        private DelegateCommand componentTypeUncheckCommand;
        private DelegateCommand triggerSubscribeContractCmd;
        private DelegateCommand triggerNewComposeCmd;

        [ImportingConstructor]
        public SubscribeDataComponentContainerController(SubscribeDataComponentHeaderViewModel componentHeaderViewModel,
            Lazy<ComponentTabListSelectionViewModel> tabListSelectionViewModel,
            ComponentHeaderLayoutCtrl headerLayoutCtrl,
            BlankContentViewModel componentContentContainerModel,
            ExportFactory<ContractListComponentContentController> contractListContentCtrlFactory,
            ExportFactory<ComposeListComponentContentController> composeListContentCtrlFactory,
            IContainerShellService containerShellService,
            ExportFactory<AddComposeDialogController> addComposeControllerFactory,
            ISubscribeContractController subscribeContractController,
            ISubscribeComposeController subscribeComposeController,
            IUserComposeViewQueryController userComposeViewQueryCtrl,
            ILoginDataService loginDataService,
            IEventAggregator eventAggregator,
            IMessageWindowService messageWindowService)
        {
            this.componentHeaderViewModel = componentHeaderViewModel;
            this.tabListSelectionViewModel = tabListSelectionViewModel;
            this.headerLayoutCtrl = headerLayoutCtrl;
            this.componentContentContainerModel = componentContentContainerModel;
            this.contractListContentCtrlFactory = contractListContentCtrlFactory;
            this.composeListContentCtrlFactory = composeListContentCtrlFactory;
            this.containerShellService = containerShellService;
            this.addComposeControllerFactory = addComposeControllerFactory;
            this.subscribeContractController = subscribeContractController;
            this.subscribeComposeController = subscribeComposeController;
            this.userComposeViewQueryCtrl = userComposeViewQueryCtrl;
            this.loginDataService = loginDataService;
            this.eventAggregator = eventAggregator;
            this.messageWindowService = messageWindowService;

            componentTypeCheckCommand = new DelegateCommand(this.CheckComponentType);
            componentTypeUncheckCommand = new DelegateCommand(this.UncheckComponentType);
            triggerSubscribeContractCmd = new DelegateCommand(this.TriggerSubscribeContract);
            triggerNewComposeCmd = new DelegateCommand(this.TriggerNewCompose);
        }

        #region ITradeComponentController

        public XueQiaoFoundation.BusinessResources.DataModels.TradeComponent Component { get; set; }

        public XueQiaoFoundation.BusinessResources.DataModels.TabWorkspace ParentWorkspace { get; set; }

        public Action<ITradeComponentController> CloseComponentHandler { get; set; }

        public ITradeComponentXqTargetAssociateHandler XqTargetAssociateHandler { get; set; }

        /// <summary>
        /// 组件 data model，在 Initialize 后可获得
        /// </summary>
        public DraggableComponentUIDM ComponentItemDataModel { get; private set; }

        public bool OnAssociateXqTarget(TradeComponentXqTargetAssociateArgs associateArgs)
        {
            return false;
        }
        
        #endregion
        
        public void Initialize()
        {
            if (Component == null) throw new ArgumentNullException("`Component` can't be null before initialize.");
            if (ParentWorkspace == null) throw new ArgumentNullException("`ParentWorkspace` must be setted before initialize.");

            var containerComponentDetail = Component.SubscribeDataContainerComponentDetail;
            if (containerComponentDetail == null) throw new ArgumentNullException("Component.SubscribeDataContainerComponentDetail");

            // config header layout controller 
            headerLayoutCtrl.Component = this.Component;
            headerLayoutCtrl.ClickComponentClose = _ctrl => CloseComponentHandler?.Invoke(this);
            headerLayoutCtrl.ClickComponentSetting = (c, p) => PopupPageTypeSelection(p);
            headerLayoutCtrl.Initialize();
            headerLayoutCtrl.Run();

            componentHeaderViewModel.TogatherTabbedComponentTypes.AddRange(containerComponentDetail.TogatherTabedComponentTypes);
            componentHeaderViewModel.SelectedTabComponentType = Component.ComponentType;
            componentHeaderViewModel.TriggerSubscribeContractCmd = triggerSubscribeContractCmd;
            componentHeaderViewModel.TriggerNewComposeCmd = triggerNewComposeCmd;

            headerLayoutCtrl.HeaderLayoutVM.ShowCloseItem = true;
            headerLayoutCtrl.HeaderLayoutVM.ShowSettingItem = true;
            headerLayoutCtrl.HeaderLayoutVM.ShowComponentLockItem = false;
            headerLayoutCtrl.HeaderLayoutVM.CustomPartView = componentHeaderViewModel.View;

            ComponentItemDataModel = new DraggableComponentUIDM(Component,
                headerLayoutCtrl.HeaderLayoutVM.View,
                componentContentContainerModel.View);

            ComponentItemDataModel.ComponentMinWidth = TradeComponentConstans.ComponentMininumWidthDefault;
            ComponentItemDataModel.ComponentMinHeight = TradeComponentConstans.ComponentMininumHeightDefault;

            PropertyChangedEventManager.AddHandler(componentHeaderViewModel, ComponentHeadeVMPropertyChanged, "");
        }

        public void Run()
        {
            OnSelectedTabComponentTypeChanged();
        }

        public void Shutdown()
        {
            PropertyChangedEventManager.RemoveHandler(componentHeaderViewModel, ComponentHeadeVMPropertyChanged, "");
            
            CloseComponentHandler = null;
            headerLayoutCtrl?.Shutdown();
            
            foreach (var pageCtrl in tabPageControllers)
            {
                pageCtrl.Value.Shutdown();
            }
            tabPageControllers.Clear();
        }

        private void ComponentHeadeVMPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(SubscribeDataComponentHeaderViewModel.SelectedTabComponentType))
            {
                if (ComponentItemDataModel != null)
                {
                    OnSelectedTabComponentTypeChanged();
                }
            }
        }

        private void OnSelectedTabComponentTypeChanged()
        {
            var selTabComponentType = componentHeaderViewModel.SelectedTabComponentType;
            
            Component.ComponentType = selTabComponentType;
            Component.ComponentDescTitle = TradeWorkspaceDataDisplayHelper.GetTradeComponentTypeDisplayName(selTabComponentType);

            if (selTabComponentType == XueQiaoConstants.TradeCompType_CONTRACT_LIST)
            {
                ShowContractListInComponentContent();
            }
            else if (selTabComponentType == XueQiaoConstants.TradeCompType_COMPOSE_LIST)
            {
                ShowComposeListInComponentContent();
            }
        }

        private void ShowContractListInComponentContent()
        {
            var componentType = XueQiaoConstants.TradeCompType_CONTRACT_LIST;

            tabPageControllers.TryGetValue(componentType, out IController pageController);
            var listContentCtrl = pageController as ContractListComponentContentController;
            if (listContentCtrl == null)
            {
                if (Component.SubscribeDataContainerComponentDetail.ContractListComponentDetail == null)
                {
                    Component.SubscribeDataContainerComponentDetail.ContractListComponentDetail = new ContractListComponentDetail();
                }

                listContentCtrl = contractListContentCtrlFactory.CreateExport().Value;
                listContentCtrl.ParentWorkspace = this.ParentWorkspace;
                listContentCtrl.Component = this.Component;
                listContentCtrl.XqTargetAssociateHandler = this.XqTargetAssociateHandler;

                listContentCtrl.Initialize();
                listContentCtrl.Run();

                // 添加进集合
                tabPageControllers[componentType] = listContentCtrl;
            }

            // change the content display
            componentContentContainerModel.Content = listContentCtrl.ComponentContentView;
        }

        private void ShowComposeListInComponentContent()
        {
            var componentType = XueQiaoConstants.TradeCompType_COMPOSE_LIST;

            tabPageControllers.TryGetValue(componentType, out IController pageController);
            var listContentCtrl = pageController as ComposeListComponentContentController;
            if (listContentCtrl == null)
            {
                if (Component.SubscribeDataContainerComponentDetail.ComposeListComponentDetail == null)
                {
                    Component.SubscribeDataContainerComponentDetail.ComposeListComponentDetail = new ComposeListComponentDetail();
                }

                listContentCtrl = composeListContentCtrlFactory.CreateExport().Value;
                listContentCtrl.ParentWorkspace = this.ParentWorkspace;
                listContentCtrl.Component = this.Component;
                listContentCtrl.XqTargetAssociateHandler = this.XqTargetAssociateHandler;

                listContentCtrl.Initialize();
                listContentCtrl.Run();

                // 添加进集合
                tabPageControllers[componentType] = listContentCtrl;
            }

            // change the content display
            componentContentContainerModel.Content = listContentCtrl.ComponentContentView;
        }

        private void CheckComponentType(object param)
        {
            if (param is int componentType)
            {
                var tabbedComponentCollection = componentHeaderViewModel.TogatherTabbedComponentTypes;
                if (!tabbedComponentCollection.Contains(componentType))
                {
                    tabbedComponentCollection.Add(componentType);
                    Component.SubscribeDataContainerComponentDetail.TogatherTabedComponentTypes
                        = tabbedComponentCollection.ToArray();
                }
            }
        }

        private void UncheckComponentType(object param)
        {
            if (param is int componentType)
            {
                var tabbedComponentCollection = componentHeaderViewModel.TogatherTabbedComponentTypes;
                if (tabbedComponentCollection.Contains(componentType))
                {
                    tabbedComponentCollection.Remove(componentType);
                    Component.SubscribeDataContainerComponentDetail.TogatherTabedComponentTypes
                        = tabbedComponentCollection.ToArray();
                }
            }
        }

        private void PopupPageTypeSelection(object param)
        {
            if (!tabListSelectionViewModel.IsValueCreated)
            {
                var tabsViewModel = tabListSelectionViewModel.Value;
                tabsViewModel.CheckCommand = componentTypeCheckCommand;
                tabsViewModel.UncheckCommand = componentTypeUncheckCommand;
                var componentTabs = TradeWorkspaceDataDisplayHelper.ComponentsInSubscribeDataContainer.Select(i => new ComponentTabSelectionItem(i)).ToArray();
                var togatherTabbedCompTypes = Component.SubscribeDataContainerComponentDetail.TogatherTabedComponentTypes;
                foreach (var tab in componentTabs)
                {
                    tab.IsChecked = togatherTabbedCompTypes?.Contains(tab.ComponentType) ?? false;
                }

                tabsViewModel.ComponentTypes.Clear();
                tabsViewModel.ComponentTypes.AddRange(componentTabs);
            }
            tabListSelectionViewModel.Value.ShowPopup(param);
        }

        private void TriggerSubscribeContract(object triggerElement)
        {
            containerShellService.ShowContractQuickSearchPopup(triggerElement, null,
                _selContractId =>
                {
                    if (_selContractId != null)
                    {
                        // 订阅合约, 添加到列表中显示
                        subscribeContractController.AddOrUpdateSubscribeContract(
                            _selContractId.Value,
                            SubscribeContractDataModel.SharedListContractGroupKey, null);
                        // 立即订阅
                        subscribeContractController.SubscribeContractQuotationIfNeed(_selContractId.Value, null);
                    }
                });
        }

        private void TriggerNewCompose(object triggerElement)
        {
            var triggerEle = triggerElement as FrameworkElement;
            if (triggerEle == null) return;

            var dialogOwner = UIHelper.GetWindowOfUIElement(headerLayoutCtrl.HeaderLayoutVM.View);
            if (dialogOwner == null) return;

            var triggerEleSize = triggerEle.RenderSize;
            var screenPoint = triggerEle.PointToScreen(new Point(0, triggerEleSize.Height));
            var locationRelativeToScreen = UIHelper.TransformToWpfPoint(screenPoint, triggerEle);

            var dialogCtrl = addComposeControllerFactory.CreateExport().Value;
            dialogCtrl.DialogTitle = "创建组合";
            dialogCtrl.DialogOwner = dialogOwner;
            dialogCtrl.DialogShowLocationRelativeToScreen = locationRelativeToScreen;

            dialogCtrl.Initialize();
            dialogCtrl.Run();
            dialogCtrl.Shutdown();

            var createdComposeId = dialogCtrl.CreatedComposeId;
            if (createdComposeId != null)
            {
                subscribeComposeController.AddOrUpdateSubscribeCompose(createdComposeId.Value,
                    SubscribeComposeDataModel.SharedListComposeGroupKey,
                    e =>
                    {
                        if (e) return null;
                        return new SubscribeComposeUpdateTemplate
                        {
                            SubscribeState = new Tuple<MarketSubscribeState>(MarketSubscribeState.Unkown)
                        };
                    });

                // 立即订阅
                subscribeComposeController.SubscribeCombQuotationAsync(createdComposeId.Value)
                    .ContinueWith(t => 
                    {
                        var result = t.Result;
                        if (result.HasRequestApi && result.ApiResponse?.CustomParsedExceptionResult?.BusinessErrorCode == ErrorCodeConstants.ERROR_COMPOSE_VIEW_SUBSCRIBE_TOO_MANY)
                        {
                            var errMsg = "组合行情订阅失败！\n组合行情订阅数到达上限，请退订部分组合行情";
                            DispatcherHelper.CheckBeginInvokeOnUI(() =>
                            {
                                var owner = UIHelper.GetWindowOfUIElement(this.componentContentContainerModel.View);
                                if (owner != null)
                                {
                                    messageWindowService.ShowMessageDialog(owner, null, null, null, errMsg);
                                }
                            });
                        }
                    });

                if (dialogCtrl.IsComposeViewCreatedByReference == true)
                {
                    // 查询组合视图信息，然后发布更新信息
                    RefreshUserComposeViewAndPublishEvent(createdComposeId.Value);
                }
            }
        }
        
        private void RefreshUserComposeViewAndPublishEvent(long composeId)
        {
            Task.Run(() =>
            {
                var _resp = userComposeViewQueryCtrl.QueryCurrentComposeView(composeId);
                var _userComposeView = _resp?.CorrectResult?.UserComposeView;
                if (_userComposeView == null)
                {
                    AppLog.Error($"RefreshUserComposeViewAndPublishEvent(composeId:{composeId}). Failed to query user compose view.");
                    return;
                }
                if (_userComposeView.ComposeGraphId == composeId)
                {
                    // 发布组合视图已更新事件
                    eventAggregator.GetEvent<UserComposeViewUpdatedEvent>().Publish(_userComposeView);
                }
            });
        }
    }
}
