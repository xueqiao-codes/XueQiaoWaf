using NativeModel.Trade;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using System.Windows;
using xueqiao.trade.hosting.position.statis;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Modules.Applications.DataModels;
using XueQiaoWaf.Trade.Modules.Applications.ViewModels;
using IDLAutoGenerated.Util;
using XueQiaoFoundation.Shared.Helper;
using System.Threading;
using xueqiao.trade.hosting.proxy;
using XueQiaoFoundation.BusinessResources.Helpers;
using XueQiaoFoundation.BusinessResources.Constants;
using business_foundation_lib.xq_thriftlib_config;
using business_foundation_lib.helper;

namespace XueQiaoWaf.Trade.Modules.Applications.Controllers
{
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class XqTargetQuickClosePositionDialogCtrl : IController
    {
        private readonly XqTargetQuickClosePositionVM contentViewModel;
        private readonly XqTargetPositionItemDialogTitleVM dialogTitleVM;
        private readonly ILoginDataService loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly IMessageWindowService messageWindowService;
        private readonly IEventAggregator eventAggregator;

        private readonly DelegateCommand submitClosePositionCmd;

        private IEnumerable<ClosedPositionDetailItem> initialWaitCloseItems;
        private int realNetPosition;
        
        private IMessageWindow dialog;

        [ImportingConstructor]
        public XqTargetQuickClosePositionDialogCtrl(
            XqTargetQuickClosePositionVM contentViewModel,
            XqTargetPositionItemDialogTitleVM dialogTitleVM,
            ILoginDataService loginDataService,
            Lazy<ILoginUserManageService> loginUserManageService,
            IMessageWindowService messageWindowService,
            IEventAggregator eventAggregator)
        {
            this.contentViewModel = contentViewModel;
            this.dialogTitleVM = dialogTitleVM;
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.messageWindowService = messageWindowService;
            this.eventAggregator = eventAggregator;

            submitClosePositionCmd = new DelegateCommand(SubmitClosePosition, CanSubmitClosePosition);

            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
        }

        public object DialogOwner { get; set; }

        public TargetPositionDataModel XqTargetPositionItem { get; set; }

        public IEnumerable<XqTargetDetailPositionDM_Unarchived> WaitToCloseDetailPositionItems { get; set; }

        /// <summary>
        /// 是否尝试提交配对信息
        /// </summary>
        public bool? DidTrySubmitClosedPositionItems { get; private set; }
        
        public void Initialize()
        {
            if (XqTargetPositionItem == null)
                throw new ArgumentNullException("XqTargetPositionItem");

            if (WaitToCloseDetailPositionItems?.Any() != true)
                throw new ArgumentException("WaitToCloseDetailPositionItems.Count must > 0");

            dialogTitleVM.XqTargetPositionItem = XqTargetPositionItem;
            dialogTitleVM.TitlePrefix = "一键配对：";

            this.initialWaitCloseItems = this.WaitToCloseDetailPositionItems
                .Select(i => new ClosedPositionDetailItem
                {
                    PositionItemId = i.DetailItemId, ClosedVolume = i.Quantity
                }).ToArray();

            this.realNetPosition = WaitToCloseDetailPositionItems.Sum(i => 
            {
                var dir = i.Direction == ClientTradeDirection.BUY ? 1 : -1;
                return i.Quantity * dir;
            });

            var toRemainEditItems = WaitToCloseDetailPositionItems.Where(i => 
            {
                bool result = false;
                if (realNetPosition > 0) result = (i.Direction == ClientTradeDirection.BUY);
                else if (realNetPosition < 0) result = (i.Direction == ClientTradeDirection.SELL);
                return result;
            })
            .Select(i=> GenerateRemainEditItem(i)).ToArray();

            contentViewModel.NetPosition = Math.Abs(realNetPosition);
            contentViewModel.ToRemainEditItems.Clear();
            contentViewModel.ToRemainEditItems.AddRange(toRemainEditItems);

            contentViewModel.XqTargetPositionItem = XqTargetPositionItem;
            contentViewModel.SubmitClosePositionCmd = submitClosePositionCmd;

            foreach (var remainEditItem in toRemainEditItems)
            {
                PropertyChangedEventManager.AddHandler(remainEditItem, RemainEditItemPropChanged, "");
            }
            InvalidateRemainEditItems();
        }

        public void Run()
        {
            dialog = messageWindowService.CreateContentCustomWindow(DialogOwner, null, new Size(700, 700), true, true,
                true, dialogTitleVM.View, contentViewModel.View);
            dialog.ShowDialog();
        }

        public void Shutdown()
        {
            TryCloseDialog();
            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;

            var toRemainEditItems = contentViewModel.ToRemainEditItems?.ToArray();
            if (toRemainEditItems != null)
            {
                foreach (var remainEditItem in toRemainEditItems)
                {
                    PropertyChangedEventManager.RemoveHandler(remainEditItem, RemainEditItemPropChanged, "");
                }
            }
        }

        private void RemainEditItemPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(XqTargetClosePositionRemainEditItem.RemainQuantity))
            {
                InvalidateRemainEditItems();
            }
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            Shutdown();
        }

        private XqTargetClosePositionRemainEditItem GenerateRemainEditItem(XqTargetDetailPositionDM_Unarchived detailPositionItem)
        {
            var rectifyPrice = XueQiaoBusinessHelper.MakePreciseXQContractRelatedPrice(detailPositionItem.Price, XueQiaoConstants.XQContractPriceMinimumPirceTick);
            return new XqTargetClosePositionRemainEditItem(detailPositionItem.TargetKey, detailPositionItem.TargetType, detailPositionItem.SubAccountId, detailPositionItem.DetailItemId)
            {
                IsEditEnabled = true,
                RemainQuantity = 0,

                Direction = detailPositionItem.Direction,
                Price = rectifyPrice,
                Quantity = detailPositionItem.Quantity,
                SourceDataTimestampMs = detailPositionItem.SourceDataTimestampMs,
                SourceDataChannel = detailPositionItem.SourceDataChannel,
            };
        }

        private bool CanSubmitClosePosition()
        {
            var allEditItems = contentViewModel.ToRemainEditItems;
            var totalRemainQuantity = allEditItems?.Sum(i => i.RemainQuantity)??0;
            var netPosition = Math.Abs(realNetPosition);
            return totalRemainQuantity == netPosition;
        }
        
        private void SubmitClosePosition()
        {
            var containerWin = UIHelper.GetWindowOfUIElement(contentViewModel.View);
            if (!CanSubmitClosePosition())
            {
                messageWindowService.ShowMessageDialog(containerWin, null, null, null, "保留数量和净仓数量不一致，\n请设置成一致才可配对！");
                return;
            }

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            var allEditedItems = contentViewModel.ToRemainEditItems?.Where(i => i.RemainQuantity > 0).ToArray();
            // 对目标项去除要保留的持仓数
            // 过滤配对数<=0的项
            var tarWaitCloseItems = initialWaitCloseItems.Select(i =>
            {
                var existEditedItem = allEditedItems?.FirstOrDefault(_editedItem => _editedItem.DetailItemId == i.PositionItemId);
                if (existEditedItem != null)
                {
                    i.ClosedVolume = (i.ClosedVolume - existEditedItem.RemainQuantity);
                }
                return i;
            })
            .Where(i => i.ClosedVolume > 0)
            .ToArray();

            var subAccountId = XqTargetPositionItem.SubAccountFields.SubAccountId;
            var targetKey = XqTargetPositionItem.TargetKey;
            var targetType = XqTargetPositionItem.TargetType.ToHostingXQTargetType();
            var batchReq = new BatchClosedPositionReq
            {
                SubAccountId = subAccountId,
                TargetKey = targetKey,
                TargetType = targetType,
                ClosedPositionDetailItems = new List<ClosedPositionDetailItem>()
            };
            batchReq.ClosedPositionDetailItems.AddRange(tarWaitCloseItems);

            this.DidTrySubmitClosedPositionItems = true;
            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.batchClosePositionAsync(landingInfo, batchReq, CancellationToken.None)
                .ContinueWith(t => 
                {
                    var resp = t.Result;
                    DispatcherHelper.CheckBeginInvokeOnUI(() => 
                    {
                        if (resp?.SourceException != null)
                        {
                            var nowWin = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                            if (nowWin != null)
                            {
                                messageWindowService.ShowMessageDialog(nowWin, null, null, null,
                                    FoundationHelper.FormatResponseDisplayErrorMsg(resp, "配对失败！\n"));
                            }
                            return;
                        }
                        TryCloseDialog();
                    });
                });
        }

        private void InvalidateRemainEditItems()
        {
            var allEditItems = contentViewModel.ToRemainEditItems;
            if (allEditItems == null) return;

            var totalRemainQuantity = allEditItems.Sum(i => i.RemainQuantity);
            var netPosition = Math.Abs(realNetPosition);
            if (totalRemainQuantity <= netPosition)
            {
                foreach (var editItem in allEditItems)
                {
                    PropertyChangedEventManager.RemoveHandler(editItem, RemainEditItemPropChanged, "");

                    editItem.MaximumRemainQuantity = Math.Min(editItem.RemainQuantity + (netPosition - totalRemainQuantity), editItem.Quantity);
                    editItem.RemainQuantity = Math.Min(editItem.RemainQuantity, editItem.MaximumRemainQuantity);
                    editItem.IsEditEnabled = (editItem.MaximumRemainQuantity > 0);

                    PropertyChangedEventManager.AddHandler(editItem, RemainEditItemPropChanged, "");
                }
            }
            submitClosePositionCmd?.RaiseCanExecuteChanged();
        }

        private void TryCloseDialog()
        {
            if (dialog != null)
            {
                dialog.Close();
                dialog = null;
            }
        }
    }
}
