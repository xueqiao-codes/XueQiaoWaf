using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation;
using lib.xqclient_base.thriftapi_mediation.Interface;
using NativeModel.Trade;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Waf.Applications;
using xueqiao.trade.hosting.position.statis;
using XueQiaoFoundation.BusinessResources.Constants;
using XueQiaoFoundation.BusinessResources.Helpers;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Modules.Applications.DataModels;
using XueQiaoWaf.Trade.Modules.Applications.ViewModels;

namespace XueQiaoWaf.Trade.Modules.Applications.Controllers
{
    /// <summary>
    /// 雪橇标的配对历史视图 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class XqTargetClosePositionHistoryViewCtrl : IController
    {
        private readonly XqTargetClosePositionHistoryVM contentViewModel;
        private readonly ILoginDataService loginDataService;
        private readonly ExportFactory<XqTargetPositionTradeDetailDialogCtrl> positionTradeDetailDialogCtrlFactory;
        
        private readonly DelegateCommand refreshCurrentDateDataCmd;
        private readonly DelegateCommand positionItemDetailCmd;

        private readonly TaskFactory pageDataRefreshTaskFactory = new TaskFactory(new OrderedTaskScheduler());
        private readonly CancellationTokenSource pageDataRefreshTaskCts = new CancellationTokenSource();

        private bool isDataRefreshing;

        [ImportingConstructor]
        public XqTargetClosePositionHistoryViewCtrl(
            XqTargetClosePositionHistoryVM contentViewModel,
            ILoginDataService loginDataService,
            ExportFactory<XqTargetPositionTradeDetailDialogCtrl> positionTradeDetailDialogCtrlFactory)
        {
            this.contentViewModel = contentViewModel;
            this.loginDataService = loginDataService;
            this.positionTradeDetailDialogCtrlFactory = positionTradeDetailDialogCtrlFactory;

            refreshCurrentDateDataCmd = new DelegateCommand(RefreshCurrentDateViewData, CanRefreshCurrentDateViewData);
            positionItemDetailCmd = new DelegateCommand(ShowPositionItemDetail, CanShowPositionItemDetail);
        }

        /// <summary>
        /// 操作账户 id
        /// </summary>
        public long SubAccountId { get; set; }

        /// <summary>
        /// 标的 key
        /// </summary>
        public string XqTargetKey { get; set; }

        /// <summary>
        /// 标的类型
        /// </summary>
        public ClientXQOrderTargetType XqTargetType { get; set; }

        public object ContentView => contentViewModel.View;

        public void Initialize()
        {
            if (SubAccountId <= 0) throw new ArgumentException("SubAccountId must > 0");
            if (string.IsNullOrEmpty(XqTargetKey)) throw new ArgumentException("XqTargetKey can't be empty.");

            contentViewModel.UpdateXqTargetType(XqTargetType);
            contentViewModel.RefreshDataCmd = refreshCurrentDateDataCmd;
            contentViewModel.PositionItemDetailCmd = positionItemDetailCmd;
            PropertyChangedEventManager.AddHandler(contentViewModel, ContentViewModelPropChanged, "");
        }

        public void Run()
        {
            contentViewModel.SelectedDate = DateTime.Now;
        }

        public void Shutdown()
        {
            PropertyChangedEventManager.RemoveHandler(contentViewModel, ContentViewModelPropChanged, "");
        }
        
        private void ContentViewModelPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(XqTargetClosePositionHistoryVM.SelectedDate))
            {
                refreshCurrentDateDataCmd?.RaiseCanExecuteChanged();
                positionItemDetailCmd?.RaiseCanExecuteChanged();
                RefreshCurrentDateViewData();
            }
        }

        private void CancelPageDataRefreshTasks()
        {
            try
            {
                pageDataRefreshTaskCts?.Cancel();
                pageDataRefreshTaskCts?.Dispose();
            }
            catch (Exception) { }
        }
        
        private void UpdateIsDataRefreshing(bool isRefresh)
        {
            this.isDataRefreshing = isRefresh;
            DispatcherHelper.CheckBeginInvokeOnUI(() => 
            {
                refreshCurrentDateDataCmd?.RaiseCanExecuteChanged();
                positionItemDetailCmd?.RaiseCanExecuteChanged();
            });
        }
        
        private bool CanRefreshCurrentDateViewData()
        {
            return !isDataRefreshing && contentViewModel.SelectedDate != null;
        }

        private void RefreshCurrentDateViewData()
        {
            if (isDataRefreshing) return;

            var selectedDate = contentViewModel.SelectedDate;
            if (selectedDate == null) return;

            DateHelper.GetDateStartAndEndTimestampMs(selectedDate.Value, DateTimeKind.Local, 
                out long selectDateStartTSMs, out long selectDateEndTSMs);
            CancellationToken cancelToken = CancellationToken.None;
            try
            {
                cancelToken = pageDataRefreshTaskCts.Token;
            }
            catch (Exception)
            {
                return;
            }
            
            UpdateIsDataRefreshing(true);
            pageDataRefreshTaskFactory.StartNew(() =>
            {
                if (cancelToken.IsCancellationRequested) return;
                
                var closedPositionSummary = QueryHistoryClosedPositionSummary(selectDateStartTSMs);
                IInterfaceInteractResponse<IEnumerable<StatClosedPositionItem>> detailPositionItemsResp = null;
                if (closedPositionSummary != null)
                {
                    detailPositionItemsResp = QueryHistoryClosedPositionDetailItems(selectDateStartTSMs, CancellationToken.None);
                }
                
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    if (cancelToken.IsCancellationRequested) return;
                    UpdateIsDataRefreshing(false);
                    contentViewModel.RefreshDataTimestamp = (long)DateHelper.NowUnixTimeSpan().TotalSeconds;
                    InvalidateContentView(closedPositionSummary, detailPositionItemsResp);
                });
            }, cancelToken);
        }
        
        private void InvalidateContentView(StatClosedPositionDateSummary closedPositionSummary, 
            IInterfaceInteractResponse<IEnumerable<StatClosedPositionItem>> detailPositionItemsResp)
        {
            contentViewModel.ArchivedClosedPositionSummary = closedPositionSummary;

            var detailPositionItems = detailPositionItemsResp?.CorrectResult?.Select(i => GenerateXqTargetDetailPositionDMFromIDLItem(i)).ToArray();
            contentViewModel.BuyDetailPositionItems.Clear();
            contentViewModel.SellDetailPositionItems.Clear();
            if (detailPositionItems != null)
            {
                var buyItems = detailPositionItems.Where(i => i.Direction == ClientTradeDirection.BUY).ToArray();
                var sellItems = detailPositionItems.Where(i => i.Direction == ClientTradeDirection.SELL).ToArray();
                contentViewModel.BuyDetailPositionItems.AddRange(buyItems);
                contentViewModel.SellDetailPositionItems.AddRange(sellItems);
            }
        }

        private XqTargetDetailPositionDM_Archived GenerateXqTargetDetailPositionDMFromIDLItem(StatClosedPositionItem idlItem)
        {
            var rectifyPrice = XueQiaoBusinessHelper.MakePreciseXQContractRelatedPrice(idlItem.Price, XueQiaoConstants.XQContractPriceMinimumPirceTick);
            var clientItem = new XqTargetDetailPositionDM_Archived(idlItem.TargetKey,
                idlItem.TargetType.ToClientXQOrderTargetType(),
                idlItem.SubAccountId, idlItem.ClosedItemId)
            {
                Direction = (idlItem.Direction == StatDirection.STAT_BUY) ? ClientTradeDirection.BUY : ClientTradeDirection.SELL,
                Price = rectifyPrice,
                Quantity = idlItem.ClosedQuantity,
                SourceDataTimestampMs = idlItem.Source.SourceDataTimestampMs,
                SourceDataChannel = idlItem.Source.SourceDataChannel.ToXqTargetPositionDataSourceChannel()
            };
            return clientItem;
        }

        public StatClosedPositionDateSummary QueryHistoryClosedPositionSummary(long closedDateTimestampMs)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;
            var subAccountId = this.SubAccountId;
            var targetKey = this.XqTargetKey;
            var targetType = this.XqTargetType.ToHostingXQTargetType();
            
            var pageOption = new IndexedPageOption { PageIndex = 0, PageSize = 1 };
            var option = new QueryHistoryClosedPositionOption
            {
                SubAccountId = subAccountId,
                TargetKey = targetKey,
                TargetType = targetType,
                ClosedDateTimestampMs = closedDateTimestampMs
            };
            var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.queryHistoryClosedPositionPage(landingInfo, option, pageOption);
            return resp?.CorrectResult?.StatClosedPositionDateSummaryList?.FirstOrDefault(i => i.SubAccountId == subAccountId && i.TargetKey == targetKey);
        }

        public IInterfaceInteractResponse<IEnumerable<StatClosedPositionItem>> QueryHistoryClosedPositionDetailItems(long closedDateTimestampMs, CancellationToken cancelToken)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;
            var subAccountId = this.SubAccountId;
            var targetKey = this.XqTargetKey;
            var targetType = this.XqTargetType.ToHostingXQTargetType();

            var queryPageSize = 50;
            IInterfaceInteractResponse<StatClosedPositionDetail> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<StatClosedPositionItem>(pageIndex => {

                if (cancelToken.IsCancellationRequested) return null;

                var option = new QueryHistoryClosedPositionOption
                {
                    SubAccountId = subAccountId,
                    TargetKey = targetKey,
                    TargetType = targetType,
                    ClosedDateTimestampMs = closedDateTimestampMs
                };
                var pageOption = new IndexedPageOption { NeedTotalCount = true, PageIndex = pageIndex, PageSize = queryPageSize };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.queryHistoryClosedPositionDetail(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<StatClosedPositionItem>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.TotalNum,
                    Page = pageInfo?.StatClosedPositionItemList
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.PositionItemId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<StatClosedPositionItem>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems)
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };

            return tarResp;
        }

        private bool CanShowPositionItemDetail(object obj)
        {
            return !isDataRefreshing;
        }

        private void ShowPositionItemDetail(object obj)
        {
            var item = obj as XqTargetDetailPositionDM_Archived;
            if (item == null) return;
            
            var ctrl = positionTradeDetailDialogCtrlFactory.CreateExport().Value;
            ctrl.DialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
            ctrl.DetailPositionDM = item;
            ctrl.DetailPositionId = item.DetailItemId;

            ctrl.Initialize();
            ctrl.Run();
            ctrl.Shutdown();
        }
    }
}
