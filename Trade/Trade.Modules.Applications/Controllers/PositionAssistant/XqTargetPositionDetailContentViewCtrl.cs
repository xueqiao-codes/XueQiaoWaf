using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Modules.Applications.ViewModels;
using IDLAutoGenerated.Util;
using XueQiaoWaf.Trade.Modules.Applications.DataModels;
using System.Threading;
using xueqiao.trade.hosting.position.statis;
using XueQiaoFoundation.Shared.Helper;
using System.Waf.Applications;
using NativeModel.Trade;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using lib.xqclient_base.thriftapi_mediation.Interface;
using lib.xqclient_base.thriftapi_mediation;
using XueQiaoFoundation.BusinessResources.Helpers;
using XueQiaoFoundation.BusinessResources.Constants;
using lib.xqclient_base.logger;
using business_foundation_lib.xq_thriftlib_config;
using business_foundation_lib.helper;

namespace XueQiaoWaf.Trade.Modules.Applications.Controllers
{
    /// <summary>
    /// 雪橇标的持仓明细页 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class XqTargetPositionDetailContentViewCtrl : IController
    {
        private readonly XqTargetPositionDetailContentVM contentViewModel;
        private readonly ILoginDataService loginDataService;
        private readonly IMessageWindowService messageWindowService;
        private readonly ExportFactory<XqTargetQuickClosePositionDialogCtrl> quickClosePositionDialogCtrlFactory;
        private readonly ExportFactory<XqTargetPositionTradeDetailDialogCtrl> positionTradeDetailDialogCtrlFactory;

        private readonly DelegateCommand positionItemDetailCmd;
        private readonly DelegateCommand toRecoverUnarchivedClosedPositionCmd;
        private readonly DelegateCommand toQuickClosePositionCmd;

        private readonly TaskFactory pageDataRefreshTaskFactory = new TaskFactory(new System.Threading.Tasks.Schedulers.OrderedTaskScheduler());
        private readonly CancellationTokenSource pageDataRefreshTaskCts = new CancellationTokenSource();

        private bool isDataRefreshing;

        [ImportingConstructor]
        public XqTargetPositionDetailContentViewCtrl(
            XqTargetPositionDetailContentVM contentViewModel,
            ILoginDataService loginDataService,
            IMessageWindowService messageWindowService,
            ExportFactory<XqTargetQuickClosePositionDialogCtrl> quickClosePositionDialogCtrlFactory,
             ExportFactory<XqTargetPositionTradeDetailDialogCtrl> positionTradeDetailDialogCtrlFactory)
        {
            this.contentViewModel = contentViewModel;
            this.loginDataService = loginDataService;
            this.messageWindowService = messageWindowService;
            this.quickClosePositionDialogCtrlFactory = quickClosePositionDialogCtrlFactory;
            this.positionTradeDetailDialogCtrlFactory = positionTradeDetailDialogCtrlFactory;

            positionItemDetailCmd = new DelegateCommand(ShowPositionItemDetail, CanShowPositionItemDetail);
            toRecoverUnarchivedClosedPositionCmd = new DelegateCommand(ToRecoverUnarchivedClosedPosition, CanToRecoverUnarchivedClosedPosition);
            toQuickClosePositionCmd = new DelegateCommand(ToQuickClosePosition, CanToQuickClosePosition);
        }
        
        public TargetPositionDataModel XqTargetPositionItem { get; set; }

        public object ContentView => contentViewModel.View;

        public void Initialize()
        {
            if (XqTargetPositionItem == null) throw new ArgumentNullException("XqTargetPositionItem");

            contentViewModel.PositionItemDetailCmd = positionItemDetailCmd;
            contentViewModel.ToRecoverUnarchivedClosedPositionCmd = toRecoverUnarchivedClosedPositionCmd;
            contentViewModel.ToQuickClosePositionCmd = toQuickClosePositionCmd;
            contentViewModel.UpdateXqTargetType(XqTargetPositionItem.TargetType);
        }

        public void Run()
        {
            RefreshViewData();
        }
        
        public void Shutdown()
        {
            CancelPageDataRefreshTasks();
        }

        /// <summary>
        /// 刷新页面内容
        /// </summary>
        public void RefreshViewDataIfNeed()
        {
            RefreshViewData();
        }

        private void CancelPageDataRefreshTasks()
        {
            try
            {
                pageDataRefreshTaskCts?.Cancel();
                pageDataRefreshTaskCts?.Dispose();
            }
            catch (Exception) { }
        }

        private bool CanToRecoverUnarchivedClosedPosition()
        {
            return !isDataRefreshing && contentViewModel.UnarchivedClosedPositionSummary != null;
        }

        private void ToRecoverUnarchivedClosedPosition()
        {
            var containerWin = UIHelper.GetWindowOfUIElement(contentViewModel.View);
            if (true != messageWindowService.ShowQuestionDialog(containerWin, null, null, null, "确定要恢复持仓吗？", true, "恢复", "取消"))
            {
                return;
            }

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            var subAccountId = XqTargetPositionItem.SubAccountFields.SubAccountId;
            var targetKey = XqTargetPositionItem.TargetKey;
            var targetType = XqTargetPositionItem.TargetType.ToHostingXQTargetType();

            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                .recoverClosedPositionAsync(landingInfo, subAccountId, targetKey, targetType, CancellationToken.None)
                .ContinueWith(t => 
                {
                    var resp = t.Result;
                    DispatcherHelper.CheckBeginInvokeOnUI(() => 
                    {
                        if (resp?.SourceException != null)
                        {
                            var nowWin = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                            if (nowWin != null)
                            {
                                messageWindowService.ShowMessageDialog(nowWin, null, null, null,
                                    FoundationHelper.FormatResponseDisplayErrorMsg(resp, "恢复持仓出错!\n"));
                            }
                        }
                        RefreshViewData();
                    });
                });
        }

        private bool CanToQuickClosePosition()
        {
            return !isDataRefreshing
                && (contentViewModel.BuyDetailPositionItems.Count > 0) 
                && (contentViewModel.SellDetailPositionItems.Count > 0);
        }

        private void ToQuickClosePosition()
        {
            if (!CanToQuickClosePosition()) return;

            var allDetailPositionItems = contentViewModel.BuyDetailPositionItems.ToArray()
                .Union(contentViewModel.SellDetailPositionItems.ToArray()).ToArray();
            if (allDetailPositionItems.Any() != true) return;

            var dialogCtrl = quickClosePositionDialogCtrlFactory.CreateExport().Value;
            dialogCtrl.DialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
            dialogCtrl.XqTargetPositionItem = this.XqTargetPositionItem;
            dialogCtrl.WaitToCloseDetailPositionItems = allDetailPositionItems;

            dialogCtrl.Initialize();
            dialogCtrl.Run();
            dialogCtrl.Shutdown();

            if (dialogCtrl.DidTrySubmitClosedPositionItems == true)
            {
                // refresh
                RefreshViewData();
            }
        }

        private void UpdateIsDataRefreshing(bool isRefresh)
        {
            this.isDataRefreshing = isRefresh;
            DispatcherHelper.CheckBeginInvokeOnUI(() => 
            {
                positionItemDetailCmd?.RaiseCanExecuteChanged();
                toRecoverUnarchivedClosedPositionCmd?.RaiseCanExecuteChanged();
                toQuickClosePositionCmd?.RaiseCanExecuteChanged();
            });
        }

        private void RefreshViewData()
        {
            if (isDataRefreshing) return;

            CancellationToken cancelToken = CancellationToken.None;
            try
            {
                cancelToken = pageDataRefreshTaskCts.Token;
            }
            catch (Exception)
            {
                return;
            }
            
            UpdateIsDataRefreshing(true);
            pageDataRefreshTaskFactory.StartNew(() => 
            {
                if (cancelToken.IsCancellationRequested) return;

                var tf = new TaskFactory();
                var ts = new List<Task>();

                StatClosedPositionDateSummary closedPositionSummary = null;
                IInterfaceInteractResponse<IEnumerable<StatPositionItem>> detailPositionItemsResp = null;

                ts.Add(tf.StartNew(() => 
                {
                    cancelToken.ThrowIfCancellationRequested();
                    closedPositionSummary = QueryUnarchivedClosedPositionSummary();
                    cancelToken.ThrowIfCancellationRequested();
                }));

                ts.Add(tf.StartNew(() =>
                {
                    cancelToken.ThrowIfCancellationRequested();
                    detailPositionItemsResp = QueryUnarchivedDetailPositionItems(CancellationToken.None);
                    cancelToken.ThrowIfCancellationRequested();
                }));

                try
                {
                    Task.WaitAll(ts.ToArray());
                }
                catch (AggregateException _ae)
                {
                    if (!cancelToken.IsCancellationRequested)
                    {
                        var exps = _ae.Flatten()?.InnerExceptions;
                        if (exps?.Any() == true)
                        {
                            foreach (var exp in exps)
                            {
                                AppLog.Error($"Failed RefreshViewData in task, {exp.GetType().Name}");
                            }
                        }
                    }
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        UpdateIsDataRefreshing(false);
                        InvalidateContentView(null, null);
                    });
                    return;
                }

                if (cancelToken.IsCancellationRequested) return;
                DispatcherHelper.CheckBeginInvokeOnUI(() => 
                {
                    UpdateIsDataRefreshing(false);
                    InvalidateContentView(closedPositionSummary, detailPositionItemsResp);
                });
            }, cancelToken);
        }
        
        private void InvalidateContentView(StatClosedPositionDateSummary closedPositionSummary, IInterfaceInteractResponse<IEnumerable<StatPositionItem>> detailPositionItemsResp)
        {
            contentViewModel.UnarchivedClosedPositionSummary = closedPositionSummary;

            var detailPositionItems = detailPositionItemsResp?.CorrectResult?.Select(i => GenerateXqTargetDetailPositionDMFromIDLItem(i)).ToArray();
            contentViewModel.BuyDetailPositionItems.Clear();
            contentViewModel.SellDetailPositionItems.Clear();
            if (detailPositionItems != null)
            {
                var buyItems = detailPositionItems.Where(i => i.Direction == ClientTradeDirection.BUY).ToArray();
                var sellItems = detailPositionItems.Where(i => i.Direction == ClientTradeDirection.SELL).ToArray();
                contentViewModel.BuyDetailPositionItems.AddRange(buyItems);
                contentViewModel.SellDetailPositionItems.AddRange(sellItems);
            }
            
            toQuickClosePositionCmd?.RaiseCanExecuteChanged();
            toRecoverUnarchivedClosedPositionCmd?.RaiseCanExecuteChanged();
        }

        private XqTargetDetailPositionDM_Unarchived GenerateXqTargetDetailPositionDMFromIDLItem(StatPositionItem idlItem)
        {
            var rectifyPrice = XueQiaoBusinessHelper.MakePreciseXQContractRelatedPrice(idlItem.Price, XueQiaoConstants.XQContractPriceMinimumPirceTick);
            var clientItem = new XqTargetDetailPositionDM_Unarchived(idlItem.TargetKey,
                idlItem.TargetType.ToClientXQOrderTargetType(),
                idlItem.SubAccountId, idlItem.PositionItemId)
            {
                Direction = (idlItem.Direction == StatDirection.STAT_BUY) ? ClientTradeDirection.BUY: ClientTradeDirection.SELL,
                Price = rectifyPrice,
                Quantity = idlItem.Quantity,
                SourceDataTimestampMs = idlItem.Source.SourceDataTimestampMs,
                SourceDataChannel = idlItem.Source.SourceDataChannel.ToXqTargetPositionDataSourceChannel()
            };
            return clientItem;
        }

        private StatClosedPositionDateSummary QueryUnarchivedClosedPositionSummary()
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;
            var subAccountId = XqTargetPositionItem.SubAccountFields.SubAccountId;
            var targetKey = XqTargetPositionItem.TargetKey;
            var targetType = XqTargetPositionItem.TargetType.ToHostingXQTargetType();

            var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.queryCurrentDayStatClosedPositionPage(landingInfo, subAccountId, targetKey, targetType);
            return resp?.CorrectResult?.StatClosedPositionDateSummaryList?.FirstOrDefault(i=>i.SubAccountId == subAccountId && i.TargetKey == targetKey);
        }

        private IInterfaceInteractResponse<IEnumerable<StatPositionItem>> QueryUnarchivedDetailPositionItems(CancellationToken cancelToken)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;
            var subAccountId = XqTargetPositionItem.SubAccountFields.SubAccountId;
            var targetKey = XqTargetPositionItem.TargetKey;
            var targetType = XqTargetPositionItem.TargetType.ToHostingXQTargetType();

            var queryPageSize = 50;
            IInterfaceInteractResponse<StatPositionItemPage> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<StatPositionItem>(pageIndex => {

                if (cancelToken.IsCancellationRequested) return null;

                var option = new QueryStatPositionItemOption
                {
                    SubAccountId = subAccountId,
                    TargetKey = targetKey,
                    TargetType = targetType
                };
                var pageOption = new IndexedPageOption { NeedTotalCount = true, PageIndex = pageIndex, PageSize = queryPageSize };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.queryStatPositionItemPage(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<StatPositionItem>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.TotalNum,
                    Page = pageInfo?.StatPositionItemList?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.PositionItemId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<StatPositionItem>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems)
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };

            return tarResp;
        }

        private bool CanShowPositionItemDetail(object obj)
        {
            return !isDataRefreshing;
        }

        private void ShowPositionItemDetail(object obj)
        {
            var item = obj as XqTargetDetailPositionDM_Unarchived;
            if (item == null) return;

            var ctrl =  positionTradeDetailDialogCtrlFactory.CreateExport().Value;
            ctrl.DialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
            ctrl.DetailPositionDM = item;
            ctrl.DetailPositionId = item.DetailItemId;

            ctrl.Initialize();
            ctrl.Run();
            ctrl.Shutdown();
        }

    }
}
