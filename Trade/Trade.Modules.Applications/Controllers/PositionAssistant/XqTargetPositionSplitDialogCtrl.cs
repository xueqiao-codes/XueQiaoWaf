using business_foundation_lib.helper;
using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation;
using lib.xqclient_base.thriftapi_mediation.Interface;
using NativeModel.Trade;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Waf.Applications;
using System.Windows;
using System.Windows.Controls.Primitives;
using xueqiao.trade.hosting.position.statis;
using xueqiao.trade.hosting.proxy;
using XueQiaoFoundation.BusinessResources.Constants;
using XueQiaoFoundation.BusinessResources.Helpers;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoFoundation.UI.Components.Popup;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

using XueQiaoWaf.Trade.Modules.Applications.DataModels;
using XueQiaoWaf.Trade.Modules.Applications.ViewModels;

namespace XueQiaoWaf.Trade.Modules.Applications.Controllers
{
    /// <summary>
    /// 雪橇标的持仓拆分窗口 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class XqTargetPositionSplitDialogCtrl : IController
    {
        private readonly XqTargetPositionSplitVM contentViewModel;
        private readonly XqTargetPositionItemDialogTitleVM dialogTitleVM;
        private readonly ExportFactory<IPopup> popupFactory;
        private readonly ExportFactory<QuestionPopupContent> questionPopupContentFactory;
        private readonly ILoginDataService loginDataService;
        private readonly ILoginUserManageService loginUserManageService;
        private readonly IMessageWindowService messageWindowService;
        private readonly IEventAggregator eventAggregator;
        private readonly DelegateCommand triggerSplitPositionItemCmd;

        private readonly TaskFactory viewDataRefreshTaskFactory = new TaskFactory(new System.Threading.Tasks.Schedulers.OrderedTaskScheduler());
        private readonly CancellationTokenSource viewDataRefreshTaskCts = new CancellationTokenSource();
        private bool isViewDataRefreshing;

        private IMessageWindow dialog;

        [ImportingConstructor]
        public XqTargetPositionSplitDialogCtrl(
            XqTargetPositionSplitVM contentViewModel,
            XqTargetPositionItemDialogTitleVM dialogTitleVM,
            ExportFactory<IPopup> popupFactory,
            ExportFactory<QuestionPopupContent> questionPopupContentFactory,
            ILoginDataService loginDataService,
            ILoginUserManageService loginUserManageService,
            IMessageWindowService messageWindowService,
            IEventAggregator eventAggregator)
        {
            this.contentViewModel = contentViewModel;
            this.dialogTitleVM = dialogTitleVM;
            this.popupFactory = popupFactory;
            this.questionPopupContentFactory = questionPopupContentFactory;
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.messageWindowService = messageWindowService;
            this.eventAggregator = eventAggregator;

            triggerSplitPositionItemCmd = new DelegateCommand(TriggerSplitPositionItem, CanTriggerSplitPositionItem);

            loginUserManageService.HasLogouted += RecvUserHasLogouted;
        }

        public object DialogOwner { get; set; }

        public TargetPositionDataModel XqTargetPositionItem { get; set; }

        public void Initialize()
        {
            if (XqTargetPositionItem == null)
                throw new ArgumentNullException("XqTargetPositionItem");

            dialogTitleVM.XqTargetPositionItem = XqTargetPositionItem;
            if(XqTargetPositionItem.TargetType == ClientXQOrderTargetType.COMPOSE_TARGET)
                dialogTitleVM.TitlePrefix = "组合持仓拆分：";
            else
                dialogTitleVM.TitlePrefix = "持仓拆分：";

            contentViewModel.XqTargetPositionItem = XqTargetPositionItem;
            contentViewModel.TriggerSplitPositionItemCmd = triggerSplitPositionItemCmd;
        }

        public void Run()
        {
            RefreshViewData();

            dialog = messageWindowService.CreateContentCustomWindow(DialogOwner, null, new Size(700, 700), true, true,
                true, dialogTitleVM.View, contentViewModel.View);
            dialog.ShowDialog();
        }

        public void Shutdown()
        {
            if (dialog != null)
            {
                dialog.Close();
                dialog = null;
            }
            loginUserManageService.HasLogouted -= RecvUserHasLogouted;
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            Shutdown();
        }
        
        private void SplitPosition(XqTargetPositionSplitEditItem splitEditItem)
        {
            if (splitEditItem == null) return;

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            var subAccountId = XqTargetPositionItem.SubAccountFields.SubAccountId;
            var targetKey = XqTargetPositionItem.TargetKey;
            var detailPositionId = splitEditItem.DetailItemId;

            var req = new DisassembleComposePositionReq
            {
                SubAccountId = subAccountId,
                TargetKey = targetKey,
                TargetType = XqTargetPositionItem.TargetType.ToHostingXQTargetType(),
                PositionItemDataList = new List<PositionItemData>()
            };
            req.PositionItemDataList.Add(new PositionItemData { PositionItemId = detailPositionId, Quantity = splitEditItem.SplitQuantity });

            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.disassembleComposeAsync(landingInfo, req, CancellationToken.None)
                .ContinueWith(t =>
                {
                    var resp = t.Result;
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        if (resp?.SourceException != null)
                        {
                            var nowWin = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                            if (nowWin != null)
                            {
                                messageWindowService.ShowMessageDialog(nowWin, null, null, null,
                                    FoundationHelper.FormatResponseDisplayErrorMsg(resp, "拆分持仓出错!\n"));
                            }
                        }
                        RefreshDetailPositionItem(detailPositionId);
                    });
                });
        }

        private bool CanTriggerSplitPositionItem(object obj)
        {
            var args = obj as object[];
            if (args?.Count() != 2) return false;

            var splitEditItem = args[0] as XqTargetPositionSplitEditItem;
            var triggerElement = args[1] as UIElement;
            if (splitEditItem == null || triggerElement == null) return false;

            return splitEditItem.SplitQuantity > 0 && splitEditItem.SplitQuantity <= splitEditItem.Quantity
                && !isViewDataRefreshing;
        }

        private void TriggerSplitPositionItem(object obj)
        {
            var args = obj as object[];
            if (args?.Count() != 2) return;

            var splitEditItem = args[0] as XqTargetPositionSplitEditItem;
            var triggerElement = args[1] as UIElement;
            if (splitEditItem == null || triggerElement == null) return;
            
            var popup = popupFactory.CreateExport().Value;
            popup.Placement = PlacementMode.Right;
            popup.PlacementTarget = triggerElement;
            popup.StaysOpen = false;

            var questionContent = questionPopupContentFactory.CreateExport().Value;
            questionContent.QuestionMessage = "确认进行组合持仓拆分吗？";
            questionContent.PositiveButtonVisible = true;
            questionContent.NegativeButtonVisible = true;
            questionContent.PositiveButtonTitle = "拆分";
            questionContent.NegativeButtonTitle = "取消";
            questionContent.PositiveButtonClicked += (s, e) =>
            {
                popup.Close();
                SplitPosition(splitEditItem);
            };
            questionContent.NegativeButtonClicked += (s, e) => popup.Close();

            popup.Content = questionContent;
            popup.Open();
        }

        private void UpdateIsViewDataRefreshing(bool isRefresh)
        {
            this.isViewDataRefreshing = isRefresh;
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                triggerSplitPositionItemCmd?.RaiseCanExecuteChanged();
            });
        }

        private void RefreshViewData()
        {
            if (isViewDataRefreshing) return;

            CancellationToken cancelToken = CancellationToken.None;
            try
            {
                cancelToken = viewDataRefreshTaskCts.Token;
            }
            catch (Exception)
            {
                return;
            }

            UpdateIsViewDataRefreshing(true);
            viewDataRefreshTaskFactory.StartNew(() =>
            {
                if (cancelToken.IsCancellationRequested) return;
                var detailPositionItemsResp = QueryUnarchivedDetailPositionItems(null, CancellationToken.None);
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    if (cancelToken.IsCancellationRequested) return;
                    UpdateIsViewDataRefreshing(false);
                    InvalidateContentView(detailPositionItemsResp);
                });
            }, cancelToken);
        }

        private void RefreshDetailPositionItem(long detailPositionItemId)
        {
            if (isViewDataRefreshing) return;

            CancellationToken cancelToken = CancellationToken.None;
            try
            {
                cancelToken = viewDataRefreshTaskCts.Token;
            }
            catch (Exception)
            {
                return;
            }

            viewDataRefreshTaskFactory.StartNew(() =>
            {
                if (cancelToken.IsCancellationRequested) return;
                var resp = QueryUnarchivedDetailPositionItems(detailPositionItemId, CancellationToken.None);
                var tarDetailItem = resp?.CorrectResult?.FirstOrDefault(i => i.PositionItemId == detailPositionItemId);
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    if (cancelToken.IsCancellationRequested) return;
                    if (resp?.SourceException == null)
                    {
                        InvalidateEditItemView(detailPositionItemId, tarDetailItem);
                    }
                });
            }, cancelToken);
        }
        
        private void InvalidateContentView(IInterfaceInteractResponse<IEnumerable<StatPositionItem>> detailPositionItemsResp)
        {
            var originEditItems = contentViewModel.PositionSplitEditItems;
            if (originEditItems?.Any() == true)
            {
                foreach (var originEditItem in originEditItems)
                {
                    PropertyChangedEventManager.RemoveHandler(originEditItem, SplitEditItemPropChanged, "");
                }
            }
            
            var positionSplitEditItems = detailPositionItemsResp?.CorrectResult?.Select(i => GenerateSplitEditItem(i)).ToArray();
            contentViewModel.PositionSplitEditItems.Clear();
            contentViewModel.PositionSplitEditItems.AddRange(positionSplitEditItems);

            if (positionSplitEditItems?.Any() == true)
            {
                foreach (var splitEditItem in positionSplitEditItems)
                {
                    PropertyChangedEventManager.AddHandler(splitEditItem, SplitEditItemPropChanged, "");
                }
            }

            triggerSplitPositionItemCmd?.RaiseCanExecuteChanged();
        }

        private void InvalidateEditItemView(long detailPositionItemId, StatPositionItem existDetailItem)
        {
            var tarEditItem = contentViewModel.PositionSplitEditItems?.FirstOrDefault(i => i.DetailItemId == detailPositionItemId);
            if (tarEditItem == null) return;

            if (existDetailItem == null)
            {
                contentViewModel.PositionSplitEditItems.Remove(tarEditItem);
                PropertyChangedEventManager.RemoveHandler(tarEditItem, SplitEditItemPropChanged, "");
            }
            else
            {
                PropertyChangedEventManager.RemoveHandler(tarEditItem, SplitEditItemPropChanged, "");

                var rectifyPrice = XueQiaoBusinessHelper.MakePreciseXQContractRelatedPrice(existDetailItem.Price, XueQiaoConstants.XQContractPriceMinimumPirceTick);

                tarEditItem.Direction = (existDetailItem.Direction == StatDirection.STAT_BUY) ? ClientTradeDirection.BUY : ClientTradeDirection.SELL;
                tarEditItem.Price = rectifyPrice;
                tarEditItem.Quantity = existDetailItem.Quantity;
                tarEditItem.SourceDataTimestampMs = existDetailItem.Source.SourceDataTimestampMs;
                tarEditItem.SourceDataChannel = existDetailItem.Source.SourceDataChannel.ToXqTargetPositionDataSourceChannel();

                PropertyChangedEventManager.AddHandler(tarEditItem, SplitEditItemPropChanged, "");
            }
        }

        private void SplitEditItemPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(XqTargetPositionSplitEditItem.SplitQuantity))
            {
                triggerSplitPositionItemCmd?.RaiseCanExecuteChanged();
            }
        }

        private XqTargetPositionSplitEditItem GenerateSplitEditItem(StatPositionItem idlItem)
        {
            var rectifyPrice = XueQiaoBusinessHelper.MakePreciseXQContractRelatedPrice(idlItem.Price, XueQiaoConstants.XQContractPriceMinimumPirceTick);
            return new XqTargetPositionSplitEditItem(idlItem.TargetKey, 
                idlItem.TargetType.ToClientXQOrderTargetType(), idlItem.SubAccountId, idlItem.PositionItemId)
            {
                SplitQuantity = 0,

                Direction = (idlItem.Direction == StatDirection.STAT_BUY) ? ClientTradeDirection.BUY : ClientTradeDirection.SELL,
                Price = rectifyPrice,
                Quantity = idlItem.Quantity,
                SourceDataTimestampMs = idlItem.Source.SourceDataTimestampMs,
                SourceDataChannel = idlItem.Source.SourceDataChannel.ToXqTargetPositionDataSourceChannel()
            };
        }

        /// <summary>
        /// 查询未归档持仓详情项
        /// </summary>
        /// <param name="detailPositionItemId">详情项 id，不提供则查询所有</param>
        /// <param name="cancelToken"></param>
        /// <returns></returns>
        private IInterfaceInteractResponse<IEnumerable<StatPositionItem>> QueryUnarchivedDetailPositionItems(long? detailPositionItemId, CancellationToken cancelToken)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;
            var subAccountId = XqTargetPositionItem.SubAccountFields.SubAccountId;
            var targetKey = XqTargetPositionItem.TargetKey;
            var targetType = XqTargetPositionItem.TargetType.ToHostingXQTargetType();

            var queryPageSize = 50;
            IInterfaceInteractResponse<StatPositionItemPage> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<StatPositionItem>(pageIndex => {

                if (cancelToken.IsCancellationRequested) return null;

                var option = new QueryStatPositionItemOption
                {
                    SubAccountId = subAccountId,
                    TargetKey = targetKey,
                    TargetType = targetType
                };
                if (detailPositionItemId != null)
                    option.PositionItemId = detailPositionItemId.Value;

                var pageOption = new IndexedPageOption { NeedTotalCount = true, PageIndex = pageIndex, PageSize = queryPageSize };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.queryStatPositionItemPage(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<StatPositionItem>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.TotalNum,
                    Page = pageInfo?.StatPositionItemList?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.PositionItemId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<StatPositionItem>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems)
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };

            return tarResp;
        }
    }
}
