using org.mariuszgromada.math.mxparser;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using XueQiaoFoundation.BusinessResources.Helpers;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Modules.Applications.DataModels;
using XueQiaoWaf.Trade.Modules.Applications.Helper;
using XueQiaoWaf.Trade.Modules.Applications.ViewModels;
using IDLAutoGenerated.Util;
using xueqiao.trade.hosting.position.statis;
using NativeModel.Trade;
using System.Threading;
using XueQiaoFoundation.BusinessResources.DataModels;
using XueQiaoFoundation.BusinessResources.Models;
using XueQiaoFoundation.Interfaces.Helper;
using business_foundation_lib.xq_thriftlib_config;
using business_foundation_lib.helper;

namespace XueQiaoWaf.Trade.Modules.Applications.Controllers
{
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class PositionOfComposeAddDialogCtrl : IController
    {
        private readonly PositionOfComposeAddViewModel contentViewModel;
        private readonly ExportFactory<ComposeSearchPopupController> composeSearchPopupCtrlFactory;
        private readonly ILoginDataService loginDataService;
        private readonly IMessageWindowService messageWindowService;
        private readonly IEventAggregator eventAggregator;
        private readonly IComposeGraphCacheController composeGraphCacheController;
        private readonly IComposeGraphQueryController composeGraphQueryController;
        private readonly IUserComposeViewCacheController userComposeViewCacheController;
        private readonly IUserComposeViewQueryController userComposeViewQueryController;
        private readonly IContractItemTreeQueryController contractItemTreeQueryController;
        
        private DelegateCommand toAddCmd;
        private DelegateCommand cancelCmd;
        private DelegateCommand triggerSelectComposeCmd;
        private DelegateCommand priceInputItemAutoCalculateCheckedCmd;

        private IMessageWindow dialog;

        private long? currentSelectComposeId;

        [ImportingConstructor]
        public PositionOfComposeAddDialogCtrl(PositionOfComposeAddViewModel contentViewModel,
            ExportFactory<ComposeSearchPopupController> composeSearchPopupCtrlFactory,
            ILoginDataService loginDataService,
            IMessageWindowService messageWindowService,
            IEventAggregator eventAggregator,
            IComposeGraphCacheController composeGraphCacheController,
            IComposeGraphQueryController composeGraphQueryController,
            IUserComposeViewCacheController userComposeViewCacheController,
            IUserComposeViewQueryController userComposeViewQueryController,
            IContractItemTreeQueryController contractItemTreeQueryController)
        {
            this.contentViewModel = contentViewModel;
            this.composeSearchPopupCtrlFactory = composeSearchPopupCtrlFactory;
            this.loginDataService = loginDataService;
            this.messageWindowService = messageWindowService;
            this.eventAggregator = eventAggregator;
            this.composeGraphCacheController = composeGraphCacheController;
            this.composeGraphQueryController = composeGraphQueryController;
            this.userComposeViewCacheController = userComposeViewCacheController;
            this.userComposeViewQueryController = userComposeViewQueryController;
            this.contractItemTreeQueryController = contractItemTreeQueryController;

            triggerSelectComposeCmd = new DelegateCommand(TriggerSelectCompose);
            toAddCmd = new DelegateCommand(ToAddPosition);
            cancelCmd = new DelegateCommand(LeaveDialog);
            priceInputItemAutoCalculateCheckedCmd = new DelegateCommand(PriceInputItemAutoCalculateChecked);
        }

        public object DialogOwner { get; set; }

        public long SubAccountId { get; set; }

        public bool? AddedResult { get; private set; }

        public void Initialize()
        {
            contentViewModel.TriggerSelectComposeCmd = triggerSelectComposeCmd;
            contentViewModel.ToAddCmd = toAddCmd;
            contentViewModel.CancelCmd = cancelCmd;
            contentViewModel.PriceInputItemAutoCalculateCheckedCmd = priceInputItemAutoCalculateCheckedCmd;

            PropertyChangedEventManager.AddHandler(contentViewModel, ContentViewModelPropChanged, "");
        }

        public void Run()
        {
            this.dialog = messageWindowService.CreateContentCustomWindow(DialogOwner, null, null, true, false,
                true, "组合持仓录入", contentViewModel.View);
            dialog.ShowDialog();
        }

        public void Shutdown()
        {
            if (dialog != null)
            {
                dialog.Close();
                dialog = null;
            }
            PropertyChangedEventManager.RemoveHandler(contentViewModel, ContentViewModelPropChanged, "");
        }

        private void ContentViewModelPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(PositionOfComposeAddViewModel.AutoCalculatePriceInputItem))
            {
                InvalidateAutoCalculatePrice();
            }
        }
        
        private void TriggerSelectCompose(object triggerElement)
        {
            var popCtrl = composeSearchPopupCtrlFactory.CreateExport().Value;
            popCtrl.PopupPalcementTarget = triggerElement;
            popCtrl.PopupCloseHandler = (_ctrl, _selectComposeId) => 
            {
                _ctrl.Shutdown();
                if (_selectComposeId != null && this.currentSelectComposeId != _selectComposeId)
                {
                    this.currentSelectComposeId = _selectComposeId;

                    contentViewModel.ComposeDetailContainer = new TargetCompose_ComposeDetail(_selectComposeId.Value);
                    contentViewModel.UserComposeViewContainer = new UserComposeViewContainer(_selectComposeId.Value);
                    XueQiaoFoundationHelper.SetupTargetCompose_ComposeDetail(contentViewModel.ComposeDetailContainer,
                        composeGraphCacheController, composeGraphQueryController,
                        userComposeViewCacheController, contractItemTreeQueryController,
                        XqContractNameFormatType.CommodityAcronym_Code_ContractCode,
                        _container =>
                        {
                            DispatcherHelper.CheckBeginInvokeOnUI(() => 
                            {
                                InvalidatePriceInputItems();
                            });
                        });
                    XueQiaoFoundationHelper.SetupUserComposeView(contentViewModel.UserComposeViewContainer,
                        userComposeViewCacheController, userComposeViewQueryController, false, true);
                }
            };
            popCtrl.Initialize();
            popCtrl.Run();
        }

        private void ToAddPosition()
        {
            var currComposeDetail = contentViewModel.ComposeDetailContainer;
            if (currComposeDetail == null) return;

            var dir = contentViewModel.Direction;
            var volume = contentViewModel.Quantity;
            var priceDiffItem = contentViewModel.PriceInputItems?.FirstOrDefault(i => i.PriceType == ComposePositionPriceType.PriceDiff);
            var legPrices = contentViewModel.PriceInputItems?
                .Where(i => i.PriceType == ComposePositionPriceType.LegPrice)
                .Select(i => new StatComposeLeg
                {
                    SledContractId = i.LegDetail?.BasicLeg?.SledContractId ?? 0,
                    LegTradePrice = i.Price
                }).ToArray();

            if (priceDiffItem == null || legPrices == null || legPrices?.Any(i => i.SledContractId == 0) == true)
            {
                return;
            }

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            var contructReq = new StatContructComposeReq
            {
                SubAccountId = this.SubAccountId,
                ComposeGraphId = currComposeDetail.ComposeId,
                Diretion = (dir == ClientTradeDirection.BUY) ? StatDirection.STAT_BUY : StatDirection.STAT_SELL,
                Volume = volume,
                ComposeLegs = new List<StatComposeLeg>(),
            };
            contructReq.ComposeLegs.AddRange(legPrices);
            contructReq.ComposePrice = priceDiffItem.Price;

            contentViewModel.IsAdding = true;
            var task = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.contructComposeAsync(landingInfo, contructReq, CancellationToken.None);
            task.ContinueWith(t => 
            {
                var resp = t.Result;
                DispatcherHelper.CheckBeginInvokeOnUI(() => 
                {
                    contentViewModel.IsAdding = false;
                    if (resp == null) return;
                    if (resp.SourceException != null)
                    {
                        var containerWin = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                        messageWindowService.ShowMessageDialog(containerWin, null, null, null,
                            FoundationHelper.FormatResponseDisplayErrorMsg(resp, "录入出错！\n"));
                        return;
                    }

                    this.AddedResult = true;
                    if (dialog != null)
                    {
                        dialog.Close();
                        dialog = null;
                    }
                });
            });
        }

        private void LeaveDialog()
        {
            this.AddedResult = null;
            if (dialog != null)
            {
                dialog.Close();
                dialog = null;
            }
        }

        private void PriceInputItemAutoCalculateChecked(object obj)
        {
            var item = obj as ComposePositionPriceInputItem;
            if (item == null) return;

            contentViewModel.AutoCalculatePriceInputItem = item;
        }

        private void InvalidatePriceInputItems()
        {
            var legPriceInputItems = contentViewModel.ComposeDetailContainer?.DetailLegs?
                                    .Select(i => new ComposePositionPriceInputItem(ComposePositionPriceType.LegPrice) { LegDetail = i })
                                    .ToArray();

            var originPriceInputItems = contentViewModel.PriceInputItems;
            if (originPriceInputItems?.Any() == true)
            {
                foreach (var item in originPriceInputItems)
                {
                    PropertyChangedEventManager.RemoveHandler(item, PriceInputItemPropChanged, "");
                }
            }
            if (legPriceInputItems?.Any() == true)
            {
                var priceDiffInputItem = new ComposePositionPriceInputItem(ComposePositionPriceType.PriceDiff);
                contentViewModel.PriceInputItems.Clear();
                contentViewModel.PriceInputItems.AddRange((new ComposePositionPriceInputItem[] { priceDiffInputItem }).Union(legPriceInputItems));
                foreach (var item in contentViewModel.PriceInputItems)
                {
                    PropertyChangedEventManager.AddHandler(item, PriceInputItemPropChanged, "");
                }
            }
            else
            {
                contentViewModel.PriceInputItems.Clear();
            }
            contentViewModel.AutoCalculatePriceInputItem = contentViewModel.PriceInputItems?.FirstOrDefault();
        }

        private void PriceInputItemPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(ComposePositionPriceInputItem.Price))
            {
                InvalidateAutoCalculatePrice();
            }
        }

        private void InvalidateAutoCalculatePrice()
        {
            var autoCalPriceInputItem = contentViewModel.AutoCalculatePriceInputItem;
            if (autoCalPriceInputItem == null) return;

            var formula = contentViewModel.ComposeDetailContainer?.BasicComposeGraph?.Formular;
            if (string.IsNullOrEmpty(formula)) return;

            var priceDiffVarName = "Z";
            var solveExprStr = $"{formula}-{priceDiffVarName}";

            var otherPriceInputItems = contentViewModel.PriceInputItems.Except(new ComposePositionPriceInputItem[] { autoCalPriceInputItem });
            foreach (var item in otherPriceInputItems)
            {
                if (item.PriceType == ComposePositionPriceType.LegPrice)
                {
                    var legVarName = item.LegDetail?.BasicLeg?.VariableName;
                    if (!string.IsNullOrEmpty(legVarName))
                    {
                        // 加上括号
                        solveExprStr = solveExprStr.Replace(legVarName, $"({item.Price})");
                    }
                }
                else if (item.PriceType == ComposePositionPriceType.PriceDiff)
                {
                    // 加上括号
                    solveExprStr = solveExprStr.Replace(priceDiffVarName, $"({item.Price})");
                }
            }

            var solveVarName = priceDiffVarName;
            if (autoCalPriceInputItem.PriceType == ComposePositionPriceType.LegPrice)
                solveVarName = autoCalPriceInputItem.LegDetail?.BasicLeg?.VariableName;

            //
            // <see href=http://mathparser.org/mxparser-tutorial/solving-equation-fx-0/>
            // <see href=https://github.com/mariuszgromada/MathParser.org-mXparser/issues/19>
            var solveExpr = new Expression($"solve( {solveExprStr},{solveVarName},{Int32.MinValue},{Int32.MaxValue} )");
            var calValue = solveExpr.calculate();
            if (!Double.IsNaN(calValue))
            {
                autoCalPriceInputItem.Price = calValue;
            }
        }
    }
}
