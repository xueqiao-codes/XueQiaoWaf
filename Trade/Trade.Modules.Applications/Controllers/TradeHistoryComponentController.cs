using IDLAutoGenerated.Util;
using NativeModel.Trade;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using Thrift.Collections;
using xueqiao.trade.hosting.arbitrage.thriftapi;
using xueqiao.trade.hosting.history.thriftapi;
using xueqiao.trade.hosting.terminal.ao;
using XueQiaoFoundation.BusinessResources.Models;
using XueQiaoFoundation.BusinessResources.DataModels;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Modules.Applications.Helper;
using XueQiaoWaf.Trade.Modules.Applications.ServiceControllers.Events;
using XueQiaoWaf.Trade.Modules.Applications.ViewModels;
using lib.xqclient_base.thriftapi_mediation.Interface;
using lib.xqclient_base.thriftapi_mediation;
using XueQiaoFoundation.BusinessResources.Constants;
using System.Windows;
using XueQiaoWaf.Trade.Interfaces.Applications;
using XueQiaoFoundation.BusinessResources.Helpers;
using business_foundation_lib.xq_thriftlib_config;

namespace XueQiaoWaf.Trade.Modules.Applications.Controllers
{
    /// <summary>
    /// 历史成交组件 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class TradeHistoryComponentController : IController
    {
        private readonly TradeHistoryListViewModel listViewModel;
        private readonly ExportFactory<IXqOrderDetailDialogCtrl> orderDetailDialogCtrlFactory;
        private readonly ILoginDataService loginDataService;
        private readonly IContractItemTreeQueryController contractItemTreeQueryController;
        private readonly ISubAccountXQEffectOrderQueryController subAccountXQEffectOrderQueryCtrl;
        private readonly IUserSubAccountRelatedItemQueryController subAccountRelatedItemQueryController;
        private readonly IUserSubAccountRelatedItemCacheController subAccountRelatedItemCacheController;
        private readonly IHostingUserQueryController hostingUserQueryController;
        private readonly IHostingUserCacheController hostingUserCacheController;
        private readonly IComposeGraphQueryController composeGraphQueryController;
        private readonly IComposeGraphCacheController composeGraphCacheController;
        private readonly IUserComposeViewQueryController userComposeViewQueryController;
        private readonly IUserComposeViewCacheController userComposeViewCacheController;
        private readonly IEventAggregator eventAggregator;

        private readonly DelegateCommand toShowOrderExecuteDetailCmd;
        private readonly DelegateCommand clickItemTargetKeyRelatedColumnCmd;
        private readonly DelegateCommand refreshListCmd;
        private bool isListRefreshing;

        [ImportingConstructor]
        public TradeHistoryComponentController(TradeHistoryListViewModel listViewModel,
            ExportFactory<IXqOrderDetailDialogCtrl> orderDetailDialogCtrlFactory,
            ILoginDataService loginDataService,
            IContractItemTreeQueryController contractItemTreeQueryController,
            ISubAccountXQEffectOrderQueryController subAccountXQEffectOrderQueryCtrl,
            IUserSubAccountRelatedItemQueryController subAccountRelatedItemQueryController,
            IUserSubAccountRelatedItemCacheController subAccountRelatedItemCacheController,
            IHostingUserQueryController hostingUserQueryController,
            IHostingUserCacheController hostingUserCacheController,
            IComposeGraphQueryController composeGraphQueryController,
            IComposeGraphCacheController composeGraphCacheController,
            IUserComposeViewQueryController userComposeViewQueryController,
            IUserComposeViewCacheController userComposeViewCacheController,
            IEventAggregator eventAggregator)
        {
            this.listViewModel = listViewModel;
            this.orderDetailDialogCtrlFactory = orderDetailDialogCtrlFactory;
            this.loginDataService = loginDataService;
            this.contractItemTreeQueryController = contractItemTreeQueryController;
            this.subAccountXQEffectOrderQueryCtrl = subAccountXQEffectOrderQueryCtrl;
            this.subAccountRelatedItemQueryController = subAccountRelatedItemQueryController;
            this.subAccountRelatedItemCacheController = subAccountRelatedItemCacheController;
            this.hostingUserQueryController = hostingUserQueryController;
            this.hostingUserCacheController = hostingUserCacheController;
            this.composeGraphQueryController = composeGraphQueryController;
            this.composeGraphCacheController = composeGraphCacheController;
            this.userComposeViewQueryController = userComposeViewQueryController;
            this.userComposeViewCacheController = userComposeViewCacheController;
            this.eventAggregator = eventAggregator;

            toShowOrderExecuteDetailCmd = new DelegateCommand(ToShowOrderExecuteDetail);
            clickItemTargetKeyRelatedColumnCmd = new DelegateCommand(ClickItemTargetKeyRelatedColumn);
            refreshListCmd = new DelegateCommand(RefreshList, CanRefreshList);
        }

        public XueQiaoFoundation.BusinessResources.DataModels.TabWorkspace ParentWorkspace { get; set; }
        public ITradeComponentController ParentComponentCtrl { get; set; }

        public object ComponentContentView => listViewModel.View;

        public void Initialize()
        {
            if (ParentWorkspace == null) throw new ArgumentNullException("ParentWorkspace");
            if (ParentComponentCtrl == null) throw new ArgumentNullException("ParentComponentCtrl");

            PropertyChangedEventManager.AddHandler(listViewModel, ListViewModelPropertyChanged, "");

            listViewModel.ToShowOrderExecuteDetailCmd = toShowOrderExecuteDetailCmd;
            listViewModel.RefreshListCmd = refreshListCmd;
            listViewModel.ClickItemTargetKeyRelatedColumnCmd = clickItemTargetKeyRelatedColumnCmd;

            var initialColumnInfos = TradeWorkspaceDataDisplayHelper.DefaultTradeListDisplayColumns
                .Select(i => new ListColumnInfo
                {
                    ColumnCode = i.GetHashCode(),
                    ContentAlignment = XueQiaoConstants.ListColumnContentAlignment_Left
                }).ToArray();
            listViewModel.ResetListDisplayColumns(initialColumnInfos);

            PropertyChangedEventManager.AddHandler(ParentWorkspace, ParentWorkspacePropertyChanged, "");
            eventAggregator.GetEvent<UserComposeViewUpdatedEvent>().Subscribe(ReceivedUserComposeViewUpdatedEvent);
        }

        public void Run()
        {
            listViewModel.SelectedDate = DateTime.Now;
        }

        public void Shutdown()
        {
            PropertyChangedEventManager.RemoveHandler(listViewModel, ListViewModelPropertyChanged, "");
            PropertyChangedEventManager.RemoveHandler(ParentWorkspace, ParentWorkspacePropertyChanged, "");
            eventAggregator.GetEvent<UserComposeViewUpdatedEvent>().Unsubscribe(ReceivedUserComposeViewUpdatedEvent);
        }

        private void ListViewModelPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(TradeHistoryListViewModel.SelectedDate))
            {
                refreshListCmd.RaiseCanExecuteChanged();
                RefreshListIfNeed();
            }
        }

        private void ParentWorkspacePropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(XueQiaoFoundation.BusinessResources.DataModels.TabWorkspace.SubAccountId))
            {
                this.listViewModel.TradeList.Clear();
                this.listViewModel.SelectedDate = null;

                refreshListCmd.RaiseCanExecuteChanged();
            }
        }

        private void ReceivedUserComposeViewUpdatedEvent(NativeComposeView composeView)
        {
            if (composeView == null) return;
            var composeId = composeView.ComposeGraphId;
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                var targetKey = $"{composeId}";
                var tarHisItems = listViewModel.TradeList.ToArray()
                    .Where(i => i.TargetType == ClientXQOrderTargetType.COMPOSE_TARGET && i.TargetKey == targetKey)
                    .ToArray();

                if (tarHisItems == null) return;
                foreach (var item in tarHisItems)
                {
                    var composeViewContainer = item.TargetComposeUserComposeViewContainer;
                    if (composeViewContainer != null)
                    {
                        composeViewContainer.UserComposeView = composeView;

                        // Rectify related price properties
                        TradeItemDataModelCreateHelper.RectifyTradeItemRelatedPriceProps(item);
                        
                        // Update target name
                        XqTargetDMHelper.InvalidateTargetNameWithAppropriate(item, XqAppLanguages.CN);
                    }
                }
            });
        }

        private void RefreshList()
        {
            RefreshListIfNeed();
        }

        private bool CanRefreshList()
        {
            return (isListRefreshing == false
                && listViewModel.SelectedDate != null);
        }

        private void UpdateIsListRefresh(bool isRefreshing)
        {
            this.isListRefreshing = isRefreshing;
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                refreshListCmd.RaiseCanExecuteChanged();
            });
        }

        private void ToShowOrderExecuteDetail(object obj)
        {
            var item = obj as TradeItemDataModel;
            if (item == null) return;

            var dialogCtrl = orderDetailDialogCtrlFactory.CreateExport().Value;
            dialogCtrl.DialogOwner = listViewModel.DisplayInWindow;
            dialogCtrl.XqOrderId = item.OrderId;

            dialogCtrl.Initialize();
            dialogCtrl.Run();
            dialogCtrl.Shutdown();
        }

        private void ClickItemTargetKeyRelatedColumn(object obj)
        {
            var item = obj as TradeItemDataModel;
            if (item == null) return;

            // 联动
            var associateArgs = new TradeComponentXqTargetAssociateArgs(ParentComponentCtrl.ParentWorkspace, ParentComponentCtrl.Component,
                item.TargetType, item.TargetKey);

            var previewAssociateDialogOwner = listViewModel.DisplayInWindow;
            Point? previewAssociateDialogLocation = null;
            ParentComponentCtrl.XqTargetAssociateHandler?.HandleXqTargetAssociate(previewAssociateDialogOwner, previewAssociateDialogLocation, associateArgs);
        }

        private void RefreshListIfNeed()
        {
            if (isListRefreshing) return;
            var selectedDate = listViewModel.SelectedDate;
            if (selectedDate == null) return;

            DateHelper.GetDateStartAndEndTimestampMs(selectedDate.Value.Date, DateTimeKind.Local,
                out long dayStartTimestampMs, out long dayEndTimestampMs);
            var subAccountId = ParentWorkspace.SubAccountId;

            Task.Run(() =>
            {
                if (isListRefreshing) return;
                UpdateIsListRefresh(true);
                var resp = QueryHistoryTrades(subAccountId, dayStartTimestampMs, dayEndTimestampMs);

                UpdateIsListRefresh(false);

                if (subAccountId != this.ParentWorkspace.SubAccountId) return;
                if (resp == null) return;

                var hostingTrades = resp?.CorrectResult?.ToArray();
                if (hostingTrades == null) return;

                var tradeItems = new List<TradeItemDataModel>();
                foreach (var hostingTrade in hostingTrades)
                {
                    var tradeItem = TradeItemDataModelCreateHelper.CreateTradeItem(hostingTrade,
                        subAccountRelatedItemQueryController, subAccountRelatedItemCacheController,
                        hostingUserQueryController, hostingUserCacheController,
                        composeGraphCacheController, composeGraphQueryController,
                        userComposeViewCacheController, userComposeViewQueryController,
                        contractItemTreeQueryController);

                    if (tradeItem != null)
                        tradeItems.Add(tradeItem);
                }

                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    this.listViewModel.TradeList.Clear();
                    this.listViewModel.TradeList.AddRange(tradeItems);
                    this.listViewModel.RefreshListTimestamp = (long)DateHelper.NowUnixTimeSpan().TotalSeconds;
                });
            });
        }

        private IInterfaceInteractResponse<IEnumerable<HostingXQTrade>> QueryHistoryTrades(long subAccountId,
            long beginCreateTimestampMs, long endCreateTimestmapMs)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;

            var queryPageSize = 200;
            IInterfaceInteractResponse<HostingXQTradePage> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<HostingXQTrade>(pageIndex => {
                var option = new QueryXQTradeHisIndexItemOption
                {
                    TradeCreateTimePeriod = new QueryTimePeriod { StartTimestampMs = beginCreateTimestampMs, EndTimestampMs = endCreateTimestmapMs },
                    SubAccountIds = new THashSet<long> { subAccountId },
                };
                var pageOption = new IndexedPageOption
                {
                    NeedTotalCount = true,
                    PageIndex = pageIndex,
                    PageSize = queryPageSize,
                };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getXQTradeHisPage(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<HostingXQTrade>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.TotalCount,
                    Page = pageInfo?.ResultList?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.TradeId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<HostingXQTrade>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems)
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };
            return tarResp;
        }
    }
}
