using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Modules.Applications.ViewModels;
using IDLAutoGenerated.Util;
using xueqiao.trade.hosting.arbitrage.thriftapi;
using xueqiao.trade.hosting.terminal.ao;
using XueQiaoFoundation.Shared.Helper;
using xueqiao.trade.hosting.history.thriftapi;
using Thrift.Collections;
using XueQiaoWaf.Trade.Modules.Applications.Helper;
using Prism.Events;
using XueQiaoWaf.Trade.Modules.Applications.ServiceControllers.Events;
using NativeModel.Trade;
using XueQiaoFoundation.BusinessResources.DataModels;
using lib.xqclient_base.thriftapi_mediation.Interface;
using lib.xqclient_base.thriftapi_mediation;
using XueQiaoFoundation.BusinessResources.Models;
using XueQiaoFoundation.BusinessResources.Helpers;
using business_foundation_lib.xq_thriftlib_config;
using XueQiaoFoundation.Interfaces.Applications;

namespace XueQiaoWaf.Trade.Modules.Applications.Controllers
{
    internal interface IOrderHistoryListContentController : IController
    {
        object ListContentView { get; }

        Func<IOrderHistoryListContentController, IEnumerable<OrderItemDataModel>> OrderHistoryListFactory { get; }

        /// <summary>
        /// 所属交易组件 controller
        /// </summary>
        ITradeComponentController ParentComponentCtrl { get; }

        void InvalidateOrderHistoryList();
    }

    /// <summary>
    /// 订单历史组件 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class OrderHistoryComponentController : IController
    {
        private readonly OrderHistoryContainerViewModel containerViewModel;
        private readonly ExportFactory<OrderHistoryEntrustedListContentController> entrustedListContentCtrlFactory;
        private readonly ExportFactory<OrderHistoryParkedListContentController> parkedListContentCtrlFactory;
        private readonly ExportFactory<OrderHistoryConditionListContentController> conditionListContentCtrlFactory;
        private readonly ILoginDataService loginDataService;
        private readonly IContractItemTreeQueryController contractItemTreeQueryController;
        private readonly ISubAccountXQEffectOrderQueryController subAccountXQEffectOrderQueryCtrl;
        private readonly IUserSubAccountRelatedItemQueryController subAccountRelatedItemQueryController;
        private readonly IUserSubAccountRelatedItemCacheController subAccountRelatedItemCacheController;
        private readonly IHostingUserQueryController hostingUserQueryController;
        private readonly IHostingUserCacheController hostingUserCacheController;
        private readonly IComposeGraphQueryController composeGraphQueryController;
        private readonly IComposeGraphCacheController composeGraphCacheController;
        private readonly IUserComposeViewQueryController userComposeViewQueryController;
        private readonly IUserComposeViewCacheController userComposeViewCacheController;
        private readonly ICommodityCacheController commodityCacheController;
        private readonly IEventAggregator eventAggregator;

        private readonly Dictionary<OrderHistoryListType, IOrderHistoryListContentController> listTypeControllers 
            = new Dictionary<OrderHistoryListType, IOrderHistoryListContentController>();
        
        private readonly DelegateCommand refreshListCmd;
        private bool isListRefreshing;

        private readonly List<OrderItemDataModel> orderHistoryItems = new List<OrderItemDataModel>();
        private readonly object orderHistoryItemsLock = new object();
        
        [ImportingConstructor]
        public OrderHistoryComponentController(OrderHistoryContainerViewModel containerViewModel,
            ExportFactory<OrderHistoryEntrustedListContentController> entrustedListContentCtrlFactory,
            ExportFactory<OrderHistoryParkedListContentController> parkedListContentCtrlFactory,
            ExportFactory<OrderHistoryConditionListContentController> conditionListContentCtrlFactory,
            ILoginDataService loginDataService,
            IContractItemTreeQueryController contractItemTreeQueryController,
            ISubAccountXQEffectOrderQueryController subAccountXQEffectOrderQueryCtrl,
            IUserSubAccountRelatedItemQueryController subAccountRelatedItemQueryController,
            IUserSubAccountRelatedItemCacheController subAccountRelatedItemCacheController,
            IHostingUserQueryController hostingUserQueryController,
            IHostingUserCacheController hostingUserCacheController,
            IComposeGraphQueryController composeGraphQueryController,
            IComposeGraphCacheController composeGraphCacheController,
            IUserComposeViewQueryController userComposeViewQueryController,
            IUserComposeViewCacheController userComposeViewCacheController,
            ICommodityCacheController commodityCacheController,
            IEventAggregator eventAggregator)
        {
            this.containerViewModel = containerViewModel;
            this.entrustedListContentCtrlFactory = entrustedListContentCtrlFactory;
            this.parkedListContentCtrlFactory = parkedListContentCtrlFactory;
            this.conditionListContentCtrlFactory = conditionListContentCtrlFactory;
            this.loginDataService = loginDataService;
            this.contractItemTreeQueryController = contractItemTreeQueryController;
            this.subAccountXQEffectOrderQueryCtrl = subAccountXQEffectOrderQueryCtrl;
            this.subAccountRelatedItemQueryController = subAccountRelatedItemQueryController;
            this.subAccountRelatedItemCacheController = subAccountRelatedItemCacheController;
            this.hostingUserQueryController = hostingUserQueryController;
            this.hostingUserCacheController = hostingUserCacheController;
            this.composeGraphQueryController = composeGraphQueryController;
            this.composeGraphCacheController = composeGraphCacheController;
            this.userComposeViewQueryController = userComposeViewQueryController;
            this.userComposeViewCacheController = userComposeViewCacheController;
            this.commodityCacheController = commodityCacheController;
            this.eventAggregator = eventAggregator;

            refreshListCmd = new DelegateCommand(RefreshList, CanRefreshList);
        }
        
        public XueQiaoFoundation.BusinessResources.DataModels.TabWorkspace ParentWorkspace { get; set; }
        
        public ITradeComponentController ParentComponentCtrl { get; set; }

        public object ComponentContentView => containerViewModel.View;

        public void Initialize()
        {
            if (ParentWorkspace == null) throw new ArgumentNullException("ParentWorkspace");
            if (ParentComponentCtrl == null) throw new ArgumentNullException("ParentComponentCtrl");

            PropertyChangedEventManager.AddHandler(containerViewModel, ContainerViewModelPropertyChanged, "");

            containerViewModel.RefreshListCmd = refreshListCmd;
            containerViewModel.SelectedOrderHistoryListType = OrderHistoryListType.Entrusted;

            PropertyChangedEventManager.AddHandler(ParentWorkspace, ParentWorkspacePropertyChanged, "");
            eventAggregator.GetEvent<UserComposeViewUpdatedEvent>().Subscribe(ReceivedUserComposeViewUpdatedEvent);

        }

        public void Run()
        {
            containerViewModel.SelectedDate = DateTime.Now;
        }

        public void Shutdown()
        {
            PropertyChangedEventManager.RemoveHandler(containerViewModel, ContainerViewModelPropertyChanged, "");
            PropertyChangedEventManager.RemoveHandler(ParentWorkspace, ParentWorkspacePropertyChanged, "");
            eventAggregator.GetEvent<UserComposeViewUpdatedEvent>().Unsubscribe(ReceivedUserComposeViewUpdatedEvent);


            foreach (var _ctrl in listTypeControllers)
            {
                _ctrl.Value.Shutdown();
            }
            listTypeControllers.Clear();
        }

        private void ContainerViewModelPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(OrderHistoryContainerViewModel.SelectedOrderHistoryListType))
            {
                var selectedListType = containerViewModel.SelectedOrderHistoryListType;

                if (selectedListType == OrderHistoryListType.Entrusted)
                {
                    ShowEntrustedOrderListInContainer();
                }
                else if (selectedListType == OrderHistoryListType.Parked)
                {
                    ShowParkedOrderListInContainer();
                }
                else if (selectedListType == OrderHistoryListType.Condition)
                {
                    ShowConditionOrderListInContainer();
                }
                return;
            }

            if (e.PropertyName == nameof(OrderHistoryContainerViewModel.SelectedDate))
            {
                refreshListCmd.RaiseCanExecuteChanged();
                RefreshListIfNeed();
            }
        }

        private void ParentWorkspacePropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(XueQiaoFoundation.BusinessResources.DataModels.TabWorkspace.SubAccountId))
            {
                this.orderHistoryItems.Clear();
                this.containerViewModel.SelectedDate = null;

                refreshListCmd.RaiseCanExecuteChanged();

                // every list content controller InvalidateOrderHistoryList
                foreach (var listContentCtrl in listTypeControllers)
                {
                    listContentCtrl.Value.InvalidateOrderHistoryList();
                }
            }
        }

        private void ReceivedUserComposeViewUpdatedEvent(NativeComposeView composeView)
        {
            if (composeView == null) return;
            var targetKey = $"{composeView.ComposeGraphId}";
            lock (orderHistoryItemsLock)
            {
                var tarItems = orderHistoryItems
                    .Where(i => i.TargetType == ClientXQOrderTargetType.COMPOSE_TARGET && i.TargetKey == targetKey)
                    .ToArray();
                
                foreach (var item in tarItems)
                {
                    // Update composeview
                    var composeViewContainer = item.TargetComposeUserComposeViewContainer;
                    if (composeViewContainer != null)
                    {
                        composeViewContainer.UserComposeView = composeView;

                        // Rectify related price properties
                        if (item is OrderItemDataModel_Entrusted entrustedItem)
                        {
                            OrderItemDataModelCreateHelper.RectifyEntrustedOrderRelatedPriceProps(entrustedItem);
                        }
                        else if (item is OrderItemDataModel_Parked parkedItem)
                        {
                            OrderItemDataModelCreateHelper.RectifyParkedOrderRelatedPriceProps(parkedItem);
                        }
                        
                        // Update target name
                        XqTargetDMHelper.InvalidateTargetNameWithAppropriate(item, XqAppLanguages.CN);
                    }
                }
            }
        }

        private void RefreshList()
        {
            RefreshListIfNeed();
        }

        private bool CanRefreshList()
        {
            return (isListRefreshing == false
                && containerViewModel.SelectedDate != null);
        }

        private void UpdateIsListRefresh(bool isRefreshing)
        {
            this.isListRefreshing = isRefreshing;
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                refreshListCmd.RaiseCanExecuteChanged();
            });
        }

        private void RefreshListIfNeed()
        {
            if (isListRefreshing) return;
            var selectedDate = containerViewModel.SelectedDate;
            if (selectedDate == null) return;

            DateHelper.GetDateStartAndEndTimestampMs(selectedDate.Value.Date, DateTimeKind.Local,
                out long dayStartTimestampMs, out long dayEndTimestampMs);
            var subAccountId = ParentWorkspace.SubAccountId;

            Task.Run(() =>
            {
                if (isListRefreshing) return;
                UpdateIsListRefresh(true);
                var resp = QueryHistoryOrders(subAccountId, dayStartTimestampMs, dayEndTimestampMs);

                UpdateIsListRefresh(false);

                if (subAccountId != this.ParentWorkspace.SubAccountId) return;
                if (resp == null) return;

                var hostingOrders = resp?.CorrectResult?.ToArray();
                if (hostingOrders == null) return;

                var orderItems = new List<OrderItemDataModel>();
                foreach (var hostingOrder in hostingOrders)
                {
                    var orderItem = OrderItemDataModelCreateHelper.CreateOrderItem(hostingOrder,
                        subAccountRelatedItemQueryController, subAccountRelatedItemCacheController,
                        hostingUserQueryController, hostingUserCacheController,
                        composeGraphCacheController, composeGraphQueryController,
                        userComposeViewCacheController, userComposeViewQueryController,
                        contractItemTreeQueryController, commodityCacheController);

                    if (orderItem != null)
                        orderItems.Add(orderItem);
                }

                lock (orderHistoryItemsLock)
                {
                    this.orderHistoryItems.Clear();
                    this.orderHistoryItems.AddRange(orderItems);
                }

                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    this.containerViewModel.RefreshListTimestamp = (long)DateHelper.NowUnixTimeSpan().TotalSeconds;

                    // every list content controller InvalidateOrderHistoryList
                    foreach (var listContentCtrl in listTypeControllers)
                    {
                        listContentCtrl.Value.InvalidateOrderHistoryList();
                    }
                });
            });
        }

        private IInterfaceInteractResponse<IEnumerable<HostingXQOrder>> QueryHistoryOrders(long subAccountId,
            long beginCreateTimestampMs, long endCreateTimestmapMs)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;

            var queryPageSize = 200;
            IInterfaceInteractResponse<HostingXQOrderPage> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<HostingXQOrder>(pageIndex => {
                var option = new QueryXQOrderHisIndexItemOption
                {
                    OrderCreateTimePeriod = new QueryTimePeriod { StartTimestampMs = beginCreateTimestampMs, EndTimestampMs = endCreateTimestmapMs },
                    SubAccountIds = new THashSet<long> { subAccountId },
                };
                var pageOption = new IndexedPageOption
                {
                    NeedTotalCount = true,
                    PageIndex = pageIndex,
                    PageSize = queryPageSize,
                };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getXQOrderHisPage(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<HostingXQOrder>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.TotalCount,
                    Page = pageInfo?.ResultList?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.OrderId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<HostingXQOrder>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems)
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };
            return tarResp;
        }

        private void ShowEntrustedOrderListInContainer()
        {
            var listType = OrderHistoryListType.Entrusted;
            listTypeControllers.TryGetValue(listType, out IOrderHistoryListContentController _tmpCtrl);
            var listContentController = _tmpCtrl as OrderHistoryEntrustedListContentController;
            if (listContentController == null)
            {
                listContentController = entrustedListContentCtrlFactory.CreateExport().Value;
                listContentController.OrderHistoryListFactory = _ctrl =>
                {
                    IEnumerable<OrderItemDataModel_Entrusted> tarItems = null; 
                    lock (orderHistoryItemsLock)
                    {
                        tarItems = this.orderHistoryItems.OfType<OrderItemDataModel_Entrusted>().ToArray();
                    }
                    return tarItems;
                };
                listContentController.ParentComponentCtrl = this.ParentComponentCtrl;
                listContentController.Initialize();
                listContentController.Run();
                listContentController.InvalidateOrderHistoryList();

                // 添加进集合
                listTypeControllers[listType] = listContentController;
            }

            // change the content display
            containerViewModel.OrderHistoryListContentView = listContentController.ListContentView;
        }

        private void ShowParkedOrderListInContainer()
        {
            var listType = OrderHistoryListType.Parked;
            listTypeControllers.TryGetValue(listType, out IOrderHistoryListContentController _tmpCtrl);
            var listContentController = _tmpCtrl as OrderHistoryParkedListContentController;
            if (listContentController == null)
            {
                listContentController = parkedListContentCtrlFactory.CreateExport().Value;
                listContentController.OrderHistoryListFactory = _ctrl => 
                {
                    IEnumerable<OrderItemDataModel_Parked> tarItems = null;
                    lock (orderHistoryItemsLock)
                    {
                        tarItems = this.orderHistoryItems.OfType<OrderItemDataModel_Parked>().ToArray();
                    }
                    return tarItems;
                };
                listContentController.ParentComponentCtrl = this.ParentComponentCtrl;
                listContentController.Initialize();
                listContentController.Run();
                listContentController.InvalidateOrderHistoryList();

                // 添加进集合
                listTypeControllers[listType] = listContentController;
            }

            // change the content display
            containerViewModel.OrderHistoryListContentView = listContentController.ListContentView;
        }

        private void ShowConditionOrderListInContainer()
        {
            var listType = OrderHistoryListType.Entrusted;
            listTypeControllers.TryGetValue(listType, out IOrderHistoryListContentController _tmpCtrl);
            var listContentController = _tmpCtrl as OrderHistoryConditionListContentController;
            if (listContentController == null)
            {
                listContentController = conditionListContentCtrlFactory.CreateExport().Value;
                listContentController.OrderHistoryListFactory = _ctrl =>
                {

                    IEnumerable<OrderItemDataModel_Condition> tarItems = null;
                    lock (orderHistoryItemsLock)
                    {
                        tarItems = this.orderHistoryItems.OfType<OrderItemDataModel_Condition>().ToArray();
                    }
                    return tarItems;
                };
                listContentController.ParentComponentCtrl = this.ParentComponentCtrl;
                listContentController.Initialize();
                listContentController.Run();
                listContentController.InvalidateOrderHistoryList();

                // 添加进集合
                listTypeControllers[listType] = listContentController;
            }

            // change the content display
            containerViewModel.OrderHistoryListContentView = listContentController.ListContentView;
        }
    }
}
