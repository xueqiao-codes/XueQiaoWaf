using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Modules.Applications.DataModels;
using XueQiaoWaf.Trade.Modules.Applications.ViewModels;
using IDLAutoGenerated.Util;
using XueQiaoFoundation.Shared.Helper;
using xueqiao.trade.hosting.arbitrage.thriftapi;
using XueQiaoWaf.Trade.Modules.Applications.Helper;
using NativeModel.Trade;
using XueQiaoFoundation.BusinessResources.DataModels;
using XueQiaoFoundation.Interfaces.Helper;
using XueQiaoFoundation.BusinessResources.Helpers;
using xueqiao.trade.hosting;
using System.Windows;
using System.ComponentModel;
using System.Waf.Applications;
using lib.xqclient_base.thriftapi_mediation.Interface;
using xueqiao.trade.hosting.proxy;
using XueQiaoWaf.Trade.Interfaces.Applications;
using XueQiaoFoundation.BusinessResources.Constants;
using System.Collections.ObjectModel;
using XueQiaoFoundation.BusinessResources.Models;
using business_foundation_lib.xq_thriftlib_config;

namespace XueQiaoWaf.Trade.Modules.Applications.Controllers
{
    /// <summary>
    /// 订单详情弹窗 controller
    /// </summary>
    [Export, Export(typeof(IXqOrderDetailDialogCtrl)), PartCreationPolicy(CreationPolicy.NonShared)]
    internal class XqOrderDetailDialogCtrl : IXqOrderDetailDialogCtrl
    {
        private readonly XqOrderDetailViewModel contentViewModel;
        private readonly ExportFactory<XqComposeOrderExecParamsDialogCtrl> composeOrderExecParamsDialogCtrlFactory;
        private readonly ExportFactory<XqOrderXqTradeDetailViewCtrl> xqTradeDetailViewCtrlFactory;
        private readonly ExportFactory<XqOrderExecDetailViewCtrl> execDetailViewCtrlFactory;
        private readonly ExportFactory<RelatedOrderDialogCtrl> relatedOrderDialogCtrlFactory;
        private readonly ILoginDataService loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly IMessageWindowService messageWindowService;
        private readonly IEventAggregator eventAggregator;
        private readonly IUserSubAccountRelatedItemQueryController subAccountRelatedItemQueryController;
        private readonly IUserSubAccountRelatedItemCacheController subAccountRelatedItemCacheController;
        private readonly IHostingUserQueryController hostingUserQueryController;
        private readonly IHostingUserCacheController hostingUserCacheController;
        private readonly IComposeGraphCacheController composeGraphCacheController;
        private readonly IComposeGraphQueryController composeGraphQueryController;
        private readonly IUserComposeViewCacheController userComposeViewCacheController;
        private readonly IUserComposeViewQueryController userComposeViewQueryController;
        private readonly IContractItemTreeQueryController contractItemTreeQueryCtrl;
        private readonly ICommodityCacheController commodityCacheController;

        private readonly DelegateCommand toShowOrderExecuteParamsCmd;
        private readonly DelegateCommand toShowRelatedOrderCmd;

        private XqOrderXqTradeDetailViewCtrl xqTradeDetailViewCtrl;
        private XqOrderExecDetailViewCtrl execDetailViewCtrl;
        
        private IMessageWindow dialog;

        // 查询到的订单执行信息
        private HostingXQOrderExecDetail QueriedXQOrderExecDetail;
        // 查询到的组合标的信息
        private NativeComposeGraph QueriedTargetComposeGraph;

        // 订单详情 data model item
        private OrderItemDataModel_Entrusted xqOrderItem;
        // 组合标的订单的待成交项执行成交列表
        private IEnumerable<HostingExecTrade> xqComposeWaitTradeExecTradeItems;
        // 组合标的订单的待成交项
        private XqTradeDetailDM xqComposeWaitTradeDetailItem;
        
        // 正常成交 datamodel 列表
        private IEnumerable<XqTradeDetailDM> normalTradeDetailItems;
        // 正常成交执行成交列表
        private Dictionary<long, IEnumerable<HostingExecTrade>> normalTradeExecTradeItemsKeyedByTradeId;
        // 组合瘸腿成交项 datamodel
        private XqTradeDetailDM composeLameTradeDetailItem;
        // 组合瘸腿成交项执行成交
        private IEnumerable<HostingExecTrade> composeLameTradeExecTradeItems;

        // 订单的所有执行订单 datamodel 列表
        private IEnumerable<ExecOrderDM> execOrderItems;
        // 订单的所有执行成交 datamodel 列表
        private IEnumerable<ExecTradeDM> execTradeItems;

        [ImportingConstructor]
        public XqOrderDetailDialogCtrl(
            XqOrderDetailViewModel contentViewModel,
            ExportFactory<XqComposeOrderExecParamsDialogCtrl> composeOrderExecParamsDialogCtrlFactory,
            ExportFactory<XqOrderXqTradeDetailViewCtrl> xqTradeDetailViewCtrlFactory,
            ExportFactory<XqOrderExecDetailViewCtrl> execDetailViewCtrlFactory,
            ExportFactory<RelatedOrderDialogCtrl> relatedOrderDialogCtrlFactory,
            ILoginDataService loginDataService,
            Lazy<ILoginUserManageService> loginUserManageService,
            IMessageWindowService messageWindowService,
            IEventAggregator eventAggregator,
            IUserSubAccountRelatedItemQueryController subAccountRelatedItemQueryController,
            IUserSubAccountRelatedItemCacheController subAccountRelatedItemCacheController,
            IHostingUserQueryController hostingUserQueryController,
            IHostingUserCacheController hostingUserCacheController,
            IComposeGraphCacheController composeGraphCacheController,
            IComposeGraphQueryController composeGraphQueryController,
            IUserComposeViewCacheController userComposeViewCacheController,
            IUserComposeViewQueryController userComposeViewQueryController,
            IContractItemTreeQueryController contractItemTreeQueryCtrl,
            ICommodityCacheController commodityCacheController)
        {
            this.contentViewModel = contentViewModel;
            this.composeOrderExecParamsDialogCtrlFactory = composeOrderExecParamsDialogCtrlFactory;
            this.xqTradeDetailViewCtrlFactory = xqTradeDetailViewCtrlFactory;
            this.execDetailViewCtrlFactory = execDetailViewCtrlFactory;
            this.relatedOrderDialogCtrlFactory = relatedOrderDialogCtrlFactory;
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.messageWindowService = messageWindowService;
            this.eventAggregator = eventAggregator;
            this.subAccountRelatedItemQueryController = subAccountRelatedItemQueryController;
            this.subAccountRelatedItemCacheController = subAccountRelatedItemCacheController;
            this.hostingUserQueryController = hostingUserQueryController;
            this.hostingUserCacheController = hostingUserCacheController;
            this.composeGraphCacheController = composeGraphCacheController;
            this.composeGraphQueryController = composeGraphQueryController;
            this.userComposeViewCacheController = userComposeViewCacheController;
            this.userComposeViewQueryController = userComposeViewQueryController;
            this.contractItemTreeQueryCtrl = contractItemTreeQueryCtrl;
            this.commodityCacheController = commodityCacheController;

            toShowOrderExecuteParamsCmd = new DelegateCommand(ShowOrderExecuteParams, CanShowOrderExecuteParams);
            toShowRelatedOrderCmd = new DelegateCommand(ShowRelatedOrder, CanShowRelatedOrder);

            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
        }

        public object DialogOwner { get; set; }
        
        /// <summary>
        /// 雪橇订单 id
        /// </summary>
        public string XqOrderId { get; set; }


        public void Initialize()
        {
            if (string.IsNullOrEmpty(XqOrderId))
                throw new ArgumentException("XqOrderId can't be empty or null.");

            contentViewModel.ToShowOrderExecuteParamsCmd = toShowOrderExecuteParamsCmd;
            contentViewModel.ToShowRelatedOrderCmd = toShowRelatedOrderCmd;
        }

        public void Run()
        {
            RefreshViewData();
            dialog = messageWindowService.CreateContentCustomWindow(DialogOwner, null, new Size(1000, 800), true, true,
                true, "订单详情", contentViewModel.View);
            dialog.ShowDialog();
        }

        public void Shutdown()
        {
            if (dialog != null)
            {
                dialog.Close();
                dialog = null;
            }

            xqTradeDetailViewCtrl?.Shutdown();
            execDetailViewCtrl?.Shutdown();

            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
            PropertyChangedEventManager.AddHandler(contentViewModel, ContentViewModelPropChanged, "");
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            Shutdown();
        }

        private bool CanShowOrderExecuteParams()
        {
            return this.QueriedXQOrderExecDetail != null && this.QueriedTargetComposeGraph != null;
        }

        private void ShowOrderExecuteParams()
        {
            var comoposeGraph = this.QueriedTargetComposeGraph;
            var xqOrder = this.QueriedXQOrderExecDetail?.XqOrder;
            if (xqOrder == null) return;

            OrderItemDataModel_Entrusted.ParseEntrustedOrderDetail(xqOrder.OrderDetail, xqOrder.OrderType,
                out HostingXQEffectDate _ig1,
                out HostingXQComposeLimitOrderExecParams _composeOrderExecParams);
            if (_composeOrderExecParams == null) return;

            var dialogCtrl = composeOrderExecParamsDialogCtrlFactory.CreateExport().Value;
            dialogCtrl.DialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
            dialogCtrl.ComposeGraph = comoposeGraph;
            dialogCtrl.OrderExecParams = _composeOrderExecParams;
            dialogCtrl.Initialize();
            dialogCtrl.Run();
            dialogCtrl.Shutdown();
        }

        private bool CanShowRelatedOrder()
        {
            return this.QueriedXQOrderExecDetail != null
                && this.QueriedTargetComposeGraph != null
                && (!string.IsNullOrEmpty(this.xqOrderItem?.SourceOrderId) || !string.IsNullOrEmpty(this.xqOrderItem?.ActionOrderId));
        }

        private void ShowRelatedOrder()
        {
            var orderItem = this.xqOrderItem;
            if (orderItem == null) return;

            var dialogCtrl = relatedOrderDialogCtrlFactory.CreateExport().Value;
            dialogCtrl.DialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
            dialogCtrl.CurrentOrder = orderItem;

            dialogCtrl.Initialize();
            dialogCtrl.Run();
            dialogCtrl.Shutdown();
        }

        private void ContentViewModelPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(XqOrderDetailViewModel.SelectedContentTabType))
            {
                InvalidateContentTabContentView();
            }
        }

        private void InvalidateContentTabContentView()
        {
            var currentContentTabType = contentViewModel.SelectedContentTabType;
            if (currentContentTabType == XqOrderDetailContentTabType.TradeDetailTab)
            {
                ShowXqTradeDetailTabContentView();
            }
            else if (currentContentTabType == XqOrderDetailContentTabType.ExecuteDetailTab)
            {
                ShowExecDetailTabContentView();
            }
        }
        
        private void ShowXqTradeDetailTabContentView()
        {
            var xqOrderDm = this.xqOrderItem;
            if (xqTradeDetailViewCtrl == null)
            {
                if (xqOrderDm != null)
                {
                    var ctrl = xqTradeDetailViewCtrlFactory.CreateExport().Value;
                    ctrl.OrderTargetType = xqOrderDm.TargetType;
                    ctrl.XqTradeDetailItemsFactory = _ctrl => 
                    {
                        var items = new List<XqTradeDetailDM>();
                        if (composeLameTradeDetailItem != null) items.Add(composeLameTradeDetailItem);
                        if (normalTradeDetailItems != null) items.AddRange(normalTradeDetailItems);
                        return items.ToArray();
                    };
                    ctrl.XqComposeWaitTradeItemFactory = _ctrl => this.xqComposeWaitTradeDetailItem;
                    ctrl.XqTradeExecTradeItemsFactory = (_ctrl, _tradeDetailItem) => GetExecTradeItemsOfXqTradeItem(_tradeDetailItem);

                    ctrl.Initialize();
                    ctrl.Run();

                    xqTradeDetailViewCtrl = ctrl;
                }
            }
            contentViewModel.ContentTabContentView = xqTradeDetailViewCtrl?.ContentView;
        }

        private void ShowExecDetailTabContentView()
        {
            var xqOrderDm = this.xqOrderItem;
            if (execDetailViewCtrl == null)
            {
                if (xqOrderDm != null)
                {
                    var ctrl = execDetailViewCtrlFactory.CreateExport().Value;
                    ctrl.OrderTargetType = xqOrderDm.TargetType;
                    ctrl.ExecOrderItemsFactory = _ctrl => this.execOrderItems;
                    ctrl.ExecTradeItemsFactory = _ctrl => this.execTradeItems;

                    ctrl.Initialize();
                    ctrl.Run();

                    execDetailViewCtrl = ctrl;
                }
            }
            contentViewModel.ContentTabContentView = execDetailViewCtrl?.ContentView;
        }

        private void RefreshViewData()
        {
            Task.Run(() => 
            {
                NativeComposeGraph targetComposeInfo = null;
                var orderDetailResp = QueryOrderDetail();

                var xqOrder = orderDetailResp?.CorrectResult?.XqOrder;
                if (xqOrder?.OrderTarget.TargetType == HostingXQTargetType.COMPOSE_TARGET)
                {
                    var composeGraphId = Convert.ToInt64(xqOrder.OrderTarget.TargetKey);
                    targetComposeInfo = QueryTargetComposeGraph(composeGraphId);
                }
                
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    this.QueriedXQOrderExecDetail = orderDetailResp?.CorrectResult;
                    this.QueriedTargetComposeGraph = targetComposeInfo;

                    InvalidateContentViewAfterRefresh();
                });
            });
        }

        private IInterfaceInteractResponse<HostingXQOrderExecDetail> QueryOrderDetail()
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;

            var orderId = this.XqOrderId;
            return XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getXQOrderExecDetail(landingInfo, orderId);
        }

        private NativeComposeGraph QueryTargetComposeGraph(long composeGraphId)
        {
            var cachedComposeGraph = composeGraphCacheController.AllCaches()?.Values.FirstOrDefault(i => i.ComposeGraphId == composeGraphId);
            if (cachedComposeGraph != null) return cachedComposeGraph;
            return composeGraphQueryController.QueryComposeGraph(composeGraphId)?.CorrectResult;
        }
        
        private void InvalidateContentViewAfterRefresh()
        {
            // 设置 xqOrderItem
            GenerateXqOrderItem(QueriedXQOrderExecDetail, out OrderItemDataModel_Entrusted __xqOrderItem);
            this.xqOrderItem = __xqOrderItem;

            // 设置 xqComposeWaitTradeDetailItem, xqComposeWaitTradeExecTradeItems
            GenerateXQComposeWaitTradeDetailItem(QueriedXQOrderExecDetail,
                this.QueriedTargetComposeGraph,
                this.xqOrderItem,
                out XqTradeDetailDM __xqComposeWaitTradeDetailItem,
                out IEnumerable<HostingExecTrade> __xqComposeWaitTradeExecTradeItems);
            this.xqComposeWaitTradeDetailItem = __xqComposeWaitTradeDetailItem;
            this.xqComposeWaitTradeExecTradeItems = __xqComposeWaitTradeExecTradeItems;

            // 设置 xqTradeDetailItems
            GenerateTradeDetailItems(QueriedXQOrderExecDetail, 
                this.QueriedTargetComposeGraph,
                this.xqOrderItem,
                out IEnumerable<XqTradeDetailDM> __normalTradeDetailItems,
                out Dictionary<long, IEnumerable<HostingExecTrade>> __normalTradeExecTradeItemsKeyedByTradeId,
                out XqTradeDetailDM __composeLameTradeDetailItem,
                out IEnumerable<HostingExecTrade> __composeLameTradeExecTradeItems);
            this.normalTradeDetailItems = __normalTradeDetailItems;
            this.normalTradeExecTradeItemsKeyedByTradeId = __normalTradeExecTradeItemsKeyedByTradeId;
            this.composeLameTradeDetailItem = __composeLameTradeDetailItem;
            this.composeLameTradeExecTradeItems = __composeLameTradeExecTradeItems;

            // 设置 execOrderItems
            GenerateExecOrderItems(QueriedXQOrderExecDetail, QueriedTargetComposeGraph,
                out IEnumerable<ExecOrderDM> __execOrderItems);
            this.execOrderItems = __execOrderItems;

            // 设置 execTradeItems
            GenerateExecTradeItems(QueriedXQOrderExecDetail, QueriedTargetComposeGraph,
                out IEnumerable<ExecTradeDM> __execTradeItems);
            this.execTradeItems = __execTradeItems;
            
            PropertyChangedEventManager.RemoveHandler(contentViewModel, ContentViewModelPropChanged, "");
            
            contentViewModel.ContentTabContentView = null;
            xqTradeDetailViewCtrl?.Shutdown();
            xqTradeDetailViewCtrl = null;
            execDetailViewCtrl?.Shutdown();
            execDetailViewCtrl = null;

            contentViewModel.SourceOrderItem = this.xqOrderItem;
            contentViewModel.SelectedContentTabType = XqOrderDetailContentTabType.TradeDetailTab;
            InvalidateContentTabContentView();

            PropertyChangedEventManager.AddHandler(contentViewModel, ContentViewModelPropChanged, "");

            toShowOrderExecuteParamsCmd?.RaiseCanExecuteChanged();
            toShowRelatedOrderCmd?.RaiseCanExecuteChanged();
        }
        
        /// <summary>
        /// 获取指定雪橇成交的执行成交列表
        /// </summary>
        /// <param name="xqTradeDetailDM">指定的雪橇成交 id</param>
        /// <returns></returns>
        private IEnumerable<ExecTradeDM> GetExecTradeItemsOfXqTradeItem(XqTradeDetailDM xqTradeDetailDM)
        {
            if (xqTradeDetailDM == null) return null;

            IEnumerable<HostingExecTrade> execTrades = null;
            if (xqTradeDetailDM.ItemType == XqTradeDetailDMType.WaitingTrade)
                execTrades = this.xqComposeWaitTradeExecTradeItems;
            else if (xqTradeDetailDM.ItemType == XqTradeDetailDMType.ComposeLameTraded)
                execTrades = this.composeLameTradeExecTradeItems;
            else if (xqTradeDetailDM.ItemType == XqTradeDetailDMType.NormalTraded)
            {
                var tradeId = xqTradeDetailDM.TradeId;
                if (tradeId != null)
                    this.normalTradeExecTradeItemsKeyedByTradeId?.TryGetValue(tradeId.Value, out execTrades);
            }

            if (execTrades != null)
            {
                var destTrades = new List<ExecTradeDM>();
                var targetComposeInfo = this.QueriedTargetComposeGraph;
                var orderTargetType = this.xqOrderItem?.TargetType;
                if (orderTargetType != null)
                {
                    foreach (var srcItem in execTrades)
                    {
                        var destTrade = GenerateExecTradeDM(srcItem,
                            orderTargetType.Value,
                            targetComposeInfo);
                        if (destTrade != null)
                            destTrades.Add(destTrade);
                    }
                }
                return destTrades.ToArray();
            }
            return null;
        }
        

        private void GenerateXqOrderItem(HostingXQOrderExecDetail orderExecDetail,
            out OrderItemDataModel_Entrusted __xqOrderItem)
        {
            __xqOrderItem = null;
            var hostingOrder = orderExecDetail?.XqOrder;
            if (hostingOrder == null) return;
            __xqOrderItem = OrderItemDataModelCreateHelper.CreateOrderItem(hostingOrder,
                        subAccountRelatedItemQueryController, subAccountRelatedItemCacheController,
                        hostingUserQueryController, hostingUserCacheController,
                        composeGraphCacheController, composeGraphQueryController,
                        userComposeViewCacheController, userComposeViewQueryController,
                        contractItemTreeQueryCtrl, commodityCacheController) as OrderItemDataModel_Entrusted;
        }

        /// <summary>
        /// 生成组合标的订单的待成交项数据
        /// </summary>
        /// <param name="orderExecDetail"></param>
        /// <param name="targetComposeInfo"></param>
        /// <param name="xqOrderItem"></param>
        /// <param name="__xqComposeWaitTradeDetailItem">生成的待成交项 data model</param>
        /// <param name="__xqComposeWaitTradeExecTradeItems">生成的待成交的执行成交项列表</param>
        private void GenerateXQComposeWaitTradeDetailItem(
            HostingXQOrderExecDetail orderExecDetail, 
            NativeComposeGraph targetComposeInfo,
            OrderItemDataModel_Entrusted xqOrderItem,
            out XqTradeDetailDM __xqComposeWaitTradeDetailItem,
            out IEnumerable<HostingExecTrade> __xqComposeWaitTradeExecTradeItems)
        {
            __xqComposeWaitTradeDetailItem = null;
            __xqComposeWaitTradeExecTradeItems = null;

            if (orderExecDetail == null) return;
            if (targetComposeInfo == null || targetComposeInfo.Legs == null) return;
            if (xqOrderItem == null) return;
            
            if (xqOrderItem.TargetType != ClientXQOrderTargetType.COMPOSE_TARGET) return;

            var composeId = Convert.ToInt64(xqOrderItem.TargetKey);

            // xQOrderExecDetail.XqTrades 柔和了`正常成交`，`瘸腿成交(标的为合约)`
            // 获取标的`正常成交`的成交
            var normalXqTrades = orderExecDetail.XqTrades?
                .Where(i => i.TradeTarget.TargetType == HostingXQTargetType.COMPOSE_TARGET && i.TradeTarget.TargetKey == xqOrderItem.TargetKey)
                .ToArray();
            var tradedTotalVolume = normalXqTrades?.Sum(i => i.TradeVolume) ?? 0;
            var waitTradeVolume = (xqOrderItem.Quantity - tradedTotalVolume);
            if (waitTradeVolume <= 0) return;

            var allRelatedExecTradeIds = new List<long>();
            if (orderExecDetail.XqTradeRelatedItems != null)
            {
                foreach (var xqTradeRelatedItems in orderExecDetail.XqTradeRelatedItems.Values)
                {
                    allRelatedExecTradeIds.AddRange(xqTradeRelatedItems.Select(i => i.ExecTradeId).ToArray());
                }
            }

            var allLegContractIds = targetComposeInfo.Legs?.Select(i => (int)i.SledContractId).ToArray() ?? new int[] { };
            var allExecTradeItems = orderExecDetail.ExecTrades?.ToArray() ?? new HostingExecTrade[] { };
            allExecTradeItems = allExecTradeItems.Where(i => allLegContractIds.Contains((int)i.ContractSummary.SledContractId)).ToArray();

            var waitTradeExecTradeItems = allExecTradeItems.Where(i => !allRelatedExecTradeIds.Contains(i.ExecTradeId)).ToArray();
            __xqComposeWaitTradeExecTradeItems = waitTradeExecTradeItems;

            __xqComposeWaitTradeDetailItem = new XqTradeDetailDM(XqTradeDetailDMType.WaitingTrade)
            {
                Direction = xqOrderItem.Direction,
                TradeVolume = waitTradeVolume
            };
            
            var legTradeSummarys = TradeDMLoadHelper.CreateTargetComposeLegTradeSummarys(allLegContractIds, composeId, 
                _legContractId => 
                {
                    var isLegCalculatePrice = (targetComposeInfo.Legs.FirstOrDefault(i => i.SledContractId == _legContractId)?.Quantity ?? 0) == 0;
                    return isLegCalculatePrice ? LegTradeSummaryPriceType.CalculatePrice : LegTradeSummaryPriceType.TradeAvgPrice;
                },
                composeGraphCacheController, composeGraphQueryController, userComposeViewCacheController, 
                _summs => 
                {
                    if (_summs == null) return;
                    foreach(var _summ in _summs)
                        MakeLegSummaryPricePrecise(_summ, commodityCacheController);
                });
            if (legTradeSummarys?.Any() == true)
            {
                var contractKeyedExecItems = waitTradeExecTradeItems.GroupBy(i => i.ContractSummary.SledContractId).ToArray();
                foreach (var legTradeSummary in legTradeSummarys)
                {
                    var leg = targetComposeInfo.Legs.FirstOrDefault(lg => lg.SledContractId == legTradeSummary.LegContractId);
                    if (leg == null) continue;
                    if (leg.Quantity != 0)
                    {
                        var demandVolume = leg.Quantity * waitTradeVolume;
                        legTradeSummary.TotalVolume = demandVolume;
                    }

                    var execItemsToSummary = contractKeyedExecItems.FirstOrDefault(i => i.Key == legTradeSummary.LegContractId)?.ToArray();
                    if (execItemsToSummary != null)
                    {
                        var legTradedTotalVolume = execItemsToSummary.Sum(i => i.TradeVolume);
                        legTradeSummary.TradeVolume = legTradedTotalVolume;
                        if (legTradeSummary.SummaryPriceType == LegTradeSummaryPriceType.TradeAvgPrice)
                        {
                            if (legTradedTotalVolume > 0)
                            {
                                legTradeSummary.SummaryPrice = execItemsToSummary.Sum(i => i.TradePrice * i.TradeVolume) / legTradedTotalVolume;
                            }   
                        }
                        else if (legTradeSummary.SummaryPriceType == LegTradeSummaryPriceType.CalculatePrice)
                        {
                            legTradeSummary.SummaryPrice = execItemsToSummary.FirstOrDefault()?.TradePrice;
                        }
                    }
                    else
                    {
                        legTradeSummary.TradeVolume = 0;
                        legTradeSummary.SummaryPrice = null;
                    }
                    MakeLegSummaryPricePrecise(legTradeSummary, commodityCacheController);
                }
            }
            __xqComposeWaitTradeDetailItem.TargetComposeLegTradeSummarysContainer = new TargetComposeLegTradeSummarysContainer(composeId)
            {
                LegTradeSummarys = legTradeSummarys != null ? new ObservableCollection<TargetComposeLegTradeSummary>(legTradeSummarys):null
            };
        }

        /// <summary>
        /// 生成订单的雪橇成交列表
        /// </summary>
        /// <param name="orderExecDetail"></param>
        /// <param name="targetComposeInfo"></param>
        /// <param name="__normalTradeDetailItems">正常成交项列表</param>
        /// <param name="__normalTradeExecTradeItemsKeyedByTradeId">正常成交的执行成交列表</param>
        /// <param name="normalXqTrades">组合标的瘸腿成交项，如果存在的话</param>
        /// <param name="__composeLameTradeExecTradeItems">组合标的瘸腿成交的执行成交列表</param>
        private void GenerateTradeDetailItems(
            HostingXQOrderExecDetail orderExecDetail, 
            NativeComposeGraph targetComposeInfo,
            OrderItemDataModel_Entrusted xqOrderItem,
            out IEnumerable<XqTradeDetailDM> __normalTradeDetailItems,
            out Dictionary<long, IEnumerable<HostingExecTrade>> __normalTradeExecTradeItemsKeyedByTradeId,
            out XqTradeDetailDM __composeLameTradeDetailItem,
            out IEnumerable<HostingExecTrade> __composeLameTradeExecTradeItems)
        {
            __normalTradeDetailItems = null;
            __normalTradeExecTradeItemsKeyedByTradeId = null;
            __composeLameTradeDetailItem = null;
            __composeLameTradeExecTradeItems = null;

            if (orderExecDetail == null) return;
            if (xqOrderItem == null) return;
            if (xqOrderItem.TargetType == ClientXQOrderTargetType.COMPOSE_TARGET)
            {
                if (targetComposeInfo == null || targetComposeInfo.Legs == null) return; 
            }

            var srcXqTrades = orderExecDetail?.XqTrades.ToArray();
            if (srcXqTrades == null) return;

            var allExecTradeItems = orderExecDetail.ExecTrades?.ToArray() ?? new HostingExecTrade[] { };
            var composeAllLegContractIds = targetComposeInfo?.Legs.Select(i => (int)i.SledContractId).ToArray();
            var xqTradeRelatedItems = orderExecDetail?.XqTradeRelatedItems ?? new Dictionary<long, List<HostingXQTradeRelatedItem>>();

            var allRelatedExecTradeIds = new List<long>();
            foreach (var xqTradeRelated in xqTradeRelatedItems.Values)
            {
                allRelatedExecTradeIds.AddRange(xqTradeRelated.Select(i => i.ExecTradeId).ToArray());
            }

            IEnumerable<HostingXQTrade> normalXqTrades = null;
            IEnumerable<HostingXQTrade> composeLameXqTrades = null;
            if (xqOrderItem.TargetType == ClientXQOrderTargetType.COMPOSE_TARGET)
            {
                normalXqTrades = srcXqTrades.Where(i => i.TradeTarget.TargetType == HostingXQTargetType.COMPOSE_TARGET).ToArray();
                composeLameXqTrades = srcXqTrades.Where(i => i.TradeTarget.TargetType == HostingXQTargetType.CONTRACT_TARGET && i.SourceOrderTarget.TargetType == HostingXQTargetType.COMPOSE_TARGET)
                    .ToArray();
            } else if(xqOrderItem.TargetType == ClientXQOrderTargetType.CONTRACT_TARGET)
            {
                normalXqTrades = srcXqTrades;
            }

            if (normalXqTrades == null) normalXqTrades = new HostingXQTrade[] { };
            if (composeLameXqTrades == null) composeLameXqTrades = new HostingXQTrade[] { };

            // 设置 __normalTradeDetailItems
            var destNormalXqTrades = new List<XqTradeDetailDM>();
            foreach (var srcTrade in normalXqTrades)
            {
                var rectifyTradePrice = XueQiaoBusinessHelper.MakePreciseXQContractRelatedPrice(srcTrade.TradePrice, XueQiaoConstants.XQContractPriceMinimumPirceTick);
                var tradeDetailDM = new XqTradeDetailDM(XqTradeDetailDMType.NormalTraded)
                {
                    TradeId = srcTrade.TradeId,
                    Direction = srcTrade.TradeDiretion.ToClientTradeDirection(),
                    TradePrice = rectifyTradePrice,
                    TradeVolume = srcTrade.TradeVolume,
                    CreateTimestampMs = srcTrade.CreateTimestampMs,
                    OrderId = srcTrade.OrderId
                };

                if (srcTrade.TradeTarget.TargetType == HostingXQTargetType.CONTRACT_TARGET)
                {
                    // 合约成交项
                    var contractId = Convert.ToInt32(srcTrade.TradeTarget.TargetKey);
                    tradeDetailDM.TargetContractDetailContainer = new TargetContract_TargetContractDetail(contractId);
                    XueQiaoFoundationHelper.SetupTargetContract_ContractDetail(tradeDetailDM.TargetContractDetailContainer, 
                        contractItemTreeQueryCtrl, XqContractNameFormatType.CommodityAcronym_Code_ContractCode);
                }
                else if (srcTrade.TradeTarget.TargetType == HostingXQTargetType.COMPOSE_TARGET)
                {
                    // 组合成交项
                    long targetComposeId = System.Convert.ToInt64(srcTrade.TradeTarget.TargetKey);
                    List<HostingXQTradeRelatedItem> relatedItem = null;
                    xqTradeRelatedItems.TryGetValue(srcTrade.TradeId, out relatedItem);
                    if (relatedItem != null)
                    {
                        var execTradeIds = relatedItem.Select(i => i.ExecTradeId).ToArray();
                        var contractKeyedRelatedItems = relatedItem.GroupBy(i => (int)i.SledContractId).ToArray();
                        var legTradeSummarys = TradeDMLoadHelper.CreateTargetComposeLegTradeSummarys(composeAllLegContractIds, targetComposeId,
                            _legContractId =>
                            {
                                var isLegCalculatePrice = (targetComposeInfo.Legs.FirstOrDefault(i => i.SledContractId == _legContractId)?.Quantity ?? 0) == 0;
                                return isLegCalculatePrice ? LegTradeSummaryPriceType.CalculatePrice : LegTradeSummaryPriceType.TradeAvgPrice;
                            },
                            composeGraphCacheController, composeGraphQueryController, userComposeViewCacheController,
                            _summs =>
                            {
                                if (_summs == null) return;
                                foreach (var _summ in _summs)
                                    MakeLegSummaryPricePrecise(_summ, commodityCacheController);
                            });
                        
                        foreach (var legTradeSummary in legTradeSummarys)
                        {
                            var execItemsToSummary = contractKeyedRelatedItems.FirstOrDefault(i => i.Key == legTradeSummary.LegContractId)?.ToArray();
                            if (execItemsToSummary != null)
                            {
                                var legTradedTotalVolume = execItemsToSummary.Sum(i => i.RelatedTradeVolume);
                                legTradeSummary.TradeVolume = legTradedTotalVolume;
                                if (legTradeSummary.SummaryPriceType == LegTradeSummaryPriceType.TradeAvgPrice)
                                {
                                    if (legTradedTotalVolume > 0)
                                    {
                                        legTradeSummary.SummaryPrice = execItemsToSummary.Sum(i => i.ExecTradeLegPrice * i.RelatedTradeVolume) / legTradedTotalVolume;
                                    }
                                }
                                else if (legTradeSummary.SummaryPriceType == LegTradeSummaryPriceType.CalculatePrice)
                                {
                                    legTradeSummary.SummaryPrice = execItemsToSummary.FirstOrDefault()?.ExecTradeLegPrice;
                                }
                            }
                            else
                            {
                                legTradeSummary.TradeVolume = 0;
                                legTradeSummary.SummaryPrice = null;
                            }
                            MakeLegSummaryPricePrecise(legTradeSummary, commodityCacheController);
                        }
                        tradeDetailDM.TargetComposeLegTradeSummarysContainer = new TargetComposeLegTradeSummarysContainer(targetComposeId)
                        {
                            LegTradeSummarys = legTradeSummarys != null ? new ObservableCollection<TargetComposeLegTradeSummary>(legTradeSummarys) : null
                        };
                    }
                }
                destNormalXqTrades.Add(tradeDetailDM);
            }
            __normalTradeDetailItems = destNormalXqTrades.ToArray();


            // 设置 __normalTradeExecTradeItemsKeyedByTradeId
            __normalTradeExecTradeItemsKeyedByTradeId = new Dictionary<long, IEnumerable<HostingExecTrade>>();
            foreach (var xqTrade in normalXqTrades)
            {
                if (xqTradeRelatedItems.TryGetValue(xqTrade.TradeId, out List<HostingXQTradeRelatedItem> tradeRelateds))
                {
                    var relatedExecTradeIds = tradeRelateds.Select(i => i.ExecTradeId).ToArray();
                    var execTrades = allExecTradeItems.Where(i => relatedExecTradeIds.Contains(i.ExecTradeId)).ToArray();
                    __normalTradeExecTradeItemsKeyedByTradeId[xqTrade.TradeId] = execTrades;
                }
            }


            // 设置 __composeLameTradeDetailItem
            if (composeLameXqTrades?.Any() == true)
            {
                long targetComposeId = System.Convert.ToInt64(xqOrderItem.TargetKey);
                __composeLameTradeDetailItem = new XqTradeDetailDM(XqTradeDetailDMType.ComposeLameTraded);

                var targetKeyedLameXqTrades = composeLameXqTrades.GroupBy(i => i.TradeTarget.TargetKey).ToArray();
                var legTradeSummarys = TradeDMLoadHelper.CreateTargetComposeLegTradeSummarys(composeAllLegContractIds, targetComposeId,
                        _legContractId =>
                        {
                            var isLegCalculatePrice = (targetComposeInfo.Legs.FirstOrDefault(i => i.SledContractId == _legContractId)?.Quantity ?? 0) == 0;
                            return isLegCalculatePrice ? LegTradeSummaryPriceType.CalculatePrice : LegTradeSummaryPriceType.TradeAvgPrice;
                        },
                        composeGraphCacheController, composeGraphQueryController, userComposeViewCacheController,
                        _summs =>
                        {
                            if (_summs == null) return;
                            foreach (var _summ in _summs)
                                MakeLegSummaryPricePrecise(_summ, commodityCacheController);
                        });

                foreach (var legTradeSummary in legTradeSummarys)
                {
                    var lameXqTradesToSummary = targetKeyedLameXqTrades.FirstOrDefault(i => i.Key == $"{legTradeSummary.LegContractId}")?.ToArray();
                    if (lameXqTradesToSummary != null)
                    {
                        var legTradedTotalVolume = lameXqTradesToSummary.Sum(i => i.TradeVolume);
                        legTradeSummary.TradeVolume = legTradedTotalVolume;
                        if (legTradeSummary.SummaryPriceType == LegTradeSummaryPriceType.TradeAvgPrice)
                        {
                            if (legTradedTotalVolume > 0)
                            {
                                legTradeSummary.SummaryPrice = lameXqTradesToSummary.Sum(i => i.TradePrice * i.TradeVolume) / legTradedTotalVolume;
                            }
                        }
                        else if (legTradeSummary.SummaryPriceType == LegTradeSummaryPriceType.CalculatePrice)
                        {
                            legTradeSummary.SummaryPrice = lameXqTradesToSummary.FirstOrDefault()?.TradePrice;
                        }
                    }
                    else
                    {
                        legTradeSummary.TradeVolume = 0;
                        legTradeSummary.SummaryPrice = null;
                    }
                    MakeLegSummaryPricePrecise(legTradeSummary, commodityCacheController);
                }
                __composeLameTradeDetailItem.TargetComposeLegTradeSummarysContainer = new TargetComposeLegTradeSummarysContainer(targetComposeId)
                {
                    LegTradeSummarys = legTradeSummarys != null ? new ObservableCollection<TargetComposeLegTradeSummary>(legTradeSummarys) : null
                };
            }

            // 设置 __composeLameTradeExecTradeItems
            if (composeLameXqTrades?.Any() == true)
            {
                foreach (var xqTrade in composeLameXqTrades)
                {
                    var lameExecTrades = new List<HostingExecTrade>();
                    if (xqTradeRelatedItems.TryGetValue(xqTrade.TradeId, out List<HostingXQTradeRelatedItem> tradeRelateds))
                    {
                        var relatedExecTradeIds = tradeRelateds.Select(i => i.ExecTradeId).ToArray();
                        var execTrades = allExecTradeItems.Where(i => relatedExecTradeIds.Contains(i.ExecTradeId)).ToArray();
                        lameExecTrades.AddRange(execTrades);
                    }
                    __composeLameTradeExecTradeItems = lameExecTrades.ToArray();
                }
            }
        }

        private void GenerateExecTradeItems(
            HostingXQOrderExecDetail orderExecDetail,
            NativeComposeGraph targetComposeInfo,
            out IEnumerable<ExecTradeDM> __execTradeItems)
        {
            __execTradeItems = null;

            var srcExceTrades = orderExecDetail?.ExecTrades.ToArray();
            var orderTargetType = orderExecDetail?.XqOrder?.OrderTarget?.TargetType;

            if (srcExceTrades == null) return;
            if (orderTargetType == null) return;

            var destExecTrades = new List<ExecTradeDM>();
            foreach (var srcItem in srcExceTrades)
            {
                var execTradeDM = GenerateExecTradeDM(srcItem, orderTargetType.Value.ToClientXQOrderTargetType(), targetComposeInfo);
                if (execTradeDM != null)
                    destExecTrades.Add(execTradeDM);
            }
            __execTradeItems = destExecTrades.ToArray();
        }

        private void GenerateExecOrderItems(
            HostingXQOrderExecDetail orderExecDetail,
            NativeComposeGraph targetComposeInfo,
            out IEnumerable<ExecOrderDM> __execOrderItems)
        {
            __execOrderItems = null;
            
            var srcExceOrders = orderExecDetail?.ExecOrders.ToArray();
            var orderTargetType = orderExecDetail?.XqOrder?.OrderTarget?.TargetType;

            if (srcExceOrders == null) return;
            if (orderTargetType == null) return;

            var destExecOrders = new List<ExecOrderDM>();
            foreach (var srcItem in srcExceOrders)
            {
                var rectifyPrice = XueQiaoBusinessHelper.MakePreciseXQContractRelatedPrice(srcItem.OrderDetail.LimitPrice, XueQiaoConstants.XQContractPriceMinimumPirceTick);
                double? rectifyTradeAvgPrice = null;
                if (srcItem.TradeSummary != null)
                {
                    rectifyTradeAvgPrice = XueQiaoBusinessHelper.MakePreciseXQContractRelatedPrice(srcItem.TradeSummary.TradeListAveragePrice, 
                        XueQiaoConstants.XQContractPriceMinimumPirceTick * XueQiaoConstants.XQMultipleCalculatedPriceTickRate);
                }

                var execOrderDM = new ExecOrderDM(srcItem.ExecOrderId,
                    (int)srcItem.ContractSummary.SledContractId,
                    srcItem.SubAccountId,
                    orderTargetType.Value,
                    targetComposeInfo?.ComposeGraphId)
                {
                    MappedOrderState = srcItem.StateInfo?.CurrentState?.Value.EntrustedOrderExecStateMap2ClientXQOrderState(),
                    ExecStateMsg = srcItem.StateInfo?.StatusMsg,
                    Direction = srcItem.OrderDetail.TradeDirection.GetHashCode(),
                    Price = rectifyPrice,
                    Quantity = srcItem.OrderDetail.Quantity,
                    TradeVolume = srcItem.TradeSummary?.TradeListTotalVolume,
                    TradeAvgPrice = rectifyTradeAvgPrice,
                    CreateTimestampMs = srcItem.CreateTimestampMs,
                };

                XueQiaoFoundationHelper.SetupTargetContract_ContractDetail(execOrderDM.ContractDetailContainer, contractItemTreeQueryCtrl,
                        XqContractNameFormatType.CommodityAcronym_Code_ContractCode, null);

                if (orderTargetType == HostingXQTargetType.COMPOSE_TARGET)
                {
                    execOrderDM.XqComposeLegMeta = targetComposeInfo?.Legs.FirstOrDefault(i => i.SledContractId == execOrderDM.ContractId);
                }

                destExecOrders.Add(execOrderDM);
            }

            __execOrderItems = destExecOrders.ToArray();
        }

        private ExecTradeDM GenerateExecTradeDM(
            HostingExecTrade hostingExecTrade,
            ClientXQOrderTargetType orderTargetType,
            NativeComposeGraph targetComposeInfo)
        {
            if (hostingExecTrade == null) return null;

            var rectifyTradePrice = XueQiaoBusinessHelper.MakePreciseXQContractRelatedPrice(hostingExecTrade.TradePrice, XueQiaoConstants.XQContractPriceMinimumPirceTick);
            var execTradeDM = new ExecTradeDM(hostingExecTrade.ExecTradeId,
                    hostingExecTrade.ExecOrderId,
                    (int)hostingExecTrade.ContractSummary.SledContractId,
                    hostingExecTrade.SubAccountId,
                    orderTargetType.ToHostingXQTargetType(),
                    targetComposeInfo?.ComposeGraphId)
            {
                Direction = hostingExecTrade.OrderTradeDirection.GetHashCode(),
                TradeVolume = hostingExecTrade.TradeVolume,
                TradePrice = rectifyTradePrice,
                CreateTimestampMs = hostingExecTrade.CreateTimestampMs,
            };

            XueQiaoFoundationHelper.SetupTargetContract_ContractDetail(execTradeDM.ContractDetailContainer, contractItemTreeQueryCtrl,
                    XqContractNameFormatType.CommodityAcronym_Code_ContractCode, null);

            if (orderTargetType == ClientXQOrderTargetType.COMPOSE_TARGET)
            {
                execTradeDM.XqComposeLegMeta = targetComposeInfo?.Legs.FirstOrDefault(i => i.SledContractId == execTradeDM.ContractId);
            }
            return execTradeDM;
        }

        private static void MakeLegSummaryPricePrecise(TargetComposeLegTradeSummary _legSummary, 
            ICommodityCacheController commodityCacheController)
        {
            if (_legSummary == null) return;
            var commodityId = _legSummary.LegMeta?.SledCommodityId;
            if (commodityId == null) return;

            var originPrice = _legSummary.SummaryPrice;
            if (originPrice != null)
            {
                var pricePreciseTick = commodityCacheController.GetCache((int)commodityId.Value)?.TickSize;
                if (pricePreciseTick != null && _legSummary.SummaryPriceType == LegTradeSummaryPriceType.TradeAvgPrice && pricePreciseTick != null)
                    pricePreciseTick *= XueQiaoConstants.XQMultipleCalculatedPriceTickRate;

                _legSummary.SummaryPrice = XueQiaoBusinessHelper.MakePreciseXQContractRelatedPrice(originPrice.Value, pricePreciseTick);
            }
        }
    }
}
