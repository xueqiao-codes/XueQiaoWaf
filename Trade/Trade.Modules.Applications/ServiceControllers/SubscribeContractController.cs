using IDLAutoGenerated.Util;
using NativeModel.Trade;
using Prism.Events;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.BusinessResources.Constants;
using XueQiaoFoundation.Interfaces.Event.business;
using XueQiaoFoundation.Interfaces.Event.quotation_server;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Modules.Applications.DataModels;
using XueQiaoWaf.Trade.Modules.Applications.Helper;
using XueQiaoWaf.Trade.Modules.Applications.ServiceControllers.Events;
using XueQiaoWaf.Trade.Modules.Applications.Services;
using NativeModel.Contract;
using XueQiaoFoundation.Interfaces.Helper;
using System.Collections.Specialized;
using XueQiaoWaf.Trade.Interfaces.Applications;
using XueQiaoFoundation.BusinessResources.DataModels;
using business_foundation_lib.quotationpush;
using xueqiao.trade.hosting.proxy;
using XueQiaoFoundation.BusinessResources.Models;
using System.Windows.Threading;

namespace XueQiaoWaf.Trade.Modules.Applications.ServiceControllers
{
    [Export(typeof(ISubscribeContractController)), Export(typeof(ITradeModuleSingletonController)), PartCreationPolicy(CreationPolicy.Shared)]
    internal class SubscribeContractController : ISubscribeContractController, ITradeModuleSingletonController
    {   
        private const string SubscribeQuotationKeyCustomInfo_ContractIDKey = "9653d2ae-85ac-11e8-adc0-fa7ae01bbebc"; 

        private readonly SubscribeContractService subscribeContractService;
        private readonly IQuotationEngineController quotationEngineController;
        private readonly ILoginDataService loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly IEventAggregator eventAggregator;
        private readonly IContractItemTreeQueryController contractItemTreeQueryCtrl;
        private readonly Lazy<IOrderItemsController> orderItemsController;
        private readonly Lazy<IPositionDiscreteItemsController> positionDiscreteItemsCtrl;
        private readonly Lazy<ISubscribeComposeController> subscribeComposeCtrl;
        private readonly OrderItemsService orderItemsService;
        private readonly PositionDiscreteItemsService positionItemsService;
        
        private readonly ConcurrentDictionary<Tuple<int, string>, SubscribeContractDataModel> subscribeContractDictionary;
        private readonly ConcurrentDictionary<int,int> waitUnsubscribeContractIds = new ConcurrentDictionary<int,int>();

        private readonly TaskFactory contractSubscribeRequestTaskFactory = new TaskFactory(new LimitedConcurrencyLevelTaskScheduler(2));
        private CancellationTokenSource contractSubscribeRequestTaskCTS;
        private readonly object contractSubscribeRequestTasksLock = new object();
        private readonly TaskFactory contractUnsubscribeTaskFactory = new TaskFactory(new LimitedConcurrencyLevelTaskScheduler(2));
        private CancellationTokenSource contractUnsubscribeTaskCTS;
        private readonly object contractUnsubscribeTasksLock = new object();

        // 行情降频处理器
        private readonly QuotationDownConversionHandler<ContractSymbol, NativeQuotationItem> quotDownConversionHandler;
        
        // 检查标的是否过期的定时器
        private System.Timers.Timer checkTargetExpiredTimer;

        [ImportingConstructor]
        public SubscribeContractController(
            SubscribeContractService subscribeContractService,
            IQuotationEngineController quotationEngineController,
            ILoginDataService loginDataService,
            Lazy<ILoginUserManageService> loginUserManageService,
            IEventAggregator eventAggregator,
            IContractItemTreeQueryController contractItemTreeQueryCtrl,
            Lazy<IOrderItemsController> orderItemsController,
            Lazy<IPositionDiscreteItemsController> positionDiscreteItemsCtrl,
            Lazy<ISubscribeComposeController> subscribeComposeCtrl,
            OrderItemsService orderItemsService,
            PositionDiscreteItemsService positionItemsService)
        {
            this.subscribeContractService = subscribeContractService;
            this.quotationEngineController = quotationEngineController;
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.eventAggregator = eventAggregator;
            this.contractItemTreeQueryCtrl = contractItemTreeQueryCtrl;
            this.orderItemsController = orderItemsController;
            this.positionDiscreteItemsCtrl = positionDiscreteItemsCtrl;
            this.subscribeComposeCtrl = subscribeComposeCtrl;
            this.orderItemsService = orderItemsService;
            this.positionItemsService = positionItemsService;
            
            subscribeContractDictionary = new ConcurrentDictionary<Tuple<int, string>, SubscribeContractDataModel>();

            quotDownConversionHandler = new QuotationDownConversionHandler<ContractSymbol, NativeQuotationItem>(500);
            quotDownConversionHandler.Time2HandleQuotation = (_handler, _time2HandleQuots) =>
            {
                if (_time2HandleQuots?.Any() != true) return;
                foreach (var item in _time2HandleQuots)
                {
                    UpdateSubscribeContractsWithSameId(null,
                        item.Key,
                        () => new SubscribeContractUpdateTemplate
                        {
                            Quotation = new Tuple<NativeQuotationItem>(item.Value)
                        });
                }
            };

            CollectionChangedEventManager.AddHandler(orderItemsService.OrderItems, OrderItemsCollectionChanged);
            CollectionChangedEventManager.AddHandler(positionItemsService.PositionItems, PositionItemsCollectionChanged);

            eventAggregator.GetEvent<ServerConnectOpen>().Subscribe(ReceivedQuotationServerConnectOpenEvent, ThreadOption.PublisherThread);
            eventAggregator.GetEvent<ServerConnectClose>().Subscribe(ReceivedQuotationServerConnectCloseEvent, ThreadOption.PublisherThread);
            loginUserManageService.Value.HasLogined += RecvUserLogined;
            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
            eventAggregator.GetEvent<SpecQuotationUpdated>().Subscribe(RecvSpecQuotationUpdatedEvent, ThreadOption.PublisherThread);
            eventAggregator.GetEvent<SpecQuotationSubscribedEvent>().Subscribe(RecvSpecQuotationSubscribedEvent, ThreadOption.PublisherThread);
            eventAggregator.GetEvent<SpecQuotationUnsubscribedEvent>().Subscribe(RecvSpecQuotationUnsubscribedEvent, ThreadOption.PublisherThread);
            eventAggregator.GetEvent<SubscribeComposeAddedEvent>().Subscribe(ReceivedSubscribeComposeAddedEvent);
            eventAggregator.GetEvent<SubscribeComposeRemovedEvent>().Subscribe(ReceivedSubscribeComposeRemovedEvent);
        }
        
        public void Shutdown()
        {
            StopCheckTargetExpiredTimer();
            CancelContractSubscribeRequestTasks();
            CancelContractUnsubscribeTasks();

            quotDownConversionHandler.Time2HandleQuotation = null;
            quotDownConversionHandler.Dispose();

            CollectionChangedEventManager.RemoveHandler(orderItemsService.OrderItems, OrderItemsCollectionChanged);
            CollectionChangedEventManager.RemoveHandler(positionItemsService.PositionItems, PositionItemsCollectionChanged);

            eventAggregator.GetEvent<ServerConnectOpen>().Unsubscribe(ReceivedQuotationServerConnectOpenEvent);
            eventAggregator.GetEvent<ServerConnectClose>().Unsubscribe(ReceivedQuotationServerConnectCloseEvent);
            loginUserManageService.Value.HasLogined -= RecvUserLogined;
            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
            eventAggregator.GetEvent<SpecQuotationUpdated>().Unsubscribe(RecvSpecQuotationUpdatedEvent);
            eventAggregator.GetEvent<SpecQuotationSubscribedEvent>().Unsubscribe(RecvSpecQuotationSubscribedEvent);
            eventAggregator.GetEvent<SpecQuotationUnsubscribedEvent>().Unsubscribe(RecvSpecQuotationUnsubscribedEvent);
            eventAggregator.GetEvent<SubscribeComposeAddedEvent>().Unsubscribe(ReceivedSubscribeComposeAddedEvent);
            eventAggregator.GetEvent<SubscribeComposeRemovedEvent>().Unsubscribe(ReceivedSubscribeComposeRemovedEvent);
        }
        
        public SubscribeContractDataModel AddOrUpdateSubscribeContract(int contractId, 
            string subscribeGroupKey, 
            Func<bool, SubscribeContractUpdateTemplate> sameContractIdItemsUpdateAction)
        {
            if (subscribeGroupKey == null) throw new ArgumentNullException("`subscribeGroupKey` can't be null.");

            // Remove from unsubscribe list first
            waitUnsubscribeContractIds.TryRemove(contractId, out int ignore);

            bool isNewItem = false;
            var optItem = subscribeContractDictionary.AddOrUpdate(new Tuple<int, string>(contractId, subscribeGroupKey),
                k =>
                {
                    var updateTemplate = sameContractIdItemsUpdateAction?.Invoke(false);
                    var newItem = new SubscribeContractDataModel(contractId, subscribeGroupKey)
                    {
                        AddTimestamp = (long)DateHelper.NowUnixTimeSpan().TotalSeconds
                    };

                    // 初始化一些默认值
                    var existSameIdSubContract = FirstSubscribeContractItemOfContractId(contractId);
                    var newItemQuotSubState = existSameIdSubContract?.SubscribeState ?? MarketSubscribeState.Unkown;
                    newItem.SubscribeState = newItemQuotSubState;
                    newItem.SubscribeStateMsg = MarketSubscribeStateHelper.DefaultStateMsgForSubscribeState(newItemQuotSubState);
                    newItem.Quotation = existSameIdSubContract?.Quotation;

                    if (updateTemplate == null)
                    {
                        updateTemplate = new SubscribeContractUpdateTemplate();
                    }
                    if (updateTemplate.OnTradingSubAccountIds == null)
                    {
                        updateTemplate.OnTradingSubAccountIds = new Tuple<IEnumerable<long>>(orderItemsController.Value.OnTradingSubAccountIdsOfTarget($"{contractId}", ClientXQOrderTargetType.CONTRACT_TARGET)
                            ?? new long[] { });
                    }
                    if (updateTemplate.ExistPositionSubAccountIds == null)
                    {
                        updateTemplate.ExistPositionSubAccountIds = new Tuple<IEnumerable<long>>(positionDiscreteItemsCtrl.Value.ExistPositionSubAccountIdsOfContract(contractId)
                            ?? new long[] { });
                    }
                    if (updateTemplate.IsComposeRelated == null)
                    {
                        updateTemplate.IsComposeRelated = new Tuple<bool>(subscribeComposeCtrl.Value.ExistLegContractInCurrentComposes(contractId));
                    }
                    UpdateSubscribeContractWithTemplate(newItem, updateTemplate);
                    XueQiaoFoundationHelper.SetupTargetContract_ContractDetail(newItem.ContractDetailContainer,
                        contractItemTreeQueryCtrl, XqContractNameFormatType.CommodityAcronym_Code_ContractCode, 
                        _datail => 
                        {
                            // 纠正行情
                            var itemQuotation = newItem.Quotation;
                            RectifySubscribeDataQuotation(itemQuotation, itemQuotation, _datail?.CommodityDetail?.TickSize);

                            // 更新是否过期
                            var nowTimestamp = (long)DateHelper.NowUnixTimeSpan().TotalSeconds;
                            InvalidateSubscribeItemIsExpired(newItem, nowTimestamp);

                            // 更新名称
                            newItem.XqTargetName = _datail.CnDisplayName;
                        });

                    // 添加至主线程的订阅合约列表
                    UIItemsAddOrRemoveDispatcherBeginInvoke(() =>
                    {
                        subscribeContractService.Contracts.Add(newItem);
                    });

                    // 发布事件`SubscribeContractAddedEvent` 
                    eventAggregator.GetEvent<SubscribeContractAddedEvent>().Publish(newItem);

                    isNewItem = true;
                    return newItem;
                }, 
                (k, existItem) =>
                {
                    return existItem;
                });

            Predicate<SubscribeContractDataModel> predicate = null;
            if (isNewItem)
                predicate = new Predicate<SubscribeContractDataModel>(i => (i.ContractId == contractId && i != optItem));
            else
                predicate = new Predicate<SubscribeContractDataModel>(i => i.ContractId == contractId);

            var sameIdComposes = subscribeContractDictionary.Values.Where(i => predicate(i));
            if (sameIdComposes.Any())
            {
                var updateTemplate = sameContractIdItemsUpdateAction?.Invoke(true);
                // 根据模板，改变相同 id 的合约的一些信息
                if (updateTemplate != null)
                {
                    foreach (var contractItem in sameIdComposes)
                    {
                        UpdateSubscribeContractWithTemplate(contractItem, updateTemplate);
                    }
                }
            }

            return optItem;
        }

        public void RemoveSubscribeConract(int contractId, string subscribeGroupKey = null)
        {
            IEnumerable<Tuple<int, string>> rmKeys = null;
            if (subscribeGroupKey == null)
            {
                rmKeys = subscribeContractDictionary.Keys.Where(i => i.Item1 == contractId);
            }
            else
            {
                rmKeys = new Tuple<int, string>[] { new Tuple<int, string>(contractId, subscribeGroupKey) };
            }

            foreach (var rmKey in rmKeys)
            {
                SubscribeContractDataModel rmItem = null;
                if (subscribeContractDictionary.TryRemove(rmKey, out rmItem))
                {
                    // 从列表中删除
                    UIItemsAddOrRemoveDispatcherBeginInvoke(() =>
                    {
                        subscribeContractService.Contracts.Remove(rmItem);
                    });

                    // 发布事件`SubscribeContractRemovedEvent` 
                    eventAggregator.GetEvent<SubscribeContractRemovedEvent>().Publish(rmItem);
                }
            }

            // 当已不存在该 id 的订阅列表时，退订该合约 
            var existSameIdItems = subscribeContractDictionary.Keys.Any(k => k.Item1 == contractId);
            if (!existSameIdItems)
            {
                if (waitUnsubscribeContractIds.TryAdd(contractId, contractId))
                {
                    EnqueueContractUnsubscribeTask(contractId);
                }
            }
        }

        public void UpdateSubscribeContractsWithSameId(int? contractId,
            ContractSymbol orSymbol,
            Func<SubscribeContractUpdateTemplate> updateFactory)
        {
            if (updateFactory == null) return;
            var sameIdSubContracts = FilterSubscribeContractItems(contractId, orSymbol);
            if (sameIdSubContracts?.Any() == true)
            {
                var updateTemplate = updateFactory?.Invoke();
                // 根据模板，改变相同 id 的合约的一些信息
                if (updateTemplate != null)
                {
                    foreach (var contractItem in sameIdSubContracts)
                    {
                        UpdateSubscribeContractWithTemplate(contractItem, updateTemplate);
                    }
                }
            }
        }

        public IEnumerable<SubscribeContractDataModel> GetSharedGroupKeySubscribeContracts()
        {
            return subscribeContractDictionary.Values
                .Where(i => i.SubscribeGroupKey == SubscribeContractDataModel.SharedListContractGroupKey)
                .GroupBy(i=>i.ContractId)
                .Select(i=>i.First())
                .OrderBy(i=>i.ContractId)
                .ToArray();
        }

        public void SubscribeContractQuotationIfNeed(int? contractId, ContractSymbol orSymbol)
        {
            var sameIdItems = FilterSubscribeContractItems(contractId, orSymbol);
            if (sameIdItems?.Any() != true) return;

            var tarContractId = sameIdItems.First().ContractId;
            waitUnsubscribeContractIds.TryRemove(tarContractId, out int ignore);
            var existSubscribeItems = sameIdItems.Any(i =>
            {
                var state = i.SubscribeState;
                return state == MarketSubscribeState.Subscribed || state == MarketSubscribeState.Subscribing;
            });
            if (!existSubscribeItems)
            {
                EnqueueContractSubscribeRequestTask(tarContractId);
            }
        }

        public void UnsubscribeContractQuotationIfNeed(int? contractId, ContractSymbol orSymbol)
        {
            var sameIdItems = FilterSubscribeContractItems(contractId, orSymbol);
            if (sameIdItems?.Any() != true) return;

            var tarContractId = sameIdItems.First().ContractId;
            waitUnsubscribeContractIds.TryAdd(tarContractId, tarContractId);
            EnqueueContractUnsubscribeTask(tarContractId);
        }

        private IEnumerable<SubscribeContractDataModel> FilterSubscribeContractItems(int? contractId, ContractSymbol orSymbol)
        {
            var subContracts = subscribeContractDictionary.Values;
            if (contractId != null)
            {
                return subContracts.Where(i => i.ContractId == contractId.Value);
            }
            else if (orSymbol != null)
            {
                return subContracts.Where(i=> i.ContractDetailContainer.ExchangeDetail?.ExchangeMic == orSymbol.ExchangeMic
                                && i.ContractDetailContainer.CommodityDetail?.SledCommodityCode == orSymbol.CommodityCode
                                && i.ContractDetailContainer.ContractDetail?.SledContractCode == orSymbol.ContractCode);
            }
            return null;
        }


        /// <summary>
        /// 为了防止死锁，用于 UI 显示的列表的增加或删除需要在主线程执行。该方法能保证顺序执行
        /// </summary>
        /// <param name="action"></param>
        private static void UIItemsAddOrRemoveDispatcherBeginInvoke(Action action)
        {
            if (action == null) return;
            DispatcherHelper.CheckBeginInvokeOnUI(() => action(),
                DispatcherPriority.Normal);
        }

        /// <summary>
        /// 纠正行情数据，使其更精确
        /// </summary>
        /// <param name="targetQuotation">要精确的行情实体</param>
        /// <param name="srcQuatation">用于提供源数据的行情</param>
        /// <param name="commodityTickSize">商品 tick size</param>
        private static void RectifySubscribeDataQuotation(NativeQuotationItem targetQuotation,
            NativeQuotationItem srcQuotation, double? commodityTickSize)
        {
            if (targetQuotation == null || srcQuotation == null) return;
            SubscribeDataQuotationHelper.UpdateSubscribeDataQuotation(targetQuotation, srcQuotation,
                (_propName, _sourceValue) =>
                {
                    if (_sourceValue == null) return _sourceValue;
                    double? destValue = null;
                    if (commodityTickSize != null && commodityTickSize != 0)
                        destValue = MathHelper.MakeValuePrecise(_sourceValue.Value, Math.Abs(commodityTickSize.Value));

                    return destValue;
                },
                (_propName, _scoureValue) =>
                {
                    if (_scoureValue?.Any() != true) return _scoureValue;
                    var destValues = new List<double>();

                    foreach (var srcVal in _scoureValue)
                    {
                        double? destVal = null;
                        if (commodityTickSize != null && commodityTickSize != 0)
                        {
                            destVal = MathHelper.MakeValuePrecise(srcVal, Math.Abs(commodityTickSize.Value));
                            destValues.Add(destVal.Value);
                        }
                    }
                    return destValues;
                });
        }

        private void UpdateSubscribeContractWithTemplate(SubscribeContractDataModel subContractItem, SubscribeContractUpdateTemplate template)
        {
            if (subContractItem == null) return;
            if (template == null) return;
            
            // 设置行情
            if (template.Quotation != null)
            {
                var tempQ = template.Quotation.Item1;
                var newQuot = new NativeQuotationItem();
                if (tempQ != null)
                {
                    RectifySubscribeDataQuotation(newQuot, tempQ, subContractItem.ContractDetailContainer?.CommodityDetail?.TickSize);
                }
                subContractItem.Quotation = newQuot;
            }

            if (template.SubscribeState != null)
            {
                subContractItem.SubscribeState = template.SubscribeState.Item1;
            }

            if (template.SubscribeStateMsg != null)
            {
                subContractItem.SubscribeStateMsg = template.SubscribeStateMsg.Item1;
            }

            if (template.AddTimestamp != null)
            {
                subContractItem.AddTimestamp = template.AddTimestamp.Item1;
            }

            if (template.CustomGroupKeys != null)
            {
                subContractItem.CustomGroupKeys = template.CustomGroupKeys.Item1?.ToArray();
            }

            if (template.OnTradingSubAccountIds != null)
            {
                subContractItem.OnTradingSubAccountIds = template.OnTradingSubAccountIds.Item1?.ToArray();
            }

            if (template.ExistPositionSubAccountIds != null)
            {
                subContractItem.ExistPositionSubAccountIds = template.ExistPositionSubAccountIds.Item1?.ToArray();
            }

            if (template.IsComposeRelated != null)
            {
                subContractItem.IsComposeRelated = template.IsComposeRelated.Item1;
            }
        }
        
        private void UpdateContractsSubscribeState(int? withContractId, 
            ContractSymbol orSymbol,
            MarketSubscribeState targetSubscribeState, Func<string> targetSubscribeStateMsgFactory)
        {
            var sameIdSubContracts = FilterSubscribeContractItems(withContractId, orSymbol);
            if (sameIdSubContracts?.Any() == true)
            {
                foreach (var i in sameIdSubContracts)
                {
                    i.SubscribeState = targetSubscribeState;
                    if (targetSubscribeStateMsgFactory != null)
                    {
                        i.SubscribeStateMsg = targetSubscribeStateMsgFactory();
                    }
                }
            }
        }

        private SubscribeContractDataModel FirstSubscribeContractItemOfContractId(int contractId)
        {
            return subscribeContractDictionary.Values.FirstOrDefault(i => i.ContractId == contractId);
        }
        
        private void EnqueueContractSubscribeRequestTask(int subscribeContractId)
        {
            if (subscribeContractId <= 0) return;
            lock (contractSubscribeRequestTasksLock)
            {
                if (contractSubscribeRequestTaskCTS == null
                    || contractSubscribeRequestTaskCTS.IsCancellationRequested)
                {
                    contractSubscribeRequestTaskCTS = new CancellationTokenSource();
                }
                var taskCancelToken = contractSubscribeRequestTaskCTS.Token;
                contractSubscribeRequestTaskFactory.StartNew(() =>
                {
                    if (taskCancelToken.IsCancellationRequested) return;
                    if (waitUnsubscribeContractIds.ContainsKey(subscribeContractId)) return;
                    if (MarketSubscribeState.Subscribed == FirstSubscribeContractItemOfContractId(subscribeContractId)?.SubscribeState) return;

                    var queriedContractTree = contractItemTreeQueryCtrl.QueryContractItemTree(subscribeContractId, true, false, false);
                    string contractSymbol = null;
                    var contractCode = queriedContractTree?.Contract?.SledContractCode;
                    var commodityType = queriedContractTree?.ParentCommodity?.SledCommodityType;
                    var commodityCode = queriedContractTree?.ParentCommodity?.SledCommodityCode;
                    var exchangeMic = queriedContractTree?.ParentCommodity?.ExchangeMic;
                    if (!string.IsNullOrEmpty(contractCode)
                    && !string.IsNullOrEmpty(commodityCode)
                    && !string.IsNullOrEmpty(exchangeMic))
                    {
                        contractSymbol = IDLAutoGenerated.Util.Extensions.GenerateQuotationContractSymbol(contractCode, (int)commodityType, commodityCode, exchangeMic);
                    }

                    if (taskCancelToken.IsCancellationRequested) return;
                    if (waitUnsubscribeContractIds.ContainsKey(subscribeContractId)) return;
                    
                    if (contractSymbol == null)
                    {
                        UpdateContractsSubscribeState(subscribeContractId, null,
                            MarketSubscribeState.Unsubscribed, () => "订阅失败,未能获取合约信息");
                        return;
                    }

                    UpdateContractsSubscribeState(subscribeContractId, null,
                                MarketSubscribeState.Subscribing,
                                () => MarketSubscribeStateHelper.DefaultStateMsgForSubscribeState(MarketSubscribeState.Subscribing));

                    var loginResp = loginDataService.ProxyLoginResp;
                    if (loginResp == null) return;

                    var subKey = new SubscribeQuotationKey(loginResp.HostingRunningMode.HostingRunningMode2QuotationPlatformEnv(), contractSymbol);
                    // 添加 contract id 为自定义信息
                    subKey.CustomInfos.Add(SubscribeQuotationKeyCustomInfo_ContractIDKey, $"{subscribeContractId}");


                    var reqResult = quotationEngineController.SubscribeContractQuotation(subKey);
                    if (!reqResult)
                    {
                        // 发起订阅失败，基本是由于 push client 还没有开启的原因，所以线程休眠减小 cpu 负荷
                        Thread.Sleep(1000);
                        EnqueueContractSubscribeRequestTask(subscribeContractId);
                    }
                }, taskCancelToken);
            }
        }

        private void CancelContractSubscribeRequestTasks()
        {
            lock (contractSubscribeRequestTasksLock)
            {
                if (contractSubscribeRequestTaskCTS != null)
                {
                    contractSubscribeRequestTaskCTS.Cancel();
                    contractSubscribeRequestTaskCTS.Dispose();
                    contractSubscribeRequestTaskCTS = null;
                }
            }
        }

        private void EnqueueContractUnsubscribeTask(int unsubscribeContractId)
        {
            if (unsubscribeContractId <= 0) return;
            if (!waitUnsubscribeContractIds.ContainsKey(unsubscribeContractId)) return;

            lock (contractUnsubscribeTasksLock)
            {
                if (contractUnsubscribeTaskCTS == null
                    || contractUnsubscribeTaskCTS.IsCancellationRequested)
                {
                    contractUnsubscribeTaskCTS = new CancellationTokenSource();
                }
                var taskCancelToken = contractUnsubscribeTaskCTS.Token;
                contractUnsubscribeTaskFactory.StartNew(() =>
                {
                    var queriedContractTree = contractItemTreeQueryCtrl.QueryContractItemTree(unsubscribeContractId, true, false, false);

                    if (taskCancelToken.IsCancellationRequested) return;
                    if (!waitUnsubscribeContractIds.ContainsKey(unsubscribeContractId)) return;

                    string contractSymbol = null;
                    var contractCode = queriedContractTree?.Contract?.SledContractCode;
                    var commodityType = queriedContractTree?.ParentCommodity?.SledCommodityType;
                    var commodityCode = queriedContractTree?.ParentCommodity?.SledCommodityCode;
                    var exchangeMic = queriedContractTree?.ParentCommodity?.ExchangeMic;
                    if (!string.IsNullOrEmpty(contractCode)
                    && !string.IsNullOrEmpty(commodityCode)
                    && !string.IsNullOrEmpty(exchangeMic))
                    {
                        contractSymbol = IDLAutoGenerated.Util.Extensions.GenerateQuotationContractSymbol(contractCode, (int)commodityType, commodityCode, exchangeMic);
                    }

                    if (taskCancelToken.IsCancellationRequested) return;
                    if (!waitUnsubscribeContractIds.ContainsKey(unsubscribeContractId)) return;
              
                    if (contractSymbol == null)
                    {
                        UpdateContractsSubscribeState(unsubscribeContractId, null,
                            MarketSubscribeState.Unsubscribing, () => "退订失败,未能获取合约信息");
                        return;
                    }

                    var loginResp = loginDataService.ProxyLoginResp;
                    if (loginResp == null) return;

                    var unsubKey = new SubscribeQuotationKey(loginResp.HostingRunningMode.HostingRunningMode2QuotationPlatformEnv(), contractSymbol);
                    // 添加 contract id 为自定义信息
                    unsubKey.CustomInfos.Add(SubscribeQuotationKeyCustomInfo_ContractIDKey, $"{unsubscribeContractId}");

                    UpdateContractsSubscribeState(unsubscribeContractId, null,
                                MarketSubscribeState.Unsubscribing,
                                () => MarketSubscribeStateHelper.DefaultStateMsgForSubscribeState(MarketSubscribeState.Unsubscribing));
                    var reqResult = quotationEngineController.UnsubscribeContractQuotation(unsubKey);
                    if (!reqResult)
                    {
                        // 发起取消订阅失败，基本是由于 push client 还没有开启的原因，所以不必再去请求取消订阅
                        if (waitUnsubscribeContractIds.TryRemove(unsubscribeContractId, out int ignore))
                        {
                            UpdateContractsSubscribeState(unsubscribeContractId, null,
                                MarketSubscribeState.Unsubscribed,
                                () => MarketSubscribeStateHelper.DefaultStateMsgForSubscribeState(MarketSubscribeState.Unsubscribed));
                        }
                    }
                }, taskCancelToken);
            }
        }

        private void CancelContractUnsubscribeTasks()
        {
            lock (contractUnsubscribeTasksLock)
            {
                if (contractUnsubscribeTaskCTS != null)
                {
                    contractUnsubscribeTaskCTS.Cancel();
                    contractUnsubscribeTaskCTS.Dispose();
                    contractUnsubscribeTaskCTS = null;
                }
            }
        }

        private void OrderItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            var oldItems = e.OldItems?.Cast<OrderItemDataModel>().ToArray();
            var newItems = e.NewItems?.Cast<OrderItemDataModel>().ToArray();

            if (oldItems?.Any() == true)
            {
                foreach (var oldItem in oldItems)
                {
                    PropertyChangedEventManager.RemoveHandler(oldItem, OrderItemPropChanged, "");
                    UpdateSubscribeContractIsTradingWhenChangedOrderState(oldItem.TargetType, oldItem.TargetKey,
                        oldItem.SubAccountFields.SubAccountId, null, true);
                }
            }

            if (newItems?.Any() == true)
            {
                foreach (var newItem in newItems)
                {
                    PropertyChangedEventManager.RemoveHandler(newItem, OrderItemPropChanged, "");
                    PropertyChangedEventManager.AddHandler(newItem, OrderItemPropChanged, "");
                    UpdateSubscribeContractIsTradingWhenChangedOrderState(newItem.TargetType, newItem.TargetKey,
                        newItem.SubAccountFields.SubAccountId, newItem.OrderState, false);
                }
            }
        }

        private void OrderItemPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(OrderItemDataModel.OrderState))
            {
                var orderItem = sender as OrderItemDataModel;
                if (orderItem == null) return;
                UpdateSubscribeContractIsTradingWhenChangedOrderState(orderItem.TargetType, orderItem.TargetKey,
                        orderItem.SubAccountFields.SubAccountId, orderItem.OrderState, false);
            }
        }

        private void PositionItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            var oldItems = e.OldItems?.Cast<PositionDiscreteItemDataModel>().ToArray();
            var newItems = e.NewItems?.Cast<PositionDiscreteItemDataModel>().ToArray();

            if (oldItems?.Any() == true)
            {
                foreach (var oldItem in oldItems)
                {
                    PropertyChangedEventManager.RemoveHandler(oldItem, PositionItemPropChanged, "");
                    UpdateSubscribeContractExistPositionWhenChangedPositionExistState((int)oldItem.ContractId,
                        oldItem.SubAccountFields.SubAccountId, false);
                    
                }
            }

            if (newItems?.Any() == true)
            {
                foreach (var newItem in newItems)
                {
                    PropertyChangedEventManager.RemoveHandler(newItem, PositionItemPropChanged, "");
                    PropertyChangedEventManager.AddHandler(newItem, PositionItemPropChanged, "");
                    UpdateSubscribeContractExistPositionWhenChangedPositionExistState((int)newItem.ContractId,
                        newItem.SubAccountFields.SubAccountId, newItem.IsExistPosition);
                }
            }
        }

        private void PositionItemPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(PositionDiscreteItemDataModel.IsExistPosition))
            {
                var positionItem = sender as PositionDiscreteItemDataModel;
                if (positionItem == null) return;
                UpdateSubscribeContractExistPositionWhenChangedPositionExistState((int)positionItem.ContractId,
                        positionItem.SubAccountFields.SubAccountId, positionItem.IsExistPosition);
            }
        }

        private void ReceivedQuotationServerConnectOpenEvent(ServerConnectOpenEventMsg eventMsg)
        {
            if (eventMsg?.IsOpened == true)
            {
                // 行情 client 已启动

                // 开启行情降频处理器
                quotDownConversionHandler.Start();

                // 订阅需要订阅的合约行情
                var needSubscribeItems = subscribeContractDictionary.Values
                    .Where(i => i.SubscribeState == MarketSubscribeState.Unkown || i.SubscribeState == MarketSubscribeState.Unsubscribed);
                foreach (var toSubItem in needSubscribeItems)
                {
                    EnqueueContractSubscribeRequestTask(toSubItem.ContractId);
                }
            }
        }

        private void ReceivedQuotationServerConnectCloseEvent()
        {
            // 停止行情降频处理器
            quotDownConversionHandler.Stop();

            CancelContractSubscribeRequestTasks();
            CancelContractUnsubscribeTasks();
        }

        private void RecvUserLogined()
        {
            StartCheckTargetExpiredTimer();
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            StopCheckTargetExpiredTimer();

            // 停止行情降频处理器
            quotDownConversionHandler.Stop();

            CancelContractSubscribeRequestTasks();
            CancelContractUnsubscribeTasks();
            waitUnsubscribeContractIds.Clear();

            RemoveAllSubscribeContracts();
        }

        private void RecvSpecQuotationUpdatedEvent(NativeQuotationItem quot)
        {
            if (quot == null) return;
            var contractSymbol = quot.ContractSymbol;
            if (contractSymbol == null) return;
            quotDownConversionHandler.UpdateLastQuotation(contractSymbol, quot);
        }

        private void RecvSpecQuotationSubscribedEvent(SpecQuotationSubscribedEventArgs args)
        {
            if (args == null) return;
            string contractIdStr = null;
            args.SubKey.CustomInfos.TryGetValue(SubscribeQuotationKeyCustomInfo_ContractIDKey, out contractIdStr);
            int? contratcId = null;
            if (contractIdStr != null)
            {
                try { contratcId = System.Convert.ToInt32(contractIdStr); }
                catch (Exception) { }
            }
            if (contratcId == null) return;
            
            if (args.IsSubscribedSuccess)
            {
                // success
                UpdateContractsSubscribeState(contratcId, null,
                    MarketSubscribeState.Subscribed,
                    () => MarketSubscribeStateHelper.DefaultStateMsgForSubscribeState(MarketSubscribeState.Subscribed));
            }
            else
            {
                // failed
                UpdateContractsSubscribeState(contratcId, null, 
                    MarketSubscribeState.Unsubscribed, () => "订阅失败");
            }
        }

        private void RecvSpecQuotationUnsubscribedEvent(SpecQuotationUnsubscribedEventArgs args)
        {
            if (args == null) return;
            string contractIdStr = null;
            args.SubKey.CustomInfos.TryGetValue(SubscribeQuotationKeyCustomInfo_ContractIDKey, out contractIdStr);
            int? contratcId = null;
            if (contractIdStr != null)
            {
                try { contratcId = System.Convert.ToInt32(contractIdStr); }
                catch (Exception) { }
            }
            if (contratcId == null) return;

            if (args.IsUnsubscribedSuccess)
            {
                // success，从取消订阅列表列表删除
                var tarContractSymbolItems = FilterSubscribeContractItems(contratcId, null);
                if (tarContractSymbolItems?.Any() == true)
                {
                    int ignore = 0;
                    foreach (var i in tarContractSymbolItems)
                    {
                        waitUnsubscribeContractIds.TryRemove(i.ContractId, out ignore);
                    }

                    var targetSubState = MarketSubscribeState.Unsubscribed;
                    var targetSubStateMsg = MarketSubscribeStateHelper.DefaultStateMsgForSubscribeState(targetSubState);
                    foreach (var i in tarContractSymbolItems)
                    {
                        i.SubscribeState = targetSubState;
                        i.SubscribeStateMsg = targetSubStateMsg;
                    }
                }
            }
            else
            {
                // failed
                var tarContractSymbolFirstItem = FilterSubscribeContractItems(contratcId, null)?.FirstOrDefault();
                if (tarContractSymbolFirstItem != null)
                {
                    EnqueueContractUnsubscribeTask(tarContractSymbolFirstItem.ContractId);
                }
            }
        }
        
        private void ReceivedSubscribeComposeAddedEvent(SubscribeComposeDataModel msg)
        {
            var addedComposeLegs = msg.ComposeDetailContainer?.BasicComposeGraph?.Legs;
            if (addedComposeLegs == null) return;
            foreach (var leg in addedComposeLegs)
            {
                UpdateSubscribeContractsWithSameId((int)leg.SledContractId, null, () =>
                    new SubscribeContractUpdateTemplate { IsComposeRelated = new Tuple<bool>(true) }
                    );
            }
        }

        private void ReceivedSubscribeComposeRemovedEvent(SubscribeComposeDataModel msg)
        {
            var addedComposeLegs = msg.ComposeDetailContainer?.BasicComposeGraph?.Legs;
            if (addedComposeLegs == null) return;
            foreach (var leg in addedComposeLegs)
            {
                UpdateSubscribeContractsWithSameId((int)leg.SledContractId, null, () =>
                    new SubscribeContractUpdateTemplate { IsComposeRelated = new Tuple<bool>(false) }
                    );
            }
        }

        private void UpdateSubscribeContractIsTradingWhenChangedOrderState(ClientXQOrderTargetType orderTargetType, string orderTargetKey, long orderSubAccountId,
            ClientXQOrderState? changedOrderState, bool isRemoveOrder)
        {
            if (string.IsNullOrEmpty(orderTargetKey)) return;
            if (orderTargetType != ClientXQOrderTargetType.CONTRACT_TARGET) return;
            var contractId = Convert.ToInt32(orderTargetKey);

            bool onTradingState = true;
            if (isRemoveOrder)
                onTradingState = false;
            else if (changedOrderState != null)
                onTradingState = XueQiaoConstants.UnfinishedOrderStates.Contains(changedOrderState.Value);
            else
            {
                // if changedOrderState is null, do nothing
                return;
            }

            var existTargetSubItem = subscribeContractDictionary.Values.FirstOrDefault(i => i.ContractId == contractId);
            if (existTargetSubItem != null)
            {
                var originSubAccIds = existTargetSubItem.OnTradingSubAccountIds;
                if (onTradingState)
                {
                    IEnumerable<long> newSubAccIds = originSubAccIds ?? new long[] { };
                    if (!newSubAccIds.Contains(orderSubAccountId))
                    {
                        newSubAccIds = newSubAccIds.Union(new long[] { orderSubAccountId });
                        UpdateSubscribeContractsWithSameId(contractId, null,
                            () => new SubscribeContractUpdateTemplate
                            {
                                OnTradingSubAccountIds = new Tuple<IEnumerable<long>>(newSubAccIds)
                            });
                    }
                }
                else
                {
                    IEnumerable<long> newSubAccIds = originSubAccIds ?? new long[] { };
                    if (newSubAccIds.Contains(orderSubAccountId))
                    {
                        newSubAccIds = newSubAccIds.Except(new long[] { orderSubAccountId });
                        UpdateSubscribeContractsWithSameId(contractId, null,
                            () => new SubscribeContractUpdateTemplate
                            {
                                OnTradingSubAccountIds = new Tuple<IEnumerable<long>>(newSubAccIds)
                            });
                    }
                }
            }
        }

        private void UpdateSubscribeContractExistPositionWhenChangedPositionExistState(int contractId, long subAccountId,
            bool changedExistPosition)
        {
            var existTargetSubItem = subscribeContractDictionary.Values.FirstOrDefault(i => i.ContractId == contractId);
            if (existTargetSubItem != null)
            {
                var originSubAccIds = existTargetSubItem.ExistPositionSubAccountIds;
                if (changedExistPosition)
                {
                    IEnumerable<long> newSubAccIds = originSubAccIds ?? new long[] { };
                    if (!newSubAccIds.Contains(subAccountId))
                    {
                        newSubAccIds = newSubAccIds.Union(new long[] { subAccountId });
                        UpdateSubscribeContractsWithSameId(contractId, null,
                            () => new SubscribeContractUpdateTemplate
                            {
                                ExistPositionSubAccountIds = new Tuple<IEnumerable<long>>(newSubAccIds)
                            });
                    }
                }
                else
                {
                    IEnumerable<long> newSubAccIds = originSubAccIds ?? new long[] { };
                    if (newSubAccIds.Contains(subAccountId))
                    {
                        newSubAccIds = newSubAccIds.Except(new long[] { subAccountId });
                        UpdateSubscribeContractsWithSameId(contractId, null,
                            () => new SubscribeContractUpdateTemplate
                            {
                                ExistPositionSubAccountIds = new Tuple<IEnumerable<long>>(newSubAccIds)
                            });
                    }
                }
            }
        }

        private void RemoveAllSubscribeContracts()
        {
            var subItems = subscribeContractDictionary.Values;
            subscribeContractDictionary.Clear();
            UIItemsAddOrRemoveDispatcherBeginInvoke(() =>
            {
                subscribeContractService.Contracts.Clear();
            });
            foreach (var subItem in subItems)
            {
                eventAggregator.GetEvent<SubscribeContractRemovedEvent>().Publish(subItem);
            }
        }

        /// <summary>
        /// 更新订阅项的过期状态。和指定的时间比较，如果标的过期时间小于指定时间，则标识持仓过期
        /// </summary>
        /// <param name="subscribeItem"></param>
        /// <param name="compareTimestamp">指定的比较时间</param>
        private static void InvalidateSubscribeItemIsExpired(SubscribeContractDataModel subscribeItem, long compareTimestamp)
        {
            if (subscribeItem == null) return;
            var contractExpDate = subscribeItem.ContractDetailContainer?.ContractDetail?.ContractExpDate;
            if (contractExpDate != null)
            {
                subscribeItem.IsXqTargetExpired = (compareTimestamp > contractExpDate.Value);
            }
        }

        private void StartCheckTargetExpiredTimer()
        {
            StopCheckTargetExpiredTimer();
            // 10 minute interval
            checkTargetExpiredTimer = new System.Timers.Timer(1000 * 60 * 10);
            checkTargetExpiredTimer.Elapsed += CheckTargetExpiredTimer_Elapsed;
            checkTargetExpiredTimer.Start();
        }

        private void CheckTargetExpiredTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            var nowTimestamp = (long)DateHelper.NowUnixTimeSpan().TotalSeconds;

            var items = subscribeContractDictionary.Values;
            foreach (var item in items)
            {
                InvalidateSubscribeItemIsExpired(item, nowTimestamp);
            }
        }

        private void StopCheckTargetExpiredTimer()
        {
            if (checkTargetExpiredTimer != null)
            {
                checkTargetExpiredTimer.Elapsed -= CheckTargetExpiredTimer_Elapsed;
                checkTargetExpiredTimer.Stop();
                checkTargetExpiredTimer.Dispose();
                checkTargetExpiredTimer = null;
            }
        }
    }
}
