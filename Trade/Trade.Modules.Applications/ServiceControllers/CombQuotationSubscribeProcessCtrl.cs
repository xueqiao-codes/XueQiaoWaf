using business_foundation_lib.helper;
using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation;
using lib.xqclient_base.thriftapi_mediation.Interface;
using NativeModel.Trade;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using xueqiao.trade.hosting.terminal.ao;
using XueQiaoFoundation.BusinessResources.Constants;
using XueQiaoFoundation.BusinessResources.DataModels;
using XueQiaoFoundation.BusinessResources.Helpers;
using XueQiaoFoundation.BusinessResources.Models;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Interfaces.Helper;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Modules.Applications.DataModels;
using XueQiaoWaf.Trade.Modules.Applications.ServiceControllers;
using XueQiaoWaf.Trade.Modules.Applications.ServiceControllers.Events;

namespace XueQiaoWaf.Trade.Modules.Applications.Controllers
{
    /// <summary>
    /// 组合行情订阅流程的控制器。订单、成交、持仓等列表对于组合标的的行情订阅情况不透明，使用此统一订阅流程进行组合标的行情订阅
    /// </summary>
    [Export, Export(typeof(ITradeModuleSingletonController)), PartCreationPolicy(CreationPolicy.Shared)]
    internal class CombQuotationSubscribeProcessCtrl : ITradeModuleSingletonController
    {
        private readonly ISubscribeComposeController subscribeComposeCtrl;
        private readonly IUserComposeViewQueryController userComposeViewQueryCtrl;
        private readonly IComposeGraphQueryController composeGraphQueryCtrl;
        private readonly IContractItemTreeQueryController contractItemTreeQueryCtrl;
        private readonly ILoginDataService loginDataService;
        private readonly IEventAggregator eventAggregator;
        private readonly IMessageWindowService messageWindowService;
        
        [ImportingConstructor]
        public CombQuotationSubscribeProcessCtrl(
            ISubscribeComposeController subscribeComposeCtrl,
            IUserComposeViewQueryController userComposeViewQueryCtrl,
            IComposeGraphQueryController composeGraphQueryCtrl,
            IContractItemTreeQueryController contractItemTreeQueryCtrl,
            ILoginDataService loginDataService,
            IEventAggregator eventAggregator,
            IMessageWindowService messageWindowService)
        {
            this.subscribeComposeCtrl = subscribeComposeCtrl;
            this.userComposeViewQueryCtrl = userComposeViewQueryCtrl;
            this.composeGraphQueryCtrl = composeGraphQueryCtrl;
            this.contractItemTreeQueryCtrl = contractItemTreeQueryCtrl;
            this.loginDataService = loginDataService;
            this.eventAggregator = eventAggregator;
            this.messageWindowService = messageWindowService;
        }

        public void Shutdown() { }
        
        /// <summary>
        /// 进行组合行情订阅流程
        /// </summary>
        /// <param name="composeGraphId">组合 id</param>
        /// <param name="cancellationToken">取消 token</param>
        /// <param name="msgDisplayWindowOwnerGetter">信息展示窗体 owner 获取方法</param>
        public void DoProcess(long composeGraphId, CancellationToken cancellationToken, Func<object> msgDisplayWindowOwnerGetter)
        {
            Task.Run(() => 
            {
                if (cancellationToken.IsCancellationRequested) return;

                // 1. 判断本地是否存在目标订阅项
                var existTarComposeItem = subscribeComposeCtrl.GetSubscribeItem(composeGraphId, SubscribeComposeDataModel.SharedListComposeGroupKey);
                if (existTarComposeItem == null)
                {
                    // 本地不存在目标订阅项
                    // 2. 判断服务端是否存在该订阅项
                    var queryViewResp = userComposeViewQueryCtrl.QueryCurrentComposeView(composeGraphId);
                    if (queryViewResp == null || queryViewResp?.SourceException != null)
                    {
                        var errMsg = FoundationHelper.FormatResponseDisplayErrorMsg(queryViewResp, "获取用户组合信息出错！\n");
                        ShowMsgInDialogIfNeed(errMsg, msgDisplayWindowOwnerGetter);
                        return;
                    }

                    var composeViewDetail = queryViewResp.CorrectResult;
                    if (composeViewDetail != null)
                    {
                        // 服务端存在该组合视图
                        // 添加至共享组合订阅列表
                        subscribeComposeCtrl.AddOrUpdateSubscribeCompose(composeGraphId,
                            SubscribeComposeDataModel.SharedListComposeGroupKey, null);
                    }
                    else
                    {
                        // 服务端不存在该组合视图

                        if (cancellationToken.IsCancellationRequested) return;
                        // 3.查询组合信息
                        var queryComposeResp = composeGraphQueryCtrl.QueryComposeGraph(composeGraphId);
                        if (cancellationToken.IsCancellationRequested) return;

                        NativeComposeGraph queriedComposeGraph = queryComposeResp?.CorrectResult;
                        if (queryComposeResp == null || queryComposeResp.SourceException != null || queriedComposeGraph == null)
                        {
                            var errMsg = FoundationHelper.FormatResponseDisplayErrorMsg(queryComposeResp, "获取组合信息出错！\n");
                            ShowMsgInDialogIfNeed(errMsg, msgDisplayWindowOwnerGetter);
                            return;
                        }
                        
                        if (cancellationToken.IsCancellationRequested) return;
                        var landingInfo = loginDataService.LandingInfo;
                        if (landingInfo == null) return;

                        // 4. 合成各腿名称为组合视图别名，然后添加用户组合视图，并添加至本地的订阅列表
                        var addViewResp = AddUserComposeViewWithDefaultAliasName(queriedComposeGraph, landingInfo,
                            out string composeViewAliasName);
                        if (cancellationToken.IsCancellationRequested) return;

                        if (addViewResp == null || addViewResp.SourceException != null)
                        {
                            var errMsg = FoundationHelper.FormatResponseDisplayErrorMsg(addViewResp, "添加用户组合失败。\n");
                            ShowMsgInDialogIfNeed(errMsg, msgDisplayWindowOwnerGetter);
                            return;
                        }
                        
                        if (cancellationToken.IsCancellationRequested) return;

                        // 再次查询组合视图最新信息，然后发布事件
                        var newQueriedView = userComposeViewQueryCtrl.QueryCurrentComposeView(composeGraphId)?.CorrectResult;
                        if (newQueriedView != null && newQueriedView.UserComposeView != null)
                        {
                            // 发布组合视图已更新事件
                            eventAggregator.GetEvent<UserComposeViewUpdatedEvent>().Publish(newQueriedView.UserComposeView);
                        }
                        
                        // 添加至共享组合订阅列表
                        subscribeComposeCtrl.AddOrUpdateSubscribeCompose(queriedComposeGraph.ComposeGraphId,
                            SubscribeComposeDataModel.SharedListComposeGroupKey,
                            e =>
                            {
                                return new SubscribeComposeUpdateTemplate
                                {
                                    SubscribeState = new Tuple<MarketSubscribeState>(MarketSubscribeState.Unkown)
                                };
                            });
                    }
                }
                
                if (cancellationToken.IsCancellationRequested) return;
                // 订阅该组合
                subscribeComposeCtrl.SubscribeCombQuotationAsync(composeGraphId).ContinueWith(t => 
                {
                    var result = t.Result;
                    var hasErr = result.HasRequestApi && result.ApiResponse?.SourceException != null;
                    if (!hasErr) return;

                    string errMsg = null;
                    if (result.ApiResponse?.CustomParsedExceptionResult?.BusinessErrorCode == ErrorCodeConstants.ERROR_COMPOSE_VIEW_SUBSCRIBE_TOO_MANY)
                        errMsg = "组合行情订阅失败！\n组合行情订阅数到达上限，请退订部分组合行情";
                    else
                        errMsg = FoundationHelper.FormatResponseDisplayErrorMsg(result.ApiResponse, "组合行情订阅失败！\n");
                    ShowMsgInDialogIfNeed(errMsg, msgDisplayWindowOwnerGetter);
                });
            });
        }

        /// <summary>
        /// 添加默认名称的用户组合视图
        /// </summary>
        /// <param name="composeGraph"></param>
        private IInterfaceInteractResponse AddUserComposeViewWithDefaultAliasName(NativeComposeGraph composeGraph,
            LandingInfo landingInfo,
            out string composeViewAliasName)
        {
            Debug.Assert(composeGraph != null);
            Debug.Assert(landingInfo != null);

            composeViewAliasName = null;

            var legNames = new List<string>();
            foreach (var leg in composeGraph.Legs)
            {
                var legContainer = new TargetContract_TargetContractDetail((int)leg.SledContractId);
                XueQiaoFoundationHelper.SyncQueryAndFillContractContainer(legContainer, contractItemTreeQueryCtrl);
                XueQiaoFoundationHelper.SetupDisplayNamesForContractContainer(legContainer, XqContractNameFormatType.CommodityAcronym_Code_ContractCode);
                if (!string.IsNullOrEmpty(legContainer.CnDisplayName))
                    legNames.Add(legContainer.CnDisplayName);
            }
            var defaultAliasName = XueQiaoBusinessHelper.GenerateXQComposeDefaultName(legNames.ToArray());
            var iip = new StubInterfaceInteractParams { TransportConnectTimeoutMS = 2000, TransportReadTimeoutMS = 2000 };
            var addViewResp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                .addComposeViewByShare(landingInfo, composeGraph.ComposeGraphId, defaultAliasName, 0, iip);

            composeViewAliasName = defaultAliasName;
            return addViewResp;
        }

        private void ShowMsgInDialogIfNeed(string msg, Func<object> msgDisplayWindowOwnerGetter)
        {
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                var owner = msgDisplayWindowOwnerGetter?.Invoke();
                if (owner != null)
                {
                    messageWindowService.ShowMessageDialog(owner, null, null, null, msg);
                }
            });
        }
    }
}
