using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Threading.Tasks;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using XueQiaoWaf.Trade.Modules.Applications.Services;
using IDLAutoGenerated.Util;
using System.Threading;
using XueQiaoWaf.Trade.Modules.Applications.DataModels;
using XueQiaoFoundation.Interfaces.Event.business;
using xueqiao.trade.hosting.push.protocol;
using xueqiao.trade.hosting.events;
using Thrift.Collections;
using NativeModel.Trade;
using XueQiaoWaf.Trade.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoWaf.Trade.Modules.Applications.Helper;
using xueqiao.trade.hosting.arbitrage.thriftapi;
using XueQiaoWaf.Trade.Modules.Applications.ServiceControllers.Events;
using XueQiaoFoundation.BusinessResources.Constants;
using XueQiaoFoundation.BusinessResources.DataModels;
using XueQiaoWaf.Trade.Interfaces.DataModels;
using XueQiaoWaf.Trade.Interfaces.Events;
using lib.xqclient_base.thriftapi_mediation;
using xueqiao.trade.hosting.proxy;
using System.Diagnostics;
using System.Threading.Tasks.Schedulers;
using System.Collections.Concurrent;
using System.Windows.Threading;
using lib.xqclient_base.thriftapi_mediation.Interface;
using XueQiaoFoundation.BusinessResources.Helpers;
using XueQiaoFoundation.BusinessResources.Models;
using business_foundation_lib.xq_thriftlib_config;
using XueQiaoFoundation.Shared.Model;

namespace XueQiaoWaf.Trade.Modules.Applications.ServiceControllers
{
    /// <summary>
    /// 订单控制器。
    /// 
    /// 1.承担拉取订单列表的职责。
    /// 2.处理处于非明确状态的订单。
    /// 3.处理订单相关的 push event。
    /// </summary>
    [Export(typeof(IOrderItemsController)), Export(typeof(ITradeModuleSingletonController)), 
        PartCreationPolicy(CreationPolicy.Shared)]
    internal class OrderItemsController : IOrderItemsController, ITradeModuleSingletonController
    {
        private readonly OrderItemsService orderItemsService;
        private readonly ITradeModuleService tradeModuleService;
        private readonly IEventAggregator eventAggregator;
        private readonly ILoginDataService loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        
        private readonly ISubAccountXQEffectOrderQueryController subAccountXQEffectOrderQueryCtrl;
        private readonly IRelatedSubAccountItemsController relatedSubAccountItemsCtrl;
        private readonly IUserSubAccountRelatedItemQueryController subAccountRelatedItemQueryCtrl;
        private readonly IUserSubAccountRelatedItemCacheController subAccountRelatedItemCacheCtrl;
        private readonly IHostingUserQueryController hostingUserQueryCtrl;
        private readonly IHostingUserCacheController hostingUserCacheCtrl;
        private readonly IComposeGraphCacheController composeGraphCacheCtrl;
        private readonly IComposeGraphQueryController composeGraphQueryCtrl;
        private readonly IUserComposeViewCacheController userComposeViewCacheCtrl;
        private readonly IUserComposeViewQueryController userComposeViewQueryCtrl;
        private readonly IContractItemTreeQueryController contractItemTreeQueryCtrl;
        private readonly ICommodityCacheController commodityCacheCtrl;

        /// <summary>
        /// 订单列表同步任务工厂。该工厂生产的任务是顺序执行，将增删、刷新包装成任务执行，以保证同步的准确性
        /// </summary>
        private readonly TaskFactory orderItemsSyncTaskFactory = new TaskFactory(new OrderedTaskScheduler());
        /// <summary>
        /// 订单列表
        /// </summary>
        private readonly Dictionary<DiscreteOrderItemKey, OrderItemDataModel> orderItems = new Dictionary<DiscreteOrderItemKey, OrderItemDataModel>();
        private readonly object orderItemsLock = new object();
        
        private CancellationTokenSource orderItemsRefreshCTS;
        private readonly object orderItemsRefreshLock = new object();
        private readonly Dictionary<long, SubAccountAnyDataRefreshStateHolder> orderItemsRefreshStateHolders = new Dictionary<long, SubAccountAnyDataRefreshStateHolder>();
        
        private CancellationTokenSource inaccurateStateOrderQueryCTS;
        private readonly object inaccurateStateOrderQueryLock = new object();

        private readonly IDIncreaser clientDataForceSyncTimesIncreaser = new IDIncreaser(0);

        [ImportingConstructor]
        public OrderItemsController(OrderItemsService orderItemsService,
            ITradeModuleService tradeModuleService,
            IEventAggregator eventAggregator,
            ILoginDataService loginDataService,
            Lazy<ILoginUserManageService> loginUserManageService,
            
            ISubAccountXQEffectOrderQueryController subAccountXQEffectOrderQueryCtrl,
            IRelatedSubAccountItemsController relatedSubAccountItemsCtrl,
            IUserSubAccountRelatedItemQueryController subAccountRelatedItemQueryCtrl,
            IUserSubAccountRelatedItemCacheController subAccountRelatedItemCacheCtrl,
            IHostingUserQueryController hostingUserQueryCtrl,
            IHostingUserCacheController hostingUserCacheCtrl,
            IComposeGraphCacheController composeGraphCacheCtrl,
            IComposeGraphQueryController composeGraphQueryCtrl,
            IUserComposeViewCacheController userComposeViewCacheCtrl,
            IUserComposeViewQueryController userComposeViewQueryCtrl,
            IContractItemTreeQueryController contractItemTreeQueryCtrl,
            ICommodityCacheController commodityCacheCtrl)
        {
            this.orderItemsService = orderItemsService;
            this.tradeModuleService = tradeModuleService;
            this.eventAggregator = eventAggregator;
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            
            this.subAccountXQEffectOrderQueryCtrl = subAccountXQEffectOrderQueryCtrl;
            this.relatedSubAccountItemsCtrl = relatedSubAccountItemsCtrl;

            this.subAccountRelatedItemQueryCtrl = subAccountRelatedItemQueryCtrl;
            this.subAccountRelatedItemCacheCtrl = subAccountRelatedItemCacheCtrl;
            this.hostingUserQueryCtrl = hostingUserQueryCtrl;
            this.hostingUserCacheCtrl = hostingUserCacheCtrl;
            this.composeGraphCacheCtrl = composeGraphCacheCtrl;
            this.composeGraphQueryCtrl = composeGraphQueryCtrl;
            this.userComposeViewCacheCtrl = userComposeViewCacheCtrl;
            this.userComposeViewQueryCtrl = userComposeViewQueryCtrl;
            this.contractItemTreeQueryCtrl = contractItemTreeQueryCtrl;
            this.commodityCacheCtrl = commodityCacheCtrl;

            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
            eventAggregator.GetEvent<ClientDataForceSync>().Subscribe(ReceivedClientDataForceSyncEvent);
            eventAggregator.GetEvent<XQOrderCreated>().Subscribe(ReceivedXQOrderCreatedEvent);
            eventAggregator.GetEvent<XQOrderChanged>().Subscribe(ReceivedXQOrderChangedEvent);
            eventAggregator.GetEvent<XQOrderExpired>().Subscribe(ReceivedXQOrderExpiredEvent);
            eventAggregator.GetEvent<UserComposeViewUpdatedEvent>().Subscribe(ReceivedUserComposeViewUpdatedEvent);
            eventAggregator.GetEvent<UserRelatedSubAccountItemsRefreshEvent>().Subscribe(RecvUserRelatedSubAccountItemsRefreshEvent);
        }

        public void Shutdown()
        {
            clientDataForceSyncTimesIncreaser?.Reset();
            CancelInaccurateStateOrderQueryTasks();
            CancelSubAccountOrderItemsRefresh(true);

            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
            eventAggregator.GetEvent<ClientDataForceSync>().Unsubscribe(ReceivedClientDataForceSyncEvent);
            eventAggregator.GetEvent<XQOrderCreated>().Unsubscribe(ReceivedXQOrderCreatedEvent);
            eventAggregator.GetEvent<XQOrderChanged>().Unsubscribe(ReceivedXQOrderChangedEvent);
            eventAggregator.GetEvent<XQOrderExpired>().Unsubscribe(ReceivedXQOrderExpiredEvent);
            eventAggregator.GetEvent<UserComposeViewUpdatedEvent>().Unsubscribe(ReceivedUserComposeViewUpdatedEvent);
            eventAggregator.GetEvent<UserRelatedSubAccountItemsRefreshEvent>().Unsubscribe(RecvUserRelatedSubAccountItemsRefreshEvent);
        }

        public event SubAccountAnyDataRefreshStateChanged OrderItemsRefreshStateChanged;

        public void RefreshOrderItemsIfNeed(long subAccountId)
        {
            RefreshSubAccountOrderItems(new long[] { subAccountId }, false);
        }
        
        public void RefreshOrderItemsForce(long subAccountId)
        {
            RefreshSubAccountOrderItems(new long[] { subAccountId }, true);
        }

        public OrderItemDataModel_Entrusted AddOrUpdateOrder_Entrusted(long subAccountId, string orderId,
            HostingXQOrderType orderType, ClientXQOrderTargetType targetType, string targetKey,
            HostingXQOrderDetail newOrderDetail, int creatorUserId,
            Func<OrderItemDataModel_Entrusted, OrderUpdateTemplate_Entrusted> orderUpdateTemplateFactory)
        {
            lock (orderItemsLock)
            {
                if (loginDataService.ProxyLoginResp == null) return null;

                var orderKey = new DiscreteOrderItemKey(subAccountId, orderId, orderType, targetType, targetKey);
                IDictionary<DiscreteOrderItemKey, OrderItemDataModel> addOrders = null;
                IDictionary<DiscreteOrderItemKey, OrderItemDataModel> updateOrders = null;
                UnsafeAddOrUpdateOrders(new DiscreteOrderItemKey[] { orderKey },
                    _key =>
                    {
                        return OrderItemDataModelCreateHelper.GenerateOrder_Entrusted(_key, creatorUserId, newOrderDetail,
                            subAccountRelatedItemQueryCtrl, subAccountRelatedItemCacheCtrl,
                            hostingUserQueryCtrl, hostingUserCacheCtrl,
                            composeGraphCacheCtrl, composeGraphQueryCtrl,
                            userComposeViewCacheCtrl, userComposeViewQueryCtrl,
                            contractItemTreeQueryCtrl);
                    },
                    (_key, isExistOrder, orderItem) =>
                    {
                        var _optOrder = orderItem as OrderItemDataModel_Entrusted;
                        if (_optOrder == null) return;
                        var updateTemplate = orderUpdateTemplateFactory?.Invoke(isExistOrder ? _optOrder : null);
                        if (updateTemplate != null)
                        {
                            OrderItemDataModelCreateHelper.UpdateEntrustedOrderWithTemplate(_optOrder, updateTemplate, 
                                composeGraphCacheCtrl, composeGraphQueryCtrl, 
                                userComposeViewCacheCtrl, commodityCacheCtrl);
                        }
                        EnqueueOrderStateQueryIfNeed(_optOrder.OrderId, _optOrder.OrderState);
                    }, out addOrders, out updateOrders);

                OrderItemDataModel tarOrderItem = null;
                if (addOrders?.TryGetValue(orderKey, out tarOrderItem) == true
                    || updateOrders?.TryGetValue(orderKey, out tarOrderItem) == true)
                {
                    return (tarOrderItem as OrderItemDataModel_Entrusted);
                }
            }
            return null;
        }

        
        public void UpdateOrder_Entrusted(string orderId,
            Func<OrderItemDataModel_Entrusted, OrderUpdateTemplate_Entrusted> orderUpdateTemplateFactory)
        {
            lock (orderItemsLock)
            {
                var tarOrder = orderItems.Values
                    .FirstOrDefault(i => i.OrderId == orderId && OrderItemDataModel_Entrusted.IsOrder_Entrusted(i.OrderType)) 
                    as OrderItemDataModel_Entrusted;
                if (tarOrder == null) return;

                var updateTemplate = orderUpdateTemplateFactory?.Invoke(tarOrder);
                if (updateTemplate != null)
                {
                    OrderItemDataModelCreateHelper.UpdateEntrustedOrderWithTemplate(tarOrder, updateTemplate,
                               composeGraphCacheCtrl, composeGraphQueryCtrl,
                               userComposeViewCacheCtrl, commodityCacheCtrl);
                    EnqueueOrderStateQueryIfNeed(tarOrder.OrderId, tarOrder.OrderState);
                }
            }
        }


        public OrderItemDataModel_Parked AddOrUpdateOrder_Parked(long subAccountId, string orderId,
            HostingXQOrderType orderType, ClientXQOrderTargetType targetType, string targetKey,
            HostingXQOrderDetail newOrderDetail, int creatorUserId,
            Func<OrderItemDataModel_Parked, OrderUpdateTemplate_Parked> orderUpdateTemplateFactory)
        {
            lock (orderItemsLock)
            {
                var orderKey = new DiscreteOrderItemKey(subAccountId, orderId, orderType, targetType, targetKey);
                IDictionary<DiscreteOrderItemKey, OrderItemDataModel> addOrders = null;
                IDictionary<DiscreteOrderItemKey, OrderItemDataModel> updateOrders = null;
                UnsafeAddOrUpdateOrders(new DiscreteOrderItemKey[] { orderKey },
                    _key =>
                    {
                        return OrderItemDataModelCreateHelper.GenerateOrder_Parked(_key, creatorUserId, newOrderDetail,
                            subAccountRelatedItemQueryCtrl, subAccountRelatedItemCacheCtrl,
                            hostingUserQueryCtrl, hostingUserCacheCtrl,
                            contractItemTreeQueryCtrl);
                    },
                    (_key, isExistOrder, orderItem) =>
                    {
                        var _optOrder = orderItem as OrderItemDataModel_Parked;
                        if (_optOrder == null) return;
                        var updateTemplate = orderUpdateTemplateFactory?.Invoke(isExistOrder ? _optOrder : null);
                        if (updateTemplate != null)
                        {
                            OrderItemDataModelCreateHelper.UpdateParkedOrderWithTemplate(_optOrder, updateTemplate);
                        }
                        EnqueueOrderStateQueryIfNeed(_optOrder.OrderId, _optOrder.OrderState);
                    }, out addOrders, out updateOrders);

                OrderItemDataModel tarOrderItem = null;
                if (addOrders?.TryGetValue(orderKey, out tarOrderItem) == true
                    || updateOrders?.TryGetValue(orderKey, out tarOrderItem) == true)
                {
                    return (tarOrderItem as OrderItemDataModel_Parked);
                }
            }
            return null;
        }

        public void UpdateOrder_Parked(string orderId,
            Func<OrderItemDataModel_Parked, OrderUpdateTemplate_Parked> orderUpdateTemplateFactory)
        {
            lock (orderItemsLock)
            {
                var tarOrder = orderItems.Values
                    .FirstOrDefault(i => i.OrderId == orderId && OrderItemDataModel_Parked.IsOrder_Parked(i.OrderType))
                    as OrderItemDataModel_Parked;
                if (tarOrder == null) return;

                var updateTemplate = orderUpdateTemplateFactory?.Invoke(tarOrder);
                if (updateTemplate != null)
                {
                    OrderItemDataModelCreateHelper.UpdateParkedOrderWithTemplate(tarOrder, updateTemplate);
                    EnqueueOrderStateQueryIfNeed(tarOrder.OrderId, tarOrder.OrderState);
                }
            }
        }

        public OrderItemDataModel_Condition AddOrUpdateOrder_Condition(long subAccountId, string orderId,
            HostingXQOrderType orderType, ClientXQOrderTargetType targetType, string targetKey,
            HostingXQOrderDetail newOrderDetail, int creatorUserId,
            Func<OrderItemDataModel_Condition, OrderUpdateTemplate_Condition> orderUpdateTemplateFactory)
        {
            lock (orderItemsLock)
            {
                var orderKey = new DiscreteOrderItemKey(subAccountId, orderId, orderType, targetType, targetKey);
                IDictionary<DiscreteOrderItemKey, OrderItemDataModel> addOrders = null;
                IDictionary<DiscreteOrderItemKey, OrderItemDataModel> updateOrders = null;
                UnsafeAddOrUpdateOrders(new DiscreteOrderItemKey[] { orderKey },
                    _key => 
                    {
                        return OrderItemDataModelCreateHelper.GenerateOrder_Condition(_key, creatorUserId, newOrderDetail,
                            subAccountRelatedItemQueryCtrl, subAccountRelatedItemCacheCtrl,
                            hostingUserQueryCtrl, hostingUserCacheCtrl,
                            composeGraphCacheCtrl, composeGraphQueryCtrl,
                            userComposeViewCacheCtrl, userComposeViewQueryCtrl,
                            contractItemTreeQueryCtrl);
                    },
                    (_key, isExistOrder, orderItem) =>
                    {
                        var _optOrder = orderItem as OrderItemDataModel_Condition;
                        if (_optOrder == null) return;
                        var updateTemplate = orderUpdateTemplateFactory?.Invoke(isExistOrder ? _optOrder : null);
                        if (updateTemplate != null)
                        {
                            OrderItemDataModelCreateHelper.UpdateConditionOrderWithTemplate(_optOrder, updateTemplate);
                        }
                        EnqueueOrderStateQueryIfNeed(_optOrder.OrderId, _optOrder.OrderState);
                    }, out addOrders, out updateOrders);

                OrderItemDataModel tarOrderItem = null;
                if (addOrders?.TryGetValue(orderKey, out tarOrderItem) == true
                    || updateOrders?.TryGetValue(orderKey, out tarOrderItem) == true)
                {
                    return (tarOrderItem as OrderItemDataModel_Condition);
                }
            }
            return null;
        }

        public void UpdateOrder_Condition(string orderId,
            Func<OrderItemDataModel_Condition, OrderUpdateTemplate_Condition> orderUpdateTemplateFactory)
        {
            lock (orderItemsLock)
            {
                var tarOrder = orderItems.Values
                    .FirstOrDefault(i => i.OrderId == orderId && OrderItemDataModel_Condition.IsOrder_Condition(i.OrderType))
                    as OrderItemDataModel_Condition;
                if (tarOrder == null) return;

                var updateTemplate = orderUpdateTemplateFactory?.Invoke(tarOrder);
                if (updateTemplate != null)
                {
                    OrderItemDataModelCreateHelper.UpdateConditionOrderWithTemplate(tarOrder, updateTemplate);
                    EnqueueOrderStateQueryIfNeed(tarOrder.OrderId, tarOrder.OrderState);
                }
            }
        }
        
        private static int OrderBatchInterfaceTimeoutMs(int batchNum)
        {
            var timeoutMs = Math.Min(20000, Math.Max(2000, 500 * batchNum));
            return timeoutMs;
        }

        public void RequestRevokeOrders(IEnumerable<string> revokeOrderIds)
        {
            if (revokeOrderIds?.Any() != true) return;

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            tradeModuleService.OrderOperateRequestTaskFactory.StartNew(() => 
            {
                var idSet = new THashSet<string>();
                foreach (var _orderId in revokeOrderIds) { idSet.Add(_orderId); }

                // 修改状态为请求撤单中
                SafeUpdateOrderUseBlock(idSet,
                    (_orderId, existOrder) =>
                    {
                        if (existOrder == null) return;
                        OrderItemDataModelCreateHelper.UpdateOrderWithTemplateBase(existOrder, 
                            new OrderUpdateTemplateBase
                            {
                                OrderState = new Tuple<ClientXQOrderState>(ClientXQOrderState.Client_RequestRevoking),
                                OrderStateDetail = new Tuple<HostingXQOrderState>(new HostingXQOrderState())
                            });
                    });

                var timeoutMs = OrderBatchInterfaceTimeoutMs(idSet.Count);
                var interactParams = new StubInterfaceInteractParams { TransportConnectTimeoutMS = timeoutMs, TransportReadTimeoutMS = timeoutMs };
                var optResp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                        .batchCancelXQOrders(landingInfo, idSet, interactParams);
                if (optResp == null) return;

                if (optResp.HasTransportException
                    || optResp.SourceException != null)
                {
                    // 异常则修改订单状态为不确定状态
                    SafeUpdateOrderUseBlock(idSet,
                        (_orderId, existOrder) =>
                        {
                            if (existOrder == null) return;
                            OrderItemDataModelCreateHelper.UpdateOrderWithTemplateBase(existOrder,
                                new OrderUpdateTemplateBase
                                {
                                    OrderState = new Tuple<ClientXQOrderState>(ClientXQOrderState.ClientInaccurate_Unkown),
                                    OrderStateDetail = new Tuple<HostingXQOrderState>(new HostingXQOrderState())
                                });
                            EnqueueOrderStateQueryIfNeed(existOrder.OrderId, existOrder.OrderState);
                        });
                }
                else
                {
                    var errorOrderIds = optResp.CorrectResult?.Where(i => i.Value.ErrorCode != 0).Select(i => i.Key).Distinct();
                    if (errorOrderIds?.Any() == true)
                    {
                        // 异常则修改订单状态为不确定状态
                        SafeUpdateOrderUseBlock(idSet,
                            (_orderId, existOrder) =>
                            {
                                if (existOrder == null) return;
                                OrderItemDataModelCreateHelper.UpdateOrderWithTemplateBase(existOrder,
                                    new OrderUpdateTemplateBase
                                    {
                                        OrderState = new Tuple<ClientXQOrderState>(ClientXQOrderState.ClientInaccurate_Unkown),
                                        OrderStateDetail = new Tuple<HostingXQOrderState>(new HostingXQOrderState())
                                    });
                                EnqueueOrderStateQueryIfNeed(existOrder.OrderId, existOrder.OrderState);
                            });
                    }
                }
            });
        }

        public void RequestSuspendOrders(IEnumerable<string> suspendOrderIds)
        {
            if (suspendOrderIds?.Any() != true) return;

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            tradeModuleService.OrderOperateRequestTaskFactory.StartNew(() =>
            {
                var idSet = new THashSet<string>();
                foreach (var _orderId in suspendOrderIds) { idSet.Add(_orderId); }

                // 修改状态为请求暂停中
                SafeUpdateOrderUseBlock(idSet,
                    (_orderId, existOrder) =>
                    {
                        if (existOrder == null) return;
                        OrderItemDataModelCreateHelper.UpdateOrderWithTemplateBase(existOrder,
                            new OrderUpdateTemplateBase
                            {
                                OrderState = new Tuple<ClientXQOrderState>(ClientXQOrderState.Client_RequestSuspending),
                                OrderStateDetail = new Tuple<HostingXQOrderState>(new HostingXQOrderState())
                            });
                    });

                var timeoutMs = OrderBatchInterfaceTimeoutMs(idSet.Count);
                var interactParams = new StubInterfaceInteractParams { TransportConnectTimeoutMS = timeoutMs, TransportReadTimeoutMS = timeoutMs };
                var optResp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                        .batchSuspendXQOrders(landingInfo, idSet, interactParams);
                if (optResp == null) return;

                if (optResp.HasTransportException
                    || optResp.SourceException != null)
                {
                    // 异常则修改订单状态为不确定状态
                    SafeUpdateOrderUseBlock(idSet,
                        (_orderId, existOrder) =>
                        {
                            if (existOrder == null) return;
                            OrderItemDataModelCreateHelper.UpdateOrderWithTemplateBase(existOrder,
                                new OrderUpdateTemplateBase
                                {
                                    OrderState = new Tuple<ClientXQOrderState>(ClientXQOrderState.ClientInaccurate_Unkown),
                                    OrderStateDetail = new Tuple<HostingXQOrderState>(new HostingXQOrderState())
                                });
                            EnqueueOrderStateQueryIfNeed(existOrder.OrderId, existOrder.OrderState);
                        });
                }
                else
                {
                    var errorOrderIds = optResp.CorrectResult?.Where(i => i.Value.ErrorCode != 0).Select(i => i.Key).Distinct();
                    if (errorOrderIds?.Any() == true)
                    {
                        // 异常则修改订单状态为不确定状态
                        SafeUpdateOrderUseBlock(idSet,
                            (_orderId, existOrder) =>
                            {
                                if (existOrder == null) return;
                                OrderItemDataModelCreateHelper.UpdateOrderWithTemplateBase(existOrder,
                                    new OrderUpdateTemplateBase
                                    {
                                        OrderState = new Tuple<ClientXQOrderState>(ClientXQOrderState.ClientInaccurate_Unkown),
                                        OrderStateDetail = new Tuple<HostingXQOrderState>(new HostingXQOrderState())
                                    });
                                EnqueueOrderStateQueryIfNeed(existOrder.OrderId, existOrder.OrderState);
                            });
                    }
                }
            });
        }

        public void RequestResumeOrders(IEnumerable<string> resumeOrderIds)
        {
            if (resumeOrderIds?.Any() != true) return;

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            tradeModuleService.OrderOperateRequestTaskFactory.StartNew(() =>
            {
                var idSet = new THashSet<string>();
                foreach (var _orderId in resumeOrderIds) { idSet.Add(_orderId); }

                // 修改状态为请求恢复中
                SafeUpdateOrderUseBlock(idSet,
                    (_orderId, existOrder) =>
                    {
                        if (existOrder == null) return;
                        OrderItemDataModelCreateHelper.UpdateOrderWithTemplateBase(existOrder,
                            new OrderUpdateTemplateBase
                            {
                                OrderState = new Tuple<ClientXQOrderState>(ClientXQOrderState.Client_RequestResuming),
                                OrderStateDetail = new Tuple<HostingXQOrderState>(new HostingXQOrderState())
                            });
                    });

                var timeoutMs = OrderBatchInterfaceTimeoutMs(idSet.Count);
                var interactParams = new StubInterfaceInteractParams { TransportConnectTimeoutMS = timeoutMs, TransportReadTimeoutMS = timeoutMs };
                var orderResumeModes = idSet.ToDictionary(_id => _id, _id => HostingXQOrderResumeMode.RESUME_MODE_COMPOSE_CHASING_BY_PRICE);
                var optResp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                        .batchResumeXQOrders(landingInfo, idSet, orderResumeModes, interactParams);
                if (optResp == null) return;

                if (optResp.HasTransportException
                    || optResp.SourceException != null)
                {
                    // 异常则修改订单状态为不确定状态
                    SafeUpdateOrderUseBlock(idSet,
                        (_orderId, existOrder) =>
                        {
                            if (existOrder == null) return;
                            OrderItemDataModelCreateHelper.UpdateOrderWithTemplateBase(existOrder,
                                new OrderUpdateTemplateBase
                                {
                                    OrderState = new Tuple<ClientXQOrderState>(ClientXQOrderState.ClientInaccurate_Unkown),
                                    OrderStateDetail = new Tuple<HostingXQOrderState>(new HostingXQOrderState())
                                });
                            EnqueueOrderStateQueryIfNeed(existOrder.OrderId, existOrder.OrderState);
                        });
                }
                else
                {
                    var errorOrderIds = optResp.CorrectResult?.Where(i => i.Value.ErrorCode != 0).Select(i => i.Key).Distinct();
                    if (errorOrderIds?.Any() == true)
                    {
                        // 异常则修改订单状态为不确定状态
                        SafeUpdateOrderUseBlock(idSet,
                            (_orderId, existOrder) =>
                            {
                                if (existOrder == null) return;
                                OrderItemDataModelCreateHelper.UpdateOrderWithTemplateBase(existOrder,
                                    new OrderUpdateTemplateBase
                                    {
                                        OrderState = new Tuple<ClientXQOrderState>(ClientXQOrderState.ClientInaccurate_Unkown),
                                        OrderStateDetail = new Tuple<HostingXQOrderState>(new HostingXQOrderState())
                                    });
                                EnqueueOrderStateQueryIfNeed(existOrder.OrderId, existOrder.OrderState);
                            });
                    }
                }
            });
        }

        /// <summary>
        /// 强追
        /// </summary>
        /// <param name="strongChaseOrderIds"></param>
        public void RequestStrongChaseOrders(IEnumerable<string> strongChaseOrderIds)
        {
            if (strongChaseOrderIds?.Any() != true) return;

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            tradeModuleService.OrderOperateRequestTaskFactory.StartNew(() =>
            {
                var idSet = new THashSet<string>();
                foreach (var _orderId in strongChaseOrderIds) { idSet.Add(_orderId); }

                // 修改状态为请求强追中
                SafeUpdateOrderUseBlock(idSet,
                    (_orderId, existOrder) =>
                    {
                        if (existOrder == null) return;
                        OrderItemDataModelCreateHelper.UpdateOrderWithTemplateBase(existOrder,
                            new OrderUpdateTemplateBase
                            {
                                OrderState = new Tuple<ClientXQOrderState>(ClientXQOrderState.Client_RequestStrongChasing),
                                OrderStateDetail = new Tuple<HostingXQOrderState>(new HostingXQOrderState())
                            });
                    });

                var timeoutMs = OrderBatchInterfaceTimeoutMs(idSet.Count);
                var interactParams = new StubInterfaceInteractParams { TransportConnectTimeoutMS = timeoutMs, TransportReadTimeoutMS = timeoutMs };
                // 强追模式
                var orderResumeModes = idSet.ToDictionary(_id => _id, _id => HostingXQOrderResumeMode.RESUME_MODE_COMPOSE_CHASING_WITHOUT_COST);
                var optResp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                        .batchResumeXQOrders(landingInfo, idSet, orderResumeModes, interactParams);
                if (optResp == null) return;

                if (optResp.HasTransportException
                    || optResp.SourceException != null)
                {
                    // 异常则修改订单状态为不确定状态
                    SafeUpdateOrderUseBlock(idSet,
                        (_orderId, existOrder) =>
                        {
                            if (existOrder == null) return;
                            OrderItemDataModelCreateHelper.UpdateOrderWithTemplateBase(existOrder,
                                new OrderUpdateTemplateBase
                                {
                                    OrderState = new Tuple<ClientXQOrderState>(ClientXQOrderState.ClientInaccurate_Unkown),
                                    OrderStateDetail = new Tuple<HostingXQOrderState>(new HostingXQOrderState())
                                });
                            EnqueueOrderStateQueryIfNeed(existOrder.OrderId, existOrder.OrderState);
                        });
                }
                else
                {
                    var errorOrderIds = optResp.CorrectResult?.Where(i => i.Value.ErrorCode != 0).Select(i => i.Key).Distinct();
                    if (errorOrderIds?.Any() == true)
                    {
                        // 异常则修改订单状态为不确定状态
                        SafeUpdateOrderUseBlock(idSet,
                            (_orderId, existOrder) =>
                            {
                                if (existOrder == null) return;
                                OrderItemDataModelCreateHelper.UpdateOrderWithTemplateBase(existOrder,
                                    new OrderUpdateTemplateBase
                                    {
                                        OrderState = new Tuple<ClientXQOrderState>(ClientXQOrderState.ClientInaccurate_Unkown),
                                        OrderStateDetail = new Tuple<HostingXQOrderState>(new HostingXQOrderState())
                                    });
                                EnqueueOrderStateQueryIfNeed(existOrder.OrderId, existOrder.OrderState);
                            });
                    }
                }
            });
        }

        public IEnumerable<long> OnTradingSubAccountIdsOfTarget(string targetKey, ClientXQOrderTargetType targetType)
        {
            if (string.IsNullOrEmpty(targetKey)) return null;
            IEnumerable<long> results = null;
            lock (orderItemsLock)
            {
                results = orderItems.Values
                    .GroupBy(i=>i.SubAccountFields.SubAccountId)
                    .Select(i=>i.First())
                    .Where(i => targetKey == i.TargetKey 
                            && targetType == i.TargetType 
                            && XueQiaoConstants.UnfinishedOrderStates.Contains(i.OrderState))
                    .Select(i=>i.SubAccountFields.SubAccountId)
                    .ToArray();
            }
            return results;
        }
        
        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            clientDataForceSyncTimesIncreaser?.Reset();
            CancelInaccurateStateOrderQueryTasks();
            CancelSubAccountOrderItemsRefresh(true);
            RemoveSubAccountOrderItems(null);
        }

        private void ReceivedClientDataForceSyncEvent(ClientForceSyncEvent msg)
        {
            if (loginDataService.ProxyLoginResp == null) return;
            var forceSyncTimes = clientDataForceSyncTimesIncreaser.RequestIncreasedId();

            // 同步订单列表
            var userRelatedSubAccountIds = relatedSubAccountItemsCtrl.RelatedSubAccountItems?.Select(i => i.SubAccountId).Distinct();
            if (userRelatedSubAccountIds?.Any() != true) return;

            CancelSubAccountOrderItemsRefresh(false);
            RefreshSubAccountOrderItems(userRelatedSubAccountIds, forceSyncTimes != 1);
        }

        private void ReceivedOrderCreatedOrChanged(HostingXQOrder order)
        {
            if (order == null) return;
            lock (orderItemsLock)
            {
                if (loginDataService.ProxyLoginResp == null) return;
                UnsafeAddOrUpdateOrders(new HostingXQOrder[] { order },
                    out IEnumerable<OrderItemDataModel> addOrders, out IEnumerable<OrderItemDataModel> updateOrders);

                var addOrder = addOrders?.FirstOrDefault(i => i.OrderId == order.OrderId);
                var updateOrder = updateOrders?.FirstOrDefault(i => i.OrderId == order.OrderId);
                if (addOrder != null)
                {
                    var payload = new OrderEventPayload(OrderEventType.Create, addOrder);
                    eventAggregator.GetEvent<OrderEventDrivedFromPush>().Publish(payload);
                }
                else if (updateOrder != null)
                {
                    var payload = new OrderEventPayload(OrderEventType.Update, updateOrder);
                    eventAggregator.GetEvent<OrderEventDrivedFromPush>().Publish(payload);
                }
            }
        }

        private void ReceivedXQOrderCreatedEvent(XQOrderCreatedEvent msg)
        {
            ReceivedOrderCreatedOrChanged(msg.CreatedOrder);
        }

        private void ReceivedXQOrderChangedEvent(XQOrderChangedEvent msg)
        {
            ReceivedOrderCreatedOrChanged(msg.ChangedOrder);
        }

        private void ReceivedXQOrderExpiredEvent(XQOrderExpiredEvent msg)
        {
            if (msg == null) return;
            var orderId = msg.OrderId;
            orderItemsSyncTaskFactory.StartNew(() => 
            {
                lock (orderItemsLock)
                {
                    if (loginDataService.ProxyLoginResp == null) return;
                    UnsafeRemoveOrderWithId(orderId);

                    var payload = new OrderEventPayload(OrderEventType.Remove, null, orderId);
                    eventAggregator.GetEvent<OrderEventDrivedFromPush>().Publish(payload);
                }
            });
        }

        private void ReceivedUserComposeViewUpdatedEvent(NativeComposeView composeView)
        {
            if (composeView == null) return;
            var composeId = composeView.ComposeGraphId;

            IEnumerable<OrderItemDataModel> tarOrderItems = null;
            lock (orderItemsLock)
            {
                var targetKey = $"{composeId}";
                tarOrderItems = orderItems.Values
                    .Where(i => i.TargetType == ClientXQOrderTargetType.COMPOSE_TARGET && i.TargetKey == targetKey)
                    .ToArray();
            }

            if (tarOrderItems == null) return;
            foreach (var item in tarOrderItems)
            {
                var composeViewContainer = item.TargetComposeUserComposeViewContainer;
                if (composeViewContainer != null)
                {
                    composeViewContainer.UserComposeView = composeView;

                    // Rectify related price properties
                    if (item is OrderItemDataModel_Entrusted entrustedItem)
                    {
                        OrderItemDataModelCreateHelper.RectifyEntrustedOrderRelatedPriceProps(entrustedItem);
                    }
                    else if (item is OrderItemDataModel_Parked parkedItem)
                    {
                        OrderItemDataModelCreateHelper.RectifyParkedOrderRelatedPriceProps(parkedItem);
                    }
                    
                    // Update target name
                    XqTargetDMHelper.InvalidateTargetNameWithAppropriate(item, XqAppLanguages.CN);
                }
            }
        }

        private void RecvUserRelatedSubAccountItemsRefreshEvent(UserRelatedSubAccountItemsRefreshEventArgs args)
        {
            var currentLoginToken = loginDataService?.ProxyLoginResp?.HostingSession?.Token;
            if (currentLoginToken == null || currentLoginToken != args.LoginUserToken) return;

            var relatedSubAccountIds = args.RelatedSubAccountItems?.Select(i => i.SubAccountId).Distinct();
            if (relatedSubAccountIds?.Any() != true) return;

            RefreshSubAccountOrderItems(relatedSubAccountIds, false);
        }

        private void UnsafeRemoveOrderWithId(string orderId)
        {
            var rmKeys = orderItems.Keys.Where(i => i.OrderId == orderId).ToArray();
            UnsafeRemoveOrders(rmKeys);
        }

        private void UnsafeRemoveOrders(IEnumerable<DiscreteOrderItemKey> itemKeys)
        {
            if (itemKeys?.Any() != true) return;

            var rmItems = new List<OrderItemDataModel>();
            foreach (var _rmKey in itemKeys)
            {
                if (orderItems.TryGetValue(_rmKey, out OrderItemDataModel rmItem))
                {
                    rmItems.Add(rmItem);
                    orderItems.Remove(_rmKey);
                }
            }

            if (rmItems.Any())
            {
                UIItemsAddOrRemoveDispatcherBeginInvoke(() =>
                {
                    foreach (var rmItem in rmItems)
                    {
                        orderItemsService.OrderItems.Remove(rmItem);
                    }
                });
            }
        }

        /// <summary>
        /// 为了防止死锁，用于 UI 显示的列表的增加或删除需要在主线程执行。该方法能保证顺序执行
        /// </summary>
        /// <param name="action"></param>
        private static void UIItemsAddOrRemoveDispatcherBeginInvoke(Action action)
        {
            if (action == null) return;
            DispatcherHelper.CheckBeginInvokeOnUI(() => action(), 
                DispatcherPriority.Normal);
        }

        /// <summary>
        /// 删除某个操作账户的所有订单项。如果 subAccountId 为 null，则删除所有
        /// </summary>
        /// <param name="subAccountId"></param>
        private void RemoveSubAccountOrderItems(long? subAccountId)
        {
            lock (orderItemsLock)
            {
                UnsafeRemoveSubAccountOrderItems(subAccountId);
            }
        }

        /// <summary>
        /// 非线程安全地删除某个操作账户的所有订单项。如果 subAccountId 为 null，则删除所有
        /// </summary>
        /// <param name="subAccountId"></param>
        private void UnsafeRemoveSubAccountOrderItems(long? subAccountId)
        {
            IEnumerable<DiscreteOrderItemKey> rmKeys = null;
            if (subAccountId == null)
                rmKeys = orderItems.Keys.ToArray();
            else
                rmKeys = orderItems.Keys.Where(i => i.SubAccountId == subAccountId).ToArray();

            UnsafeRemoveOrders(rmKeys);
        }

        private static bool IsRefreshingOrSuccessRefreshed(DataRefreshState refreshState)
        {
            return refreshState == DataRefreshState.Refreshing || refreshState == DataRefreshState.SuccessRefreshed;
        }

        private SubAccountAnyDataRefreshStateHolder AcquireSubAccountOrderItemsRefreshStateHolder(long subAccountId)
        {
            lock (orderItemsRefreshLock)
            {
                SubAccountAnyDataRefreshStateHolder dataHolder = null;
                if (!orderItemsRefreshStateHolders.TryGetValue(subAccountId, out dataHolder))
                {
                    dataHolder = new SubAccountAnyDataRefreshStateHolder(subAccountId);
                    orderItemsRefreshStateHolders.Add(subAccountId, dataHolder);
                }
                return dataHolder;
            }
        }

        private CancellationToken AcquireSubAccountOrderItemsRefreshCLT()
        {
            CancellationToken clt = CancellationToken.None;
            lock (orderItemsRefreshLock)
            {
                if (orderItemsRefreshCTS == null)
                {
                    orderItemsRefreshCTS = new CancellationTokenSource();
                }
                clt = orderItemsRefreshCTS.Token;
            }
            return clt;
        }

        private void CancelSubAccountOrderItemsRefresh(bool clearRefreshStateHolders)
        {
            lock (orderItemsRefreshLock)
            {
                if (orderItemsRefreshCTS != null)
                {
                    orderItemsRefreshCTS.Cancel();
                    orderItemsRefreshCTS.Dispose();
                    orderItemsRefreshCTS = null;
                }

                if (clearRefreshStateHolders)
                {
                    orderItemsRefreshStateHolders.Clear();
                }
            }
        }

        /// <summary>
        /// 刷新操作账号的订单列表
        /// </summary>
        /// <param name="subAccountIds">需要刷新的操作账号 id 列表</param>
        /// <param name="isForceRefresh">是否强制刷新。YES 表示强制刷新， NO 表示必要时才刷新</param>
        private void RefreshSubAccountOrderItems(IEnumerable<long> subAccountIds, bool isForceRefresh)
        {
            if (subAccountIds?.Any() != true) return;

            orderItemsSyncTaskFactory.StartNew(() =>
            {
                var landingInfo = loginDataService.LandingInfo;
                if (landingInfo == null) return;

                var queryTsks = new List<Task>();
                var queryResps = new ConcurrentDictionary<long, IInterfaceInteractResponse<IEnumerable<HostingXQOrderWithTradeList>>>();
                var refreshStateHolders = new List<SubAccountAnyDataRefreshStateHolder>();

                var clt = AcquireSubAccountOrderItemsRefreshCLT();
                
                // 查询所有 subaccount 的数据
                foreach (var subAccountId in subAccountIds)
                {
                    var stateHolder = AcquireSubAccountOrderItemsRefreshStateHolder(subAccountId);

                    bool needRefresh = true;
                    var dataRefreshState = stateHolder.DataRefreshState;
                    if (!isForceRefresh && IsRefreshingOrSuccessRefreshed(dataRefreshState))
                    {
                        needRefresh = false;
                    }

                    if (needRefresh && !clt.IsCancellationRequested)
                    {
                        refreshStateHolders.Add(stateHolder);
                        stateHolder.DataRefreshState = DataRefreshState.Refreshing;
                        OrderItemsRefreshStateChanged?.Invoke(new SubAccountAnyDataRefreshStateChangedArgs(landingInfo.SubUserId, stateHolder.SubAccountId, stateHolder.DataRefreshState));
                        var tsk = Task.Run(() =>
                        {
                            // 如果已经取消了，需要抛出一个异常。WaitAll 异常捕获的时候就不会遗漏
                            clt.ThrowIfCancellationRequested();

                            var resp = subAccountXQEffectOrderQueryCtrl.SubAccountQueryXQOrdersSync(stateHolder.SubAccountId, clt);
                            queryResps.TryAdd(subAccountId, resp);

                            // 如果已经取消了，需要抛出一个异常。WaitAll 异常捕获的时候就不会遗漏
                            clt.ThrowIfCancellationRequested();
                        }, clt);
                        queryTsks.Add(tsk);
                    }
                }

                if (queryTsks.Count == 0) return;
                try
                {
                    Task.WaitAll(queryTsks.ToArray());
                }
                catch (AggregateException)
                {
                    if (loginDataService.ProxyLoginResp == null) return;

                    foreach (var stateHolder in refreshStateHolders)
                    {
                        // 取消或失败。修改刷新状态
                        stateHolder.DataRefreshState = clt.IsCancellationRequested ? DataRefreshState.CanceledRefresh : DataRefreshState.FailedRefreshed;
                        OrderItemsRefreshStateChanged?.Invoke(new SubAccountAnyDataRefreshStateChangedArgs(landingInfo.SubUserId, stateHolder.SubAccountId, stateHolder.DataRefreshState));
                    }
                    return;
                }
                
                lock (orderItemsLock)
                {
                    if (loginDataService.ProxyLoginResp == null) return;

                    foreach (var stateHolder in refreshStateHolders)
                    {
                        IInterfaceInteractResponse<IEnumerable<HostingXQOrderWithTradeList>> resp = null;
                        queryResps.TryGetValue(stateHolder.SubAccountId, out resp);

                        // 修改刷新状态
                        stateHolder.DataRefreshState = (resp?.CorrectResult != null) ? DataRefreshState.SuccessRefreshed : DataRefreshState.FailedRefreshed;
                        OrderItemsRefreshStateChanged?.Invoke(new SubAccountAnyDataRefreshStateChangedArgs(landingInfo.SubUserId, stateHolder.SubAccountId, stateHolder.DataRefreshState));

                        if (clt.IsCancellationRequested) continue;

                        if (resp != null)
                        {
                            IEnumerable<HostingXQOrder> qOrderItems = resp.CorrectResult?.Select(i => i.Order).ToArray();

                            // 这里不删除 sub account 的原来的成交记录。因为 push 一直在进行，所以只添加或修改才不会将数据丢失。而在退出登录时，才进行清理

                            // 添加或更新查询到的成交项
                            UnsafeAddOrUpdateOrders(qOrderItems,
                                    out IEnumerable<OrderItemDataModel> _addList,
                                    out IEnumerable<OrderItemDataModel> _updateList);
                        }
                    }
                }
            });
        }

        private void UnsafeAddOrUpdateOrders(
            IEnumerable<HostingXQOrder> newOrderes,
            out IEnumerable<OrderItemDataModel> _addOrders,
            out IEnumerable<OrderItemDataModel> _updateOrders)
        {
            _addOrders = null;
            _updateOrders = null;

            if (newOrderes?.Any() != true) return;

            IDictionary<DiscreteOrderItemKey, OrderItemDataModel> addOrderDict = null;
            IDictionary<DiscreteOrderItemKey, OrderItemDataModel> updateOrderDict = null;
            var newOrdersMap = newOrderes.ToDictionary(order => new DiscreteOrderItemKey(order.SubAccountId, order.OrderId, order.OrderType,
                    order.OrderTarget.TargetType.ToClientXQOrderTargetType(), order.OrderTarget.TargetKey));

            UnsafeAddOrUpdateOrders(newOrdersMap.Keys,
                _key =>
                {
                    var orderType = _key.OrderType;
                    var orderCreateUserId = newOrdersMap[_key].SubUserId;
                    var orderDetail = newOrdersMap[_key].OrderDetail;
                    if (OrderItemDataModel_Entrusted.IsOrder_Entrusted(orderType))
                    {
                        return OrderItemDataModelCreateHelper.GenerateOrder_Entrusted(_key, orderCreateUserId, orderDetail,
                            subAccountRelatedItemQueryCtrl, subAccountRelatedItemCacheCtrl,
                            hostingUserQueryCtrl, hostingUserCacheCtrl,
                            composeGraphCacheCtrl, composeGraphQueryCtrl,
                            userComposeViewCacheCtrl, userComposeViewQueryCtrl,
                            contractItemTreeQueryCtrl);
                    }
                    else if (OrderItemDataModel_Parked.IsOrder_Parked(orderType))
                    {
                        return OrderItemDataModelCreateHelper.GenerateOrder_Parked(_key, orderCreateUserId, orderDetail,
                            subAccountRelatedItemQueryCtrl, subAccountRelatedItemCacheCtrl,
                            hostingUserQueryCtrl, hostingUserCacheCtrl,
                            contractItemTreeQueryCtrl);
                    }
                    else if (OrderItemDataModel_Condition.IsOrder_Condition(orderType))
                    {
                        return OrderItemDataModelCreateHelper.GenerateOrder_Condition(_key, orderCreateUserId, orderDetail,
                            subAccountRelatedItemQueryCtrl, subAccountRelatedItemCacheCtrl,
                            hostingUserQueryCtrl, hostingUserCacheCtrl,
                            composeGraphCacheCtrl, composeGraphQueryCtrl,
                            userComposeViewCacheCtrl, userComposeViewQueryCtrl,
                            contractItemTreeQueryCtrl);
                    }
                    return null;
                },
                (_key, isExistOrder, orderItem) =>
                {
                    var hostingXQOrder = newOrdersMap[_key];
                    if (isExistOrder && orderItem != null && orderItem.Version > hostingXQOrder.Version)
                    {
                            // 版本号更低，不更新
                            return;
                    }

                    OrderItemDataModelCreateHelper.UpdateOrderItemWithHostingOrder(orderItem, hostingXQOrder, 
                        composeGraphCacheCtrl, composeGraphQueryCtrl, userComposeViewCacheCtrl, commodityCacheCtrl);

                }, out addOrderDict, out updateOrderDict);

            _addOrders = addOrderDict?.Values;
            _updateOrders = updateOrderDict?.Values;
        }
        
        /// <summary>
        /// 批量添加或更新订单
        /// </summary>
        /// <param name="orderKeys">订单 key 列表</param>
        /// <param name="newOrderItemFactory">新订单获取方法</param>
        /// <param name="orderUpdateAction">订单更新方法</param>
        /// <param name="addOrders">新增的订单列表</param>
        /// <param name="updateOrders">修改的订单列表</param>
        /// <returns></returns>
        private void UnsafeAddOrUpdateOrders(IEnumerable<DiscreteOrderItemKey> orderKeys,
            Func<DiscreteOrderItemKey, OrderItemDataModel> newOrderItemFactory,
            Action<DiscreteOrderItemKey, bool, OrderItemDataModel> orderUpdateAction,
            out IDictionary<DiscreteOrderItemKey, OrderItemDataModel> _addOrders,
            out IDictionary<DiscreteOrderItemKey, OrderItemDataModel> _updateOrders)
        {
            _addOrders = null;
            _updateOrders = null;

            Debug.Assert(newOrderItemFactory != null);

            if (orderKeys?.Any() != true) return;
            
            var addResults = new Dictionary<DiscreteOrderItemKey, OrderItemDataModel>();
            var updateResults = new Dictionary<DiscreteOrderItemKey, OrderItemDataModel>();
            var newAddOrderItems = new List<OrderItemDataModel>();
            foreach (var orderKey in orderKeys)
            {
                OrderItemDataModel existOrder = null;
                OrderItemDataModel implOrderItem = null;
                if (!orderItems.TryGetValue(orderKey, out existOrder))
                {
                    var newOrderItem = newOrderItemFactory.Invoke(orderKey);
                    if (newOrderItem != null)
                    {
                        // 添加至列表中
                        orderItems[orderKey] = newOrderItem;
                        newAddOrderItems.Add(newOrderItem);
                        implOrderItem = newOrderItem;
                        addResults.Add(orderKey, newOrderItem);
                    }
                }
                else
                {
                    implOrderItem = existOrder;
                    updateResults.Add(orderKey, existOrder);
                }

                if (implOrderItem != null && orderUpdateAction != null)
                {
                    orderUpdateAction.Invoke(orderKey, existOrder != null, implOrderItem);
                }
            }
            
            if (newAddOrderItems.Any())
            {
                // 添加到订单列表
                UIItemsAddOrRemoveDispatcherBeginInvoke(() =>
                {
                    orderItemsService.OrderItems.AddRange(newAddOrderItems);
                });
            }

            _addOrders = addResults;
            _updateOrders = updateResults;
        }

        private void SafeUpdateOrderUseBlock(IEnumerable<string> updateOrderIds, Action<string, OrderItemDataModel> orderUpdateAction)
        {
            if (updateOrderIds?.Any() != true) return;
            lock (orderItemsLock)
            {
                var allOrderItems = orderItems.Values;
                foreach (var updateOrderId in updateOrderIds)
                {
                    var existOrder = allOrderItems.FirstOrDefault(i => i.OrderId == updateOrderId);
                    orderUpdateAction?.Invoke(updateOrderId, existOrder);
                }
            }
        }

        private void EnqueueOrderStateQueryIfNeed(string orderId, ClientXQOrderState orderState)
        {
            if (orderState == ClientXQOrderState.ClientInaccurate_Unkown)
            {
                EnqueueInaccurateStateOrderQueryTask(orderId);
            }
        }

        private void EnqueueInaccurateStateOrderQueryTask(string orderId)
        {
            if (string.IsNullOrEmpty(orderId)) return;
            lock (inaccurateStateOrderQueryLock)
            {
                if (inaccurateStateOrderQueryCTS == null
                    || inaccurateStateOrderQueryCTS.IsCancellationRequested)
                {
                    inaccurateStateOrderQueryCTS = new CancellationTokenSource();
                }
                var clt = inaccurateStateOrderQueryCTS.Token;
                Task.Run(() => 
                {
                    var landingInfo = loginDataService.LandingInfo;
                    if (landingInfo == null) return;

                    int retryNum = 0;
                    int maxRetryLimit = 3;
                    while (retryNum < maxRetryLimit)
                    {
                        if (clt.IsCancellationRequested) return;
                        var pageOption = new IndexedPageOption { PageIndex = 0, PageSize = 1, NeedTotalCount = false };
                        // 接口设置一个小的超时时间，以求更快速接口状态反馈
                        var interactParams = new StubInterfaceInteractParams { TransportConnectTimeoutMS = 2000, TransportReadTimeoutMS = 2000 };
                        var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                            .getXQOrderWithTradeLists(landingInfo, new THashSet<string> { orderId }, interactParams);

                        if (clt.IsCancellationRequested) return;

                        if (resp?.SourceException == null && resp?.CorrectResult != null)
                        {
                            lock (orderItemsLock)
                            {
                                if (loginDataService.LandingInfo?.Token != landingInfo.Token) return;
                                if (resp.CorrectResult.TryGetValue(orderId, out HostingXQOrderWithTradeList queriedItem))
                                {
                                    UnsafeAddOrUpdateOrders(new HostingXQOrder[] { queriedItem.Order },
                                        out IEnumerable<OrderItemDataModel> addOrders, out IEnumerable<OrderItemDataModel> updateOrders);
                                }
                                else
                                {
                                    // Not exist this order
                                    // Other accurate errors(not the transport error), to remove the inaccurate orderes
                                    UnsafeRemoveOrderWithId(orderId);
                                }
                            }
                            break;
                        }
                        else
                        {
                            // also the transport error (inAccurate), don't stop query util get the accurate result
                            Thread.Sleep(200);
                        }
                        retryNum++;
                    }

                    // 重试次数超过最大限定次数。发布不明确订单的状态获取失败通知
                    if (retryNum >= maxRetryLimit)
                    {
                        lock (orderItemsLock)
                        {
                            var tarOrder = orderItems.Values.FirstOrDefault(i => i.OrderId == orderId);
                            if (tarOrder != null && tarOrder.IsStateAmbiguous)
                            {
                                eventAggregator.GetEvent<AmbiguousOrderStateQueryFailedEvent>().Publish(tarOrder);
                            }
                        }
                    }
                }, clt);
            }
        }

        private void CancelInaccurateStateOrderQueryTasks()
        {
            lock (inaccurateStateOrderQueryLock)
            {
                if (inaccurateStateOrderQueryCTS != null)
                {
                    inaccurateStateOrderQueryCTS.Cancel();
                    inaccurateStateOrderQueryCTS.Dispose();
                    inaccurateStateOrderQueryCTS = null;
                }
            }
        }
    }
}
