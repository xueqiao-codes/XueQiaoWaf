; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#include <idp.iss>

#define MyAppName "XueQiaoTrading"
#define MyAppDisplayName "雪橇投资管理系统"
#define MyAppPublisher "XueQiao"
#define MyAppURL "http://www.xueqiao.cn/"
#define MyAppGroupName "XueQiao"
#define MyAppExeName "XueQiaoTrading.exe"
#define MyAppCopyright "Copyright (C) 2018 雪橇科技（深圳）有限公司"

; need pass params with command line
; MyAppId, MyAppVersion, MyOutputDir, MyOutputBaseFilename, MyInstallSourceFilesDir, ArchitecturesInstallIn64BitMode
; `ArchitecturesInstallIn64BitMode` 参考官方的 Setup `ArchitecturesInstallIn64BitMode` 参数给定值 

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppCopyright={#MyAppCopyright}
AppId={#MyAppId}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
VersionInfoVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}

; 默认安装目录为 C: 盘根目录。不设置为 Program Files，因为 Program Files 目录对于文件写权限做了限定。可项目在运行过程中需要在安装目录中创建一些文件
DefaultDirName={sd}\{#MyAppGroupName}\{#MyAppName}

DefaultGroupName={#MyAppGroupName}
OutputDir={#MyOutputDir}
OutputBaseFilename={#MyOutputBaseFilename}
ArchitecturesInstallIn64BitMode={#ArchitecturesInstallIn64BitMode}
DisableDirPage=false
DisableProgramGroupPage=yes
LicenseFile=.\用户许可.txt
SetupIconFile=.\appicon.ico
Compression=lzma
SolidCompression=yes

[Languages]
Name: "chinesesimp"; MessagesFile: "compiler:Languages\ChineseSimp.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; 
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; OnlyBelowVersion: 0,6.1

[Files]
Source: "{#MyInstallSourceFilesDir}\*"; Excludes: "*.pdb"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
; Excludes .pdb files to reduce package file size

[Icons]
Name: "{group}\{#MyAppDisplayName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppDisplayName}}"; Filename: "{uninstallexe}"; Flags: preventpinning
Name: "{commondesktop}\{#MyAppDisplayName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppDisplayName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[code]
function Framework4_5_2IsNotInstalled(): Boolean;
var
  bSuccess: Boolean;
  regVersion: Cardinal;
begin
  Result := True;

  bSuccess := RegQueryDWordValue(HKLM, 'Software\Microsoft\NET Framework Setup\NDP\v4\Full', 'Release', regVersion);
  if (True = bSuccess) and (regVersion >= 379893) then begin
    Result := False;
  end;
end;

procedure InitializeWizard;
begin
  if Framework4_5_2IsNotInstalled() then
  begin
    idpAddFile('http://go.microsoft.com/fwlink/?LinkId=397707', ExpandConstant('{tmp}\NetFrameworkInstaller.exe'));
    idpDownloadAfter(wpReady);
  end;
end;

procedure InstallFramework;
var
  StatusText: string;
  ResultCode: Integer;
begin
  StatusText := WizardForm.StatusLabel.Caption;
  WizardForm.StatusLabel.Caption := 'Installing .NET Framework 4.5.2. This might take a few minutes…';
  WizardForm.ProgressGauge.Style := npbstMarquee;
  try
    if not Exec(ExpandConstant('{tmp}\NetFrameworkInstaller.exe'), '/passive /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
    begin
      MsgBox('.NET installation failed with code: ' + IntToStr(ResultCode) + '.', mbError, MB_OK);
    end;
  finally
    WizardForm.StatusLabel.Caption := StatusText;
    WizardForm.ProgressGauge.Style := npbstNormal;

    DeleteFile(ExpandConstant('{tmp}\NetFrameworkInstaller.exe'));
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  case CurStep of
    ssPostInstall:
      begin
        if Framework4_5_2IsNotInstalled() then
        begin
          InstallFramework();
        end;
      end;
  end;
end;


[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppDisplayName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent