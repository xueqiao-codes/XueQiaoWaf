using business_foundation_lib.helper;
using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using Manage.Applications.DataModels;
using Manage.Applications.ServiceControllers;
using Manage.Applications.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Waf.Applications;
using xueqiao.trade.hosting;
using xueqiao.trade.hosting.position.adjust.thriftapi;
using XueQiaoFoundation.BusinessResources.Helpers;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications.Controllers
{
    /// <summary>
    /// 未分配成交管理页面 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class UATManageCtrl : IController
    {
        private readonly UATManageVM contentViewModel;
        private readonly ExportFactory<UATAssignTabContentCtrl> UATAssignTabContentCtrlFactory;
        private readonly ExportFactory<UATPreviewTabContentCtrl> UATPreviewTabContentCtrlFactory;
        private readonly IUATPAController UATPAController;
        private readonly ILoginDataService loginDataService;
        private readonly IMessageWindowService messageWindowService;
       
        private readonly ModuleLockStatusDM moduleLockStatus = new ModuleLockStatusDM();
        private readonly DelegateCommand requestModuleLockCmd;
        private readonly DelegateCommand toExitModuleLockCmd;
        
        private readonly UATManageViewTabItem assignTabItem;
        private readonly UATManageViewTabItem previewTabItem;

        private UATAssignTabContentCtrl UATAssignTabContentCtrl;
        private UATPreviewTabContentCtrl UATPreviewTabContentCtrl;

        [ImportingConstructor]
        public UATManageCtrl(UATManageVM contentViewModel,
            ExportFactory<UATAssignTabContentCtrl> UATAssignTabContentCtrlFactory,
            ExportFactory<UATPreviewTabContentCtrl> UATPreviewTabContentCtrlFactory,
            IUATPAController UATPAController,
            ILoginDataService loginDataService,
            IMessageWindowService messageWindowService)
        {
            this.contentViewModel = contentViewModel;
            this.UATAssignTabContentCtrlFactory = UATAssignTabContentCtrlFactory;
            this.UATPreviewTabContentCtrlFactory = UATPreviewTabContentCtrlFactory;
            this.UATPAController = UATPAController;
            this.loginDataService = loginDataService;
            this.messageWindowService = messageWindowService;

            requestModuleLockCmd = new DelegateCommand(RequestModuleLock);
            toExitModuleLockCmd = new DelegateCommand(ToExitModuleLock);

            assignTabItem = new UATManageViewTabItem(UATManageViewTabType.AssignTab);
            previewTabItem = new UATManageViewTabItem(UATManageViewTabType.PreviewTab);
        }

        public object ContentView => contentViewModel.View;

        public void Initialize()
        {
            moduleLockStatus.RequestModuleLockCmd = requestModuleLockCmd;
            moduleLockStatus.ToExitModuleLockCmd = toExitModuleLockCmd;
            contentViewModel.ModuleLockStatus = moduleLockStatus;
            contentViewModel.ViewTabItems.Add(assignTabItem);
            contentViewModel.ViewTabItems.Add(previewTabItem);
            contentViewModel.SelectedViewTabItem = assignTabItem;
            PropertyChangedEventManager.AddHandler(contentViewModel, ContentViewModelPropChanged, "");
        }

        public void Run()
        {
            UATPAController.RefreshUATItemsForce(null);
            RefreshModuleLockStatus();
        }

        public void Shutdown()
        {
            PropertyChangedEventManager.AddHandler(contentViewModel, ContentViewModelPropChanged, "");
            this.UATAssignTabContentCtrl?.Shutdown();
            this.UATPreviewTabContentCtrl?.Shutdown();
        }

        public void RefreshPageDataIfNeed()
        {
            UATPAController.RefreshUATItemsForce(null);
            RefreshModuleLockStatus();
        }

        private void ContentViewModelPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(UATManageVM.SelectedViewTabItem))
            {
                InvalidateManageViewTabContent();
            }
        }

        private void InvalidateManageViewTabContent()
        {
            var selectedTab = contentViewModel.SelectedViewTabItem;
            if (selectedTab == assignTabItem)
            {
                InvalidateAssignTabContent();
            }
            else if (selectedTab == previewTabItem)
            {
                InvalidatePreviewTabContent();
            }
        }

        private void InvalidateAssignTabContent()
        {
            if (this.UATAssignTabContentCtrl == null)
            {
                var ctrl = UATAssignTabContentCtrlFactory.CreateExport().Value;
                ctrl.Initialize();
                ctrl.Run();

                this.UATAssignTabContentCtrl = ctrl;
            }
            if (assignTabItem.ContentView == null)
            {
                assignTabItem.ContentView = this.UATAssignTabContentCtrl.ContentView;
            }
        }

        private void InvalidatePreviewTabContent()
        {
            if (this.UATPreviewTabContentCtrl == null)
            {
                var ctrl = UATPreviewTabContentCtrlFactory.CreateExport().Value;
                ctrl.Initialize();
                ctrl.Run();

                this.UATPreviewTabContentCtrl = ctrl;
            }
            else {
                this.UATPreviewTabContentCtrl.RefreshViewData();
            }
            if (previewTabItem.ContentView == null)
            {
                previewTabItem.ContentView = this.UATPreviewTabContentCtrl.ContentView;
            }
        }

        private void RequestModuleLock()
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            var editLock = new PositionEditLock { LockArea = trade_hosting_position_adjustConstants.POSITION_EDIT_AREA_ASSIGN };
            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.addPositionEditLockAsync(landingInfo, editLock, CancellationToken.None)
                .ContinueWith(t =>
                {
                    var resp = t.Result;
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        var _win = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                        if (resp == null || resp.SourceException != null)
                        {
                            var errorMsg = FoundationHelper.FormatResponseDisplayErrorMsg(resp, "请求锁定状态出错！\n");
                            if (_win != null)
                            {
                                messageWindowService.ShowMessageDialog(_win, null, null, null, errorMsg);
                            }
                        }
                        RefreshModuleLockStatus();
                    });
                });
        }

        private void ToExitModuleLock()
        {
            var containerWin = UIHelper.GetWindowOfUIElement(contentViewModel.View);
            if (true != messageWindowService.ShowQuestionDialog(containerWin, null, null, null, "要退出锁定吗？", false, "退出", "取消"))
                return;

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            var editLock = new PositionEditLock { LockArea = trade_hosting_position_adjustConstants.POSITION_EDIT_AREA_ASSIGN };
            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                .removePositionEditLockAsync(landingInfo, editLock, CancellationToken.None)
                .ContinueWith(t =>
                {
                    var resp = t.Result;
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        var _win = UIHelper.GetWindowOfUIElement(contentViewModel.View);
                        if (resp == null || resp.SourceException != null)
                        {
                            var errorMsg = FoundationHelper.FormatResponseDisplayErrorMsg(resp, "退出锁定状态出错！\n");
                            if (_win != null)
                            {
                                messageWindowService.ShowMessageDialog(_win, null, null, null, errorMsg);
                            }
                        }
                        RefreshModuleLockStatus();
                    });
                });
        }

        private void RefreshModuleLockStatus()
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.reqPositionEditLockAsync(landingInfo, 
                trade_hosting_position_adjustConstants.POSITION_EDIT_AREA_ASSIGN, CancellationToken.None)
                .ContinueWith(t =>
                {
                    var resp = t.Result;
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        InvalidateModuleLockStatus(resp?.CorrectResult);
                    });
                });
        }

        private void InvalidateModuleLockStatus(PositionEditLock lockData)
        {
            if (lockData == null || !lockData.__isset.subUserId || lockData.SubUserId == 0)
            {
                this.moduleLockStatus.LockState = ModuleLockState.UnLocked;
                this.moduleLockStatus.ModuleLockedUser = null;
            }
            else
            {
                ModuleLockState lockState = ModuleLockState.UnLocked;
                // 设置 lockState
                if (lockData.SubUserId == loginDataService.ProxyLoginResp?.HostingSession?.SubUserId)
                    lockState = ModuleLockState.LockedBySelf;
                else
                    lockState = ModuleLockState.LockedByOtherUser;

                this.moduleLockStatus.LockState = lockState;

                // 设置 ModuleLockedUser
                var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
                if (landingInfo != null)
                {
                    XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                    .getHostingUserPageAsync(landingInfo,
                        new QueryHostingUserOption { SubUserId = (int)lockData.SubUserId },
                        new IndexedPageOption { PageIndex = 0, PageSize = 1 },
                        CancellationToken.None)
                    .ContinueWith(t =>
                    {
                        this.moduleLockStatus.ModuleLockedUser = t.Result?.CorrectResult?.ResultList?.FirstOrDefault(i => i.SubUserId == lockData.SubUserId);
                    });
                }
            }

            if (this.moduleLockStatus.LockState == ModuleLockState.LockedBySelf)
            {
                PropertyChangedEventManager.RemoveHandler(contentViewModel, ContentViewModelPropChanged, "");
                InvalidateManageViewTabContent();
                PropertyChangedEventManager.AddHandler(contentViewModel, ContentViewModelPropChanged, "");
            }
        }
    }
}
