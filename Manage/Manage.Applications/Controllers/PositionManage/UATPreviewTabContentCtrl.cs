using Manage.Applications.DataModels;
using Manage.Applications.Services;
using Manage.Applications.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using System.Windows;
using xueqiao.trade.hosting.position.adjust.thriftapi;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using IDLAutoGenerated.Util;
using System.Threading;
using Manage.Applications.ServiceControllers;
using xueqiao.trade.hosting;
using XueQiaoFoundation.BusinessResources.Helpers;
using business_foundation_lib.xq_thriftlib_config;
using business_foundation_lib.helper;

namespace Manage.Applications.Controllers
{
    /// <summary>
    /// 未分配的`预览&提交`tab 内容 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class UATPreviewTabContentCtrl : IController
    {
        private readonly UATPreviewTabContentVM contentViewModel;
        private readonly UATPAService UATPAService;
        private readonly IUATPAController UATPAController;
        private readonly ILoginDataService loginDataService;
        private readonly IMessageWindowService messageWindowService;

        private readonly DelegateCommand refreshSearchPAItemsCmd;
        private readonly DelegateCommand submitCurrentPAItemsCmd;
        private bool isSubmitting;

        [ImportingConstructor]
        public UATPreviewTabContentCtrl(UATPreviewTabContentVM contentViewModel,
            UATPAService UATPAService,
            IUATPAController UATPAController,
            ILoginDataService loginDataService,
            IMessageWindowService messageWindowService)
        {
            this.contentViewModel = contentViewModel;
            this.UATPAService = UATPAService;
            this.UATPAController = UATPAController;
            this.loginDataService = loginDataService;
            this.messageWindowService = messageWindowService;

            refreshSearchPAItemsCmd = new DelegateCommand(RefreshSearchPAItems, CanRefreshSearchPAItems);
            submitCurrentPAItemsCmd = new DelegateCommand(SubmitCurrentPAItems, CanSubmitCurrentPAItems);
        }
        
        public object ContentView => contentViewModel.View;

        public void Initialize()
        {
            contentViewModel.RefreshSearchPAItemsCmd = refreshSearchPAItemsCmd;
            contentViewModel.SubmitCurrentPAItemsCmd = submitCurrentPAItemsCmd;
            PropertyChangedEventManager.AddHandler(contentViewModel, ContentVMPropChanged, "");
        }

        public void Run()
        {
            if (!contentViewModel.SearchedPreviewItems.Any())
            {
                RefreshSearchPreviewItems();
            }
        }

        public void Shutdown()
        {
            PropertyChangedEventManager.RemoveHandler(contentViewModel, ContentVMPropChanged, "");
        }
        
        /// <summary>
        /// 刷新页面数据
        /// </summary>
        public void RefreshViewData()
        {
            RefreshSearchPreviewItems();
        }

        private void ContentVMPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(UATPreviewTabContentVM.SelectedPAItemsPreviewType)
                || e.PropertyName == nameof(UATPreviewTabContentVM.SelectedFundAccountId)
                || e.PropertyName == nameof(UATPreviewTabContentVM.SelectedSubAccountId))
            {
                RefreshSearchPreviewItems();
            }
        }

        private bool CanRefreshSearchPAItems()
        {
            if (isSubmitting) return false;

            var selPAItemsPreviewType = contentViewModel.SelectedPAItemsPreviewType;
            var selFundAccountId = contentViewModel.SelectedFundAccountId;
            var selSubAccountId = contentViewModel.SelectedSubAccountId;

            if (selPAItemsPreviewType == PAItemsPreviewType.ByFundAccount)
            {
                return selFundAccountId != null;
            }
            else if (selPAItemsPreviewType == PAItemsPreviewType.BySubAccount)
            {
                return selSubAccountId != null;
            }
            return false;
        }
        
        private void RefreshSearchPAItems()
        {
            RefreshSearchPreviewItems();
        }

        private void UpdateIsSubmitting(bool isSubmitting)
        {
            this.isSubmitting = isSubmitting;
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                refreshSearchPAItemsCmd?.RaiseCanExecuteChanged();
                submitCurrentPAItemsCmd?.RaiseCanExecuteChanged();
            });
        }
        
        private bool CanSubmitCurrentPAItems(object param)
        {
            if (isSubmitting) return false;
            if (!contentViewModel.SearchedPreviewItems.Any()) return false;

            var selPAItemsPreviewType = contentViewModel.SelectedPAItemsPreviewType;
            var selFundAccountId = contentViewModel.SelectedFundAccountId;
            var selSubAccountId = contentViewModel.SelectedSubAccountId;

            if (selPAItemsPreviewType == PAItemsPreviewType.ByFundAccount)
            {
                return selFundAccountId != null;
            }
            else if (selPAItemsPreviewType == PAItemsPreviewType.BySubAccount)
            {
                return selSubAccountId != null;
            }
            return false;
        }

        private void SubmitCurrentPAItems(object param)
        {
            var submitButn = param as UIElement;
            Point? dialogLocation = null;
            var containerWin = UIHelper.GetWindowOfUIElement(contentViewModel.View) as Window;
            if (submitButn != null)
            {
                var screenPoint = submitButn.PointToScreen(new Point(0, submitButn.RenderSize.Height + 6));
                dialogLocation = UIHelper.TransformToWpfPoint(screenPoint, submitButn);
            }

            var selPAItemsPreviewType = contentViewModel.SelectedPAItemsPreviewType;
            var selFundAccountId = contentViewModel.SelectedFundAccountId;
            var selSubAccountId = contentViewModel.SelectedSubAccountId;

            string questionMessage = null;
            if (selPAItemsPreviewType == PAItemsPreviewType.ByFundAccount && selFundAccountId != null)
            {
                var selFundAccount = contentViewModel.FundAccountItemsCollectionView.OfType<HostingTradeAccount>()
                    .FirstOrDefault(i => i.TradeAccountId == selFundAccountId);
                var formatAccName = new StringBuilder(selFundAccount.LoginUserName);
                if (!string.IsNullOrEmpty(selFundAccount.TradeAccountRemark))
                    formatAccName.Append($"({selFundAccount.TradeAccountRemark})");
                questionMessage = $"是否提交资金账户 {formatAccName} 的所有预分配？";
            }
            else if (selPAItemsPreviewType == PAItemsPreviewType.BySubAccount)
            {
                var selSubAccount = contentViewModel.SubAccountItemsCollectionView.OfType<HostingSubAccount>().FirstOrDefault(i => i.SubAccountId == selSubAccountId);
                questionMessage = $"是否提交操作账户 {selSubAccount.SubAccountName} 的所有预分配？";
            }

            if (true != messageWindowService.ShowQuestionDialog(containerWin, dialogLocation, null, null, questionMessage, false,
                "提交", "取消"))
            {
                return;
            }
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            var uploadPreviewItems = contentViewModel.SearchedPreviewItems.ToArray();
            if (uploadPreviewItems.Any() != true) return;

            var uploadPreviewFundAccIds = uploadPreviewItems.GroupBy(i => i.FundAccountId).Select(i => i.Key).ToArray();
            var uploadAssignItems = uploadPreviewItems.Select(i => new PositionAssignOption
            {
                InputId = Convert.ToInt64(i.UATItemKey),
                SubAccountId = i.SubAccountId,
                Volume = i.Volume
            }).ToList();
           
            UpdateIsSubmitting(true);
            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.assignPositionAsync(landingInfo, uploadAssignItems, CancellationToken.None)
            .ContinueWith(t => 
            {
                var resp = t.Result;
                DispatcherHelper.CheckBeginInvokeOnUI(() => 
                {
                    UpdateIsSubmitting(false);

                    var uploadSuccess = true;
                    if (resp?.SourceException != null || resp?.CorrectResult?.Success != true)
                    {
                        uploadSuccess = false;
                    }

                    if (uploadSuccess)
                    {
                        // remove uploaded PA items
                        UATPAController.RemovePAItemsWithKey(uploadPreviewItems
                            .Select(i => new PositionPreviewAssignItemKey(i.SubAccountId, i.UATItemKey, i.FundAccountId, i.ContractId))
                            .ToArray());
                    }

                    // Refresh related UATItems after upload
                    foreach (var refreshFundAccId in uploadPreviewFundAccIds)
                    {
                        UATPAController.RefreshUATItemsForce(refreshFundAccId);
                    }

                    // 刷新当前查询条件的预分配列表
                    RefreshSearchPreviewItems();

                    var _win = UIHelper.GetWindowOfUIElement(contentViewModel.View) as Window;
                    if (_win != null)
                    {
                        if (uploadSuccess)
                        {
                            messageWindowService.ShowMessageDialog(_win, dialogLocation, null, null, "提交预分配成功！");
                        }
                        else
                        {
                            messageWindowService.ShowMessageDialog(_win, dialogLocation, null, null,
                                FoundationHelper.FormatResponseDisplayErrorMsg(resp, "提交预分配失败！\n"));
                        }
                    }
                });
            });
        }
        
        private void RefreshSearchPreviewItems()
        {
            var selPAItemsPreviewType = contentViewModel.SelectedPAItemsPreviewType;
            var selFundAccountId = contentViewModel.SelectedFundAccountId;
            var selSubAccountId = contentViewModel.SelectedSubAccountId;
            
            var allUATItems = UATPAService.UATItems.ToArray();
            var allPAItems = new List<PositionPreviewAssignDM>();
            foreach (var UATItem in allUATItems)
            {
                allPAItems.AddRange(UATItem.PAItems);
            }

            IEnumerable<PositionPreviewAssignDM> addingPAItems = null;
            if (selPAItemsPreviewType == PAItemsPreviewType.ByFundAccount)
            {
                if (selFundAccountId != null)
                {
                    addingPAItems = allPAItems.Where(i => i.FundAccountId == selFundAccountId).ToArray();
                }
            }
            else if (selPAItemsPreviewType == PAItemsPreviewType.BySubAccount)
            {
                if (selSubAccountId != null)
                {
                    addingPAItems = allPAItems.Where(i => i.SubAccountId == selSubAccountId).ToArray();
                }
            }
            var addingPreviewItems = addingPAItems?.Select(i => 
            {
                var belongUATItem = allUATItems.FirstOrDefault(m => m.ItemKey == i.UATItemKey && m.FundAccountId == i.FundAccountId && m.ContractId == i.ContractId);
                return GeneratePAItemPreviewItemFromPAItem(i, belongUATItem);
            }).ToArray();

            contentViewModel.SearchedPreviewItems.Clear();
            contentViewModel.SearchedPreviewItems.AddRange(addingPreviewItems);
            submitCurrentPAItemsCmd?.RaiseCanExecuteChanged();
        }

        private PAItemPreviewItem GeneratePAItemPreviewItemFromPAItem(PositionPreviewAssignDM PAItem, UnAssignTradeDM belongUATItem)
        {
            var previewItem = new PAItemPreviewItem(PAItem.SubAccountId, PAItem.UATItemKey, PAItem.FundAccountId, PAItem.ContractId)
            {
                ContractDetailContainer = PAItem.ContractDetailContainer,
                PAAccountInfoContainer = PAItem.PAAccountInfoContainer,
                Volume = PAItem.Volume,
            };

            if (belongUATItem != null)
            {
                previewItem.Direction = belongUATItem.Direction;
                previewItem.Price = belongUATItem.Price;
                previewItem.TradeTimestampMs = belongUATItem.TradeTimestampMs;
            }
            return previewItem;
        }
    }
}
