using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using Manage.Applications.DataModels;
using Manage.Applications.ServiceControllers;
using Manage.Applications.ServiceControllers.Events;
using Manage.Applications.ViewModels;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Waf.Applications;
using System.Windows.Controls;
using xueqiao.trade.hosting;
using xueqiao.trade.hosting.asset.thriftapi;
using XueQiaoFoundation.BusinessResources.DataModels;
using XueQiaoFoundation.BusinessResources.Helpers;
using XueQiaoFoundation.BusinessResources.Models;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Interfaces.Helper;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.Navigation;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications.Controllers
{
    /// <summary>
    /// 持仓-按操作账户查看 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class PositionShowBySubAccountCtrl : IController
    {
        private readonly SimpleNavigationContainerView navigationContainerView;
        private readonly PositionShowBySubAccountVM contentViewModel;
        private readonly IManageSubAccountItemsController manageSubAccountItemsCtrl;
        private readonly ILoginDataService loginDataService;
        private readonly IContractItemTreeQueryController contractItemTreeQueryCtrl;
        private readonly ExportFactory<SubAccountPositionDetailDialogCtrl> positionDetailDialogCtrlFactory;
        private readonly ExportFactory<SubAccountPositionHistoryCtrl> positionHistoryCtrlFactory;
        private readonly IEventAggregator eventAggregator;

        private SubAccountPositionHistoryCtrl currentPositionHistoryCtrl;

        private readonly DelegateCommand toShowPositionDetailCmd;
        private readonly DelegateCommand refreshDataCmd;
        private readonly DelegateCommand toShowHistoryCmd;

        private bool isRefreshingData;

        [ImportingConstructor]
        public PositionShowBySubAccountCtrl(
            SimpleNavigationContainerView navigationContainerView,
            PositionShowBySubAccountVM contentViewModel,
            IManageSubAccountItemsController manageSubAccountItemsCtrl,
            ILoginDataService loginDataService,
            IContractItemTreeQueryController contractItemTreeQueryCtrl,
            ExportFactory<SubAccountPositionDetailDialogCtrl> positionDetailDialogCtrlFactory,
            ExportFactory<SubAccountPositionHistoryCtrl> positionHistoryCtrlFactory,
            IEventAggregator eventAggregator)
        {
            this.navigationContainerView = navigationContainerView;
            this.contentViewModel = contentViewModel;
            this.manageSubAccountItemsCtrl = manageSubAccountItemsCtrl;
            this.loginDataService = loginDataService;
            this.contractItemTreeQueryCtrl = contractItemTreeQueryCtrl;
            this.positionDetailDialogCtrlFactory = positionDetailDialogCtrlFactory;
            this.positionHistoryCtrlFactory = positionHistoryCtrlFactory;
            this.eventAggregator = eventAggregator;

            toShowPositionDetailCmd = new DelegateCommand(ToShowPositionDetail);
            refreshDataCmd = new DelegateCommand(RefreshPageData, CanRefreshPageData);
            toShowHistoryCmd = new DelegateCommand(ToShowHistory);
        }

        public object ContentView => navigationContainerView;

        public void Initialize()
        {
            contentViewModel.RefreshDataCmd = refreshDataCmd;
            contentViewModel.ToShowHistoryCmd = toShowHistoryCmd;

            eventAggregator.GetEvent<ManageSubAccountItemsRefreshEvent>().Subscribe(RecvManageSubAccountItemsRefreshEvent, ThreadOption.UIThread);

            var allSubAccounts = manageSubAccountItemsCtrl.AllSubAccountItems?.ToArray();
            contentViewModel.SubAccountItems.Clear();
            contentViewModel.SubAccountItems.AddRange(allSubAccounts);
            contentViewModel.SelectedSubAccountItem = allSubAccounts?.FirstOrDefault();

            if (allSubAccounts?.Any() != true)
            {
                manageSubAccountItemsCtrl.RefreshSubAccountItemsIfNeed();
            }

            // set contentViewModel.View as the first page of navigation
            navigationContainerView.Navigate(contentViewModel.View as Page);
        }

        public void Run()
        {
            PropertyChangedEventManager.AddHandler(contentViewModel, ContentViewModelPropChanged, "");
            RefreshCurrentSubAccountPositionData();
        }

        public void Shutdown()
        {
            eventAggregator.GetEvent<ManageSubAccountItemsRefreshEvent>().Unsubscribe(RecvManageSubAccountItemsRefreshEvent);
            PropertyChangedEventManager.RemoveHandler(contentViewModel, ContentViewModelPropChanged, "");
        }

        private void ContentViewModelPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(PositionShowBySubAccountVM.SelectedSubAccountItem))
            {
                RefreshCurrentSubAccountPositionData();
            }
        }

        private void RecvManageSubAccountItemsRefreshEvent(ManageSubAccountItemsRefreshEventArgs args)
        {
            var loginToken = loginDataService.ProxyLoginResp?.HostingSession?.Token;
            if (loginToken != args.LoginUserToken) return;

            var originSubAccountId = this.contentViewModel.SelectedSubAccountItem?.SubAccountId;

            PropertyChangedEventManager.RemoveHandler(contentViewModel, ContentViewModelPropChanged, "");

            // 刷新资金账户列表
            contentViewModel.SubAccountItems.Clear();
            contentViewModel.SubAccountItems.AddRange(args.SubAccountItems);
            HostingSubAccount newSelectedSubAccountItem = null;
            if (originSubAccountId != null)
                newSelectedSubAccountItem = args.SubAccountItems?.FirstOrDefault(i => i.SubAccountId == originSubAccountId);
            if (newSelectedSubAccountItem == null)
                newSelectedSubAccountItem = args.SubAccountItems?.FirstOrDefault();
            contentViewModel.SelectedSubAccountItem = newSelectedSubAccountItem;

            PropertyChangedEventManager.AddHandler(contentViewModel, ContentViewModelPropChanged, "");

            // 如果选中的子账号发生变化，则刷新权益数据
            if (newSelectedSubAccountItem?.SubAccountId != originSubAccountId)
            {
                RefreshCurrentSubAccountPositionData();
            }
        }

        private void ToShowPositionDetail(object obj)
        {
            DiscretePositionDM dmItem = null;
            if (obj is DiscretePositionDM)
            {
                dmItem = (DiscretePositionDM)obj;
            }
            else if (obj is PositionManageDM _dm)
            {
                dmItem = _dm.PositionContent;
            }
            
            if (dmItem == null) return;
            
            var currentSubAccount = contentViewModel.SelectedSubAccountItem;
            if (currentSubAccount == null) return;

            // show detail
            var dialogCtrl = positionDetailDialogCtrlFactory.CreateExport().Value;
            dialogCtrl.SubAccount = currentSubAccount;
            dialogCtrl.ContractId = dmItem.ContractId;
            dialogCtrl.IsQueryHistoryPositionDetail = false;
            dialogCtrl.DialogOwner = UIHelper.GetWindowOfUIElement(contentViewModel.View);
            dialogCtrl.Initialize();
            dialogCtrl.Run();
            dialogCtrl.Shutdown();
        }
        
        private void ToShowHistory()
        {
            var currentSubAccount = contentViewModel.SelectedSubAccountItem;
            if (currentSubAccount == null) return;

            currentPositionHistoryCtrl?.Shutdown();
            currentPositionHistoryCtrl = null;

            var newHistoryCtrl = positionHistoryCtrlFactory.CreateExport().Value;
            this.currentPositionHistoryCtrl = newHistoryCtrl;

            newHistoryCtrl.SubAccount = currentSubAccount;
            newHistoryCtrl.PageGoBackHandler = _ctrl =>
            {
                navigationContainerView.GoBackIfPossible();
                currentPositionHistoryCtrl?.Shutdown();
                currentPositionHistoryCtrl = null;
            };
            newHistoryCtrl.Initialize();
            newHistoryCtrl.Run();

            navigationContainerView.Navigate(newHistoryCtrl.PageView as Page);
        }

        private bool CanRefreshPageData()
        {
            return !isRefreshingData;
        }

        private void RefreshPageData()
        {
            manageSubAccountItemsCtrl.RefreshSubAccountItemsIfNeed();
            RefreshCurrentSubAccountPositionData();
        }

        private void UpdateIsRefreshingData(bool isRefreshing)
        {
            this.isRefreshingData = isRefreshing;
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                refreshDataCmd?.RaiseCanExecuteChanged();
            });
        }

        private async void RefreshCurrentSubAccountPositionData()
        {
            var subAccountId = contentViewModel.SelectedSubAccountItem?.SubAccountId;
            if (subAccountId == null) return;

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            UpdateIsRefreshingData(true);
            var queryOption = new ReqHostingSledContractPositionOption { SubAccountId = subAccountId.Value };
            var resp = await XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getHostingSledContractPositionAsync(landingInfo, queryOption, CancellationToken.None);
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                UpdateIsRefreshingData(false);
                var queriedPositionList = resp?.CorrectResult?.Page;
                if (resp == null || resp?.SourceException != null)
                {
                    // error handle
                }

                contentViewModel.RefreshTimestamp = (long)DateHelper.NowUnixTimeSpan().TotalSeconds;
                contentViewModel.PositionItems.Clear();
                contentViewModel.PositionItems.AddRange(queriedPositionList?.Select(i => GeneratePositionDataModel(i)).ToArray());
            });
        }
        
        private PositionManageDM GeneratePositionDataModel(HostingSledContractPosition srcPosition)
        {
            if (srcPosition == null) return null;
            var positionDM = new DiscretePositionDM((int)srcPosition.SledContractId);

            DiscretePosition_ModelHelper.UpdateDiscretePositionDM(positionDM, srcPosition);
            XueQiaoFoundationHelper.SetupTargetContract_ContractDetail(positionDM.ContractDetailContainer,
                contractItemTreeQueryCtrl,
                XqContractNameFormatType.CommodityAcronym_Code_ContractCode,
                _container =>
                {
                    DiscretePosition_ModelHelper.RectifyPositionPriceRelatedProps(positionDM);
                });

            return new PositionManageDM(positionDM, toShowPositionDetailCmd);
        }
    }
}
