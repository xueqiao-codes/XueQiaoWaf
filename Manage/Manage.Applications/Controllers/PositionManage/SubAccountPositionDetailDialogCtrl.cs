using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation.Interface;
using Manage.Applications.ViewModels;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Waf.Applications;
using System.Windows;
using xueqiao.trade.hosting;
using xueqiao.trade.hosting.asset.thriftapi;
using xueqiao.trade.hosting.proxy;
using XueQiaoFoundation.BusinessResources.DataModels;
using XueQiaoFoundation.BusinessResources.Models;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Interfaces.Helper;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Helper.WeakDelegate;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.ListPager;
using XueQiaoFoundation.UI.Components.ListPager.ViewModels;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications.Controllers
{
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class SubAccountPositionDetailDialogCtrl : IController
    {   
        private const int ListRequestPageSize = 50;

        private readonly IEventAggregator eventAggregator;
        private readonly ILoginDataService loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly IMessageWindowService messageWindowService;
        private readonly IHostingUserQueryController hostingUserQueryController;
        private readonly IHostingUserCacheController hostingUserCacheController;
        private readonly IContractItemTreeQueryController contractItemTreeQueryCtrl;
        private readonly SubAccountPositionDetailVM contentViewModel;
        private readonly SimplePagerViewModel pagerViewModel;

        private readonly DelegateCommand toRefreshListCmd;
        private readonly DelegateCommand goJumpPageCmd;

        private IMessageWindow detailDialog;

        [ImportingConstructor]
        public SubAccountPositionDetailDialogCtrl(
            IEventAggregator eventAggregator,
            ILoginDataService loginDataService,
            Lazy<ILoginUserManageService> loginUserManageService,
            IMessageWindowService messageWindowService,
            IHostingUserQueryController hostingUserQueryController,
            IHostingUserCacheController hostingUserCacheController,
            IContractItemTreeQueryController contractItemTreeQueryCtrl,
            SubAccountPositionDetailVM contentViewModel,
            SimplePagerViewModel pagerViewModel)
        {
            this.eventAggregator = eventAggregator;
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.messageWindowService = messageWindowService;
            this.hostingUserQueryController = hostingUserQueryController;
            this.hostingUserCacheController = hostingUserCacheController;
            this.contractItemTreeQueryCtrl = contractItemTreeQueryCtrl;
            this.contentViewModel = contentViewModel;
            this.pagerViewModel = pagerViewModel;

            toRefreshListCmd = new DelegateCommand(ToRefreshList);
            goJumpPageCmd = new DelegateCommand(GoJumpPage);

            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
        }

        public HostingSubAccount SubAccount { get; set; }
        public int ContractId { get; set; }
        public long? HistorySettlementId { get; set; }

        // 是否查询历史持仓详情
        public bool IsQueryHistoryPositionDetail { get; set; }

        public object DialogOwner { get; set; }

        public void Initialize()
        {
            if (SubAccount == null) throw new ArgumentNullException("SubAccount");
            if (IsQueryHistoryPositionDetail)
            {
                if (HistorySettlementId == null) throw new ArgumentException("HistorySettlementId can't be null when IsQueryHistoryPositionDetail is true.");
            }

            contentViewModel.SubAccount = this.SubAccount;
            contentViewModel.ContractDetailContainer = new TargetContract_TargetContractDetail(this.ContractId);
            XueQiaoFoundationHelper.SetupTargetContract_ContractDetail(contentViewModel.ContractDetailContainer, 
                contractItemTreeQueryCtrl, XqContractNameFormatType.CommodityAcronym_Code_ContractCode);

            contentViewModel.ToRefreshListCmd = toRefreshListCmd;

            contentViewModel.PagerContentView = pagerViewModel.View;
            pagerViewModel.GoJumpPageCmd = goJumpPageCmd;
        }

        public void Run()
        {
            RefreshFirstPageDetails();

            var dialogTitle = "持仓详情";
            if (IsQueryHistoryPositionDetail) dialogTitle = "历史持仓详情";

            detailDialog = messageWindowService.CreateContentCustomWindow(DialogOwner, null, new Size(800, 500), true, true,
                true, dialogTitle, contentViewModel.View);
            detailDialog.ShowDialog();
        }

        public void Shutdown()
        {
            if (detailDialog != null)
            {
                detailDialog.Close();
                detailDialog = null;
            }

            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
        }

        private void ToRefreshList()
        {
            RefreshFirstPageDetails();
        }

        private void GoJumpPage(object obj)
        {
            var pagingCtrl = pagerViewModel.PagingController as PagingController;
            if (pagingCtrl == null) return;
            try
            {
                var page = System.Convert.ToInt32(obj);
                if (page < 0 || page > pagingCtrl.PageCount)
                {
                    return;
                }
                pagingCtrl.CurrentPage = page;
            }
            catch (Exception)
            {

            }
        }

        private void PagingControllerPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            var pagingCtrl = sender as PagingController;
            if (pagingCtrl == null) return;
            if (e.PropertyName == nameof(PagingController.CurrentPage))
            {
                var reqPage = pagingCtrl.CurrentPage - 1;
                if (reqPage < 0) reqPage = 0;
                if (reqPage >= pagingCtrl.PageCount) return;

                LoadPositionDetails(reqPage, ListRequestPageSize)
                    .ContinueWith(t => 
                    {
                        var resp = t.Result;
                        var respCorrentResult = resp?.CorrectResult;
                        DispatcherHelper.CheckBeginInvokeOnUI(() =>
                        {
                            if (resp == null || resp.SourceException != null || respCorrentResult == null)
                            {
                                // error handle
                                return;
                            }

                            // 更新列表数据
                            contentViewModel.PositionTradeDetails.Clear();
                            var detailDMs = respCorrentResult.Page?.Select(i => GenereteTradeDetailDM(i)).ToArray();
                            contentViewModel.PositionTradeDetails.AddRange(detailDMs);
                        });
                    });
            }
        }

        private void RefreshFirstPageDetails()
        {
            LoadPositionDetails(0, ListRequestPageSize)
                .ContinueWith(t=> 
                {
                    var resp = t.Result;
                    var respCorrentResult = resp?.CorrectResult;
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        if (resp == null || resp.SourceException != null || respCorrentResult == null)
                        {
                            // error handle
                            return;
                        }

                        // 更新翻页控制器
                        var oldPagingController = pagerViewModel.PagingController;
                        if (oldPagingController != null)
                        {
                            PropertyChangedEventManager.RemoveHandler(oldPagingController, PagingControllerPropertyChanged, "");
                        }
                        pagerViewModel.PagingController = new PagingController(respCorrentResult.Total, ListRequestPageSize);
                        PropertyChangedEventManager.AddHandler(pagerViewModel.PagingController, PagingControllerPropertyChanged, "");

                        // 更新列表数据
                        contentViewModel.PositionTradeDetails.Clear();
                        var detailDMs = respCorrentResult.Page?.Select(i => GenereteTradeDetailDM(i)).ToArray();
                        contentViewModel.PositionTradeDetails.AddRange(detailDMs);
                    });
                });
        }

        private async Task<IInterfaceInteractResponse<AssetTradeDetailPage>> LoadPositionDetails(int pageIndex, int pageSize)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;

            if (IsQueryHistoryPositionDetail)
            {
                var option = new ReqSettlementPositionTradeDetailOption
                {
                    SettlementId = this.HistorySettlementId.Value,
                    SledContractId = this.ContractId
                };
                var pageOption = new IndexedPageOption
                {
                    NeedTotalCount = true,
                    PageIndex = pageIndex,
                    PageSize = pageSize,
                };

                return await XqThriftLibConfigurationManager.SharedInstance
                    .TradeHostingTerminalAoHttpStub
                    .getSubAccountPositionHistoryTradeDetailAsync(landingInfo, option, pageOption, CancellationToken.None);
            }
            else
            {
                var option = new ReqHostingAssetTradeDetailOption
                {
                    SubAccountId = this.SubAccount.SubAccountId,
                    SledContractId = this.ContractId
                };
                var pageOption = new IndexedPageOption
                {
                    NeedTotalCount = true,
                    PageIndex = pageIndex,
                    PageSize = pageSize,
                };

                return await XqThriftLibConfigurationManager.SharedInstance
                    .TradeHostingTerminalAoHttpStub
                    .getAssetPositionTradeDetailAsync(landingInfo, option, pageOption, CancellationToken.None);
            }
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            Shutdown();
        }

        private AssetTradeDetailDM GenereteTradeDetailDM(AssetTradeDetail srcDetail)
        {
            if (srcDetail == null) return null;
            var subUserId = srcDetail.SubUserId;
            var destDetail = new AssetTradeDetailDM(srcDetail, srcDetail.SubUserId);

            // 设置用户名
            if (srcDetail.__isset.subUserId)
            {
                var cacheHostingUser = hostingUserCacheController.GetCache(subUserId);
                if (cacheHostingUser != null)
                {
                    destDetail.SubUserName = cacheHostingUser.LoginName;
                }
                else
                {
                    var queryHandler = new Action<IInterfaceInteractResponse<HostingUser>>(resp =>
                    {
                        var queriedUser = resp?.CorrectResult;
                        if (queriedUser == null) return;
                        destDetail.SubUserName = queriedUser.LoginName;
                    });
                    var handlerReference = new ActionDelegateReference<IInterfaceInteractResponse<HostingUser>>(queryHandler,
                        true);
                    hostingUserQueryController.QueryUser(subUserId, handlerReference);
                }
            }

            return destDetail;
        }
    }
}
