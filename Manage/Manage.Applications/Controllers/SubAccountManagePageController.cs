using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation.Interface;
using Manage.Applications.DataModels;
using Manage.Applications.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Waf.Applications;
using xueqiao.trade.hosting;
using xueqiao.trade.hosting.terminal.ao;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.ListPager;
using XueQiaoFoundation.UI.Components.ListPager.ViewModels;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications.Controllers
{
    /// <summary>
    /// 操作账户管理页面控制器
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class SubAccountManagePageController : IController
    {
        private const int ListRequestPageSize = 50;

        private readonly ILoginDataService loginDataService;
        private readonly SimplePagerViewModel pagerViewModel;
        private readonly ExportFactory<SubAccountAddWizardDialogController> subAccountAddWizardDialogCtrlFactory;
        private readonly ExportFactory<SubAccountAuthToSubUsersDialogController> authToSubUsersDialogCtrlFactory;
        private readonly ExportFactory<SubAccountInOutFundDialogController> inOutFundDialogCtrlFactory;
        private readonly ExportFactory<SubAccountRenamePopupCtrl> renamePopupCtrlFactory;

        private readonly DelegateCommand toRefreshListCmd;
        private readonly DelegateCommand toAddSubAccountCmd;
        private readonly DelegateCommand toAuthToSubUserCmd;
        private readonly DelegateCommand toShowInOutFundHistoryCmd;
        private readonly DelegateCommand toInFundCmd;
        private readonly DelegateCommand toOutFundCmd;
        private readonly DelegateCommand toSetOrderRouteCmd;
        private readonly DelegateCommand triggerRenameCmd;
        private readonly DelegateCommand goJumpPageCmd;

        [ImportingConstructor]
        public SubAccountManagePageController(ILoginDataService loginDataService,
            SubAccountManagePageModel pageViewModel,
            SimplePagerViewModel pagerViewModel,
            ExportFactory<SubAccountAddWizardDialogController> subAccountAddWizardDialogCtrlFactory,
            ExportFactory<SubAccountAuthToSubUsersDialogController> authToSubUsersDialogCtrlFactory,
            ExportFactory<SubAccountInOutFundDialogController> inOutFundDialogCtrlFactory,
            ExportFactory<SubAccountRenamePopupCtrl> renamePopupCtrlFactory)
        {
            this.loginDataService = loginDataService;
            this.PageViewModel = pageViewModel;
            this.pagerViewModel = pagerViewModel;
            this.subAccountAddWizardDialogCtrlFactory = subAccountAddWizardDialogCtrlFactory;
            this.authToSubUsersDialogCtrlFactory = authToSubUsersDialogCtrlFactory;
            this.inOutFundDialogCtrlFactory = inOutFundDialogCtrlFactory;
            this.renamePopupCtrlFactory = renamePopupCtrlFactory;

            toRefreshListCmd = new DelegateCommand(ToRefreshList);
            toAddSubAccountCmd = new DelegateCommand(ToAddSubAccount);
            toAuthToSubUserCmd = new DelegateCommand(ToAuthToSubUser);
            toShowInOutFundHistoryCmd = new DelegateCommand(ToShowInOutFundHistory);
            toInFundCmd = new DelegateCommand(ToInFund);
            toOutFundCmd = new DelegateCommand(ToOutFund);
            toSetOrderRouteCmd = new DelegateCommand(ToSetOrderRoute);
            triggerRenameCmd = new DelegateCommand(TriggerRename);
            goJumpPageCmd = new DelegateCommand(GoJumpPage);
        }

        /// <summary>
        /// 显示某个操作账户的订单路由页面
        /// </summary>
        public Action<HostingSubAccount> ToShowOrderRoutePageHandler { get; set; }

        /// <summary>
        /// 显示某个操作账户的出入金历史页面
        /// </summary>
        public Action<HostingSubAccount> ToShowInOutFundHistoryPageHandler { get; set; }

        /// <summary>
        /// 页面 View model
        /// </summary>
        public SubAccountManagePageModel PageViewModel { get; private set; }

        /// <summary>
        /// 页面标题
        /// </summary>
        public string PageTitle { get; private set; }

        public void Initialize()
        {
            PageViewModel.ToRefreshListCmd = toRefreshListCmd;
            PageViewModel.ToAddSubAccountCmd = toAddSubAccountCmd;
            PageViewModel.ToAuthToSubUserCmd = toAuthToSubUserCmd;
            PageViewModel.ToShowInOutFundHistoryCmd = toShowInOutFundHistoryCmd;
            PageViewModel.ToInFundCmd = toInFundCmd;
            PageViewModel.ToOutFundCmd = toOutFundCmd;
            PageViewModel.ToSetOrderRouteCmd = toSetOrderRouteCmd;
            PageViewModel.TriggerRenameCmd = triggerRenameCmd;

            PageViewModel.PagerContentView = pagerViewModel.View;
            pagerViewModel.GoJumpPageCmd = goJumpPageCmd;
        }

        public void Run()
        {
            RefreshFirstPageSubAccounts();
        }

        public void Shutdown()
        {
            ToShowOrderRoutePageHandler = null;
            ToShowInOutFundHistoryPageHandler = null;
        }

        private void ToRefreshList()
        {
            RefreshFirstPageSubAccounts();
        }

        private void ToAddSubAccount()
        {
            var addWizardDialogCtrl = subAccountAddWizardDialogCtrlFactory.CreateExport().Value;
            addWizardDialogCtrl.DialogOwner = PageViewModel.DisplayInWindow;
            addWizardDialogCtrl.Initialize();
            addWizardDialogCtrl.Run();
            addWizardDialogCtrl.Shutdown();

            var createdSubAccountId = addWizardDialogCtrl.CreatedSubAccountId;
            if (createdSubAccountId != null)
            {
                RefreshFirstPageSubAccounts();
            }
        }

        private void ToAuthToSubUser(object obj)
        {
            if (obj is SubAccountDataModel subAccDataModel)
            {
                var dialogCtrl = authToSubUsersDialogCtrlFactory.CreateExport().Value;
                dialogCtrl.DialogOwner = PageViewModel.DisplayInWindow;
                dialogCtrl.ToConfigureSubAccountId = subAccDataModel.SubAccountId;

                dialogCtrl.Initialize();
                dialogCtrl.Run();
                dialogCtrl.Shutdown();

                if (dialogCtrl.ConfiguredResult == true)
                {
                    var subAccountId = subAccDataModel.SubAccountId;
                    LoadSubAccounts(0, 1, subAccountId, resp =>
                    {
                        DispatcherHelper.CheckBeginInvokeOnUI(() => 
                        {
                            var queriedTargetItem = resp?.CorrectResult?.ResultList?.FirstOrDefault(i => i.SubAccount?.SubAccountId == subAccountId);
                            if (queriedTargetItem == null) return;

                            subAccDataModel.AccountMeta = queriedTargetItem.SubAccount;
                            subAccDataModel.AuthedToSubUsers.Clear();
                            subAccDataModel.AuthedToSubUsers.AddRange(queriedTargetItem.RelatedItemList);
                        });
                    });
                }
            }
        }

        private void ToShowInOutFundHistory(object obj)
        {
            if (obj is SubAccountDataModel subAccItem
                && subAccItem.AccountMeta is HostingSubAccount tarAccMeta)
            {
                ToShowInOutFundHistoryPageHandler?.Invoke(tarAccMeta);
            }
        }

        private void ToInFund(object obj)
        {
            if (obj is SubAccountDataModel subAccItem)
            {
                var inFundDialogCtrl = inOutFundDialogCtrlFactory.CreateExport().Value;
                inFundDialogCtrl.DialogOwner = PageViewModel.DisplayInWindow;
                inFundDialogCtrl.ToOptSubAccountId = subAccItem.SubAccountId;
                inFundDialogCtrl.IsInFund = true;

                inFundDialogCtrl.Initialize();
                inFundDialogCtrl.Run();
                inFundDialogCtrl.Shutdown();

                if (inFundDialogCtrl.InOutFundResult == true)
                {
                    // do nothing
                }
            }
        }

        private void ToOutFund(object obj)
        {
            if (obj is SubAccountDataModel subAccItem)
            {
                var outFundDialogCtrl = inOutFundDialogCtrlFactory.CreateExport().Value;
                outFundDialogCtrl.DialogOwner = PageViewModel.DisplayInWindow;
                outFundDialogCtrl.ToOptSubAccountId = subAccItem.SubAccountId;
                outFundDialogCtrl.IsInFund = false;

                outFundDialogCtrl.Initialize();
                outFundDialogCtrl.Run();
                outFundDialogCtrl.Shutdown();

                if (outFundDialogCtrl.InOutFundResult == true)
                {
                    // do nothing
                }
            }
        }

        private void ToSetOrderRoute(object obj)
        {
            if (obj is SubAccountDataModel subAccItem
                && subAccItem.AccountMeta is HostingSubAccount tarAccMeta)
            {
                ToShowOrderRoutePageHandler?.Invoke(tarAccMeta);
            }
        }

        private void TriggerRename(object param)
        {
            var cmdArgs = param as object[];
            if (cmdArgs?.Length != 2) return;
            var subAccDataModel = cmdArgs[0] as SubAccountDataModel;
            var triggerElement = cmdArgs[1];

            if (subAccDataModel == null) return;

            var popupCtrl = renamePopupCtrlFactory.CreateExport().Value;
            popupCtrl.SubAccountId = subAccDataModel.SubAccountId;
            popupCtrl.OriginName = subAccDataModel.AccountMeta?.SubAccountName;
            popupCtrl.PlacementTarget = triggerElement;
            popupCtrl.PopupCloseHandler = (_ctrl, success) => 
            {
                if (success == true)
                {
                    _ctrl.Shutdown();

                    var subAccountId = _ctrl.SubAccountId;
                    LoadSubAccounts(0, 1, subAccountId, resp =>
                    {
                        DispatcherHelper.CheckBeginInvokeOnUI(() =>
                        {
                            var queriedTargetItem = resp?.CorrectResult?.ResultList?.FirstOrDefault(i => i.SubAccount?.SubAccountId == subAccountId);
                            if (queriedTargetItem == null) return;

                            subAccDataModel.AccountMeta = queriedTargetItem.SubAccount;
                            subAccDataModel.AuthedToSubUsers.Clear();
                            subAccDataModel.AuthedToSubUsers.AddRange(queriedTargetItem.RelatedItemList);
                        });
                    });
                }
            };

            popupCtrl.Initialize();
            popupCtrl.Run();
        }

        private void GoJumpPage(object obj)
        {
            var pagingCtrl = pagerViewModel.PagingController as PagingController;
            if (pagingCtrl == null) return;
            try
            {
                var page = System.Convert.ToInt32(obj);
                if (page < 0 || page > pagingCtrl.PageCount)
                {
                    return;
                }
                pagingCtrl.CurrentPage = page;
            }
            catch (Exception)
            {

            }
        }

        private void PagingControllerPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            var pagingCtrl = sender as PagingController;
            if (pagingCtrl == null) return;
            if (e.PropertyName == nameof(PagingController.CurrentPage))
            {
                var reqPage = pagingCtrl.CurrentPage - 1;
                if (reqPage < 0) reqPage = 0;
                if (reqPage >= pagingCtrl.PageCount) return;

                LoadSubAccounts(reqPage, ListRequestPageSize, null, resp =>
                {
                    var respCorrentResult = resp?.CorrectResult;
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        if (resp == null || resp.SourceException != null || respCorrentResult == null)
                        {
                            // error handle
                            return;
                        }

                        var newModelList = new List<SubAccountDataModel>();
                        if (respCorrentResult?.ResultList != null)
                        {
                            foreach (var l in respCorrentResult?.ResultList)
                            {
                                var m = new SubAccountDataModel(l.SubAccount?.SubAccountId ?? 0)
                                {
                                    AccountMeta = l.SubAccount
                                };
                                m.AuthedToSubUsers.Clear();
                                m.AuthedToSubUsers.AddRange(l.RelatedItemList);
                                newModelList.Add(m);
                            }
                        }

                        // 更新列表数据
                        PageViewModel.SubAccountItems.Clear();
                        PageViewModel.SubAccountItems.AddRange(newModelList);
                    });
                });
            }
        }

        private void RefreshFirstPageSubAccounts()
        {
            LoadSubAccounts(0, ListRequestPageSize, null, resp => 
            {
                var respCorrentResult = resp?.CorrectResult;
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    if (resp == null || resp.SourceException != null || respCorrentResult == null)
                    {
                        // error handle
                        return;
                    }

                    var newModelList = new List<SubAccountDataModel>();
                    if (respCorrentResult?.ResultList != null)
                    {
                        foreach (var l in respCorrentResult?.ResultList)
                        {
                            var m = new SubAccountDataModel(l.SubAccount?.SubAccountId ?? 0)
                            {
                                AccountMeta = l.SubAccount
                            };
                            m.AuthedToSubUsers.Clear();
                            m.AuthedToSubUsers.AddRange(l.RelatedItemList);
                            newModelList.Add(m);
                        }
                    }

                    // 更新翻页控制器
                    var oldPagingController = pagerViewModel.PagingController;
                    if (oldPagingController != null)
                    {
                        PropertyChangedEventManager.RemoveHandler(oldPagingController, PagingControllerPropertyChanged, "");
                    }
                    pagerViewModel.PagingController = new PagingController(respCorrentResult.TotalCount, ListRequestPageSize);
                    PropertyChangedEventManager.AddHandler(pagerViewModel.PagingController, PagingControllerPropertyChanged, "");

                    // 更新列表数据
                    PageViewModel.SubAccountItems.Clear();
                    PageViewModel.SubAccountItems.AddRange(newModelList);
                });
            });
        }

        private void LoadSubAccounts(int pageIndex, int pageSize, long? subAccountId,
            Action<IInterfaceInteractResponse<HostingSAWRUItemListPage>> handler)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null)
            {
                handler?.Invoke(null);
                return;
            }

            var option = new QueryHostingSAWRUItemListOption();
            if (subAccountId != null)
            {
                option.SubAccountId = subAccountId.Value;
            }

            var pageOption = new IndexedPageOption
            {
                NeedTotalCount = true,
                PageIndex = pageIndex,
                PageSize = pageSize,
            };
            
            var task = XqThriftLibConfigurationManager.SharedInstance
                .TradeHostingTerminalAoHttpStub
                .getSAWRUTListPageAsync(landingInfo, option, pageOption, CancellationToken.None);
            task.ContinueWith(t =>
            {
                handler?.Invoke(t.Result);
            });
        }
    }
}
