using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation;
using lib.xqclient_base.thriftapi_mediation.Interface;
using Manage.Applications.DataModels;
using Manage.Applications.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using xueqiao.trade.hosting;
using xueqiao.trade.hosting.asset.thriftapi;
using xueqiao.trade.hosting.terminal.ao;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications.Controllers
{
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class SubAccountEquityDailyHistoryController : IController
    {
        private readonly SubAccountEquityDailyHistoryViewModel contentViewModel;
        private readonly ILoginDataService loginDataService;

        private readonly DelegateCommand pageGoBackCmd;
        private readonly DelegateCommand dataRefreshCmd;

        private bool isDataRefreshing;

        [ImportingConstructor]
        public SubAccountEquityDailyHistoryController(SubAccountEquityDailyHistoryViewModel contentViewModel,
            ExportFactory<FundAccountEquityDetailDialogController> equityDetailDialogCtrlFactory,
            ILoginDataService loginDataService)
        {
            this.contentViewModel = contentViewModel;
            this.loginDataService = loginDataService;

            pageGoBackCmd = new DelegateCommand(() => this.PageGoBackHandler?.Invoke(this));
            dataRefreshCmd = new DelegateCommand(RefreshPageData, CanRefreshPageData);
        }

        public HostingSubAccount SubAccount { get; set; }

        /// <summary>
        /// 页面后退处理
        /// </summary>
        public Action<SubAccountEquityDailyHistoryController> PageGoBackHandler { get; set; }

        public object PageView => contentViewModel.View;

        public void Initialize()
        {
            if (SubAccount == null) throw new ArgumentNullException("SubAccount");
            contentViewModel.SubAccount = SubAccount;
            contentViewModel.PageGoBackCmd = pageGoBackCmd;
            contentViewModel.DataRefreshCmd = dataRefreshCmd;
        }

        public void Run()
        {
            contentViewModel.SelectedDate = DateTime.Now.Date;
            RefreshPageDataIfNeed();
            PropertyChangedEventManager.AddHandler(contentViewModel, ContentViewModelPropertyChanged, "");
        }

        public void Shutdown()
        {
            PropertyChangedEventManager.RemoveHandler(contentViewModel, ContentViewModelPropertyChanged, "");
            PageGoBackHandler = null;
        }

        private void ContentViewModelPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(FundAccountEquityDailyHistoryViewModel.SelectedDate))
            {
                dataRefreshCmd.RaiseCanExecuteChanged();
                RefreshPageDataIfNeed();
            }
        }
        
        private bool CanRefreshPageData()
        {
            return isDataRefreshing == false && contentViewModel.SelectedDate != null;
        }

        private void RefreshPageData()
        {
            RefreshPageDataIfNeed();
        }

        private void UpdateIsDataRefreshing(bool isRefreshing)
        {
            this.isDataRefreshing = isRefreshing;
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                dataRefreshCmd.RaiseCanExecuteChanged();
            });
        }
        
        private void RefreshPageDataIfNeed()
        {
            if (isDataRefreshing) return;

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            var selectedDate = contentViewModel.SelectedDate;
            if (selectedDate == null) return;
            selectedDate = DateHelper.SpecifiedWithKindIfNeed(selectedDate.Value, DateTimeKind.Local);

            var subAccountId = SubAccount.SubAccountId;

            UpdateIsDataRefreshing(true);
            Task.Run(() => 
            {
                var taskFactory = new TaskFactory();
                var tasks = new List<Task>();

                // query base currency equity
                IInterfaceInteractResponse<IEnumerable<HostingFund>> baseCurrencyEquityResp = null;
                var task1 = taskFactory.StartNew(() => 
                {
                    baseCurrencyEquityResp = QuerySubAccountDailyHistoryEquities(landingInfo, subAccountId, selectedDate.Value, true);
                });
                tasks.Add(task1);

                // query children currency equity
                IInterfaceInteractResponse<IEnumerable<HostingFund>> childrenCurrencyEquityResp = null;
                var task2 = taskFactory.StartNew(() => 
                {
                    childrenCurrencyEquityResp = QuerySubAccountDailyHistoryEquities(landingInfo, subAccountId, selectedDate.Value, false);
                });
                tasks.Add(task2);

                Task.WaitAll(tasks.ToArray());

                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    UpdateIsDataRefreshing(false);

                    if (baseCurrencyEquityResp == null || baseCurrencyEquityResp?.SourceException != null)
                    {
                        // error handle
                    }
                    else if (childrenCurrencyEquityResp == null || childrenCurrencyEquityResp?.SourceException != null)
                    {
                        // error handle
                    }

                    contentViewModel.TotalEquityItems.Clear();
                    contentViewModel.TotalEquityItems.AddRange(baseCurrencyEquityResp?.CorrectResult?.Select(i => new SubAccountEquityModel(i)).ToArray());
                    contentViewModel.CurrencyGroupedEquityItems.Clear();
                    contentViewModel.CurrencyGroupedEquityItems.AddRange(childrenCurrencyEquityResp?.CorrectResult?.Select(i => new SubAccountEquityModel(i)).ToArray());
                    contentViewModel.EquityUpdateTimestampMs = baseCurrencyEquityResp?.CorrectResult?.FirstOrDefault(i => i.__isset.createTimestampMs)?.CreateTimestampMs;
                });
            });
        }

        private IInterfaceInteractResponse<IEnumerable<HostingFund>> QuerySubAccountDailyHistoryEquities(LandingInfo landingInfo,
            long subAccountId, DateTime date, bool queryBaseCurrency)
        {
            if (landingInfo == null) return null;

            var queryPageSize = 50;
            DateHelper.GetDateStartAndEndTimestampMs(date, DateTimeKind.Local,
                out long dayStartTimestampMs, out long dayEndTimestampMs);

            IInterfaceInteractResponse<HostingFundPage> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<HostingFund>(pageIndex => {

                var option = new ReqSubAccountFundHistoryOption
                {
                    SubAccountId = subAccountId,
                    StartTimestampMs = dayStartTimestampMs,
                    EndTimestampMs = dayEndTimestampMs,
                    BaseCurrency = queryBaseCurrency
                };
                var pageOption = new IndexedPageOption
                {
                    NeedTotalCount = true,
                    PageIndex = pageIndex,
                    PageSize = queryPageSize
                };

                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getSubAccountFundHistory(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<HostingFund>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.Total,
                    Page = pageInfo?.Page?.ToArray()
                };
                return pageResult;
            });

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<HostingFund>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems?.ToArray())
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };
            return tarResp;
        }
    }
}
