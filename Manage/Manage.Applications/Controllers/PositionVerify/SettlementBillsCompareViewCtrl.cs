using Manage.Applications.DataModels;
using Manage.Applications.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using System.Windows;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using IDLAutoGenerated.Util;
using System.Threading;
using xueqiao.trade.hosting.terminal.ao;
using lib.xqclient_base.thriftapi_mediation.Interface;
using business_foundation_lib.xq_thriftlib_config;

namespace Manage.Applications.Controllers
{
    /// <summary>
    /// 上手交易结算单比对视图 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class SettlementBillsCompareViewCtrl : IController
    {
        private readonly ILoginDataService loginDataService;
        private readonly ExportFactory<SettlementBillsCompareViewModel> settlementBillsCompareVMFactory;
        private readonly DelegateCommand openBillsCompareViewInAnotherWindowCmd;

        private readonly SettlementBillsCompareViewModel innerSettlementBillsCompareVM;
        private SettlementBillsCompareViewModel outerWindowSettlementBillsCompareVM;
        private Window outerWindow;

        private IInterfaceInteractResponse currentSettlementInfoStatus;
        private bool isRefreshing;

        [ImportingConstructor]
        public SettlementBillsCompareViewCtrl(
            ILoginDataService loginDataService,
            ExportFactory<SettlementBillsCompareViewModel> settlementBillsCompareVMFactory)
        {
            this.loginDataService = loginDataService;
            this.settlementBillsCompareVMFactory = settlementBillsCompareVMFactory;
            this.innerSettlementBillsCompareVM = settlementBillsCompareVMFactory.CreateExport().Value;

            openBillsCompareViewInAnotherWindowCmd = new DelegateCommand(OpenBillsCompareViewInAnotherWindow);
        }

        public long TradeAccountId { get; set; }

        public SettlementCompareItem SettlementCompareItem { get; set; }

        /// <summary>
        /// 结算单内容已查询的回调方法
        /// </summary>
        public Action<SettlementBillsCompareViewCtrl, TradeAccountSettlementInfoWithRelatedTime> SettlementContentQueried { get; set; }

        public object ContentView => innerSettlementBillsCompareVM.View;

        public void Initialize()
        {
            if (SettlementCompareItem == null) throw new ArgumentNullException("SettlementCompareItem");

            innerSettlementBillsCompareVM.SettlementCompareItem = this.SettlementCompareItem;
            innerSettlementBillsCompareVM.ShowOpenInAnotherWindowButton = true;
            innerSettlementBillsCompareVM.ToOpenInAnotherWindowCmd = openBillsCompareViewInAnotherWindowCmd;

            PropertyChangedEventManager.AddHandler(SettlementCompareItem, SettlementCompareItemPropChanged, "");
        }

        public void Run()
        {
            RefreshViewDataIfNeed();
        }

        public void Shutdown()
        {
            PropertyChangedEventManager.AddHandler(SettlementCompareItem, SettlementCompareItemPropChanged, "");
            SettlementContentQueried = null;

            try
            {
                if (outerWindow != null)
                {
                    outerWindow.Close();
                    outerWindow.Closed -= OuterWindow_Closed;
                    outerWindow = null;
                }
            }
            catch (Exception) { }
        }

        public void RefreshViewDataIfNeed()
        {
            if (currentSettlementInfoStatus == null || currentSettlementInfoStatus.SourceException != null)
            {
                RefreshSettlementInfo();
            }
        }

        public void RefreshViewDataForce()
        {
            RefreshSettlementInfo();
        }

        private void SettlementCompareItemPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(SettlementCompareItem.SelectedSettlementDate))
            {
                RefreshSettlementInfo();
            }
        }
        
        private void ConstructOuterWindowIfNeed()
        {
            if (outerWindow == null)
            {
                var srcWin = UIHelper.GetWindowOfUIElement(innerSettlementBillsCompareVM.View) as Window;
                if (srcWin != null)
                {
                    var tarWin = new Window
                    {
                        Top = srcWin.Top + 40,
                        Left = srcWin.Left + 40,
                        Width = srcWin.Width * 0.7,
                        Height = srcWin.Height * 0.7,
                        Title = "交易结算单"
                    };
                    tarWin.Closed += OuterWindow_Closed;
                    this.outerWindow = tarWin;
                }                
            }
        }

        private void OuterWindow_Closed(object sender, EventArgs e)
        {
            if (outerWindow != null)
            {
                outerWindow.Closed -= OuterWindow_Closed;
                outerWindow = null;
            }
        }

        private void OpenBillsCompareViewInAnotherWindow()
        {
            ConstructOuterWindowIfNeed();
            var outerWindow = this.outerWindow;
            if (outerWindow == null) return;

            if (this.outerWindowSettlementBillsCompareVM == null)
            {
                var vm = settlementBillsCompareVMFactory.CreateExport().Value;
                vm.SettlementCompareItem = this.SettlementCompareItem;
                vm.ShowOpenInAnotherWindowButton = false;

                this.outerWindowSettlementBillsCompareVM = vm;
            }

            if (outerWindow.Content != outerWindowSettlementBillsCompareVM.View)
            {
                outerWindow.Content = outerWindowSettlementBillsCompareVM.View;
            }

            outerWindow.Show();
            outerWindow.Activate();
        }
        
        private void RefreshSettlementInfo()
        {
            if (isRefreshing) return;

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            var selectedDate = this.SettlementCompareItem.SelectedSettlementDate;
            if (selectedDate == null) return;

            isRefreshing = true;
            var dateFormated = selectedDate.Value.Date.ToString("yyyy-MM-dd");
            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                .getTradeAccountSettlementInfosWithRelatedTimeAsync(landingInfo, this.TradeAccountId, dateFormated, dateFormated, CancellationToken.None)
                .ContinueWith(t => 
                {
                    var resp = t.Result;
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        isRefreshing = false;
                        currentSettlementInfoStatus = resp;
                        var queriedResult = resp?.CorrectResult?.FirstOrDefault(i => i.TradeAccountSettlementInfo?.SettlementDate == dateFormated);
                        SettlementContentQueried?.Invoke(this, queriedResult);
                        InvalidateCompareView(queriedResult);
                    });
                });
        }
        
        private void InvalidateCompareView(TradeAccountSettlementInfoWithRelatedTime settlementInfo)
        {
            SettlementCompareItem.SettlementBillsContent = settlementInfo?.TradeAccountSettlementInfo?.SettlementContent??"";
        }
    }
}
