using business_foundation_lib.helper;
using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using Manage.Applications.DataModels;
using Manage.Applications.ServiceControllers;
using Manage.Applications.Services;
using Manage.Applications.ViewModels;
using NativeModel.Trade;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Waf.Applications;
using System.Windows;
using Thrift.Protocol;
using xueqiao.trade.hosting.position.adjust.assign.thriftapi;
using xueqiao.trade.hosting.position.adjust.thriftapi;
using XueQiaoFoundation.BusinessResources.Helpers;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications.Controllers
{
    /// <summary>
    /// 持仓每日核对的成交输入区域视图 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class PositionVerifyTradeInputAreaViewCtrl : IController
    {
        private readonly ExportFactory<PositionVerifyTradeInputAreaVM> contentVMFactory;
        private readonly IPositionVerifyTradeInputItemsCtrl inputItemsCtrl;
        private readonly PositionVerifyTradeInputItemsService inputItemsService;
        private readonly ILoginDataService loginDataService;
        private readonly IMessageWindowService messageWindowService;

        private readonly DelegateCommand openInAnotherWindowCmd;
        private readonly DelegateCommand newItemCmd;
        private readonly DelegateCommand submitAllCmd;
        private readonly DelegateCommand submitItemCmd;
        private readonly DelegateCommand removeItemCmd;

        private readonly PositionVerifyTradeInputAreaVM innerContentVM;
        private PositionVerifyTradeInputAreaVM outerWindowContentVM;
        private Window outerWindow;

        private bool isSubmiting;

        [ImportingConstructor]
        public PositionVerifyTradeInputAreaViewCtrl(
            ExportFactory<PositionVerifyTradeInputAreaVM> contentVMFactory,
            IPositionVerifyTradeInputItemsCtrl inputItemsCtrl,
            PositionVerifyTradeInputItemsService inputItemsService,
            ILoginDataService loginDataService,
            IMessageWindowService messageWindowService)
        {
            this.contentVMFactory = contentVMFactory;
            this.inputItemsCtrl = inputItemsCtrl;
            this.inputItemsService = inputItemsService;
            this.loginDataService = loginDataService;
            this.messageWindowService = messageWindowService;
            this.innerContentVM = contentVMFactory.CreateExport().Value;

            openInAnotherWindowCmd = new DelegateCommand(OpenInAnotherWindow);
            newItemCmd = new DelegateCommand(NewItem, CanNewItem);
            submitAllCmd = new DelegateCommand(SubmitAll, CanSubmitAll);
            submitItemCmd = new DelegateCommand(SubmitItem, CanSubmitItem);
            removeItemCmd = new DelegateCommand(RemoveItem, CanRemoveItem);
        }

        /// <summary>
        /// 某日持仓对比项
        /// </summary>
        public DailyPositionDifference DailyDiff { get; set; }

        public object ContentView => innerContentVM.View;
        
        public void Initialize()
        {
            if (DailyDiff == null) throw new ArgumentNullException("DailyDiff");

            CollectionChangedEventManager.AddHandler(inputItemsService.XqPreviewTradeItems, InputItemsChanged);
            
            innerContentVM.ShowOpenInAnotherWindowButton = true;
            innerContentVM.ToOpenInAnotherWindowCmd = openInAnotherWindowCmd;
            innerContentVM.NewItemCmd = newItemCmd;
            innerContentVM.SubmitAllCmd = submitAllCmd;
            innerContentVM.SubmitItemCmd = submitItemCmd;
            innerContentVM.RemoveItemCmd = removeItemCmd;
            innerContentVM.UpdateInputItemsFilter(DailyDiff.TradeAccountId, DailyDiff.DateSec, (int)DailyDiff.SledContractId);
        }

        public void Run()
        {

        }

        public void Shutdown()
        {
            CollectionChangedEventManager.RemoveHandler(inputItemsService.XqPreviewTradeItems, InputItemsChanged);
            try
            {
                if (outerWindow != null)
                {
                    outerWindow.Close();
                    outerWindow.Closed -= OuterWindow_Closed;
                    outerWindow = null;
                }
            }
            catch (Exception) { }
        }

        private void InputItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            submitAllCmd?.RaiseCanExecuteChanged();
        }

        private void UpdateIsSubmiting(bool isSubmiting)
        {
            this.isSubmiting = isSubmiting;
            DispatcherHelper.CheckBeginInvokeOnUI(() => 
            {
                submitAllCmd?.RaiseCanExecuteChanged();
                newItemCmd?.RaiseCanExecuteChanged();
                submitItemCmd?.RaiseCanExecuteChanged();
                removeItemCmd?.RaiseCanExecuteChanged();
            });
        }

        private void OpenInAnotherWindow()
        {
            ConstructOuterWindowIfNeed();
            var outerWindow = this.outerWindow;
            if (outerWindow == null) return;

            if (this.outerWindowContentVM == null)
            {
                var vm = contentVMFactory.CreateExport().Value;
                vm.ShowOpenInAnotherWindowButton = false;
                vm.ToOpenInAnotherWindowCmd = openInAnotherWindowCmd;
                vm.NewItemCmd = newItemCmd;
                vm.SubmitAllCmd = submitAllCmd;
                vm.SubmitItemCmd = submitItemCmd;
                vm.RemoveItemCmd = removeItemCmd;
                vm.UpdateInputItemsFilter(DailyDiff.TradeAccountId, DailyDiff.DateSec, (int)DailyDiff.SledContractId);

                this.outerWindowContentVM = vm;
            }

            if (outerWindow.Content != outerWindowContentVM.View)
            {
                outerWindow.Content = outerWindowContentVM.View;
            }

            outerWindow.Show();
            outerWindow.Activate();
        }

        private bool CanNewItem()
        {
            return !isSubmiting;
        }

        private void NewItem()
        {
            var key = UUIDHelper.CreateUUIDString(false);
            var newItem = inputItemsCtrl.AddOrUpdateItem(key, DailyDiff.TradeAccountId, DailyDiff.DateSec,
                _isExist => new XqPreviewInputTradeItemUpdateTemplate
                {
                    ContractId = (int)DailyDiff.SledContractId,
                    TradeTimestamp = DailyDiff.DateSec, // 设置成交时间默认为核对日期
                });
            submitAllCmd?.RaiseCanExecuteChanged();
        }

        private bool CanSubmitAll()
        {
            var collectionView = innerContentVM.InputItemsCollectionView;
            return !isSubmiting && collectionView != null && !collectionView.IsEmpty;
        }

        private void SubmitAll()
        {
            var items = innerContentVM.InputItemsCollectionView?.OfType<PositionVerifyTradeInputDM>().ToArray();
            SubmitInputItems(items, true);
        }
        
        private bool CanSubmitItem(object obj)
        {
            return !isSubmiting;
        }

        private void SubmitItem(object obj)
        {
            var item = obj as PositionVerifyTradeInputDM;
            if (item == null) return;
            SubmitInputItems(new PositionVerifyTradeInputDM[] { item }, false);
        }

        private bool CanRemoveItem(object obj)
        {
            return !isSubmiting;
        }

        private void RemoveItem(object obj)
        {
            var item = obj as PositionVerifyTradeInputDM;
            if (item == null) return;
            inputItemsCtrl.RemoveItem(item.Key);
            submitAllCmd?.RaiseCanExecuteChanged();
        }

        private void SubmitInputItems(IEnumerable<PositionVerifyTradeInputDM> inputItems, bool tipWhenSubmitSuccess)
        {
            if (inputItems?.Any() != true) return;
            var submitItems = new List<PositionManualInput>();

            // 过滤满足条件的
            var filteredItems = new List<PositionVerifyTradeInputDM>();
            foreach (var item in inputItems)
            {
                var price = item.Price;
                var quantity = item.Quantity;
                var direction = item.Direction;
                var tradeTS = item.TradeTimestamp;
                var contractId = item.ContractId;
                if (price == null || quantity == null || direction == null || tradeTS == null || contractId == null)
                {
                    continue;
                }
                var submitItem = new PositionManualInput
                {
                    TradeAccountId = item.FundAccountId,
                    SledContractId = contractId.Value,
                    Price = price.Value,
                    Volume = quantity.Value,
                    PositionDirection = (direction == ClientTradeDirection.BUY)
                                    ? PositionDirection.POSITION_BUY : PositionDirection.POSITION_SELL,
                    PositionTimestampMs = tradeTS.Value * 1000
                };
                submitItems.Add(submitItem);
                filteredItems.Add(item);
            }
            if (submitItems.Any() != true) return;

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            UpdateIsSubmiting(true);
            var task = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.manualInputPositionAsync(landingInfo, submitItems, CancellationToken.None);
            task.ContinueWith(t =>
            {
                var resp = t.Result;
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    UpdateIsSubmiting(false);
                    var containerWin = UIHelper.GetWindowOfUIElement(innerContentVM.View);
                    var resultContent = resp?.CorrectResult;
                    if (resp == null || resp.SourceException != null || resultContent?.Success != true)
                    {
                        if (containerWin != null)
                        {
                            messageWindowService.ShowMessageDialog(containerWin, null, null,
                                FoundationHelper.FormatResponseDisplayErrorMsg(resp, "提交出错！\n"), null);
                        }
                    }
                    else
                    {
                        // Remove from list
                        foreach (var rmItem in filteredItems)
                        {
                            inputItemsCtrl.RemoveItem(rmItem.Key);
                        }
                        submitAllCmd?.RaiseCanExecuteChanged();

                        // refresh daily diff item
                        RefreshDailyDiffItem();

                        if (containerWin != null && tipWhenSubmitSuccess)
                        {
                            messageWindowService.ShowMessageDialog(containerWin, null, null, "提交成功！", null);
                        }
                    }
                });
            });
        }

        /// <summary>
        /// 刷新当日持仓比对差异项
        /// </summary>
        private void RefreshDailyDiffItem()
        {
            var dailyDiffItem = this.DailyDiff;
            if (dailyDiffItem == null) return;

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            var tradeAccountId = dailyDiffItem.TradeAccountId;
            var contractId = dailyDiffItem.SledContractId;
            var dateSec = dailyDiffItem.DateSec;
            var option = new ReqDailyPositionDifferenceOption
            {
                TradeAccountId = tradeAccountId,
                SledContractId = contractId,
                DateSec = dateSec
            };
            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.reqDailyPositionDifferenceAsync(landingInfo, option, new IndexedPageOption { PageIndex = 0, PageSize = 1 }, CancellationToken.None)
                .ContinueWith(t =>
                {
                    var resp = t.Result;
                    var queriedItem = resp?.CorrectResult?.Page.FirstOrDefault(i => i.TradeAccountId == tradeAccountId && i.SledContractId == contractId && i.DateSec == dateSec);
                    if (queriedItem == null) return;
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        // update dailyDiffItem
                        // 存在，改变内容
                        TBase refItem = dailyDiffItem;
                        ThriftHelper.UnserializeBytesToTBase(ref refItem, ThriftHelper.SerializeTBaseToBytes(queriedItem));
                    });
                });
        }

        private void ConstructOuterWindowIfNeed()
        {
            if (outerWindow == null)
            {
                var srcWin = UIHelper.GetWindowOfUIElement(innerContentVM.View) as Window;
                if (srcWin != null)
                {
                    var tarWin = new Window
                    {
                        Top = srcWin.Top + 40,
                        Left = srcWin.Left + 40,
                        Width = srcWin.Width * 0.7,
                        Height = srcWin.Height * 0.7,
                        Title = "雪橇成交录入"
                    };
                    tarWin.Closed += OuterWindow_Closed;
                    this.outerWindow = tarWin;
                }
            }
        }

        private void OuterWindow_Closed(object sender, EventArgs e)
        {
            if (outerWindow != null)
            {
                outerWindow.Closed -= OuterWindow_Closed;
                outerWindow = null;
            }
        }
    }
}
