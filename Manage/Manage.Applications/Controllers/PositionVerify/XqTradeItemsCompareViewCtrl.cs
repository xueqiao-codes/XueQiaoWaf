using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation.Interface;
using Manage.Applications.DataModels;
using Manage.Applications.ViewModels;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Waf.Applications;
using System.Windows;
using xueqiao.trade.hosting;
using xueqiao.trade.hosting.asset.thriftapi;
using XueQiaoFoundation.BusinessResources.DataModels;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Helper.WeakDelegate;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.ListPager;
using XueQiaoFoundation.UI.Components.ListPager.ViewModels;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications.Controllers
{
    /// <summary>
    /// 雪橇成交比对视图 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class XqTradeItemsCompareViewCtrl : IController
    {
        private readonly IHostingUserQueryController hostingUserQueryController;
        private readonly IHostingUserCacheController hostingUserCacheController;
        private readonly ILoginDataService loginDataService;
        private readonly IContractItemTreeQueryController contractItemTreeQueryCtrl;
        private readonly ExportFactory<XqTradeItemsCompareViewModel> xqTradeItemsCompareVMFactory;
        private readonly ExportFactory<SimplePagerViewModel> pagerVMFactory;
        
        private readonly XqTradeItemsCompareViewModel innerCompareVM;
        private readonly SimplePagerViewModel innerCompareViewPagerVM;

        private readonly DelegateCommand openCompareViewInAnotherWindowCmd;
        private readonly DelegateCommand triggerQueryCmd;
        private readonly DelegateCommand jumpToXqTradeItemsPageCmd;

        private XqTradeItemsCompareViewModel outerWindowCompareVM;
        private SimplePagerViewModel outerWindowCompareViewPagerVM;
        private Window outerWindow;

        private PagingController pagingController;

        private bool isRefreshing;

        [ImportingConstructor]
        public XqTradeItemsCompareViewCtrl(
            IHostingUserQueryController hostingUserQueryController,
            IHostingUserCacheController hostingUserCacheController,
            ILoginDataService loginDataService,
            IContractItemTreeQueryController contractItemTreeQueryCtrl,
            ExportFactory<XqTradeItemsCompareViewModel> xqTradeItemsCompareVMFactory,
            ExportFactory<SimplePagerViewModel> pagerVMFactory)
        {
            this.hostingUserQueryController = hostingUserQueryController;
            this.hostingUserCacheController = hostingUserCacheController;
            this.loginDataService = loginDataService;
            this.contractItemTreeQueryCtrl = contractItemTreeQueryCtrl;
            this.xqTradeItemsCompareVMFactory = xqTradeItemsCompareVMFactory;
            this.pagerVMFactory = pagerVMFactory;
            this.innerCompareVM = xqTradeItemsCompareVMFactory.CreateExport().Value;
            this.innerCompareViewPagerVM = pagerVMFactory.CreateExport().Value;

            openCompareViewInAnotherWindowCmd = new DelegateCommand(OpenCompareViewInAnotherWindow);
            triggerQueryCmd = new DelegateCommand(TriggerQuery, CanTriggerQuery);
            jumpToXqTradeItemsPageCmd = new DelegateCommand(JumpToXqTradeItemsPage, CanJumpToXqTradeItemsPage);
        }

        public long TradeAccountId { get; set; }

        public int ContractId { get; set; }

        public SettlementCompareItem SettlementCompareItem { get; set; }
        
        public object ContentView => innerCompareVM.View;

        public void Initialize()
        {
            if (SettlementCompareItem == null) throw new ArgumentNullException("SettlementCompareItem");

            innerCompareVM.SettlementCompareItem = this.SettlementCompareItem;
            innerCompareVM.ShowOpenInAnotherWindowButton = true;
            innerCompareVM.TriggerQueryCmd = triggerQueryCmd;
            innerCompareVM.ToOpenInAnotherWindowCmd = openCompareViewInAnotherWindowCmd;

            innerCompareViewPagerVM.GoJumpPageCmd = jumpToXqTradeItemsPageCmd;
        }

        public void Run()
        {
            RefreshViewData();
        }
        
        public void Shutdown()
        {
            try
            {
                if (outerWindow != null)
                {
                    outerWindow.Close();
                    outerWindow.Closed -= OuterWindow_Closed;
                    outerWindow = null;
                }
            }
            catch (Exception) { }
        }

        public void RefreshViewData()
        {
            if (isRefreshing) return;

            UpdateIsRefreshing(true);
            QueryXqTradeItems(0)
                .ContinueWith(t =>
                {
                    var resp = t.Result;
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        UpdateIsRefreshing(false);
                        InvalidateCompareView(resp);
                    });
                });
        }

        private bool CanTriggerQuery()
        {
            return !isRefreshing;
        }

        private void TriggerQuery()
        {
            RefreshViewData();
        }

        private bool CanJumpToXqTradeItemsPage(object obj)
        {
            return !isRefreshing;
        }

        private void JumpToXqTradeItemsPage(object obj)
        {
            var pagingCtrl = this.pagingController;
            if (pagingCtrl == null) return;
            try
            {
                var page = System.Convert.ToInt32(obj);
                if (page < 0 || page > pagingCtrl.PageCount)
                {
                    return;
                }
                pagingCtrl.CurrentPage = page;
            }
            catch (Exception) { }
        }
        
        private void ConstructOuterWindowIfNeed()
        {
            if (outerWindow == null)
            {
                var srcWin = UIHelper.GetWindowOfUIElement(innerCompareVM.View) as Window;
                if (srcWin != null)
                {
                    var tarWin = new Window
                    {
                        Top = srcWin.Top + 80,
                        Left = srcWin.Left + 80,
                        Width = srcWin.Width * 0.7,
                        Height = srcWin.Height * 0.7,
                        Title = "雪橇成交记录"
                    };
                    tarWin.Closed += OuterWindow_Closed;
                    this.outerWindow = tarWin;
                }
            }
        }

        private void OuterWindow_Closed(object sender, EventArgs e)
        {
            if (outerWindow != null)
            {
                outerWindow.Closed -= OuterWindow_Closed;
                outerWindow = null;
            }
        }

        private void OpenCompareViewInAnotherWindow()
        {
            ConstructOuterWindowIfNeed();
            var outerWindow = this.outerWindow;
            if (outerWindow == null) return;

            if (this.outerWindowCompareVM == null)
            {
                var vm = xqTradeItemsCompareVMFactory.CreateExport().Value;
                vm.SettlementCompareItem = this.SettlementCompareItem;
                vm.ShowOpenInAnotherWindowButton = false;
                vm.TriggerQueryCmd = triggerQueryCmd;
                
                this.outerWindowCompareVM = vm;

                var pagerVM = pagerVMFactory.CreateExport().Value;
                pagerVM.PagingController = this.pagingController;
                pagerVM.GoJumpPageCmd = jumpToXqTradeItemsPageCmd;
                this.outerWindowCompareViewPagerVM = pagerVM;

                if (this.pagingController != null && this.pagingController.PageCount > 1)
                {
                    vm.XqTradeItemsPagerView = pagerVM.View;
                }
            }

            if (outerWindow.Content != outerWindowCompareVM.View)
            {
                outerWindow.Content = outerWindowCompareVM.View;
            }

            outerWindow.Show();
            outerWindow.Activate();
        }

        private const int XqTradeItemsQueryPageSize = 50;

        private void UpdateIsRefreshing(bool isRefresh)
        {
            this.isRefreshing = isRefresh;
            DispatcherHelper.CheckBeginInvokeOnUI(() => 
            {
                triggerQueryCmd.RaiseCanExecuteChanged();
            });
        }

        private async Task<IInterfaceInteractResponse<AssetTradeDetailPage>> QueryXqTradeItems(int pageIndex)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;

            var beginDateTime = this.SettlementCompareItem.SelectedXqTradeDateBegin;
            var endDateTime = this.SettlementCompareItem.SelectedXqTradeDateEnd;
            if (beginDateTime == null || endDateTime == null || beginDateTime >= endDateTime)
            {
                return null;
            }

            var beginTSMs = (long)DateHelper.UnixTimspan(beginDateTime.Value, DateTimeKind.Local).TotalMilliseconds;
            var endTSMs = (long)DateHelper.UnixTimspan(endDateTime.Value, DateTimeKind.Local).TotalMilliseconds;

            var option = new xueqiao.trade.hosting.terminal.ao.ReqTradeAccountPositionOption
            {
                TradeAccountId = this.TradeAccountId,
                SledContractId = this.ContractId,
                StartTradeTimestampMs = beginTSMs,
                EndTradeTimestampMs = endTSMs
            };
            var pageOption = new IndexedPageOption { NeedTotalCount = true, PageIndex = pageIndex, PageSize = XqTradeItemsQueryPageSize };

            return await XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getTradeAccountPositionTradeDetailAsync(landingInfo, option, pageOption, CancellationToken.None);
        }
        
        private void XqTradeItemsPagingControllerPropChanged(object sender, PropertyChangedEventArgs e)
        {
            var pagingCtrl = sender as PagingController;
            if (pagingCtrl == null) return;
            if (e.PropertyName == nameof(PagingController.CurrentPage))
            {
                var reqPage = pagingCtrl.CurrentPage - 1;
                if (reqPage < 0) reqPage = 0;
                if (reqPage >= pagingCtrl.PageCount) return;

                QueryXqTradeItems(reqPage)
                    .ContinueWith(t =>
                    {
                        var resp = t.Result;
                        DispatcherHelper.CheckBeginInvokeOnUI(() =>
                        {
                            InvalidateXqTradeItemsView(resp?.CorrectResult?.Page?.ToArray() ?? new AssetTradeDetail[] { });
                        });
                    });
            }
        }

        private void InvalidateCompareView(IInterfaceInteractResponse<AssetTradeDetailPage> respData)
        {
            var detailItems = respData?.CorrectResult?.Page?
                .Select(i => GenereteTradeDetailDM(i)).ToArray();
            if (detailItems != null)
            {
                var collection = new ObservableCollection<AssetTradeDetailDM>(detailItems);
                var rdcollection = new ReadOnlyObservableCollection<AssetTradeDetailDM>(collection);
                SettlementCompareItem.XqTradeItems = rdcollection;
            }
            else { SettlementCompareItem.XqTradeItems = null; }
            
            var oldPagingController = this.pagingController;
            if (oldPagingController != null)
            {
                PropertyChangedEventManager.RemoveHandler(oldPagingController, XqTradeItemsPagingControllerPropChanged, "");
            }

            if (respData?.CorrectResult != null)
            {
                var totalCount = respData.CorrectResult.Total;
                var currentPageItemNum = respData.CorrectResult.Page?.Count() ?? 0;

                this.pagingController = new PagingController(totalCount, XqTradeItemsQueryPageSize);
                PropertyChangedEventManager.AddHandler(this.pagingController, XqTradeItemsPagingControllerPropChanged, "");

                if (innerCompareViewPagerVM != null)
                    innerCompareViewPagerVM.PagingController = this.pagingController;
                if (outerWindowCompareViewPagerVM != null)
                    outerWindowCompareViewPagerVM.PagingController = this.pagingController;
                
                if (totalCount > currentPageItemNum)
                {
                    if (innerCompareVM != null)
                        innerCompareVM.XqTradeItemsPagerView = innerCompareViewPagerVM?.View;
                    if (outerWindowCompareVM != null)
                        outerWindowCompareVM.XqTradeItemsPagerView = outerWindowCompareViewPagerVM?.View;
                }
            }
            else
            {
                if (innerCompareVM != null)
                    innerCompareVM.XqTradeItemsPagerView = null;
                if (outerWindowCompareVM != null)
                    outerWindowCompareVM.XqTradeItemsPagerView = null;
            }
        }

        private void InvalidateXqTradeItemsView(IEnumerable<AssetTradeDetail> xqTradeItems)
        {
            var detailItems = xqTradeItems?
                .Select(i => GenereteTradeDetailDM(i)).ToArray();
            if (detailItems != null)
            {
                var collection = new ObservableCollection<AssetTradeDetailDM>(detailItems);
                var rdcollection = new ReadOnlyObservableCollection<AssetTradeDetailDM>(collection);
                SettlementCompareItem.XqTradeItems = rdcollection;
            }
            else { SettlementCompareItem.XqTradeItems = null; }
        }

        private AssetTradeDetailDM GenereteTradeDetailDM(AssetTradeDetail srcDetail)
        {
            if (srcDetail == null) return null;
            var subUserId = srcDetail.SubUserId;
            var destDetail = new AssetTradeDetailDM(srcDetail, srcDetail.SubUserId);

            // 设置用户名
            if (srcDetail.__isset.subUserId)
            {
                var cacheHostingUser = hostingUserCacheController.GetCache(subUserId);
                if (cacheHostingUser != null)
                {
                    destDetail.SubUserName = cacheHostingUser.LoginName;
                }
                else
                {
                    var queryHandler = new Action<IInterfaceInteractResponse<HostingUser>>(resp =>
                    {
                        var queriedUser = resp?.CorrectResult;
                        if (queriedUser == null) return;
                        destDetail.SubUserName = queriedUser.LoginName;
                    });
                    var handlerReference = new ActionDelegateReference<IInterfaceInteractResponse<HostingUser>>(queryHandler,
                        true);
                    hostingUserQueryController.QueryUser(subUserId, handlerReference);
                }
            }

            return destDetail;
        }
    }
}
