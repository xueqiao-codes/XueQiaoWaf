using business_foundation_lib.xq_thriftlib_config;
using ContainerShell.Interfaces.Applications;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation;
using lib.xqclient_base.thriftapi_mediation.Interface;
using Manage.Applications.DataModels;
using Manage.Applications.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using System.Windows.Controls;
using xueqiao.trade.hosting.position.adjust.thriftapi;
using XueQiaoFoundation.BusinessResources.DataModels;
using XueQiaoFoundation.BusinessResources.Models;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Interfaces.Helper;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.Navigation;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications.Controllers
{
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class PositionDiffOverviewCtrl : IController
    {
        private readonly PositionDiffOverviewVM contentVM;
        private readonly ExportFactory<PositionDailyVerifyPageCtrl> dailyVerifyPageCtrlFactory;
        private readonly IContractItemTreeQueryController contractItemTreeQueryCtrl;
        private readonly ILoginDataService loginDataService;
        private readonly IContainerShellService containerShellService;

        private readonly DelegateCommand refreshRealtimeDiffCmd;
        private readonly DelegateCommand triggerDailyDiffSelectedContractCmd;
        private readonly DelegateCommand refreshDailyDiffListCmd;
        private readonly DelegateCommand toVerifyDailyDiffCmd;
        
        private bool isRefreshRealtimeDiff;
        private IInterfaceInteractResponse currentRealtimeDiffStatus;
        private bool isRefreshDailyPositionDiff;

        [ImportingConstructor]
        public PositionDiffOverviewCtrl(
            PositionDiffOverviewVM contentVM,
            ExportFactory<PositionDailyVerifyPageCtrl> dailyVerifyPageCtrlFactory,
            IContractItemTreeQueryController contractItemTreeQueryCtrl,
            ILoginDataService loginDataService,
            IContainerShellService containerShellService)
        {
            this.contentVM = contentVM;
            this.dailyVerifyPageCtrlFactory = dailyVerifyPageCtrlFactory;
            this.contractItemTreeQueryCtrl = contractItemTreeQueryCtrl;
            this.loginDataService = loginDataService;
            this.containerShellService = containerShellService;

            refreshRealtimeDiffCmd = new DelegateCommand(RefreshRealtimeDiffs, CanRefreshRealtimeDiffs);
            triggerDailyDiffSelectedContractCmd = new DelegateCommand(TriggerDailyDiffSelectedContract, CanTriggerDailyDiffSelectedContract);
            refreshDailyDiffListCmd = new DelegateCommand(RefreshDailyDiffList, CanRefreshDailyDiffList);
            toVerifyDailyDiffCmd = new DelegateCommand(ToVerifyDailyDiff, CanToVerifyDailyDiff);
        }

        /// <summary>
        /// 资金账户 id
        /// </summary>
        public long TradeAccountId { get; set; }
        
        /// <summary>
        /// 导航容器获取工厂方法
        /// </summary>
        public Func<PositionDiffOverviewCtrl, SimpleNavigationContainerView> NavigationContainerGetter { get; set; }

        public object ContentView => contentVM.View;

        public void Initialize()
        {
            PropertyChangedEventManager.AddHandler(contentVM, ContentVMPropChanged, "");
            contentVM.RefreshRealtimeDiffCmd = refreshRealtimeDiffCmd;
            contentVM.TriggerDailyDiffSelectedContractCmd = triggerDailyDiffSelectedContractCmd;
            contentVM.RefreshDailyDiffListCmd = refreshDailyDiffListCmd;
            contentVM.ToVerifyDailyDiffCmd = toVerifyDailyDiffCmd;
        }

        public void Run()
        {
            RefreshRealtimeDiffs();
        }

        public void Shutdown()
        {
            PropertyChangedEventManager.RemoveHandler(contentVM, ContentVMPropChanged, "");
        }

        private void ContentVMPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(PositionDiffOverviewVM.SelectedRealtimeDiffItem))
            {
                SelectedRealtimeDiffItemUpdated(contentVM.SelectedRealtimeDiffItem);
            }
        }

        private void UpdateIsRefreshRealtimeDiff(bool isRefresh)
        {
            this.isRefreshRealtimeDiff = isRefresh;
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                refreshRealtimeDiffCmd?.RaiseCanExecuteChanged();
                triggerDailyDiffSelectedContractCmd?.RaiseCanExecuteChanged();
                toVerifyDailyDiffCmd?.RaiseCanExecuteChanged();
            });
        }

        private void UpdateIsRefreshDailyPositionDiff(bool isRefresh)
        {
            this.isRefreshDailyPositionDiff = isRefresh;
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                refreshRealtimeDiffCmd?.RaiseCanExecuteChanged();
                triggerDailyDiffSelectedContractCmd?.RaiseCanExecuteChanged();
                refreshDailyDiffListCmd?.RaiseCanExecuteChanged();
                toVerifyDailyDiffCmd?.RaiseCanExecuteChanged();
            });
        }

        private bool CanRefreshRealtimeDiffs()
        {
            return !isRefreshRealtimeDiff;
        }

        private void RefreshRealtimeDiffs()
        {
            UpdateIsRefreshRealtimeDiff(true);
            Task.Run(() => 
            {
                var resp = QueryAllPositionDiffs(this.TradeAccountId);
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    UpdateIsRefreshRealtimeDiff(false);
                    this.currentRealtimeDiffStatus = resp;
                    InvalidateRealtimeDiffs(resp);
                });
            });
        }

        private bool CanTriggerDailyDiffSelectedContract(object triggerElement)
        {
            return !isRefreshRealtimeDiff && !isRefreshDailyPositionDiff;
        }

        private void TriggerDailyDiffSelectedContract(object triggerElement)
        {
            containerShellService.ShowContractQuickSearchPopup(triggerElement, null,
                _selContractId => 
                {
                    if (_selContractId == null) return;
                    if (_selContractId == contentVM.DailyDiffSelectedContractContainer?.ContractId) return;

                    var contractContainer = new TargetContract_TargetContractDetail(_selContractId.Value);
                    XueQiaoFoundationHelper.SetupTargetContract_ContractDetail(contractContainer, contractItemTreeQueryCtrl, XqContractNameFormatType.CommodityAcronym_Code_ContractCode);
                    contentVM.DailyDiffSelectedContractContainer = contractContainer;
                    refreshDailyDiffListCmd?.RaiseCanExecuteChanged();
                    RefreshDailyPositionDiffs();
                });
        }

        private bool CanRefreshDailyDiffList()
        {
            return contentVM.DailyDiffSelectedContractContainer != null;
        }

        private void RefreshDailyDiffList()
        {
            RefreshDailyPositionDiffs();
        }

        private bool CanToVerifyDailyDiff(object obj)
        {
            return !isRefreshRealtimeDiff && !isRefreshDailyPositionDiff;
        }

        private void ToVerifyDailyDiff(object obj)
        {
            var dailyDiff = obj as DailyPositionDifference;
            if (dailyDiff == null) return;

            var navContainerView = NavigationContainerGetter?.Invoke(this);
            if (navContainerView == null) return;

            // 进入核对页面
            var pageCtrl = dailyVerifyPageCtrlFactory.CreateExport().Value;
            pageCtrl.DailyDiff = dailyDiff;
            pageCtrl.PageGoBackHandler = _ctrl => 
            {
                navContainerView.GoBackIfPossible();
                _ctrl.Shutdown();
            };
            pageCtrl.Initialize();
            pageCtrl.Run();

            navContainerView.Navigate(pageCtrl.ContentView as Page);
        }

        private SettlementDiffItem GenerateDiffItemFromIDLItem(PositionDifference idlItem)
        {
            var item = new SettlementDiffItem(idlItem.VerifyId, idlItem.TradeAccountId, (int)idlItem.SledContractId)
            {
                SledNetPosition = idlItem.SledNetPosition,
                UpsideNetPosition = idlItem.UpsideNetPosition
            };
            XueQiaoFoundationHelper.SetupTargetContract_ContractDetail(item.ContractDetailContainer,
                contractItemTreeQueryCtrl, XqContractNameFormatType.CommodityAcronym_Code_ContractCode);
            return item;
        }

        private void InvalidateRealtimeDiffs(IInterfaceInteractResponse<IEnumerable<PositionDifference>> respData)
        {
            var oldSelRealtimeDiff = contentVM.SelectedRealtimeDiffItem;
            contentVM.RealtimeDiffRefreshTimestamp = (long)DateHelper.NowUnixTimeSpan().TotalSeconds;

            PropertyChangedEventManager.RemoveHandler(contentVM, ContentVMPropChanged, "");

            contentVM.RealtimeDiffItems.Clear();
            var newDiffItems = respData?.CorrectResult?.Select(i => GenerateDiffItemFromIDLItem(i)).ToArray();
            contentVM.RealtimeDiffItems.AddRange(newDiffItems);

            SettlementDiffItem newSelectItem = null;
            if (oldSelRealtimeDiff != null)
            {
                // 恢复选择项
                newSelectItem = newDiffItems?.FirstOrDefault(i => oldSelRealtimeDiff.ContractId == i.ContractId && oldSelRealtimeDiff.TradeAccountId == i.TradeAccountId);
            }
            contentVM.SelectedRealtimeDiffItem = newSelectItem;
            SelectedRealtimeDiffItemUpdated(newSelectItem);

            PropertyChangedEventManager.AddHandler(contentVM, ContentVMPropChanged, "");
        }

        private void SelectedRealtimeDiffItemUpdated(SettlementDiffItem nowSelDiffItem)
        {
            if (nowSelDiffItem == null) return;

            var contractContainer = new TargetContract_TargetContractDetail(nowSelDiffItem.ContractId);
            XueQiaoFoundationHelper.SetupTargetContract_ContractDetail(contractContainer,
                contractItemTreeQueryCtrl, XqContractNameFormatType.CommodityAcronym_Code_ContractCode);

            contentVM.DailyDiffSelectedContractContainer = contractContainer;
            refreshDailyDiffListCmd?.RaiseCanExecuteChanged();
            RefreshDailyPositionDiffs();
        }

        private void RefreshDailyPositionDiffs()
        {
            var selContractId = contentVM.DailyDiffSelectedContractContainer?.ContractId;
            var tradeAccountId = this.TradeAccountId;
            if (selContractId == null) return;

            UpdateIsRefreshDailyPositionDiff(true);
            Task.Run(() => 
            {
                var resp = QueryAllDailyPositionDiffs(tradeAccountId, selContractId.Value);
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    var nowSelContractId = contentVM.DailyDiffSelectedContractContainer?.ContractId;
                    if (selContractId != nowSelContractId) return;

                    UpdateIsRefreshDailyPositionDiff(false);
                    contentVM.DailyDiffs.Clear();
                    contentVM.DailyDiffs.AddRange(resp?.CorrectResult?.ToArray());
                });
            });
        }
        
        private IInterfaceInteractResponse<IEnumerable<DailyPositionDifference>> 
            QueryAllDailyPositionDiffs(long tradeAccountId, int contractId)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;

            var queryPageSize = 50;
            IInterfaceInteractResponse<DailyPositionDifferencePage> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<DailyPositionDifference>(pageIndex => {
                var option = new ReqDailyPositionDifferenceOption { TradeAccountId = tradeAccountId, SledContractId = contractId };
                var pageOption = new IndexedPageOption { NeedTotalCount = true, PageIndex = pageIndex, PageSize = queryPageSize };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                    .reqDailyPositionDifference(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<DailyPositionDifference>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.Total,
                    Page = pageInfo?.Page?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.DateSec);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };
            
            var queriedItems = queryAllCtrl.QueryAllItems()?
                .OrderByDescending(i=>i.DateSec).ToArray();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<DailyPositionDifference>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems)
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };
            return tarResp;
        }

        private IInterfaceInteractResponse<IEnumerable<PositionDifference>> QueryAllPositionDiffs(long tradeAccountId)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;

            var queryPageSize = 50;
            IInterfaceInteractResponse<PositionDifferencePage> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<PositionDifference>(pageIndex => {
                var option = new ReqPositionDifferenceOption { TradeAccountId = tradeAccountId };
                var pageOption = new IndexedPageOption { NeedTotalCount = true, PageIndex = pageIndex, PageSize = queryPageSize };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                    .reqPositionDifference(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<PositionDifference>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.Total,
                    Page = pageInfo?.Page?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.ContinueQueryNextPageFunc = (_totalItems, _lastResult) =>
            {
                if ((_totalItems?.Count()??0) >= (_lastResult?.TotalCount??0)) return false;
                return true;
            };

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.SledContractId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<PositionDifference>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems)
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };
            return tarResp;
        }
    }
}
