using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using Manage.Applications.DataModels;
using Manage.Applications.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Waf.Applications;
using xueqiao.broker;
using xueqiao.trade.hosting;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications.Controllers
{
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class PersonalUserTradeAccountManageViewCtrl : IController
    {
        private readonly PersonalUserTradeAccountManageVM contentVM;
        private readonly ILoginDataService loginDataService;
        private readonly IMessageWindowService messageWindowService;
        private readonly IUserSubAccountRelatedItemQueryController userSubAccountRelatedItemQueryCtrl;
        private readonly ExportFactory<AddFundAccountWorkOrderDialogCtrl> addAccountWorkOrderDialogCtrlFactory;
        private readonly ExportFactory<FundAccountExtraInfoShowDialogController> accountExtraInfoShowDialogCtrlFactory;

        private readonly TaskFactory refreshDataTF = new TaskFactory(new OrderedTaskScheduler());

        private readonly DelegateCommand refreshDataCmd;
        private readonly DelegateCommand addInnerTradeAccountCmd;
        private readonly DelegateCommand addOutterTradeAccountCmd;
        private readonly DelegateCommand showAccountExtraInfoCmd;

        private bool isDataRefreshing;

        [ImportingConstructor]
        public PersonalUserTradeAccountManageViewCtrl(
            PersonalUserTradeAccountManageVM contentVM,
            ILoginDataService loginDataService,
            IMessageWindowService messageWindowService,
            IUserSubAccountRelatedItemQueryController userSubAccountRelatedItemQueryCtrl,
            ExportFactory<AddFundAccountWorkOrderDialogCtrl> addAccountWorkOrderDialogCtrlFactory,
            ExportFactory<FundAccountExtraInfoShowDialogController> accountExtraInfoShowDialogCtrlFactory)
        {
            this.contentVM = contentVM;
            this.loginDataService = loginDataService;
            this.messageWindowService = messageWindowService;
            this.userSubAccountRelatedItemQueryCtrl = userSubAccountRelatedItemQueryCtrl;
            this.addAccountWorkOrderDialogCtrlFactory = addAccountWorkOrderDialogCtrlFactory;
            this.accountExtraInfoShowDialogCtrlFactory = accountExtraInfoShowDialogCtrlFactory;

            refreshDataCmd = new DelegateCommand(RefreshData);
            addInnerTradeAccountCmd = new DelegateCommand(AddInnerTradeAccount);
            addOutterTradeAccountCmd = new DelegateCommand(AddOutterTradeAccount);
            showAccountExtraInfoCmd = new DelegateCommand(ShowAccountExtraInfo);
        }

        public object ContentView => contentVM.View;

        public void Initialize()
        {
            contentVM.DataRefreshCmd = refreshDataCmd;
            contentVM.AddInnerTradeAccountCmd = addInnerTradeAccountCmd;
            contentVM.AddOutterTradeAccountCmd = addOutterTradeAccountCmd;
            contentVM.ShowAccountExtraInfoCmd = showAccountExtraInfoCmd;
        }

        public void Run()
        {
            RefreshData();
        }

        public void Shutdown()
        {

        }

        private void RefreshData()
        {
            if (isDataRefreshing) return;
            refreshDataTF.StartNew(() => 
            {
                var landingInfo = loginDataService.LandingInfo;
                if (landingInfo == null) return;

                isDataRefreshing = true;
                var qRelatedSubAccountsQueryResp = userSubAccountRelatedItemQueryCtrl.QueryUserSubAccountRelatedItems(CancellationToken.None);
                var qRelatedSubAccountItems = qRelatedSubAccountsQueryResp?.CorrectResult;

                HostingTradeAccount[] qTradeAccounts = null;
                if (qRelatedSubAccountItems?.Any() == true)
                {
                    qTradeAccounts = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                        .getPersonalUserTradeAccount(landingInfo, qRelatedSubAccountItems.First().SubAccountId)?
                        .CorrectResult?.ToArray();
                }

                FundAccountModel[] innerAccountDMList = null;
                FundAccountModel[] outterAccountDMList = null;

                if (qTradeAccounts?.Any() == true)
                {
                    var accountDMList = qTradeAccounts?
                        .Select(i =>
                        new FundAccountModel(i.TradeAccountId)
                        {
                            AccountMeta = i,
                            FormatExtraAccountPropertiesMsg = i.DisplayFormatHostingTradeAccountProperties()
                        }).ToArray();
                    RefreshBrokerDetailToTradeAccountModel(accountDMList);

                    innerAccountDMList = accountDMList?.Where(i => i.AccountMeta?.BrokerTechPlatform.IsTechPlatformSupportOutter() == false).ToArray();
                    outterAccountDMList = accountDMList?.Where(i => i.AccountMeta?.BrokerTechPlatform.IsTechPlatformSupportOutter() == true).ToArray();
                }

                isDataRefreshing = false;
                DispatcherHelper.CheckBeginInvokeOnUI(() => 
                {
                    contentVM.InnerTradeAccountItems.Clear();
                    contentVM.InnerTradeAccountItems.AddRange(innerAccountDMList);

                    contentVM.OutterTradeAccountItems.Clear();
                    contentVM.OutterTradeAccountItems.AddRange(outterAccountDMList);
                });
            });
            
        }


        private void ShowSuccessAddTradeAccountMessage()
        {
            var viewRootWin = UIHelper.GetWindowOfUIElement(contentVM.View);
            if (viewRootWin != null)
            {
                messageWindowService.ShowMessageDialog(viewRootWin, null, null, null, "设置成功，服务器正在关联资金账户，\n完成关联后会发送短信通知。");
            }
        }

        private void AddInnerTradeAccount()
        {
            var dialogCtl = addAccountWorkOrderDialogCtrlFactory.CreateExport().Value;
            dialogCtl.DialogOwner = UIHelper.GetWindowOfUIElement(contentVM.View);
            dialogCtl.DialogTitle = "设置内盘资金账号";
            dialogCtl.BrokerPlatforms = new BrokerPlatform[] { BrokerPlatform.CTP, BrokerPlatform.SP };

            dialogCtl.Initialize();
            dialogCtl.Run();
            dialogCtl.Shutdown();

            if (dialogCtl.AddedWorkOrderId != null)
            {
                ShowSuccessAddTradeAccountMessage();
            }
        }
        
        private void AddOutterTradeAccount()
        {
            var dialogCtl = addAccountWorkOrderDialogCtrlFactory.CreateExport().Value;
            dialogCtl.DialogOwner = UIHelper.GetWindowOfUIElement(contentVM.View);
            dialogCtl.DialogTitle = "设置外盘资金账号";
            dialogCtl.BrokerPlatforms = new BrokerPlatform[] { BrokerPlatform.ESUNNY, BrokerPlatform.ESUNNY_3 };

            dialogCtl.Initialize();
            dialogCtl.Run();
            dialogCtl.Shutdown();

            if (dialogCtl.AddedWorkOrderId != null)
            {
                ShowSuccessAddTradeAccountMessage();
            }
        }
        
        private void ShowAccountExtraInfo(object obj)
        {
            if (obj is FundAccountModel tarItem)
            {
                var ctrl = accountExtraInfoShowDialogCtrlFactory.CreateExport().Value;
                ctrl.DialogOwner = UIHelper.GetWindowOfUIElement(contentVM.View);
                ctrl.FundAccount = tarItem.AccountMeta;
                ctrl.Initialize();
                ctrl.Run();
                ctrl.Shutdown();
            }
        }


        private void RefreshBrokerDetailToTradeAccountModel(IEnumerable<FundAccountModel> tradeAccountList)
        {
            if (tradeAccountList == null || tradeAccountList.Count() == 0) return;

            var accountListGroupedByAccessId = tradeAccountList.Where(i =>
            {
                var accessId = i.AccountMeta?.TradeBrokerAccessId;
                return (accessId != null && accessId > 0);
            }).GroupBy(i => i.AccountMeta.TradeBrokerAccessId);
            var queryBrokerAccessIds = accountListGroupedByAccessId.Select(i => i.Key).ToArray();

            var maxBatchQuerySize = 50;
            IEnumerable<int> readyQueryIds = null;
            IEnumerable<int> restToQueryIds = queryBrokerAccessIds;
            while (true)
            {
                readyQueryIds = restToQueryIds.Take(maxBatchQuerySize);
                restToQueryIds = restToQueryIds.Skip(maxBatchQuerySize);
                if (readyQueryIds.Count() == 0)
                {
                    break;
                }

                // Query broker infos
                var option = new ReqBrokerAccessInfoOption { BrokerAccessIds = new List<int>() };
                option.BrokerAccessIds.AddRange(readyQueryIds);
                XqThriftLibConfigurationManager.SharedInstance.BrokerServiceHttpStub
                    .reqBrokerAccessInfoAsync(option, 0, readyQueryIds.Count(), CancellationToken.None)
                    .ContinueWith(t =>
                    {
                        var resp = t.Result;
                        var respBrokerInfoDict = resp?.CorrectResult?.Page.ToDictionary(i => i.EntryId);
                        if (respBrokerInfoDict == null) return;
                        foreach (var groupItem in accountListGroupedByAccessId)
                        {
                            var tarAccessId = groupItem.Key;
                            if (respBrokerInfoDict.TryGetValue(tarAccessId, out BrokerAccessInfo queriedBrokerInfo))
                            {
                                foreach (var mergeItem in groupItem)
                                {
                                    mergeItem.BrokerAccessName = queriedBrokerInfo.AccessName;
                                    mergeItem.BrokerName = queriedBrokerInfo.CnName;
                                }
                            }
                        }
                    });
            }
        }
    }
}
