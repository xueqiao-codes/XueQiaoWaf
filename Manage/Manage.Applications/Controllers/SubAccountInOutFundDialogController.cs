using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using Manage.Applications.ViewModels;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Waf.Applications;
using xueqiao.trade.hosting.asset.thriftapi;
using xueqiao.trade.hosting.proxy;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications.Controllers
{
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class SubAccountInOutFundDialogController : IController
    {
        private readonly IMessageWindowService messageWindowService;
        private readonly IEventAggregator eventAggregator;
        private readonly ILoginDataService loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly SubAccountInOutFundDialogContentViewModel pageViewModel;

        // 流程使用一次入金票据，避免网络故障或后台出错时重复入金
        private readonly string inOrOutFundOnlyTicket = UUIDHelper.CreateUUIDString(true);

        private readonly AsyncDelegateCommand saveCmd;
        private readonly DelegateCommand cancelCmd;

        private IMessageWindow optDialog;
        
        [ImportingConstructor]
        public SubAccountInOutFundDialogController(IMessageWindowService messageWindowService,
            IEventAggregator eventAggregator,
            ILoginDataService loginDataService,
            Lazy<ILoginUserManageService> loginUserManageService,
            SubAccountInOutFundDialogContentViewModel pageViewModel)
        {
            this.messageWindowService = messageWindowService;
            this.eventAggregator = eventAggregator;
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.pageViewModel = pageViewModel;

            saveCmd = new AsyncDelegateCommand(DoInOrOutFund, CanInOrOutFund);
            cancelCmd = new DelegateCommand(LeaveDialog);

            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
        }

        public object DialogOwner { get; set; }

        /// <summary>
        /// 要操作的操作账户 id
        /// </summary>
        public long ToOptSubAccountId { get; set; }

        /// <summary>
        /// 页面是否显示进行入金操作，否则出金
        /// </summary>
        public bool IsInFund { get; set; }

        /// <summary>
        /// 出入金操作结果是否成功
        /// </summary>
        public bool? InOutFundResult { get; private set; }

        public void Initialize()
        {
            pageViewModel.IsInFund = IsInFund;
            pageViewModel.SaveCmd = saveCmd;
            pageViewModel.CancelCmd = cancelCmd;
            PropertyChangedEventManager.AddHandler(pageViewModel, PageViewModelPropertyChanged, "");
        }

        public void Run()
        {
            optDialog = messageWindowService.CreateContentCustomWindow(DialogOwner, null, null, false, false, 
                true, IsInFund ? "入金" : "出金", pageViewModel.View);
            optDialog.ShowDialog();
        }

        public void Shutdown()
        {
            if (optDialog != null)
            {
                optDialog.Close();
                optDialog = null;
            }

            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
            PropertyChangedEventManager.AddHandler(pageViewModel, PageViewModelPropertyChanged, "");
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            Shutdown();
        }

        private void PageViewModelPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(SubAccountInOutFundDialogContentViewModel.InOrOutFund)
                || e.PropertyName == nameof(SubAccountInOutFundDialogContentViewModel.SelectedCurrency))
            {
                saveCmd.RaiseCanExecuteChanged();
            }
        }

        private async Task DoInOrOutFund()
        {
            var subAccountId = this.ToOptSubAccountId;

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            // 转换为分的单位
            var optFund = pageViewModel.InOrOutFund;
            var currency = pageViewModel.SelectedCurrency;
            var changeFund = new FundChange
            {
                SubAccountId = subAccountId,
                Currency = currency,
                Amount = optFund,
                Direction = IsInFund?HostingSubAccountMoneyRecordDirection.DEPOSIT:HostingSubAccountMoneyRecordDirection.WITHDRAW,
                Ticket = inOrOutFundOnlyTicket,
            };

            var optResp = await XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                .changeSubAccountFundAsync(landingInfo, changeFund, CancellationToken.None);
            
            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                var shouldCloseDialog = true;
                var inOrOutFundStr = IsInFund ? "入金" : "出金";
                if (ErrorCodeConstants.ERROR_SUB_ACCOUNT_OP_MONEY_DUPLICATE_TICKET == optResp.CustomParsedExceptionResult?.BusinessErrorCode)
                {
                    var warnMsg = $"{inOrOutFundStr}操作失败，您使用的是上次的票据";
                    messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, warnMsg, "好的");
                }
                else if (optResp.SourceException != null)
                {
                    var errorMsg = $"{inOrOutFundStr}操作失败 \n{(optResp.CustomParsedExceptionResult?.BusinessErrorMessage ?? "")}";
                    messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, errorMsg, "知道了");
                    shouldCloseDialog = false;
                    return;
                }

                if (shouldCloseDialog)
                {
                    this.InOutFundResult = true;
                    messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, $"{inOrOutFundStr}操作成功");
                    pageViewModel.CloseDisplayInWindow();
                }
            });
        }

        private bool CanInOrOutFund()
        {
            return (pageViewModel.InOrOutFund > 0 && pageViewModel.SelectedCurrency != null);
        }

        private void LeaveDialog()
        {
            this.InOutFundResult = null;
            pageViewModel.CloseDisplayInWindow();
        }
    }
}
