using Manage.Applications.DataModels;
using Manage.Applications.ViewModels;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using System.Windows.Navigation;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using IDLAutoGenerated.Util;
using xueqiao.trade.hosting.terminal.ao;
using xueqiao.trade.hosting;
using System.Threading;
using XueQiaoFoundation.Shared.Helper;
using Thrift.Collections;
using System.ComponentModel;
using xueqiao.trade.hosting.asset.thriftapi;
using lib.xqclient_base.thriftapi_mediation.Interface;
using lib.xqclient_base.thriftapi_mediation;
using xueqiao.trade.hosting.proxy;
using business_foundation_lib.xq_thriftlib_config;

namespace Manage.Applications.Controllers
{
    /// <summary>
    /// 新建操作账户向导弹窗 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class SubAccountAddWizardDialogController : IController
    {
        private readonly IMessageWindowService messageWindowService;
        private readonly IEventAggregator eventAggregator;
        private readonly ILoginDataService loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly SubAccountAddWizardDialogContentViewModel pageViewModel;
        private readonly ExportFactory<SubAccountAddWizardStepPageModel_SetAccountName> setAccountNameStepPageModelFactory;
        private readonly ExportFactory<SubAccountAddWizardStepPageModel_SetInitialInFund> setInitialInFundStepPageModelFactory;
        private readonly ExportFactory<SubAccountAddWizardStepPageModel_AuthToSubUsers> authToSubUsersStepPageModelFactory;
        private readonly ExportFactory<SubAccountAddWizardStepPageModel_Finished> finishedStepPageModelFactory;

        private readonly AsyncDelegateCommand createAccountWithNameCmd;
        
        private readonly AsyncDelegateCommand setInitialInFundStepSaveCmd;
        private readonly DelegateCommand setInitialInFundStepSkipCmd;

        private readonly AsyncDelegateCommand authToSubUsersStepSaveCmd;
        private readonly DelegateCommand authToSubUsersStepSkipCmd;

        private readonly DelegateCommand fnishedStepDoneCmd;

        private readonly WizardStepItem wizardStep = new WizardStepItem(3);
        private readonly SubAccountAddWizardStepData_SetAccountName editingStepData_SetAccountName = new SubAccountAddWizardStepData_SetAccountName();
        private readonly SubAccountAddWizardStepData_SetInitialInFund editingStepData_SetInitialInFund = new SubAccountAddWizardStepData_SetInitialInFund();
        private readonly SubAccountAuthToSubUsersCheckViewData editingSubUsersCheckViewData = new SubAccountAuthToSubUsersCheckViewData();

        // 流程使用一次入金票据，避免网络故障或后台出错时重复入金
        private readonly string wizardInFundOnlyTicket = UUIDHelper.CreateUUIDString(true);

        private SubAccountAddWizardStepPageModel_SetAccountName currentStepPageModel_SetAccountName;
        private SubAccountAddWizardStepPageModel_SetInitialInFund currentStepPageModel_SetInitialInFund;
        private SubAccountAddWizardStepPageModel_AuthToSubUsers currentStepPageModel_AuthToSubUsers;
        private SubAccountAddWizardStepPageModel_Finished currentStepPageModel_Finished;

        private IMessageWindow wizardDialog;
        
        [ImportingConstructor]
        public SubAccountAddWizardDialogController(IMessageWindowService messageWindowService,
            IEventAggregator eventAggregator,
            ILoginDataService loginDataService,
            Lazy<ILoginUserManageService> loginUserManageService,
            SubAccountAddWizardDialogContentViewModel pageViewModel,
            ExportFactory<SubAccountAddWizardStepPageModel_SetAccountName> setAccountNameStepPageModelFactory,
            ExportFactory<SubAccountAddWizardStepPageModel_SetInitialInFund> setInitialInFundStepPageModelFactory,
            ExportFactory<SubAccountAddWizardStepPageModel_AuthToSubUsers> authToSubUsersStepPageModelFactory,
            ExportFactory<SubAccountAddWizardStepPageModel_Finished> finishedStepPageModelFactory)
        {
            this.messageWindowService = messageWindowService;
            this.eventAggregator = eventAggregator;
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.pageViewModel = pageViewModel;
            this.setAccountNameStepPageModelFactory = setAccountNameStepPageModelFactory;
            this.setInitialInFundStepPageModelFactory = setInitialInFundStepPageModelFactory;
            this.authToSubUsersStepPageModelFactory = authToSubUsersStepPageModelFactory;
            this.finishedStepPageModelFactory = finishedStepPageModelFactory;

            createAccountWithNameCmd = new AsyncDelegateCommand(CreateAccountWithName, CanCreateAccountWithName);
            setInitialInFundStepSaveCmd = new AsyncDelegateCommand(DoSetInitialInFund, CanSetInitialInFund);
            setInitialInFundStepSkipCmd = new DelegateCommand(SkipStepSetInitialInFund);
            authToSubUsersStepSaveCmd = new AsyncDelegateCommand(DoAuthToSubUsers);
            authToSubUsersStepSkipCmd = new DelegateCommand(SkipStepAuthToSubUsers);
            fnishedStepDoneCmd = new DelegateCommand(WizardDone);

            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
            PropertyChangedEventManager.AddHandler(editingStepData_SetAccountName, EditingStepData_SetAccountName_PropertyChanged, "");
            PropertyChangedEventManager.AddHandler(editingStepData_SetInitialInFund, EditingStepData_SetInitialInFund_PropertyChanged, "");
        }

        public object DialogOwner { get; set; }

        public long? CreatedSubAccountId { get; private set; }

        public void Initialize()
        {

        }

        public void Run()
        {
            Task.Run(() => 
            {
                var queriedAllSubUserDms = QueryAllSubUsers(CurrentLoginLandingInfo())?
                .CorrectResult?
                .Select(i => new SubUserSelectModel(i.SubUserId) { SubUserInfo = i, IsChecked = false })
                .ToArray();
                if (queriedAllSubUserDms?.Any() == true)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        editingSubUsersCheckViewData.ToCheckSubUsers.AddRange(queriedAllSubUserDms);
                    });
                }
            });

            // 显示第一页
            currentStepPageModel_SetAccountName = setAccountNameStepPageModelFactory.CreateExport().Value;
            currentStepPageModel_SetAccountName.WizardStepItem = wizardStep;
            currentStepPageModel_SetAccountName.StepData = editingStepData_SetAccountName;
            currentStepPageModel_SetAccountName.SaveCmd = createAccountWithNameCmd;

            wizardStep.CurrentStepIndex = 0;
            pageViewModel.Navigate(currentStepPageModel_SetAccountName.View as PageFunction<int>, 
                300, 150,
                returned => 
                {
                    CloseWizardDialog();
                });

            wizardDialog = messageWindowService.CreateContentCustomWindow(DialogOwner, null, null, true, false, 
                true, "操作账户新建-向导", pageViewModel.View);
            wizardDialog.Closing += WizardDialog_DialogClosing;
            wizardDialog.ShowDialog();
        }

        public void Shutdown()
        {
            CloseWizardDialog();
            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
            PropertyChangedEventManager.RemoveHandler(editingStepData_SetAccountName, EditingStepData_SetAccountName_PropertyChanged, "");
            PropertyChangedEventManager.RemoveHandler(editingStepData_SetInitialInFund, EditingStepData_SetInitialInFund_PropertyChanged, "");
        }

        private void CloseWizardDialog()
        {
            if (wizardDialog != null)
            {
                wizardDialog.Closing -= WizardDialog_DialogClosing;
                wizardDialog.Close();
                wizardDialog = null;
            }
            else
            {
                pageViewModel.CloseDisplayInWindow();
            }
        }

        private void WizardDialog_DialogClosing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (messageWindowService.ShowQuestionDialog(pageViewModel.DisplayInWindow, null, null, null,
                "确定要退出向导吗?", false, "退出", "不退出") == true)
            {
                e.Cancel = false;
            }
            else
            {
                e.Cancel = true;
            }
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            Shutdown();
        }

        private void EditingStepData_SetAccountName_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(SubAccountAddWizardStepData_SetAccountName.SubAccountName))
            {
                DispatcherHelper.CheckBeginInvokeOnUI(() => createAccountWithNameCmd.RaiseCanExecuteChanged());
            }
        }

        private void EditingStepData_SetInitialInFund_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(SubAccountAddWizardStepData_SetInitialInFund.InitialInFund)
                || e.PropertyName == nameof(SubAccountAddWizardStepData_SetInitialInFund.Currency))
            {
                DispatcherHelper.CheckBeginInvokeOnUI(() => setInitialInFundStepSaveCmd.RaiseCanExecuteChanged());
            }
        }

        private void ForwardToStep_SetInitialInFund()
        {
            currentStepPageModel_SetInitialInFund = setInitialInFundStepPageModelFactory.CreateExport().Value;
            currentStepPageModel_SetInitialInFund.WizardStepItem = wizardStep;
            currentStepPageModel_SetInitialInFund.StepData = editingStepData_SetInitialInFund;
            currentStepPageModel_SetInitialInFund.SaveCmd = setInitialInFundStepSaveCmd;
            currentStepPageModel_SetInitialInFund.SkipStepCmd = setInitialInFundStepSkipCmd;

            this.wizardStep.CurrentStepIndex = 1;
            currentStepPageModel_SetAccountName?.ForwardToNextStep(currentStepPageModel_SetInitialInFund.View as PageFunction<int>);
        }

        private void ForwardToStep_AuthToSubUsers()
        {
            currentStepPageModel_AuthToSubUsers = authToSubUsersStepPageModelFactory.CreateExport().Value;
            currentStepPageModel_AuthToSubUsers.WizardStepItem = wizardStep;
            currentStepPageModel_AuthToSubUsers.SubUsersCheckViewData = editingSubUsersCheckViewData;
            currentStepPageModel_AuthToSubUsers.SaveCmd = authToSubUsersStepSaveCmd;
            currentStepPageModel_AuthToSubUsers.SkipStepCmd = authToSubUsersStepSkipCmd;

            this.wizardStep.CurrentStepIndex = 2;
            currentStepPageModel_SetInitialInFund?.ForwardToNextStep(currentStepPageModel_AuthToSubUsers.View as PageFunction<int>);
        }

        private void ForwardToStep_Finished()
        {
            currentStepPageModel_Finished = finishedStepPageModelFactory.CreateExport().Value;
            currentStepPageModel_Finished.DoneCmd = fnishedStepDoneCmd;
            currentStepPageModel_AuthToSubUsers?.ForwardToNextStep(currentStepPageModel_Finished.View as PageFunction<int>);
        }

        private LandingInfo CurrentLoginLandingInfo()
        {
            return loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
        }

        private async Task CreateAccountWithName()
        {
            var landingInfo = CurrentLoginLandingInfo();
            if (landingInfo == null) return;
            var accountName = editingStepData_SetAccountName.SubAccountName;
            if (string.IsNullOrWhiteSpace(accountName))
            {
                return;
            }

            var newSubAcc = new HostingSubAccount { SubAccountName = accountName };
            var resp = await XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                .createSubAccountAsync(landingInfo, newSubAcc, CancellationToken.None);

            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                if (resp.SourceException != null)
                {
                    var errorMsg = $"新建操作账户失败 \n{(resp.CustomParsedExceptionResult?.BusinessErrorMessage ?? "")}";
                    messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, errorMsg, "知道了");
                    return;
                }

                this.CreatedSubAccountId = resp.CorrectResult;
                ForwardToStep_SetInitialInFund();
            });
        }

        private bool CanCreateAccountWithName()
        {
            return !string.IsNullOrWhiteSpace(editingStepData_SetAccountName.SubAccountName);
        }
        
        private async Task DoSetInitialInFund()
        {
            var subAccountId = this.CreatedSubAccountId;
            if (subAccountId == null) return;

            var landingInfo = CurrentLoginLandingInfo();
            if (landingInfo == null) return;
            
            var inFundAmount = editingStepData_SetInitialInFund.InitialInFund;
            var currency = editingStepData_SetInitialInFund.Currency;
            var changeFund = new FundChange
            {
                SubAccountId = subAccountId.Value,
                Currency = currency,
                Amount = inFundAmount,
                Direction = HostingSubAccountMoneyRecordDirection.DEPOSIT,
                Ticket = wizardInFundOnlyTicket,
            };
            
            var resp = await XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                .changeSubAccountFundAsync(landingInfo, changeFund, CancellationToken.None);

            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                var shouldGoNextStep = true;
                if (ErrorCodeConstants.ERROR_SUB_ACCOUNT_OP_MONEY_DUPLICATE_TICKET == resp.CustomParsedExceptionResult?.BusinessErrorCode)
                {
                    var warnMsg = "已设置过初始入金，将进入下一步";
                    messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, warnMsg, "好的");
                }
                else if (resp.SourceException != null)
                {
                    var errorMsg = $"入金失败 \n{(resp.CustomParsedExceptionResult?.BusinessErrorMessage ?? "")}";
                    messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, errorMsg, "知道了");
                    shouldGoNextStep = false;
                    return;
                }

                if (!shouldGoNextStep) return;
                ForwardToStep_AuthToSubUsers();
            });
        }

        private bool CanSetInitialInFund()
        {
            return (editingStepData_SetInitialInFund.InitialInFund >= 0
                && editingStepData_SetInitialInFund.Currency != null);
        }

        private void SkipStepSetInitialInFund()
        {
            if (messageWindowService.ShowQuestionDialog(pageViewModel.DisplayInWindow, null, null, null, 
                "确定要跳过该项设置吗?", false, "确定", "取消") == true)
            {
                ForwardToStep_AuthToSubUsers();
            }
        }

        private async Task DoAuthToSubUsers()
        {
            var subAccountId = this.CreatedSubAccountId;
            if (subAccountId == null) return;

            var landingInfo = CurrentLoginLandingInfo();
            if (landingInfo == null) return;

            var checkedSubUserIds = editingSubUsersCheckViewData.ToCheckSubUsers
                .Where(i => i.IsChecked)
                .Select(i => i.SubUserId).ToArray();
            if (checkedSubUserIds.Any() != true)
            {
                if (messageWindowService.ShowQuestionDialog(pageViewModel.DisplayInWindow, null, null, null,
                    "不设置分配任何用户吗?", false, "不分配", "再想想") == true)
                {
                    ForwardToStep_Finished();
                }
                return;
            }

            var relatedSubUserIds = new THashSet<int>();
            foreach (var _id in checkedSubUserIds)
            {
                relatedSubUserIds.Add(_id);
            }
            var unRelatedSubUserIds = new THashSet<int>();
            var resp = await XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.assignSubAccountRelatedUsersAsync(landingInfo, 
                subAccountId.Value, relatedSubUserIds, unRelatedSubUserIds, CancellationToken.None);

            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                if (resp.SourceException != null)
                {
                    var errorMsg = $"分配用户失败 \n{(resp.CustomParsedExceptionResult?.BusinessErrorMessage ?? "")}";
                    messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, errorMsg, "知道了");
                    return;
                }

                ForwardToStep_Finished();
            });
        }

        private void SkipStepAuthToSubUsers()
        {
            if (messageWindowService.ShowQuestionDialog(pageViewModel.DisplayInWindow, null, null, null,
                "确定要跳过该项设置吗?", false, "确定", "取消") == true)
            {
                ForwardToStep_Finished();
            }
        }

        private void WizardDone()
        {
            currentStepPageModel_Finished?.FinishedWizard();
        }

        private IInterfaceInteractResponse<IEnumerable<HostingUser>> QueryAllSubUsers(LandingInfo landingInfo)
        {
            if (landingInfo == null) return null;
            var queryPageSize = 50;
            IInterfaceInteractResponse<QueryHostingUserPage> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<HostingUser>(pageIndex => {
                var option = new QueryHostingUserOption { OrderType = HostingUserOrderType.OrderByCreateTimestampDesc };
                var pageOption = new IndexedPageOption
                {
                    NeedTotalCount = true,
                    PageIndex = pageIndex,
                    PageSize = queryPageSize,
                };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getHostingUserPage(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<HostingUser>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.TotalCount,
                    Page = pageInfo?.ResultList?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.SubUserId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<HostingUser>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems)
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };
            return tarResp;
        }

    }
}
