using Manage.Applications.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.Popup;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using IDLAutoGenerated.Util;
using System.Threading;
using XueQiaoFoundation.Shared.Helper;
using System.ComponentModel;
using System.Windows.Controls.Primitives;
using System.Windows;
using business_foundation_lib.xq_thriftlib_config;

namespace Manage.Applications.Controllers
{
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class SubAccountRenamePopupCtrl : IController
    {
        private readonly IPopup popup;
        private readonly SubAccountRenameVM contentVM;
        private readonly ILoginDataService loginDataService;
        private readonly DelegateCommand confirmRenameCmd;

        [ImportingConstructor]
        public SubAccountRenamePopupCtrl(
            IPopup popup,
            SubAccountRenameVM contentVM,
            ILoginDataService loginDataService)
        {
            this.popup = popup;
            this.contentVM = contentVM;
            this.loginDataService = loginDataService;

            confirmRenameCmd = new DelegateCommand(ConfirmRename, CanConfirmRename);
        }
        
        public long SubAccountId { get; set; }

        public string OriginName { get; set; }

        public object PlacementTarget { get; set; }

        public Action<SubAccountRenamePopupCtrl, bool?/*是否修改名称*/> PopupCloseHandler { get; set; }

        public void Initialize()
        {
            popup.Placement = PlacementMode.Bottom;
            popup.PlacementTarget = PlacementTarget as UIElement;
            popup.StaysOpen = false;
            popup.Closed += Popup_Closed;
            popup.Content = contentVM.View as UIElement;

            PropertyChangedEventManager.AddHandler(contentVM, ContentVMPropChanged, "");
            contentVM.EditName = this.OriginName;
            contentVM.ConfirmRenameCmd = confirmRenameCmd;
        }

        public void Run()
        {
            popup.Open();
        }

        public void Shutdown()
        {
            popup.Closed -= Popup_Closed;
            PropertyChangedEventManager.RemoveHandler(contentVM, ContentVMPropChanged, "");
            PopupCloseHandler = null;
        }

        private void ContentVMPropChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(SubAccountRenameVM.EditName))
            {
                confirmRenameCmd?.RaiseCanExecuteChanged();
            }
        }

        private void Popup_Closed(object sender, EventArgs e)
        {
            Shutdown();
        }

        private bool CanConfirmRename()
        {
            return !string.IsNullOrEmpty(contentVM.EditName?.Trim());
        }

        private void ConfirmRename()
        {
            var editName = contentVM.EditName?.Trim();
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.renameSubAccountAsync(landingInfo, SubAccountId, editName, CancellationToken.None)
                .ContinueWith(t => 
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() => 
                    {
                        if (popup.IsOpen)
                        {
                            var resp = t.Result;
                            var updatedSuccess = (resp != null && resp.SourceException == null);

                            popup.Closed -= Popup_Closed;
                            PopupCloseHandler?.Invoke(this, updatedSuccess);
                            popup.Close();
                        }
                    });
                });
        }
    }
}
