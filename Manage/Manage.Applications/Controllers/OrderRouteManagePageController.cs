using Manage.Applications.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using IDLAutoGenerated.Util;
using System.Threading;
using Manage.Applications.DataModels;
using NativeModel.Contract;
using XueQiaoFoundation.Interfaces.Applications;
using xueqiao.trade.hosting;
using xueqiao.trade.hosting.terminal.ao;
using Thrift.Collections;
using ContainerShell.Interfaces.Applications;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.Shared.Helper;
using lib.xqclient_base.thriftapi_mediation.Interface;
using lib.xqclient_base.thriftapi_mediation;
using XueQiaoFoundation.BusinessResources.Helpers;
using business_foundation_lib.xq_thriftlib_config;
using business_foundation_lib.helper;

namespace Manage.Applications.Controllers
{
    /// <summary>
    /// 用户订单路由管理页面 controller
    /// </summary>
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class OrderRouteManagePageController : IController
    {
        private readonly ILoginDataService loginDataService;
        private readonly IMessageWindowService messageWindowService;
        private readonly ExportFactory<OrderRouteRuleAddDialogController> addOrderRouteRuleCtrlFactory;
        private readonly ExportFactory<OrderRouteRuleEditDialogController> editOrderRouteRuleCtrlFactory;
        private readonly IContainerShellService containerShellService;
        private readonly IExchangeQueryController exchangeQueryController;
        private readonly ICommodityQueryController commodityQueryController;

        private readonly DelegateCommand goBackCmd;
        private readonly DelegateCommand toRefreshListCmd;
        private readonly DelegateCommand toAddRouteRuleCmd;
        private readonly DelegateCommand toRmRouteRuleCmd;
        private readonly DelegateCommand toEditRouteRuleCmd;

        private IEnumerable<OrderRouteRuleDiscreteModel> queriedOrderRouteDiscreteRules;
        private int? queriedOrderRouteRuleTreeVersion;
        private IEnumerable<HostingTradeAccount> queriedTradeAccounts;

        [ImportingConstructor]
        public OrderRouteManagePageController(ILoginDataService loginDataService,
            IMessageWindowService messageWindowService,
            OrderRouteManagePageModel pageViewModel,
            ExportFactory<OrderRouteRuleAddDialogController> addOrderRouteRuleCtrlFactory,
            ExportFactory<OrderRouteRuleEditDialogController> editOrderRouteRuleCtrlFactory,
            IContainerShellService containerShellService,
            IExchangeQueryController exchangeQueryController,
            ICommodityQueryController commodityQueryController)
        {
            this.loginDataService = loginDataService;
            this.messageWindowService = messageWindowService;
            this.PageViewModel = pageViewModel;
            this.addOrderRouteRuleCtrlFactory = addOrderRouteRuleCtrlFactory;
            this.editOrderRouteRuleCtrlFactory = editOrderRouteRuleCtrlFactory;
            this.containerShellService = containerShellService;
            this.exchangeQueryController = exchangeQueryController;
            this.commodityQueryController = commodityQueryController;

            goBackCmd = new DelegateCommand(() => this.GoBackHandler?.Invoke(this));
            toRefreshListCmd = new DelegateCommand(ToRefreshList);
            toAddRouteRuleCmd = new DelegateCommand(ToAddRouteRule, CanToAddRouteRule);
            toEditRouteRuleCmd = new DelegateCommand(ToEditRouteRule, CanToEditRouteRule);
            toRmRouteRuleCmd = new DelegateCommand(ToRmRouteRule, CanToRmRouteRule);
        }

        /// <summary>
        /// 目标操作账户
        /// </summary>
        public HostingSubAccount TargetSubAccount { get; set; }

        /// <summary>
        /// 后退处理
        /// </summary>
        public Action<OrderRouteManagePageController> GoBackHandler { get; set; }

        public OrderRouteManagePageModel PageViewModel { get; private set; }

        public void Initialize()
        {
            if (TargetSubAccount == null) throw new ArgumentNullException("SubAccount");

            PageViewModel.SubAccount = TargetSubAccount;
            PageViewModel.GoBackCmd = goBackCmd;
            PageViewModel.ToRefreshListCmd = toRefreshListCmd;
            PageViewModel.ToAddRouteRuleCmd = toAddRouteRuleCmd;
            PageViewModel.ToEditRouteRuleCmd = toEditRouteRuleCmd;
            PageViewModel.ToRmRouteRuleCmd = toRmRouteRuleCmd;
        }

        public void Run()
        {
            RefreshPageData();
        }

        public void Shutdown()
        {
            GoBackHandler = null;
        }
        
        private void RefreshPageData()
        {
            Task.Run(() => 
            {
                var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
                if (landingInfo == null) return;
                var taskFactory = new TaskFactory();
                var tasks = new List<Task>();
                IInterfaceInteractResponse<HostingOrderRouteTree> orderRouteTreeResp = null;
                IInterfaceInteractResponse<IEnumerable<HostingTradeAccount>> tradeAccountResp = null;

                tasks.Add(taskFactory.StartNew(() =>
                {
                    orderRouteTreeResp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getHostingOrderRouteTree(landingInfo, (int)TargetSubAccount.SubAccountId);
                }));
                tasks.Add(taskFactory.StartNew(() =>
                {
                    tradeAccountResp = QueryAllTradeAccounts(landingInfo);
                }));
                Task.WaitAll(tasks.ToArray());

                if (orderRouteTreeResp == null || orderRouteTreeResp.SourceException != null || orderRouteTreeResp.CorrectResult == null)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() => 
                    {
                        var owerWin = UIHelper.GetWindowOfUIElement(PageViewModel.View);
                        if (owerWin != null)
                        {
                            string errorMsg = FoundationHelper.FormatResponseDisplayErrorMsg(orderRouteTreeResp, "获取订单路由数据出错！\n");
                            messageWindowService.ShowMessageDialog(owerWin, null, null, "出错", errorMsg);
                        }
                    });
                    return;
                }
                if (tradeAccountResp == null || tradeAccountResp.SourceException != null || tradeAccountResp.CorrectResult == null)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        var owerWin = UIHelper.GetWindowOfUIElement(PageViewModel.View);
                        if (owerWin != null)
                        {
                            string errorMsg = FoundationHelper.FormatResponseDisplayErrorMsg(tradeAccountResp, "获取资金账号出错！\n");
                            messageWindowService.ShowMessageDialog(owerWin, null, null, "出错", errorMsg);
                        }
                    });
                    return;
                }
                
                queriedOrderRouteDiscreteRules = orderRouteTreeResp.CorrectResult.SubExchangeNodes?
                    .HostingOrderRouteTree2DiscreteRules() ?? new OrderRouteRuleDiscreteModel[] { };
                queriedOrderRouteRuleTreeVersion = orderRouteTreeResp.CorrectResult.ConfigVersion;
                queriedTradeAccounts = tradeAccountResp.CorrectResult?.ToArray() 
                        ?? new HostingTradeAccount[] { };

                var ruleListItems = queriedOrderRouteDiscreteRules?.OrderRouteDiscreteRules2ListItems();
                LoadDisplayInfosForRouteRuleItems(ruleListItems, 
                    rule=> queriedTradeAccounts.FirstOrDefault(i=>i.TradeAccountId == rule.RouteToTradeAccountId));
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    PageViewModel.OrderRouteRuleItems.Clear();
                    if (ruleListItems != null)
                    {
                        PageViewModel.OrderRouteRuleItems.AddRange(ruleListItems);
                    }
                    toAddRouteRuleCmd.RaiseCanExecuteChanged();
                    toEditRouteRuleCmd.RaiseCanExecuteChanged();
                    toRmRouteRuleCmd.RaiseCanExecuteChanged();
                });
            });
        }

        private IInterfaceInteractResponse<IEnumerable<HostingTradeAccount>> QueryAllTradeAccounts(LandingInfo landingInfo)
        {
            if (landingInfo == null) return null;
            var queryPageSize = 50;
            IInterfaceInteractResponse<QueryHostingTradeAccountPage> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<HostingTradeAccount>(pageIndex => {
                var option = new QueryHostingTradeAccountOption
                {
                    NotInAccountStates = new THashSet<TradeAccountState> { TradeAccountState.ACCOUNT_REMOVED }
                };
                var pageOption = new IndexedPageOption
                {
                    NeedTotalCount = true,
                    PageIndex = pageIndex,
                    PageSize = queryPageSize
                };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getTradeAccountPage(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<HostingTradeAccount>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.TotalCount,
                    Page = pageInfo?.ResultList?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.TradeAccountId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<HostingTradeAccount>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems)
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };
            return tarResp;
        }

        private void LoadDisplayInfosForRouteRuleItems(IEnumerable<OrderRouteRuleListItemModel> ruleItems, 
            Func<OrderRouteRuleListItemModel, HostingTradeAccount> routedToAccountDetailFactory)
        {
            if (ruleItems == null) return;

            var taskFactory = new TaskFactory();
            var exchangeMicGroupedRules = ruleItems.GroupBy(i => i.RouteExchangeMic).ToArray();
            var allCommodities = new List<NativeCommodity>();
            foreach (var exchangeMicGroupedItem in exchangeMicGroupedRules)
            {
                var exchangeMic = exchangeMicGroupedItem.Key;
                var rulesInExchange = exchangeMicGroupedItem.ToArray();
                var setExchangeName = new Action<NativeExchange>(_exc =>
                {
                    if (_exc == null) return;
                    foreach (var rule in rulesInExchange)
                    {
                        rule.RouteExchangeName = _exc.CnName;
                    }
                });

                var cachedExchange = containerShellService.InitializeData?.AllExchanges?.FirstOrDefault(i=>i.ExchangeMic == exchangeMic);
                if (cachedExchange != null)
                {
                    setExchangeName(cachedExchange);
                }
                else
                {
                    taskFactory.StartNew(() =>
                    {
                        setExchangeName(exchangeQueryController.QueryExchange(exchangeMic)?.CorrectResult);
                    });
                }

                foreach (var rule in rulesInExchange)
                {
                    var routeToAccountDetail = routedToAccountDetailFactory?.Invoke(rule);
                    if (routeToAccountDetail != null)
                    {
                        var nameAlias = routeToAccountDetail.TradeAccountRemark;
                        if (!string.IsNullOrEmpty(nameAlias))
                        {
                            rule.RouteToTradeAccountName = $"{(routeToAccountDetail.LoginUserName??"")}({nameAlias})";
                        }
                        else
                        {
                            rule.RouteToTradeAccountName = $"{(routeToAccountDetail.LoginUserName??"")}";
                        }
                    }
                    
                    var groupedCommodities = rule.GroupedCommodities.ToArray();
                    if (rule.RouteLevelType == OrderRouteRuleLevelType.Commodity
                        && groupedCommodities.Count() > 0)
                    {
                        allCommodities.AddRange(groupedCommodities);
                    }
                }
            }

            var commSymbolGroupedCommodities = allCommodities.GroupBy(i => new Tuple<string, int, string>(i.ExchangeMic, i.SledCommodityType, i.SledCommodityCode));
            foreach (var commSymbolGroupedItem in commSymbolGroupedCommodities)
            {
                var commSymbol = commSymbolGroupedItem.Key;
                var exchangeMic = commSymbol.Item1;
                var commodityType = commSymbol.Item2;
                var commodityCode = commSymbol.Item3;
                var commoditiesInSymbol = commSymbolGroupedItem.ToArray();
                var setCommodityInfos = new Action<NativeCommodity>(_commodity =>
                {
                    if (_commodity == null) return;
                    foreach (var srcComm in commoditiesInSymbol)
                    {
                        srcComm.SledCommodityId = _commodity.SledCommodityId;
                        srcComm.FillNativeCommodityNameInfos(_commodity);
                    }
                });

                var cachedCommodity = containerShellService.InitializeData?.AllCommodities?
                    .FirstOrDefault(i => i.ExchangeMic == exchangeMic
                        && i.SledCommodityType == commodityType
                        && i.SledCommodityCode == commodityCode);
                if (cachedCommodity != null)
                {
                    setCommodityInfos(cachedCommodity);
                }
                else
                {
                    taskFactory.StartNew(() =>
                    {
                        setCommodityInfos(commodityQueryController.QueryCommodity(commSymbol)?.CorrectResult);
                    });
                }
            }
        }

        private bool IsInitialPageDataLoaded()
        {
            return (queriedOrderRouteDiscreteRules != null
                && queriedOrderRouteRuleTreeVersion != null
                && queriedTradeAccounts != null);
        }

        private bool CanToAddRouteRule()
        {
            return IsInitialPageDataLoaded();
        }

        private void ToRefreshList()
        {
            RefreshPageData();
        }

        private void ToAddRouteRule()
        {
            var orderRouteRuleTreeVersion = queriedOrderRouteRuleTreeVersion;
            var orderRouteDiscreteRules = queriedOrderRouteDiscreteRules?.ToArray();
            var tradeAccounts = queriedTradeAccounts?.ToArray();
            if (orderRouteRuleTreeVersion == null) return;
            if (orderRouteDiscreteRules == null) return;
            if (tradeAccounts == null) return;

            var addPageCtrl = addOrderRouteRuleCtrlFactory.CreateExport().Value;
            addPageCtrl.CurrentOrderRouteRules = orderRouteDiscreteRules;
            addPageCtrl.CurrentOrderRouteTreeVersion = (int)orderRouteRuleTreeVersion;
            addPageCtrl.TradeToTradeAccounts = tradeAccounts;
            addPageCtrl.SubAccountId = TargetSubAccount.SubAccountId;
            addPageCtrl.DialogOwner = UIHelper.GetWindowOfUIElement(PageViewModel.View);
            addPageCtrl.Initialize();
            addPageCtrl.Run();
            addPageCtrl.Shutdown();

            if (addPageCtrl.HasTryAddedRule == true)
            {
                var owerWin = UIHelper.GetWindowOfUIElement(PageViewModel.View);
                if (addPageCtrl.AddedRuleErrorCode == ErrorCodeConstants.ERROR_CONFIG_VERSION_LOW)
                {
                    messageWindowService.ShowMessageDialog(owerWin, null, null, null, "订单路由配置和云端不一致，已自动刷新路由配置列表！");
                }
                else if (addPageCtrl.AddedRuleErrorCode == ErrorCodeConstants.ERROR_CONFIG_LOST)
                {
                    messageWindowService.ShowMessageDialog(owerWin, null, null, null, "非常抱歉，订单路由配置丢失，请重新配置！");
                }
                else if (addPageCtrl.AddedRuleErrorCode != null)
                {
                    messageWindowService.ShowMessageDialog(owerWin, null, null, null, "订单路由添加失败，已自动刷新路由配置列表！");
                }
                // refresh data
                RefreshPageData();
            }
        }

        private bool CanToEditRouteRule(object obj)
        {
            return IsInitialPageDataLoaded();
        }

        private void ToEditRouteRule(object obj)
        {
            var tarRule = obj as OrderRouteRuleListItemModel;
            if (tarRule == null) return;

            var orderRouteRuleTreeVersion = queriedOrderRouteRuleTreeVersion;
            var orderRouteDiscreteRules = queriedOrderRouteDiscreteRules?.ToArray();
            var tradeAccounts = queriedTradeAccounts?.ToArray();
            if (orderRouteRuleTreeVersion == null) return;
            if (orderRouteDiscreteRules == null) return;
            if (tradeAccounts == null) return;

            var editPageCtrl = editOrderRouteRuleCtrlFactory.CreateExport().Value;
            editPageCtrl.CurrentOrderRouteRules = orderRouteDiscreteRules;
            editPageCtrl.CurrentOrderRouteTreeVersion = (int)orderRouteRuleTreeVersion;
            editPageCtrl.TradeToTradeAccounts = tradeAccounts;
            editPageCtrl.SubAccountId = TargetSubAccount.SubAccountId;
            editPageCtrl.EditRule = tarRule;
            editPageCtrl.DialogOwner = UIHelper.GetWindowOfUIElement(PageViewModel.View);
            editPageCtrl.Initialize();
            editPageCtrl.Run();
            editPageCtrl.Shutdown();

            if (editPageCtrl.HasTryEditedRule == true)
            {
                var owerWin = UIHelper.GetWindowOfUIElement(PageViewModel.View);
                if (editPageCtrl.EditedRuleErrorCode == ErrorCodeConstants.ERROR_CONFIG_VERSION_LOW)
                {
                    messageWindowService.ShowMessageDialog(owerWin, null, null, null, "订单路由配置和云端不一致，已自动刷新路由配置列表！");
                }
                else if (editPageCtrl.EditedRuleErrorCode == ErrorCodeConstants.ERROR_CONFIG_LOST)
                {
                    messageWindowService.ShowMessageDialog(owerWin, null, null, null, "非常抱歉，订单路由配置丢失，请重新配置！");
                }
                else if (editPageCtrl.EditedRuleErrorCode != null)
                {
                    messageWindowService.ShowMessageDialog(owerWin, null, null, null, "订单路由添加失败，已自动刷新路由配置列表！");
                }
                // refresh data
                RefreshPageData();
            }
        }

        private bool CanToRmRouteRule(object obj)
        {
            return IsInitialPageDataLoaded();
        }

        private void ToRmRouteRule(object obj)
        {
            var tarRule = obj as OrderRouteRuleListItemModel;
            if (tarRule == null) return;

            var orderRouteRuleTreeVersion = queriedOrderRouteRuleTreeVersion;
            if (orderRouteRuleTreeVersion == null) return;

            var result = messageWindowService.ShowQuestionDialog(UIHelper.GetWindowOfUIElement(PageViewModel.View),null,null,null, "是否删除该规则？",false,"删除","取消");
            if (result != true) return;

            var rmRuleLevelType = tarRule.RouteLevelType;
            var rmRuleExchangeMic = tarRule.RouteExchangeMic;
            var rmRuleCommodityType = tarRule.RouteCommodityType;
            var rmRuleCommodities = tarRule.GroupedCommodities.ToArray();
            var rmRuleRouteToAccountId = tarRule.RouteToTradeAccountId;
            var rmRuleIsForbidden = tarRule.IsForbiddenTradeRule;

            var originMutableRules = new List<OrderRouteRuleDiscreteModel>(queriedOrderRouteDiscreteRules);
            if (rmRuleLevelType == OrderRouteRuleLevelType.Exchange)
            {
                originMutableRules.RemoveAll(i => i.RouteLevelType == OrderRouteRuleLevelType.Exchange
                    && i.RouteExchangeMic == rmRuleExchangeMic
                    && i.RouteToTradeAccountId == rmRuleRouteToAccountId
                    && i.IsForbiddenTradeRule == rmRuleIsForbidden);
                
            }
            else if (rmRuleLevelType == OrderRouteRuleLevelType.CommodityType)
            {
                originMutableRules.RemoveAll(i => i.RouteLevelType == OrderRouteRuleLevelType.CommodityType
                    && i.RouteExchangeMic == rmRuleExchangeMic
                    && i.RouteCommodityType == rmRuleCommodityType
                    && i.RouteToTradeAccountId == rmRuleRouteToAccountId
                    && i.IsForbiddenTradeRule == rmRuleIsForbidden);
                
            }
            else if (rmRuleLevelType == OrderRouteRuleLevelType.Commodity)
            {
                originMutableRules.RemoveAll(i => i.RouteLevelType == OrderRouteRuleLevelType.Commodity
                    && i.RouteExchangeMic == rmRuleExchangeMic
                    && i.RouteCommodityType == rmRuleCommodityType
                    && rmRuleCommodities.Any(j => j.ExchangeMic == rmRuleExchangeMic
                            && j.SledCommodityType == rmRuleCommodityType
                            && j.SledCommodityCode == i.RouteCommoditycode)
                    && i.RouteToTradeAccountId == rmRuleRouteToAccountId
                    && i.IsForbiddenTradeRule == rmRuleIsForbidden);
         
            }
            
            var newTreeExchangeNodes = originMutableRules.ToArray().DiscreteOrderRouteRules2OrderRouteTree();
            var newTreeObj = new HostingOrderRouteTree
            {
                ConfigVersion = ((int)orderRouteRuleTreeVersion + 1),
                SubExchangeNodes = newTreeExchangeNodes
            };

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            // 更新配置
            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                .updateHostingOrderRouteTreeAsync(landingInfo, (int)TargetSubAccount.SubAccountId, newTreeObj, CancellationToken.None)
                .ContinueWith(t =>
                {
                    var resp = t.Result;
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        var owerWin = UIHelper.GetWindowOfUIElement(PageViewModel.View);
                        var errorCode = resp.CustomParsedExceptionResult?.BusinessErrorCode;
                        if (errorCode != null && owerWin != null)
                        {
                            if (errorCode == ErrorCodeConstants.ERROR_CONFIG_VERSION_LOW)
                            {
                                messageWindowService.ShowMessageDialog(owerWin, null, null, null, "订单路由配置和云端不一致，已自动刷新路由配置列表！");
                            }
                            else if (errorCode == ErrorCodeConstants.ERROR_CONFIG_LOST)
                            {
                                messageWindowService.ShowMessageDialog(owerWin, null, null, null, "非常抱歉，订单路由配置丢失，请重新配置！");
                            }
                            else
                            {
                                messageWindowService.ShowMessageDialog(owerWin, null, null, null, "订单路由添加失败，已自动刷新路由配置列表！");
                            }
                        }
                        else if (resp.SourceException != null && owerWin != null)
                        {
                            messageWindowService.ShowMessageDialog(owerWin, null, null, null, resp.CustomParsedExceptionResult?.BusinessErrorMessage ?? "添加路由规则失败，请稍后再试！");
                            return;
                        }

                        RefreshPageData();
                    });
                });
        }
        
    }
}
