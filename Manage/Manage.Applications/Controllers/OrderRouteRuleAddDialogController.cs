using Manage.Applications.DataModels;
using Manage.Applications.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using XueQiaoFoundation.Interfaces.Applications;
using xueqiao.trade.hosting;
using IDLAutoGenerated.Util;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using System.ComponentModel;
using System.Threading;
using Prism.Events;
using ContainerShell.Interfaces.Applications;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using NativeModel.Contract;
using XueQiaoFoundation.Shared.Helper;
using xueqiao.trade.hosting.proxy;
using XueQiaoFoundation.BusinessResources.Helpers;
using business_foundation_lib.xq_thriftlib_config;

namespace Manage.Applications.Controllers
{
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class OrderRouteRuleAddDialogController : IController
    {
        private readonly ILoginDataService loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly IExchangeDataService exchangeDataService;
        private readonly IContainerShellService containerShellService;
        private readonly IMessageWindowService messageWindowService;
        private readonly OrderRouteRuleAddDialogContentViewModel pageViewModel;
        private readonly IEventAggregator eventAggregator;

        private IMessageWindow addDialog;

        private readonly DelegateCommand saveRuleCmd;
        private readonly DelegateCommand cancelCmd;

        
        [ImportingConstructor]
        public OrderRouteRuleAddDialogController(ILoginDataService loginDataService,
            Lazy<ILoginUserManageService> loginUserManageService,
            IExchangeDataService exchangeDataService,
            IContainerShellService containerShellService,
            IMessageWindowService messageWindowService,
            OrderRouteRuleAddDialogContentViewModel pageViewModel,
            IEventAggregator eventAggregator)
        {
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.exchangeDataService = exchangeDataService;
            this.containerShellService = containerShellService;
            this.messageWindowService = messageWindowService;
            this.pageViewModel = pageViewModel;
            this.eventAggregator = eventAggregator;

            saveRuleCmd = new DelegateCommand(DoSaveRule, CanSaveRule);
            cancelCmd = new DelegateCommand(LeaveDialog);

            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
        }

        public int CurrentOrderRouteTreeVersion { get; set; }

        public IEnumerable<OrderRouteRuleDiscreteModel> CurrentOrderRouteRules { get; set; }

        public IEnumerable<HostingTradeAccount> TradeToTradeAccounts { get; set; }

        public long SubAccountId { get; set; }

        public object DialogOwner { get; set; }
        
        // request add rule relative variables
        // 是否已尝试去添加规则
        public bool? HasTryAddedRule { get; private set; }

        // 添加规则出错的 errorCode
        public int? AddedRuleErrorCode { get; private set; }

        public void Initialize()
        {
            PropertyChangedEventManager.AddHandler(pageViewModel, PageViewModelPropertyChanged, "");

            var initializedExchanges = containerShellService.InitializeData?.AllExchanges ?? new NativeExchange[] { };
            var initiazliedCommodities = containerShellService.InitializeData?.AllCommodities ?? new NativeCommodity[] { };

            // 根据优先级排序交易所列表，并返回国内交易所列表和国外交易所列表
            XueQiaoBusinessHelper.GenerateSortedExchangeList(initializedExchanges,
                exchangeDataService.PreferredExchangeMicList,
                exchangeDataService.PreferredExchangeCountryAcronymList,
                exc => exchangeDataService.IsInnerExchange(exc.ExchangeMic),
                out IEnumerable<NativeExchange> innerExchangeList,
                out IEnumerable<NativeExchange> outterExchangeList);
            if (innerExchangeList == null) innerExchangeList = new NativeExchange[] { };
            if (outterExchangeList == null) outterExchangeList = new NativeExchange[] { };
            var sortedExchanges = new NativeExchange[] { }.Union(innerExchangeList).Union(outterExchangeList);
            
            // 筛除已经存在规则的节点，只显示不存在规则的节点
            
            // 设置通过商品选择的规则列表
            var commodityLevelRules = CurrentOrderRouteRules
                .Where(i => i.RouteLevelType == OrderRouteRuleLevelType.Commodity 
                        && !string.IsNullOrEmpty(i.RouteCommoditycode)
                        && i.RouteToTradeAccountId > 0)
                .ToDictionary(i => new Tuple<string, int, string>(i.RouteExchangeMic, i.RouteCommodityType, i.RouteCommoditycode));
            var notInComdRuleComds = initiazliedCommodities.Where(i=> !commodityLevelRules.ContainsKey(new Tuple<string, int, string>(i.ExchangeMic, i.SledCommodityType, i.SledCommodityCode)));
            var byComdExchangeComds = notInComdRuleComds.GroupBy(i => i.ExchangeMic);
            var byComdExchanges = sortedExchanges.Where(exc => byComdExchangeComds.Any(g => g.Key == exc.ExchangeMic));

            var byComdRuleSelectTree = new OrderRouteRuleSelectTree();
            byComdRuleSelectTree.UpdateTreeData(byComdExchanges, exc => byComdExchangeComds.FirstOrDefault(g => g.Key == exc.ExchangeMic), null);
            pageViewModel.ByCommodityCreateRuleSelectTree = byComdRuleSelectTree;


            // 设置通过商品类型选择的规则列表
            var commodityTypeLevelRules = CurrentOrderRouteRules
                .Where(i=>i.RouteLevelType == OrderRouteRuleLevelType.CommodityType
                        && i.RouteToTradeAccountId > 0)
                .ToDictionary(i => new Tuple<string,int>(i.RouteExchangeMic, i.RouteCommodityType));
            var notInComdTypeRuleComds = initiazliedCommodities.Where(i => !commodityTypeLevelRules.ContainsKey(new Tuple<string, int>(i.ExchangeMic, i.SledCommodityType)));
            var byComdTypeExchangeComds = notInComdTypeRuleComds.GroupBy(i => i.ExchangeMic);
            var byComdTypeExchanges = sortedExchanges.Where(exc => byComdTypeExchangeComds.Any(g => g.Key == exc.ExchangeMic));

            var byComdTypeRuleSelectTree = new OrderRouteRuleSelectTree();
            byComdTypeRuleSelectTree.UpdateTreeData(byComdTypeExchanges, exc => byComdTypeExchangeComds.FirstOrDefault(g => g.Key == exc.ExchangeMic), null);
            pageViewModel.ByCommodityTypeCreateRuleSelectTree = byComdTypeRuleSelectTree;
            
            pageViewModel.RuleCreateType = OrderRouteRuleCreateType.ByCommodityType;
            pageViewModel.CancelCmd = cancelCmd;
            pageViewModel.SaveCmd = saveRuleCmd;
        }

        public void Run()
        {
            this.addDialog = messageWindowService.CreateContentCustomWindow(DialogOwner, null, null, true, false, 
                true, "添加订单路由规则", pageViewModel.View);
            addDialog.ShowDialog();
        }

        public void Shutdown()
        {
            if (addDialog != null)
            {
                addDialog.Close();
                addDialog = null;
            }
            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
            PropertyChangedEventManager.RemoveHandler(pageViewModel, PageViewModelPropertyChanged, "");
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            Shutdown();
        }

        private void PageViewModelPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            var propertyName = e.PropertyName;
            
            if (propertyName == nameof(OrderRouteRuleAddDialogContentViewModel.RuleCreateType)
                || propertyName == nameof(OrderRouteRuleAddDialogContentViewModel.ByCommoditySelectedRuleExchangeNode)
                || propertyName == nameof(OrderRouteRuleAddDialogContentViewModel.ByCommoditySelectedRuleCommodityTypeNode)
                || propertyName == nameof(OrderRouteRuleAddDialogContentViewModel.ByCommodityTypeSelectedRuleExchangeNode)
                || propertyName == nameof(OrderRouteRuleAddDialogContentViewModel.ByCommodityTypeSelectedRuleCommodityTypeNode)
                || propertyName == nameof(OrderRouteRuleAddDialogContentViewModel.SelectedRouteToAccount))
            {
                saveRuleCmd.RaiseCanExecuteChanged();
            }
            
            if (propertyName == nameof(OrderRouteRuleAddDialogContentViewModel.RuleCreateType)
                || propertyName == nameof(OrderRouteRuleAddDialogContentViewModel.ByCommoditySelectedRuleExchangeNode)
                || propertyName == nameof(OrderRouteRuleAddDialogContentViewModel.ByCommodityTypeSelectedRuleExchangeNode))
            {
                var ruleCreateType = pageViewModel.RuleCreateType;
                NativeExchange selectedExchange = null;
                if (ruleCreateType == OrderRouteRuleCreateType.ByCommodity)
                {
                    selectedExchange = pageViewModel.ByCommoditySelectedRuleExchangeNode?.Node;
                }
                else if (ruleCreateType == OrderRouteRuleCreateType.ByCommodityType)
                {
                    selectedExchange = pageViewModel.ByCommodityTypeSelectedRuleExchangeNode?.Node;
                }

                pageViewModel.RouteToAccountItems.Clear();
                if (selectedExchange != null)
                {
                    var isOutterExchange = !exchangeDataService.IsInnerExchange(selectedExchange.ExchangeMic);
                    var tarTradeAccounts = TradeToTradeAccounts?.Where(i => i.BrokerTechPlatform.IsTechPlatformSupportOutter() == isOutterExchange).ToArray();
                    pageViewModel.RouteToAccountItems.AddRange(tarTradeAccounts);
                }
            }
        }

        private bool CanSaveRule()
        {
            if (pageViewModel.RuleCreateType == OrderRouteRuleCreateType.ByCommodityType)
            {
                if (pageViewModel.ByCommodityTypeSelectedRuleExchangeNode != null
                    && pageViewModel.ByCommodityTypeSelectedRuleCommodityTypeNode != null
                    && pageViewModel.SelectedRouteToAccount != null)
                {
                    return true;
                }
                return false;
            }
            else if (pageViewModel.RuleCreateType == OrderRouteRuleCreateType.ByCommodity)
            {
                if (pageViewModel.ByCommoditySelectedRuleExchangeNode != null
                    && pageViewModel.ByCommoditySelectedRuleCommodityTypeNode != null
                    && pageViewModel.SelectedRouteToAccount != null)
                {
                    return true;
                }
                return false;
            }
            return false;
        }

        private void DoSaveRule()
        {
            RuleExchangeSelectNode selRuleExchangeNode = null;
            RuleCommodityTypeSelectNode selRuleCommodityTypeNode = null;
            var selRouteToAccount = pageViewModel.SelectedRouteToAccount;
            if (pageViewModel.RuleCreateType == OrderRouteRuleCreateType.ByCommodityType)
            {
                selRuleExchangeNode = pageViewModel.ByCommodityTypeSelectedRuleExchangeNode;
                selRuleCommodityTypeNode = pageViewModel.ByCommodityTypeSelectedRuleCommodityTypeNode;
            }
            else if (pageViewModel.RuleCreateType == OrderRouteRuleCreateType.ByCommodity)
            {
                selRuleExchangeNode = pageViewModel.ByCommoditySelectedRuleExchangeNode;
                selRuleCommodityTypeNode = pageViewModel.ByCommoditySelectedRuleCommodityTypeNode;
            }

            if (selRuleExchangeNode == null)
            {
                messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, "请选择交易所！", null);
                return;
            }
            if (selRuleCommodityTypeNode == null)
            {
                messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, "请选择商品类型！", null);
                return;
            }
            if (selRouteToAccount == null)
            {
                messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, "请选择路由目标交易账号！", null);
                return;
            }
            
            if (pageViewModel.RuleCreateType == OrderRouteRuleCreateType.ByCommodityType)
            {
                Task.Run(() => 
                {
                    var list = new List<OrderRouteRuleDiscreteModel>(CurrentOrderRouteRules);

                    // 删除原来该节点的配置
                    list.RemoveAll(i => i.RouteLevelType == OrderRouteRuleLevelType.CommodityType
                        && i.RouteExchangeMic == selRuleExchangeNode.Node.ExchangeMic
                        && i.RouteCommodityType == selRuleCommodityTypeNode.Node);

                    // 添加该节点的配置
                    list.Add(new OrderRouteRuleDiscreteModel
                    {
                        RouteLevelType = OrderRouteRuleLevelType.CommodityType,
                        IsForbiddenTradeRule = false,
                        RouteToTradeAccountId = selRouteToAccount.TradeAccountId,
                        RouteExchangeMic = selRuleExchangeNode.Node.ExchangeMic,
                        RouteCommodityType = selRuleCommodityTypeNode.Node
                    });

                    UpdateHostingOrderRouteTreeWithDiscreteRules(list.ToArray());
                });
            }
            else if (pageViewModel.RuleCreateType == OrderRouteRuleCreateType.ByCommodity)
            {
                if (selRuleCommodityTypeNode.Children.ToArray().Where(i => i.IsChecked).Count() == 0)
                {
                    messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, "请选择商品！", null);
                    return;
                }

                Task.Run(() => 
                {
                    var list = new List<OrderRouteRuleDiscreteModel>(CurrentOrderRouteRules);
                    var checkedCommodities = selRuleCommodityTypeNode.Children.ToArray().Where(i => i.IsChecked).ToArray();

                    // 删除原来该节点的配置
                    list.RemoveAll(i => i.RouteLevelType == OrderRouteRuleLevelType.Commodity
                        && i.RouteExchangeMic == selRuleExchangeNode.Node.ExchangeMic
                        && i.RouteCommodityType == selRuleCommodityTypeNode.Node
                        && checkedCommodities
                        .Any(j => j.Commodity?.ExchangeMic == selRuleExchangeNode.Node.ExchangeMic
                            && j.Commodity?.SledCommodityType == selRuleCommodityTypeNode.Node
                            && j.Commodity?.SledCommodityCode == i.RouteCommoditycode));

                    // 添加该节点的配置
                    
                    list.AddRange(checkedCommodities.Select(i => new OrderRouteRuleDiscreteModel
                    {
                        RouteLevelType = OrderRouteRuleLevelType.Commodity,
                        IsForbiddenTradeRule = false,
                        RouteToTradeAccountId = selRouteToAccount.TradeAccountId,
                        RouteExchangeMic = selRuleExchangeNode.Node.ExchangeMic,
                        RouteCommodityType = selRuleCommodityTypeNode.Node,
                        RouteCommoditycode = i.Commodity?.SledCommodityCode
                    }).ToArray());

                    UpdateHostingOrderRouteTreeWithDiscreteRules(list.ToArray());
                });
            }
        }

        private void UpdateHostingOrderRouteTreeWithDiscreteRules(IEnumerable<OrderRouteRuleDiscreteModel> rules)
        {
            if (rules == null) return;
            var newTreeExchangeNodes = rules.ToArray().DiscreteOrderRouteRules2OrderRouteTree();
            var newTreeObj = new HostingOrderRouteTree
            {
                ConfigVersion = (CurrentOrderRouteTreeVersion + 1),
                SubExchangeNodes = newTreeExchangeNodes
            };

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            // 更新配置
            HasTryAddedRule = null;
            AddedRuleErrorCode = null;
            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                .updateHostingOrderRouteTreeAsync(landingInfo, SubAccountId, newTreeObj, CancellationToken.None)
                .ContinueWith(t =>
                {
                    var resp = t.Result;
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        if (resp.CustomParsedExceptionResult?.BusinessErrorCode != null)
                        {
                            AddedRuleErrorCode = resp.CustomParsedExceptionResult?.BusinessErrorCode;
                        }
                        else if (resp.SourceException != null)
                        {
                            messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, resp.CustomParsedExceptionResult?.BusinessErrorMessage ?? "添加路由规则失败，请稍后再试！", null);
                            return;
                        }
                        HasTryAddedRule = true;
                        pageViewModel.CloseDisplayInWindow();
                    });
                });
        }

        private void LeaveDialog()
        {
            HasTryAddedRule = null;
            AddedRuleErrorCode = null;
            pageViewModel.CloseDisplayInWindow();
        }
    }
}
