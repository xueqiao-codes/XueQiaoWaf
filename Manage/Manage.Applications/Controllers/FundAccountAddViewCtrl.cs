using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation;
using lib.xqclient_base.thriftapi_mediation.Interface;
using Manage.Applications.DataModels;
using Manage.Applications.Domain;
using Manage.Applications.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Waf.Applications;
using Thrift.Collections;
using xueqiao.broker;
using xueqiao.trade.hosting;
using XueQiaoFoundation.BusinessResources.Helpers;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications.Controllers
{
    internal delegate void FundAccountAddSubmitHandler(FundAccountAddViewCtrl ctrl, string submitValidateErrMsg, FundAccountAddItemInputInfo addAccountInputInfo);

    internal class FundAccountAddItemInputInfo
    {
        public int? TradeBrokerId;
        public BrokerTechPlatform? BrokerTechPlatform;
        public int? TradeBrokerAccessId;
        public string LoginUserName;
        public string LoginPassword;
        public string TradeAccountRemark;
        public Dictionary<string, string> AccountProperties;
    }

    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class FundAccountAddViewCtrl : IController
    {
        private readonly FundAccountAddDialogContentViewModel contentVM;
        private readonly ILoginDataService loginDataService;

        private readonly DelegateCommand submitCmd;
        private readonly DelegateCommand cancelCmd;
        
        private readonly AddFundAccount addingAccount = new AddFundAccount();

        private BrokerSelectNode selectedBrokerNode;
        private BroderPlatformSelectNode selectedBrokerPlatformNode;
        private BrokerAccessEntry selectedBrokerAccessEntry;

        [ImportingConstructor]
        public FundAccountAddViewCtrl(FundAccountAddDialogContentViewModel contentVM,
            ILoginDataService loginDataService)
        {
            this.contentVM = contentVM;
            this.loginDataService = loginDataService;

            submitCmd = new DelegateCommand(Submit);
            cancelCmd = new DelegateCommand(() => CancelHandler?.Invoke(this));
        }
        
        /// <summary>
        /// 填写的信息提交处理方法
        /// </summary>
        public FundAccountAddSubmitHandler AccountAddSubmitHandler { get; set; }

        /// <summary>
        /// 取消按钮处理方法
        /// </summary>
        public Action<FundAccountAddViewCtrl> CancelHandler { get; set; }

        /// <summary>
        /// 添加账号的券商平台范围。如果为 null 或空，则不限定范围
        /// </summary>
        public BrokerPlatform[] BrokerPlatforms { get; set; }

        /// <summary>
        /// 是否显示账号昵称添加行
        /// </summary>
        public bool ShowAccountAliasAddRow { get; set; }

        public object ContentView => contentVM.View;

        public void Initialize()
        {
            contentVM.AddAccount = addingAccount;
            contentVM.SubmitCmd = submitCmd;
            contentVM.CancelCmd = cancelCmd;
            contentVM.ShowAccountAliasAddRow = this.ShowAccountAliasAddRow;
            PropertyChangedEventManager.AddHandler(contentVM, ContentVMropertyChanged, "");
        }

        public void Run()
        {
            LoadInitialDatas();
        }

        public void Shutdown()
        {
            PropertyChangedEventManager.RemoveHandler(contentVM, ContentVMropertyChanged, "");
        }

        private void ContentVMropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(FundAccountAddDialogContentViewModel.SelectedBrokerNode))
            {
                var newSelectedBrokerNode = contentVM.SelectedBrokerNode;
                if (this.selectedBrokerNode == newSelectedBrokerNode) return;

                this.selectedBrokerNode = newSelectedBrokerNode;
                this.selectedBrokerPlatformNode = null;
                this.selectedBrokerAccessEntry = null;
                contentVM.SelectedBrokerPlatformNode = null;
                contentVM.SelectedBrokerAccessEntry = null;
                return;
            }

            if (e.PropertyName == nameof(FundAccountAddDialogContentViewModel.SelectedBrokerPlatformNode))
            {
                if (this.selectedBrokerPlatformNode == contentVM.SelectedBrokerPlatformNode) return;

                this.selectedBrokerPlatformNode = contentVM.SelectedBrokerPlatformNode;
                this.selectedBrokerAccessEntry = null;
                contentVM.SelectedBrokerAccessEntry = null;
                return;
            }

            if (e.PropertyName == nameof(FundAccountAddDialogContentViewModel.SelectedBrokerAccessEntry))
            {
                this.selectedBrokerAccessEntry = contentVM.SelectedBrokerAccessEntry;
                return;
            }
        }

        private void Submit()
        {
            GetAndValidateInputInfo(out string _validateErrMsg, out FundAccountAddItemInputInfo _addAccountInputInfo);
            AccountAddSubmitHandler?.Invoke(this, _validateErrMsg, _addAccountInputInfo);
        }

        private void GetAndValidateInputInfo(out string _validateErrMsg, out FundAccountAddItemInputInfo _addAccountInputInfo)
        {
            _validateErrMsg = null;

            _addAccountInputInfo = new FundAccountAddItemInputInfo
            {
                LoginUserName = addingAccount.LoginUserName,
                LoginPassword = addingAccount.LoginPasswd,
                TradeAccountRemark = addingAccount.AccountAlias
            };
            if (selectedBrokerNode != null) {
                _addAccountInputInfo.TradeBrokerId = selectedBrokerNode.Node.BrokerId;
            }
            if (selectedBrokerAccessEntry != null) {
                _addAccountInputInfo.BrokerTechPlatform = selectedBrokerAccessEntry.Platform.ToBrokerTechPlatform();
                _addAccountInputInfo.TradeBrokerAccessId = selectedBrokerAccessEntry.EntryId;
            }

            if (_validateErrMsg == null)
            {
                if (selectedBrokerNode == null
                || selectedBrokerPlatformNode == null
                || selectedBrokerAccessEntry == null)
                {
                    _validateErrMsg = "请选择券商、交易接口、席位信息";
                }
            }

            if (_validateErrMsg == null)
            {
                if (!addingAccount.Validate())
                {
                    var errorMsg = addingAccount.JoinErrors();
                    _validateErrMsg = string.IsNullOrEmpty(errorMsg) ? "请输入必填信息" : errorMsg;
                }
            }

            var newAccountProperties = new Dictionary<string, string>();
            
            var selectedBrokerPlatform = selectedBrokerAccessEntry?.Platform;
            if (selectedBrokerPlatform == BrokerPlatform.ESUNNY)
            {
                // 易盛9.0，需要填写 authcode 字段
                var es9AuthCode = XueQiaoBusinessHelper.TrimWhiteSpaceAndRemoveNewLine(addingAccount.Es9_AuthCode);
                if (string.IsNullOrWhiteSpace(es9AuthCode))
                {
                    if (_validateErrMsg == null)
                    {
                        _validateErrMsg = "请填写交易授权码";
                    }
                }
                else
                {
                    newAccountProperties[trade_hosting_basicConstants.ESUNNY9_AUTHCODE_PROPKEY] = es9AuthCode;
                }
            }
            else if (selectedBrokerPlatform == BrokerPlatform.ESUNNY_3)
            {
                // 易盛3.0，需要填写 appid, certinfo 字段
                var appId = XueQiaoBusinessHelper.TrimWhiteSpaceAndRemoveNewLine(addingAccount.Es3_AppId);
                var certInfo = XueQiaoBusinessHelper.TrimWhiteSpaceAndRemoveNewLine(addingAccount.Es3_CertInfo);
                if (string.IsNullOrWhiteSpace(appId) || string.IsNullOrWhiteSpace(certInfo))
                {
                    if (_validateErrMsg == null)
                    {
                        _validateErrMsg = "请填写 app id 和 cert info";
                    }
                }
                else
                {
                    newAccountProperties[trade_hosting_basicConstants.ESUNNY3_APPID_PROPKEY] = appId;
                    newAccountProperties[trade_hosting_basicConstants.ESUNNY3_CERTINFO_PROPKEY] = certInfo;
                }
            }
            else if (selectedBrokerPlatform == BrokerPlatform.CTP)
            {
                // CTP，appid, autocode 字段填写可选
                var appId = XueQiaoBusinessHelper.TrimWhiteSpaceAndRemoveNewLine(addingAccount.Ctp_AppId);
                var authCode = XueQiaoBusinessHelper.TrimWhiteSpaceAndRemoveNewLine(addingAccount.Ctp_AuthCode);
                newAccountProperties[trade_hosting_basicConstants.CTP_STS_APPID] = appId ?? "";
                newAccountProperties[trade_hosting_basicConstants.CTP_STS_AUTHCODE] = authCode ?? "";
            }

            _addAccountInputInfo.AccountProperties = newAccountProperties;
        }

        private void LoadInitialDatas()
        {
            Task.Run(() => 
            {
                IInterfaceInteractResponse<BrokerEntry[]> brokerListResp = null;
                IInterfaceInteractResponse<BrokerAccessEntry[]> brokerAccessListResp = null;

                var t1 = Task.Run(() => 
                {
                    brokerListResp = QueryAllBrokerList(CancellationToken.None);
                });

                var t2 = Task.Run(() => 
                {
                    brokerAccessListResp = QueryBrokerAccessEntryList(this.BrokerPlatforms, CancellationToken.None);
                });

                Task.WaitAll(t1, t2);

                var brokerNodeList = GenereateBrokerNodeList(brokerAccessListResp?.CorrectResult, brokerListResp?.CorrectResult);
                DispatcherHelper.CheckBeginInvokeOnUI(() => 
                {
                    contentVM.SelectedBrokerNode = null;
                    contentVM.SelectedBrokerPlatformNode = null;
                    contentVM.SelectedBrokerAccessEntry = null;

                    contentVM.UpdateBrokerNodeList(brokerNodeList);
                });
            });
        }

        private BrokerSelectNode[] GenereateBrokerNodeList(BrokerAccessEntry[] brokerAccessList, BrokerEntry[] brokerList)
        {
            if (brokerAccessList == null) brokerAccessList = new BrokerAccessEntry[] { };
            if (brokerList == null) brokerList = new BrokerEntry[] { };

            var brokerMap = brokerList.ToDictionary(i => i.BrokerId, i => i);
            var brokerKeyedAccessList = brokerAccessList.GroupBy(i => i.BrokerId);

            var brokerNodeList = new List<BrokerSelectNode>();
            foreach (var brokerKeyedItem in brokerKeyedAccessList)
            {
                var brokerId = brokerKeyedItem.Key;
                if (brokerMap.TryGetValue(brokerId, out BrokerEntry brokerInfo))
                {
                    var brokerNode = new BrokerSelectNode { Node = brokerInfo };
                    brokerNodeList.Add(brokerNode);

                    var platformKeyedAccessList = brokerKeyedItem.GroupBy(i => i.Platform);
                    foreach (var platformKeyedItem in platformKeyedAccessList)
                    {
                        var platformNode = new BroderPlatformSelectNode { Node = platformKeyedItem.Key.GetHashCode() };
                        platformNode.Children.AddRange(platformKeyedItem.ToArray());

                        brokerNode.Children.Add(platformNode);
                    }
                }
            }

            return brokerNodeList.ToArray();
        }

        private IInterfaceInteractResponse<BrokerEntry[]> QueryAllBrokerList(CancellationToken clt)
        {
            var loginResp = loginDataService.ProxyLoginResp;
            if (loginResp == null) return null;

            var queryPageSize = 50;
            IInterfaceInteractResponse<BrokerPage> lastPageResp = null;
            var platformEnv = loginResp.HostingRunningMode.Broker_HostingRunningMode2TechPlatformEnv();
            var queryAllCtrl = new QueryAllItemsByPageHelper<BrokerEntry>(pageIndex => {

                if (clt.IsCancellationRequested) return null;
                var option = new ReqBrokerOption
                {
                    Env = platformEnv
                };
                var resp = XqThriftLibConfigurationManager.SharedInstance.BrokerServiceHttpStub.reqBroker(option, pageIndex, queryPageSize);

                lastPageResp = resp;

                if (resp == null) return null;

                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<BrokerEntry>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.Total,
                    Page = pageInfo?.Page?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.BrokerId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (lastPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<BrokerEntry[]>(lastPageResp.Servant,
                lastPageResp.InterfaceName,
                lastPageResp.SourceException,
                lastPageResp.HasTransportException,
                lastPageResp.HttpResponseStatusCode,
                queriedItems?.ToArray())
            {
                CustomParsedExceptionResult = lastPageResp.CustomParsedExceptionResult,
                InteractInformation = lastPageResp.InteractInformation
            };

            return tarResp;
        }

        private IInterfaceInteractResponse<BrokerAccessEntry[]> QueryBrokerAccessEntryList(BrokerPlatform[] brokerPlatforms, CancellationToken clt)
        {
            var queryPageSize = 50;

            if (brokerPlatforms == null)
                brokerPlatforms = new BrokerPlatform[] { };

            var queryOption = new ReqBrokerAccessOption { Platforms = new THashSet<BrokerPlatform>() };
            queryOption.Platforms.AddRange(brokerPlatforms);

            IInterfaceInteractResponse<BrokerAccessPage> lastPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<BrokerAccessEntry>(pageIndex => {
                if (clt.IsCancellationRequested) return null;

                var resp = XqThriftLibConfigurationManager.SharedInstance.BrokerServiceHttpStub.
                    reqBrokerAccess(queryOption, pageIndex, queryPageSize);

                lastPageResp = resp;

                if (resp == null) return null;

                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<BrokerAccessEntry>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.Total,
                    Page = pageInfo?.Page?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.EntryId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (lastPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<BrokerAccessEntry[]>(lastPageResp.Servant,
                lastPageResp.InterfaceName,
                lastPageResp.SourceException,
                lastPageResp.HasTransportException,
                lastPageResp.HttpResponseStatusCode,
                queriedItems?.ToArray())
            {
                CustomParsedExceptionResult = lastPageResp.CustomParsedExceptionResult,
                InteractInformation = lastPageResp.InteractInformation
            };

            return tarResp;
        }

    }
}
