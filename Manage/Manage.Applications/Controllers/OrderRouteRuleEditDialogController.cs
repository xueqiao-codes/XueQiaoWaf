using Manage.Applications.DataModels;
using Manage.Applications.ViewModels;
using NativeModel.Contract;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Waf.Applications;
using xueqiao.trade.hosting;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using System.ComponentModel;
using IDLAutoGenerated.Util;
using System.Threading;
using Prism.Events;
using ContainerShell.Interfaces.Applications;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoFoundation.Shared.Helper;
using xueqiao.trade.hosting.proxy;
using business_foundation_lib.xq_thriftlib_config;

namespace Manage.Applications.Controllers
{
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class OrderRouteRuleEditDialogController : IController
    {
        private readonly ILoginDataService loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly IContainerShellService containerShellService;
        private readonly IMessageWindowService messageWindowService;
        private readonly IExchangeDataService exchangeDataService;
        private readonly OrderRouteRuleEditDialogContentViewModel pageViewModel;
        private readonly IEventAggregator eventAggregator;

        private readonly DelegateCommand saveRuleCmd;
        private readonly DelegateCommand cancelCmd;

        private IMessageWindow editDialog;

        [ImportingConstructor]
        public OrderRouteRuleEditDialogController(ILoginDataService loginDataService,
            Lazy<ILoginUserManageService> loginUserManageService,
            IContainerShellService containerShellService,
            IMessageWindowService messageWindowService,
            IExchangeDataService exchangeDataService,
            OrderRouteRuleEditDialogContentViewModel pageViewModel,
            IEventAggregator eventAggregator)
        {
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.containerShellService = containerShellService;
            this.messageWindowService = messageWindowService;
            this.exchangeDataService = exchangeDataService;
            this.pageViewModel = pageViewModel;
            this.eventAggregator = eventAggregator;

            saveRuleCmd = new DelegateCommand(DoSaveRule, CanSaveRule);
            cancelCmd = new DelegateCommand(LeaveDialog);

            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
        }

        public int CurrentOrderRouteTreeVersion { get; set; }

        public IEnumerable<OrderRouteRuleDiscreteModel> CurrentOrderRouteRules { get; set; }

        public IEnumerable<HostingTradeAccount> TradeToTradeAccounts { get; set; }

        public long SubAccountId { get; set; }

        public OrderRouteRuleListItemModel EditRule { get; set; }

        public object DialogOwner { get; set; }
        

        // request add rule relative variables
        // 是否已尝试去编辑规则
        public bool? HasTryEditedRule { get; private set; }

        // 编辑规则出错的 errorCode
        public int? EditedRuleErrorCode { get; private set; }

        public void Initialize()
        {
            if (EditRule == null) throw new ArgumentNullException("`EditRule` must be initialized before call `Initialize`.");
            var allExchanges = containerShellService.InitializeData?.AllExchanges ?? new NativeExchange[] { };

            pageViewModel.SaveCmd = saveRuleCmd;
            pageViewModel.CancelCmd = cancelCmd;
            
            var cachedTarExchange = allExchanges.FirstOrDefault(i => i.ExchangeMic == EditRule.RouteExchangeMic);
            pageViewModel.RuleExchange = cachedTarExchange ?? new NativeExchange { ExchangeMic = EditRule.RouteExchangeMic };
            
            if (EditRule.RouteLevelType != OrderRouteRuleLevelType.Exchange)
            {
                pageViewModel.RuleCommodityType = EditRule.RouteCommodityType;
                if (EditRule.RouteLevelType == OrderRouteRuleLevelType.Commodity)
                {
                    var selItems = EditRule.GroupedCommodities.ToArray()
                        .Select(i => new OrderRouteRuleCommoditySelectModel
                        {
                            Commodity = i,
                            IsChecked = true
                        }).ToArray();
                    pageViewModel.RuleCommodities.Clear();
                    pageViewModel.RuleCommodities.AddRange(selItems);
                }
            }

            pageViewModel.RuleLevelType = EditRule.RouteLevelType;
            pageViewModel.IsForbiddenRule = EditRule.IsForbiddenTradeRule;
            pageViewModel.SelectedRouteToAccountId = EditRule.RouteToTradeAccountId;

            var isOutterExchange = !exchangeDataService.IsInnerExchange(EditRule.RouteExchangeMic);
            var tarTradeAccounts = TradeToTradeAccounts?.Where(i => i.BrokerTechPlatform.IsTechPlatformSupportOutter() == isOutterExchange).ToArray();
            pageViewModel.RouteToAccountItems.AddRange(tarTradeAccounts);

            PropertyChangedEventManager.AddHandler(pageViewModel, PageViewModelPropertyChanged, "");
        }

        public void Run()
        {
            this.editDialog = messageWindowService.CreateContentCustomWindow(DialogOwner, null, null, true, false, 
                true, "编辑订单路由规则", pageViewModel.View);
            editDialog.ShowDialog();
        }

        public void Shutdown()
        {
            if (editDialog != null)
            {
                editDialog.Close();
                editDialog = null;
            }

            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
            PropertyChangedEventManager.RemoveHandler(pageViewModel, PageViewModelPropertyChanged, "");
        }

        private void PageViewModelPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            var propertyName = e.PropertyName;
            if (propertyName == nameof(OrderRouteRuleEditDialogContentViewModel.RuleLevelType)
                || propertyName == nameof(OrderRouteRuleEditDialogContentViewModel.IsForbiddenRule)
                || propertyName == nameof(OrderRouteRuleEditDialogContentViewModel.SelectedRouteToAccountId)
                || propertyName == nameof(OrderRouteRuleEditDialogContentViewModel.RuleExchange)
                || propertyName == nameof(OrderRouteRuleEditDialogContentViewModel.RuleCommodityType)
                || propertyName == nameof(OrderRouteRuleEditDialogContentViewModel.RuleCommodities))
            {
                saveRuleCmd.RaiseCanExecuteChanged();
            }
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            Shutdown();
        }

        private bool CanSaveRule()
        {
            var ruleLevelType = pageViewModel.RuleLevelType;
            if (ruleLevelType == OrderRouteRuleLevelType.Exchange)
            {
                return pageViewModel.SelectedRouteToAccountId != null
                    && pageViewModel.RuleExchange != null;
            }
            else if (ruleLevelType == OrderRouteRuleLevelType.CommodityType)
            {
                return pageViewModel.SelectedRouteToAccountId != null
                    && pageViewModel.RuleExchange != null
                    && pageViewModel.RuleCommodityType != null;
            }
            else if (ruleLevelType == OrderRouteRuleLevelType.Commodity)
            {
                return pageViewModel.SelectedRouteToAccountId != null
                    && pageViewModel.RuleExchange != null
                    && pageViewModel.RuleCommodityType != null
                    && pageViewModel.RuleCommodities != null;
            }
            return false;
        }

        private void DoSaveRule()
        {
            var ruleLevelType = pageViewModel.RuleLevelType;
            var ruleExchangeMic = pageViewModel.RuleExchange?.ExchangeMic;
            var ruleCommodityType = pageViewModel.RuleCommodityType;
            var ruleCommodities = pageViewModel.RuleCommodities?.ToArray();
            var isForbiddenRule = pageViewModel.IsForbiddenRule;
            var routeToAccountId = pageViewModel.SelectedRouteToAccountId;

            if (routeToAccountId == null)
            {
                messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, "请选择路由目标资金账号！");
                return;
            }

            if (ruleExchangeMic == null)
            {
                messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, "请选择交易所！");
                return;
            }

            if (ruleLevelType == OrderRouteRuleLevelType.Exchange)
            {
                Task.Run(() =>
                {
                    var list = new List<OrderRouteRuleDiscreteModel>(CurrentOrderRouteRules);

                    // 删除原来该节点的配置
                    list.RemoveAll(i => i.RouteLevelType == OrderRouteRuleLevelType.Exchange
                        && i.RouteExchangeMic == ruleExchangeMic);

                    // 添加该节点的配置
                    list.Add(new OrderRouteRuleDiscreteModel
                    {
                        RouteLevelType = OrderRouteRuleLevelType.Exchange,
                        IsForbiddenTradeRule = isForbiddenRule,
                        RouteToTradeAccountId = (long)routeToAccountId,
                        RouteExchangeMic = ruleExchangeMic
                    });

                    UpdateHostingOrderRouteTreeWithDiscreteRules(list.ToArray());
                });
            }
            else if (ruleLevelType == OrderRouteRuleLevelType.CommodityType)
            {
                if (ruleCommodityType == null)
                {
                    messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, "请选择商品类型！");
                    return;
                }
                Task.Run(() =>
                {
                    var list = new List<OrderRouteRuleDiscreteModel>(CurrentOrderRouteRules);

                    // 删除原来该节点的配置
                    list.RemoveAll(i => i.RouteLevelType == OrderRouteRuleLevelType.CommodityType
                        && i.RouteExchangeMic == ruleExchangeMic
                        && i.RouteCommodityType == ruleCommodityType);

                    // 添加该节点的配置
                    list.Add(new OrderRouteRuleDiscreteModel
                    {
                        RouteLevelType = OrderRouteRuleLevelType.CommodityType,
                        IsForbiddenTradeRule = isForbiddenRule,
                        RouteToTradeAccountId = (long)routeToAccountId,
                        RouteExchangeMic = ruleExchangeMic,
                        RouteCommodityType = (int)ruleCommodityType
                    });

                    UpdateHostingOrderRouteTreeWithDiscreteRules(list.ToArray());
                });
            }
            else if (ruleLevelType == OrderRouteRuleLevelType.Commodity)
            {
                if (ruleCommodities == null || ruleCommodities.Count() == 0)
                {
                    return;
                }

                Task.Run(() =>
                {
                    var list = new List<OrderRouteRuleDiscreteModel>(CurrentOrderRouteRules);

                    // 删除原来该节点的配置
                    list.RemoveAll(i => i.RouteLevelType == OrderRouteRuleLevelType.Commodity
                        && i.RouteExchangeMic == ruleExchangeMic
                        && i.RouteCommodityType == ruleCommodityType
                        && ruleCommodities.Any(j => j.Commodity?.ExchangeMic == ruleExchangeMic
                            && j.Commodity.SledCommodityType == ruleCommodityType
                            && j.Commodity.SledCommodityCode == i.RouteCommoditycode));

                    // 添加勾选的节点的配置
                    list.AddRange(ruleCommodities.Where(i=>i.IsChecked).Select(i => new OrderRouteRuleDiscreteModel
                    {
                        RouteLevelType = OrderRouteRuleLevelType.Commodity,
                        IsForbiddenTradeRule = isForbiddenRule,
                        RouteToTradeAccountId = (long)routeToAccountId,
                        RouteExchangeMic = ruleExchangeMic,
                        RouteCommodityType = (int)ruleCommodityType,
                        RouteCommoditycode = i.Commodity.SledCommodityCode
                    }).ToArray());

                    UpdateHostingOrderRouteTreeWithDiscreteRules(list.ToArray());
                });
            }
        }

        private void UpdateHostingOrderRouteTreeWithDiscreteRules(IEnumerable<OrderRouteRuleDiscreteModel> rules)
        {
            if (rules == null) return;
            var newTreeExchangeNodes = rules.ToArray().DiscreteOrderRouteRules2OrderRouteTree();
            var newTreeObj = new HostingOrderRouteTree
            {
                ConfigVersion = (CurrentOrderRouteTreeVersion + 1),
                SubExchangeNodes = newTreeExchangeNodes
            };

            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return;

            // 更新配置
            HasTryEditedRule = null;
            EditedRuleErrorCode = null;
            XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                .updateHostingOrderRouteTreeAsync(landingInfo, SubAccountId, newTreeObj, CancellationToken.None)
                .ContinueWith(t =>
                {
                    var resp = t.Result;
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        if (resp.CustomParsedExceptionResult?.BusinessErrorCode != null)
                        {
                            EditedRuleErrorCode = resp.CustomParsedExceptionResult?.BusinessErrorCode;
                        }
                        else if (resp.SourceException != null)
                        {
                            messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, 
                                resp.CustomParsedExceptionResult?.BusinessErrorMessage ?? "添加路由规则失败，请稍后再试！");
                            return;
                        }
                        HasTryEditedRule = true;
                        pageViewModel.CloseDisplayInWindow();
                    });
                });
        }

        private void LeaveDialog()
        {
            HasTryEditedRule = null;
            EditedRuleErrorCode = null;
            pageViewModel.CloseDisplayInWindow();
        }

    }
}
