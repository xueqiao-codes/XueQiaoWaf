using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation;
using lib.xqclient_base.thriftapi_mediation.Interface;
using Manage.Applications.DataModels;
using Manage.Applications.ViewModels;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Waf.Applications;
using Thrift.Collections;
using xueqiao.trade.hosting;
using xueqiao.trade.hosting.proxy;
using xueqiao.trade.hosting.terminal.ao;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Interface;
using XueQiaoFoundation.UI.Components.MessageWindow.Services;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications.Controllers
{
    [Export, PartCreationPolicy(CreationPolicy.NonShared)]
    internal class SubAccountAuthToSubUsersDialogController : IController
    {
        private readonly IMessageWindowService messageWindowService;
        private readonly IEventAggregator eventAggregator;
        private readonly ILoginDataService loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly SubAccountAuthToSubUserDialogContentViewModel pageViewModel;

        private readonly AsyncDelegateCommand saveCmd;
        private readonly DelegateCommand cancelCmd;
        
        private readonly SubAccountAuthToSubUsersCheckViewData editingSubUsersCheckViewData = new SubAccountAuthToSubUsersCheckViewData();
        private IEnumerable<int> queriedOriginAuthedSubUserIds;

        private IMessageWindow configureDialog;
        
        [ImportingConstructor]
        public SubAccountAuthToSubUsersDialogController(IMessageWindowService messageWindowService,
            IEventAggregator eventAggregator,
            ILoginDataService loginDataService,
            Lazy<ILoginUserManageService> loginUserManageService,
            SubAccountAuthToSubUserDialogContentViewModel pageViewModel)
        {
            this.messageWindowService = messageWindowService;
            this.eventAggregator = eventAggregator;
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.pageViewModel = pageViewModel;

            saveCmd = new AsyncDelegateCommand(DoSaveConfiguration);
            cancelCmd = new DelegateCommand(LeaveDialog);

            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
        }

        public object DialogOwner { get; set; }

        public long ToConfigureSubAccountId { get; set; }

        /// <summary>
        /// 是否成功设置的结果
        /// </summary>
        public bool? ConfiguredResult { get; private set; }

        public void Initialize()
        {
            pageViewModel.SubUsersCheckViewData = editingSubUsersCheckViewData;
            pageViewModel.SaveCmd = saveCmd;
            pageViewModel.CancelCmd = cancelCmd;
        }
        
        public void Run()
        {
            AsyncLoadInitialDatas();

            configureDialog = messageWindowService.CreateContentCustomWindow(DialogOwner, null, null, true, false, 
                true, "用户管理", pageViewModel.View);
            configureDialog.ShowDialog();
        }

        public void Shutdown()
        {
            if (configureDialog != null)
            {
                configureDialog.Close();
                configureDialog = null;
            }
            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
        }

        private void AsyncLoadInitialDatas()
        {
            var taskFactory = new TaskFactory();
            var tasks = new List<Task>();

            IEnumerable<SubUserSelectModel> queiredAllSubUserDataModels = null;
            tasks.Add(taskFactory.StartNew(() =>
            {
                queiredAllSubUserDataModels = QueryAllSubUsers(CurrentLoginLandingInfo())?
                    .CorrectResult?
                    .Select(i => new SubUserSelectModel(i.SubUserId) { SubUserInfo = i, IsChecked = false })
                    .ToArray();
            }));

            IEnumerable<int> authedSubUserIds = null;
            tasks.Add(taskFactory.StartNew(() =>
            {
                List<HostingSubAccountRelatedItem> accountRelatedItems = null;
                XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                    .getSARUTBySubAccountId(CurrentLoginLandingInfo(), new THashSet<long> { ToConfigureSubAccountId })
                    .CorrectResult?
                    .TryGetValue(ToConfigureSubAccountId, out accountRelatedItems);
                if (accountRelatedItems != null)
                {
                    authedSubUserIds = accountRelatedItems.Select(i => i.SubUserId).ToArray();
                }
            }));

            taskFactory.ContinueWhenAll(tasks.ToArray(), completedTs =>
            {
                this.queriedOriginAuthedSubUserIds = authedSubUserIds;
                if (queiredAllSubUserDataModels?.Any() == true)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        foreach (var userItem in queiredAllSubUserDataModels)
                        {
                            userItem.IsChecked = authedSubUserIds?.Contains(userItem.SubUserId) ?? false;
                            editingSubUsersCheckViewData.ToCheckSubUsers.Add(userItem);
                        }
                    });
                }
            });
        }

        private LandingInfo CurrentLoginLandingInfo()
        {
            return loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            Shutdown();
        }

        private async Task DoSaveConfiguration()
        {
            var landingInfo = CurrentLoginLandingInfo();
            if (landingInfo == null) return;
            
            var subAccountId = this.ToConfigureSubAccountId;
            var checkedSubUserIds = editingSubUsersCheckViewData.ToCheckSubUsers
                .Where(i => i.IsChecked)
                .Select(i => i.SubUserId).ToArray();
            if (checkedSubUserIds.Any() != true)
            {
                if (messageWindowService.ShowQuestionDialog(pageViewModel.DisplayInWindow, null, null, null,
                    "不设置分配任何用户吗?", false, "不分配", "再想想") != true)
                {
                    return;
                }
            }

            var relatedSubUserIds = new THashSet<int>();
            foreach (var _id in checkedSubUserIds)
            {
                relatedSubUserIds.Add(_id);
            }

            // 取消关联的用户
            var unRelatedSubUserIds = queriedOriginAuthedSubUserIds?.Except(checkedSubUserIds) ?? new int[] { };
            var unRelatedSubUserIdSet = new THashSet<int>();
            foreach (var i in unRelatedSubUserIds)
            {
                unRelatedSubUserIdSet.Add(i);
            }

            var resp = await XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.assignSubAccountRelatedUsersAsync(landingInfo, 
                subAccountId, relatedSubUserIds, unRelatedSubUserIdSet, CancellationToken.None);

            DispatcherHelper.CheckBeginInvokeOnUI(() =>
            {
                if (resp.SourceException != null)
                {
                    var errorMsg = $"分配用户失败 \n{(resp.CustomParsedExceptionResult?.BusinessErrorMessage ?? "")}";
                    messageWindowService.ShowMessageDialog(pageViewModel.DisplayInWindow, null, null, null, errorMsg, "知道了");
                    return;
                }

                ConfiguredResult = true;
                pageViewModel.CloseDisplayInWindow();
            });
        }

        private void LeaveDialog()
        {
            ConfiguredResult = null;
            pageViewModel.CloseDisplayInWindow();
        }

        private IInterfaceInteractResponse<IEnumerable<HostingUser>> QueryAllSubUsers(LandingInfo landingInfo)
        {
            if (landingInfo == null) return null;
            var queryPageSize = 50;
            IInterfaceInteractResponse<QueryHostingUserPage> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<HostingUser>(pageIndex => {
                var option = new QueryHostingUserOption { OrderType = HostingUserOrderType.OrderByCreateTimestampDesc };
                var pageOption = new IndexedPageOption
                {
                    NeedTotalCount = true,
                    PageIndex = pageIndex,
                    PageSize = queryPageSize,
                };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getHostingUserPage(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<HostingUser>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.TotalCount,
                    Page = pageInfo?.ResultList?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.SubUserId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<HostingUser>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems)
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };
            return tarResp;
        }
    }
}
