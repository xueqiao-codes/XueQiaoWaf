using AppAssembler.Interfaces.Applications;
using ContainerShell.Interfaces.Applications;
using ContainerShell.Interfaces.DataModels;
using IDLAutoGenerated.Util;
using lib.xqclient_base.logger;
using lib.xqclient_base.thriftapi_mediation.Interface;
using Manage.Applications.Controllers;
using Manage.Applications.ServiceControllers;
using Manage.Applications.Services;
using Manage.Interfaces.Applications;
using NativeModel.Trade;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.ComponentModel.Composition.Hosting;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Timers;
using System.Waf.Applications;
using xueqiao.trade.hosting.proxy;
using xueqiao.trade.hosting.terminal.ao;
using XueQiaoFoundation.BusinessResources.Constants;
using XueQiaoFoundation.BusinessResources.Models;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Model;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications
{
    [Export(typeof(IModuleController)), Export(typeof(IManageModuleService)), PartCreationPolicy(CreationPolicy.Shared)]
    internal class ModuleController : IModuleController, IManageModuleService
    {
        private readonly CompositionContainer compositionContainer;
        private readonly Lazy<ILoginDataService> loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly Lazy<IContainerShellService> containerShellService;
        private readonly Lazy<IAppAssemblerService> appAssemblerService;
        private readonly ExportFactory<ManageModuleRootViewCtrl> moduleRootViewCtrlFactory;
        private readonly Lazy<IPositionVerifyTradeInputItemsCtrl> settlementXqPreviewTradeItemsCtrl;
        private readonly Lazy<IUserSettingSyncController> userSettingSyncCtrl;
        private readonly Lazy<PADataSource> PADataSource;
        private readonly Lazy<IUATPAController> UATPAController;

        private IEnumerable<IManageModuleSingletonController> moduleSingletonCtrls;
        private ManageModuleRootViewCtrl moduleRootViewCtrl;

        // 同步云端用户设置数据定时器
        private Timer cloudUserSettingsSyncTimer;
        private readonly TaskFactory cloudUserSettingsSyncTimerTaskFactory = new TaskFactory(new OrderedTaskScheduler());


        private bool shutdowned;

        [ImportingConstructor]
        public ModuleController(CompositionContainer compositionContainer, 
            Lazy<ILoginDataService> loginDataService,
            Lazy<ILoginUserManageService> loginUserManageService,
            Lazy<IContainerShellService> containerShellService,
            Lazy<IAppAssemblerService> appAssemblerService,
            ExportFactory<ManageModuleRootViewCtrl> moduleRootViewCtrlFactory,
            Lazy<IPositionVerifyTradeInputItemsCtrl> settlementXqPreviewTradeItemsCtrl,
            Lazy<IUserSettingSyncController> userSettingSyncCtrl,
            Lazy<PADataSource> PADataSource,
            Lazy<IUATPAController> UATPAController)
        {
            this.compositionContainer = compositionContainer;
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.containerShellService = containerShellService;
            this.appAssemblerService = appAssemblerService;
            this.moduleRootViewCtrlFactory = moduleRootViewCtrlFactory;
            this.settlementXqPreviewTradeItemsCtrl = settlementXqPreviewTradeItemsCtrl;
            this.userSettingSyncCtrl = userSettingSyncCtrl;
            this.PADataSource = PADataSource;
            this.UATPAController = UATPAController;
        }

        public void Initialize()
        {
            loginUserManageService.Value.IsLogouting += RecvUserIsLogouting;
            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
            appAssemblerService.Value.AppShutdown += RecvAppShutdown;
            containerShellService.Value.XqInitializeDataInitialized += ReceiveInitialDataInitialized;

            moduleSingletonCtrls = compositionContainer.GetExportedValues<IManageModuleSingletonController>().ToArray();
        }
        
        public void Run()
        {

        }

        public void Shutdown()
        {
            if (this.shutdowned) return;
            this.shutdowned = true;

            StopCloudUserSettingsSyncTimer();

            moduleRootViewCtrl?.Shutdown();
            moduleRootViewCtrl = null;

            PADataSource.Value.SafelyOperationPreviewAssignItems(_DSPAItems =>
            {
                _DSPAItems.Clear();
            });

            loginUserManageService.Value.IsLogouting -= RecvUserIsLogouting;
            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
            appAssemblerService.Value.AppShutdown -= RecvAppShutdown;
            containerShellService.Value.XqInitializeDataInitialized -= ReceiveInitialDataInitialized;
            
            foreach (var ctrl in moduleSingletonCtrls)
            {
                ctrl.Shutdown();
            }
        }

        public object GetManageModuleRootView(Func<ChromeWindowCaptionDataHolder> embedInWindowCaptionDataHolderGetter,
            out Action showAction, out Action closeAction)
        {
            showAction = null;
            closeAction = null;
            
            if (this.moduleRootViewCtrl != null)
                return this.moduleRootViewCtrl.ContentView;

            this.moduleRootViewCtrl = moduleRootViewCtrlFactory.CreateExport().Value;
            this.moduleRootViewCtrl.EmbedInWindowCaptionDataHolder = embedInWindowCaptionDataHolderGetter?.Invoke();

            this.moduleRootViewCtrl.Initialize();
            this.moduleRootViewCtrl.Run();

            return this.moduleRootViewCtrl.ContentView;
        }
        
        private void RecvUserIsLogouting(ProxyLoginResp currentLoginResp)
        {
            StopCloudUserSettingsSyncTimer();
            SyncCloudUserSettings(currentLoginResp?.HostingSession?.HostingSession2LandingInfo());
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            // shut down current manage node page controller
            this.moduleRootViewCtrl?.Shutdown();
            this.moduleRootViewCtrl = null;
            PADataSource.Value.SafelyOperationPreviewAssignItems(_DSPAItems =>
            {
                _DSPAItems.Clear();
            });
        }
        
        private void RecvAppShutdown()
        {
            StopCloudUserSettingsSyncTimer();
            SyncCloudUserSettings(loginDataService.Value.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo());
            Shutdown();
        }

        private void ReceiveInitialDataInitialized(InitializeDataRoot initializedData)
        {
            if (initializedData != null)
            {
                AddInitialXqTPIItems(initializedData);
                AddInitialPPAItems(initializedData);
            }

            StartCloudUserSettingsSyncTimer();
        }

        private void AddInitialXqTPIItems(InitializeDataRoot initializedData)
        {
            var xqTPIItems = initializedData?.LoginUserSettingDataTreePackage?.XqTPIDataTree?.XqTPIItems;
            if (xqTPIItems?.Any() != true) return;

            foreach (var item in xqTPIItems)
            {
                settlementXqPreviewTradeItemsCtrl.Value.AddOrUpdateItem(item.Key, item.FAccId, item.VerifyDailySec,
                    isExist => 
                    {
                        if (isExist) return null;
                        ClientTradeDirection? dir = null;
                        if (item.Dir != null && Enum.TryParse(item.Dir.ToString(), out ClientTradeDirection _dir))
                        {
                            dir = _dir;
                        }
                        return new XqPreviewInputTradeItemUpdateTemplate
                        {
                            ContractId = item.CId,
                            TradeTimestamp = item.TradeTS,
                            Direction = dir,
                            Quantity = item.Quantity,
                            Price = item.Price,
                        };
                    });
            }
        }

        private void AddInitialPPAItems(InitializeDataRoot initializedData)
        {
            var initialPPAItems = initializedData.LoginUserSettingDataTreePackage?.PPADataTree?.PAItems;
            if (initialPPAItems?.Any() != true) return;

            PADataSource.Value.SafelyOperationPreviewAssignItems(_DSPAItems => 
            {
                _DSPAItems.Clear();
                foreach (var item in initialPPAItems) { _DSPAItems.Add(item); }
            });
            UATPAController.Value.RefreshUATItemsForce(null);
        }

        private XqTPIDataTree GetXqTPIDataRunningInModule()
        {
            if (this.moduleRootViewCtrl == null) return null;
            return new XqTPIDataTree
            {
                XqTPIItems = settlementXqPreviewTradeItemsCtrl.Value.AllItems?.Where(i=>i.IsPreservable)
                .Select(i => new XqTPIItem
                {
                    Key = i.Key,
                    FAccId = i.FundAccountId,
                    CId = i.ContractId,
                    TradeTS = i.TradeTimestamp,
                    Dir = i.Direction?.GetHashCode(),
                    Price = i.Price,
                    Quantity = i.Quantity,
                    VerifyDailySec = i.BelongVerifyDailySec
                }).ToArray()
            };
        }

        private PPADataTree GetPPADataRunningInModule()
        {
            if (this.moduleRootViewCtrl == null) return null;
            PPAItem[] PPAItems = null;
            PADataSource.Value.SafelyOperationPreviewAssignItems(_DSPAItems => 
            {
                PPAItems = _DSPAItems.ToArray();
            });

            return new PPADataTree
            {
                PAItems = PPAItems
            };
        }

        private void SyncCloudUserSettings(LandingInfo landingInfo)
        {
            if (landingInfo == null) return;

            AppLog.Debug("Begin synchronize `Manage` module ClouldUserSettings.");

            var XqTPIDataTree = GetXqTPIDataRunningInModule();
            var PPADataTree = GetPPADataRunningInModule();


            var taskFactory = new TaskFactory();
            var tasks = new List<Task>();

            // update XqTPIDataTree
            if (XqTPIDataTree != null)
            {
                tasks.Add(taskFactory.StartNew(() =>
                {
                    var content = JsonConvert.SerializeObject(XqTPIDataTree);
                    if (content == null) return;
                    userSettingSyncCtrl.Value.UpdateUserSetting(new UserSettingUpdateReq(XueQiaoConstants.UserSettingKey_XqTPIData,
                        content, landingInfo), out IInterfaceInteractResponse resp);
                }));
            }

            // update PPAData
            if (PPADataTree != null)
            {
                tasks.Add(taskFactory.StartNew(() => 
                {
                    var content = JsonConvert.SerializeObject(PPADataTree);
                    if (content == null) return;
                    userSettingSyncCtrl.Value.UpdateUserSetting(new UserSettingUpdateReq(XueQiaoConstants.UserSettingKey_PPAData,
                        content, landingInfo), out IInterfaceInteractResponse resp);
                }));
            }
            
            var taskArr = tasks.ToArray();
            Task.WaitAll(taskArr);

            AppLog.Debug($"End synchronize `Manage` module ClouldUserSettings.");
        }

        private void StartCloudUserSettingsSyncTimer()
        {
            StopCloudUserSettingsSyncTimer();
            cloudUserSettingsSyncTimer = new System.Timers.Timer();
            cloudUserSettingsSyncTimer.Elapsed += SyncUserDataTimer_Elapsed;
            cloudUserSettingsSyncTimer.Interval = 25000; // 25 秒进行一次同步
            cloudUserSettingsSyncTimer.Start();
        }

        private void StopCloudUserSettingsSyncTimer()
        {
            if (cloudUserSettingsSyncTimer != null)
            {
                cloudUserSettingsSyncTimer.Stop();
                cloudUserSettingsSyncTimer.Elapsed -= SyncUserDataTimer_Elapsed;
                cloudUserSettingsSyncTimer.Dispose();
                cloudUserSettingsSyncTimer = null;
            }
        }

        private void SyncUserDataTimer_Elapsed(object sender, ElapsedEventArgs e)
        {
            cloudUserSettingsSyncTimerTaskFactory.StartNew(() =>
            {
                SyncCloudUserSettings(loginDataService.Value.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo());
            });
        }
    }
}
