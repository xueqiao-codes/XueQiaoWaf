using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation;
using lib.xqclient_base.thriftapi_mediation.Interface;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Thrift.Collections;
using xueqiao.trade.hosting;
using xueqiao.trade.hosting.terminal.ao;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Helper.WeakDelegate;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Manage.Applications.ServiceControllers
{
    [Export(typeof(IManageFundAccountQueryCtrl)), Export(typeof(IManageModuleSingletonController)),
       PartCreationPolicy(CreationPolicy.Shared)]
    internal class ManageFundAccountQueryCtrl : IManageFundAccountQueryCtrl, IManageModuleSingletonController
    {
        private readonly ILoginDataService loginDataService;
        private readonly IManageFundAccountCacheCtrl manageFundAccountCacheCtrl;

        private readonly IDIncreaser queryAllAccountsReqIdIncreaser = new IDIncreaser();
        private readonly object queryAllAccountsLock = new object();
        private Task<IInterfaceInteractResponse<IEnumerable<HostingTradeAccount>>> queryAllAccountsTask;
        private CancellationTokenSource queryAllAccountsCts;
        private readonly Dictionary<long, ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingTradeAccount>>>>
            allAccountsQueriedCallbackHandlers = new Dictionary<long, ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingTradeAccount>>>>();

        [ImportingConstructor]
        public ManageFundAccountQueryCtrl(
            ILoginDataService loginDataService,
            IManageFundAccountCacheCtrl manageFundAccountCacheCtrl)
        {
            this.loginDataService = loginDataService;
            this.manageFundAccountCacheCtrl = manageFundAccountCacheCtrl;
        }

        public void Shutdown()
        {
            lock (queryAllAccountsLock)
            {
                if (queryAllAccountsCts != null)
                {
                    queryAllAccountsCts.Cancel();
                    queryAllAccountsCts.Dispose();
                    queryAllAccountsCts = null;
                }
                allAccountsQueriedCallbackHandlers.Clear();
            }
        }

        public long QueryAllFundAccounts(ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingTradeAccount>>> handler)
        {
            lock (queryAllAccountsLock)
            {
                long reqId = queryAllAccountsReqIdIncreaser.RequestIncreasedId();
                if (handler != null)
                {
                    allAccountsQueriedCallbackHandlers.Add(reqId, handler);
                }

                if (queryAllAccountsTask != null
                    && queryAllAccountsTask.IsCanceled == false
                    && queryAllAccountsTask.IsCompleted == false
                    && queryAllAccountsTask.IsFaulted == false)
                {
                    return reqId;
                }

                if (queryAllAccountsCts != null)
                {
                    queryAllAccountsCts.Cancel();
                    queryAllAccountsCts.Dispose();
                    queryAllAccountsCts = null;
                }
                queryAllAccountsCts = new CancellationTokenSource();
                var cancelToken = queryAllAccountsCts.Token;
                queryAllAccountsTask = Task.Run(() => QueryAllFundAccounts(cancelToken, true), cancelToken);
                queryAllAccountsTask.ContinueWith(task =>
                {
                    if (cancelToken.IsCancellationRequested) return;
                    CallbackForAllFundAccoiuntsQueriedResponse(task.Result);
                }, cancelToken);

                return reqId;
            }
        }

        public void RemoveQueryAllFundAccountsHandler(long reqId)
        {
            lock (queryAllAccountsLock)
            {
                allAccountsQueriedCallbackHandlers.Remove(reqId);
            }
        }

        public IInterfaceInteractResponse<IEnumerable<HostingTradeAccount>> QueryAllFundAccounts(CancellationToken cancelToken)
        {
            var resp = QueryAllFundAccounts(cancelToken, true);
            if (cancelToken.IsCancellationRequested) return null;
            CallbackForAllFundAccoiuntsQueriedResponse(resp);
            return resp;
        }

        public IInterfaceInteractResponse<HostingTradeAccount> QueryFundAccount(long subAccountId)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;

            var option = new QueryHostingTradeAccountOption
            {
                TradeAccountId = subAccountId
            };
            var pageOption = new IndexedPageOption
            {
                PageIndex = 0,
                PageSize = 1
            };
            var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getTradeAccountPage(landingInfo, option, pageOption);
            if (resp == null) return null;

            var tarResp = new InterfaceInteractResponse<HostingTradeAccount>(resp.Servant,
                    resp.InterfaceName,
                    resp.SourceException,
                    resp.HasTransportException,
                    resp.HttpResponseStatusCode,
                    resp.CorrectResult?.ResultList?.FirstOrDefault())
            {
                InteractInformation = resp.InteractInformation,
                CustomParsedExceptionResult = resp.CustomParsedExceptionResult
            };

            // Cache exchange
            if (tarResp.CorrectResult != null)
            {
                CacheFundAccountItems(new HostingTradeAccount[] { tarResp.CorrectResult });
            }

            return tarResp;


        }

        private void CallbackForAllFundAccoiuntsQueriedResponse(IInterfaceInteractResponse<IEnumerable<HostingTradeAccount>> resp)
        {
            if (resp == null) return;
            lock (queryAllAccountsLock)
            {
                var callbackHandlers = allAccountsQueriedCallbackHandlers.Values.ToArray();
                allAccountsQueriedCallbackHandlers.Clear();

                foreach (var item in callbackHandlers)
                {
                    item.Target?.Invoke(resp);
                }
            }
        }

        private void CacheFundAccountItems(IEnumerable<HostingTradeAccount> accountItems)
        {
            if (accountItems == null) return;
            foreach (var item in accountItems)
            {
                manageFundAccountCacheCtrl.Cache(item.TradeAccountId, item);
            }
        }

        private IInterfaceInteractResponse<IEnumerable<HostingTradeAccount>> QueryAllFundAccounts(CancellationToken cancelToken, bool cacheQueriedItems)
        {
            var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
            if (landingInfo == null) return null;
            var queryPageSize = 50;
            IInterfaceInteractResponse<QueryHostingTradeAccountPage> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<HostingTradeAccount>(pageIndex => {

                if (cancelToken.IsCancellationRequested) return null;

                var option = new QueryHostingTradeAccountOption
                {
                    NotInAccountStates = new THashSet<TradeAccountState> { TradeAccountState.ACCOUNT_REMOVED }
                };
                var pageOption = new IndexedPageOption
                {
                    NeedTotalCount = true,
                    PageIndex = pageIndex,
                    PageSize = queryPageSize
                };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getTradeAccountPage(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<HostingTradeAccount>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.TotalCount,
                    Page = pageInfo?.ResultList?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.TradeAccountId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<HostingTradeAccount>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems)
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };

            if (cacheQueriedItems)
            {
                CacheFundAccountItems(tarResp.CorrectResult);
            }

            return tarResp;
        }
    }
}
