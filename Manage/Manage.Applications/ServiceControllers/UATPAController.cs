using Manage.Applications.DataModels;
using Manage.Applications.ServiceControllers.Events;
using Manage.Applications.Services;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using xueqiao.trade.hosting.position.adjust.thriftapi;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using IDLAutoGenerated.Util;
using xueqiao.trade.hosting.terminal.ao;
using System.Threading;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Interfaces.Helper;
using XueQiaoFoundation.BusinessResources.Models;
using xueqiao.trade.hosting.position.adjust.assign.thriftapi;
using NativeModel.Trade;
using lib.xqclient_base.thriftapi_mediation.Interface;
using lib.xqclient_base.thriftapi_mediation;
using System.Threading.Tasks.Schedulers;
using xueqiao.trade.hosting.proxy;
using business_foundation_lib.xq_thriftlib_config;
using XueQiaoFoundation.Shared.Model;

namespace Manage.Applications.ServiceControllers
{
    /// <summary>
    /// 职责：
    /// 1.管理资金账户的未分配成交列表
    /// 2.管理持仓预分配
    /// </summary>
    [Export(typeof(IUATPAController)), Export(typeof(IManageModuleSingletonController)),
        PartCreationPolicy(CreationPolicy.Shared)]
    internal class UATPAController : IUATPAController, IManageModuleSingletonController
    {
        private readonly PADataSource PADataSource;
        private readonly UATPAService UATPAService;
        private readonly IContractItemTreeQueryController contractItemTreeQueryCtrl;
        private readonly IManageSubAccountQueryCtrl manageSubAccountQueryCtrl;
        private readonly IManageSubAccountCacheCtrl manageSubAccountCacheCtrl;
        private readonly IManageFundAccountQueryCtrl manageFundAccountQueryCtrl;
        private readonly IManageFundAccountCacheCtrl manageFundAccountCacheCtrl;
        private readonly IManageFundAccountItemsController manageFundAccountItemsCtrl;
        private readonly ILoginDataService loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly IEventAggregator eventAggregator;
        
        /// <summary>
        /// 未分配成交的预分配项
        /// </summary>
        private readonly List<PositionPreviewAssignDM> PAItems = new List<PositionPreviewAssignDM>();
        private readonly object PAItemsLock = new object();

        /// <summary>
        /// 未分配成交项列表
        /// </summary>
        private readonly List<UnAssignTradeDM> UATItems = new List<UnAssignTradeDM>();
        private readonly object UATItemsLock = new object();

        #region 未分配持仓刷新相关
        private readonly object UATItemsRefreshLock = new object();
        private readonly TaskFactory UATItemsRefreshTaskFactory = new TaskFactory(new LimitedConcurrencyLevelTaskScheduler(2));
        private CancellationTokenSource UATItemsRefreshCTS;
        private readonly Dictionary<long, FundAccountRelatedDataRefreshStateHolder> UATItemsRereshStateHolders
            = new Dictionary<long, FundAccountRelatedDataRefreshStateHolder>();
        #endregion

        [ImportingConstructor]
        public UATPAController(
            PADataSource PADataSource,
            UATPAService UATPAService,
            IContractItemTreeQueryController contractItemTreeQueryCtrl,
            IManageSubAccountQueryCtrl manageSubAccountQueryCtrl,
            IManageSubAccountCacheCtrl manageSubAccountCacheCtrl,
            IManageFundAccountQueryCtrl manageFundAccountQueryCtrl,
            IManageFundAccountCacheCtrl manageFundAccountCacheCtrl,
            IManageFundAccountItemsController manageFundAccountItemsCtrl,
            ILoginDataService loginDataService,
               Lazy<ILoginUserManageService> loginUserManageService,
            IEventAggregator eventAggregator)
        {
            this.PADataSource = PADataSource;
            this.UATPAService = UATPAService;
            this.contractItemTreeQueryCtrl = contractItemTreeQueryCtrl;
            this.manageSubAccountQueryCtrl = manageSubAccountQueryCtrl;
            this.manageSubAccountCacheCtrl = manageSubAccountCacheCtrl;
            this.manageFundAccountQueryCtrl = manageFundAccountQueryCtrl;
            this.manageFundAccountCacheCtrl = manageFundAccountCacheCtrl;
            this.manageFundAccountItemsCtrl = manageFundAccountItemsCtrl;
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.eventAggregator = eventAggregator;

            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
            eventAggregator.GetEvent<ManageFundAccountItemsRefreshEvent>().Subscribe(RecvManageFundAccountItemsRefreshEvent);
        }

        public void Shutdown()
        {
            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
            eventAggregator.GetEvent<ManageFundAccountItemsRefreshEvent>().Unsubscribe(RecvManageFundAccountItemsRefreshEvent);
        }
        
        public event FundAccountRelatedDataRefreshStateChanged UATItemsRefreshStateChanged;
        
        public void RefreshUATItemsIfNeed(long? fundAccountId)
        {
            lock (UATItemsRefreshLock)
            {
                if (fundAccountId != null)
                {
                    FundAccountRelatedDataRefreshStateHolder refreshStateHolder = null;
                    if (!UATItemsRereshStateHolders.TryGetValue(fundAccountId.Value, out refreshStateHolder))
                    {
                        refreshStateHolder = new FundAccountRelatedDataRefreshStateHolder(fundAccountId.Value);
                        UATItemsRereshStateHolders.Add(fundAccountId.Value, refreshStateHolder);
                    }

                    if (refreshStateHolder.DataRefreshState == DataRefreshState.NotRefresh
                        || refreshStateHolder.DataRefreshState == DataRefreshState.FailedRefreshed)
                    {
                        RefreshUATItemsAndHoldRefreshState(refreshStateHolder);
                    }
                }
                else
                {
                    var allFundAccItems = manageFundAccountItemsCtrl.AllFundAccountItems?.ToArray();
                    if (allFundAccItems?.Any() == true)
                    {
                        foreach (var fundAcc in allFundAccItems)
                        {
                            RefreshUATItemsIfNeed(fundAcc.TradeAccountId);
                        }
                    }
                }
            }
        }

        public void RefreshUATItemsForce(long? fundAccountId)
        {
            lock (UATItemsRefreshLock)
            {
                if (fundAccountId != null)
                {
                    FundAccountRelatedDataRefreshStateHolder refreshStateHolder = null;
                    if (!UATItemsRereshStateHolders.TryGetValue(fundAccountId.Value, out refreshStateHolder))
                    {
                        refreshStateHolder = new FundAccountRelatedDataRefreshStateHolder(fundAccountId.Value);
                        UATItemsRereshStateHolders.Add(fundAccountId.Value, refreshStateHolder);
                    }
                    RefreshUATItemsAndHoldRefreshState(refreshStateHolder);
                }
                else
                {
                    var allFundAccItems = manageFundAccountItemsCtrl.AllFundAccountItems?.ToArray();
                    if (allFundAccItems?.Any() == true)
                    {
                        foreach (var fundAcc in allFundAccItems)
                        {
                            RefreshUATItemsForce(fundAcc.TradeAccountId);
                        }
                    }
                }
            }
        }
        
        public PositionPreviewAssignDM AddOrUpdatePAItem(PositionPreviewAssignItemKey PAItemKey, 
            Func<PositionPreviewAssignDM, PAItemUpdateTemplate> updateTemplateFactory)
        {
            if (PAItemKey == null) return null;
            lock (PAItemsLock)
            {
                var tarUATKey = new UnAssignTradeItemKey(PAItemKey.UATItemKey, PAItemKey.FundAccountId, PAItemKey.ContractId);
                var tarUATItem = GetUATItemWithItemKey(tarUATKey);
                if (tarUATItem == null)
                {
                    return null;
                }
                    
                var sameUATKeyPAItems = PAItems.Where(i => i.UATItemKey == PAItemKey.UATItemKey && i.FundAccountId == PAItemKey.FundAccountId && i.ContractId == PAItemKey.ContractId).ToArray();
                var tarPAItem = sameUATKeyPAItems.FirstOrDefault(i => i.SubAccountId == PAItemKey.SubAccountId);
                var existedTarPAItem = tarPAItem;
                var otherSameUATKeyPAItems = sameUATKeyPAItems.Except(tarPAItem != null ? new PositionPreviewAssignDM[] { tarPAItem } : new PositionPreviewAssignDM[] { }).ToArray();
                var restVolume = tarUATItem.Volume - otherSameUATKeyPAItems.Sum(i => i.Volume);
                if (restVolume <= 0)
                    return null;
                
                if (existedTarPAItem == null)
                {
                    tarPAItem = CreatePreviewAssignItem(PAItemKey);
                    tarPAItem.UATItemDirection = tarUATItem.Direction;
                    tarPAItem.UATItemPrice = tarUATItem.Price;
                    tarPAItem.UATItemTradeTimestampMs = tarUATItem.TradeTimestampMs;

                    PAItems.Add(tarPAItem);
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        tarUATItem.PAItems.Add(tarPAItem);
                        UATPAService.PAItems.Add(tarPAItem);
                    });
                }

                var updateTemplate = updateTemplateFactory?.Invoke(existedTarPAItem);
                if (updateTemplate?.Volume != null)
                {
                    var volume = Math.Min(restVolume, (int)updateTemplate?.Volume);
                    updateTemplate.Volume = volume;
                }
                UpdatePAItemWithTemplate(tarPAItem, updateTemplate);
                AddOrUpdateDataSourcePAItemWithPAItem(tarPAItem);

                return tarPAItem;
            }
        }
        
        public void RemovePAItemsWithKey(IEnumerable<PositionPreviewAssignItemKey> rmPAItemKeys)
        {
            if (rmPAItemKeys?.Any() != true) return;
            lock (PAItemsLock)
            {
                foreach (var rmPAItemKey in rmPAItemKeys)
                {
                    var tarUATItem = GetUATItemWithItemKey(new UnAssignTradeItemKey(rmPAItemKey.UATItemKey, rmPAItemKey.FundAccountId, rmPAItemKey.ContractId));
                    var rmPAItems = PAItems.Where(i => i.SubAccountId == rmPAItemKey.SubAccountId 
                            && i.UATItemKey == rmPAItemKey.UATItemKey && i.FundAccountId == rmPAItemKey.FundAccountId 
                            && i.ContractId == rmPAItemKey.ContractId)
                            .ToArray();
                    foreach (var rmItem in rmPAItems) { PAItems.Remove(rmItem); }

                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        if (tarUATItem != null)
                        {
                            foreach (var rmItem in rmPAItems)
                            {
                                tarUATItem.PAItems.Remove(rmItem);
                                UATPAService.PAItems.Remove(rmItem);
                            }
                        }

                        // 从数据源也删除
                        if (rmPAItems.Any())
                        {
                            PADataSource.SafelyOperationPreviewAssignItems(_dataSourcePAItems =>
                            {
                                foreach (var _rmItem in rmPAItems)
                                {
                                    var _rmDSPAItem = _dataSourcePAItems.FirstOrDefault(i => i.SubAccId == _rmItem.SubAccountId
                                        && i.UATKey == _rmItem.UATItemKey && i.FAccId == _rmItem.FundAccountId
                                        && i.CId == _rmItem.ContractId);
                                    if (_rmDSPAItem != null)
                                        _dataSourcePAItems.Remove(_rmDSPAItem);
                                }
                            });
                        }
                    });
                }
            }
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            CancelUATItemsRefresh();
            RemoveUATItemsForFundAccount(null);
        }

        private void RecvManageFundAccountItemsRefreshEvent(ManageFundAccountItemsRefreshEventArgs args)
        {
            if (args == null) return;
            var currentLoginUserToken = loginDataService.ProxyLoginResp?.HostingSession?.Token;
            if (currentLoginUserToken != args.LoginUserToken) return;

            // Refresh fund account's unassign trade items if need
            var fundAccountItems = args.FundAccountItems?.ToArray();
            if (fundAccountItems?.Any() == true)
            {
                foreach (var fundAcc in fundAccountItems)
                {
                    RefreshUATItemsIfNeed(fundAcc.TradeAccountId);
                }
            }
        }

        private void RemoveUATItems(IEnumerable<UnAssignTradeDM> rmUATItems)
        {
            if (rmUATItems?.Any() != true) return;
            lock (UATItemsLock)
            {       
                foreach (var rmUATItem in rmUATItems)
                {
                    UATItems.Remove(rmUATItem);
                    lock (PAItemsLock)
                    {
                        PAItems.RemoveAll(i => i.UATItemKey == rmUATItem.ItemKey
                            && i.FundAccountId == rmUATItem.FundAccountId && i.ContractId == rmUATItem.ContractId);
                    }
                }

                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    foreach (var rmUATItem in rmUATItems)
                    {
                        UATPAService.UATItems.Remove(rmUATItem);
                        UATPAService.PAItems.RemoveAll(i => i.UATItemKey == rmUATItem.ItemKey
                            && i.FundAccountId == rmUATItem.FundAccountId && i.ContractId == rmUATItem.ContractId);
                    }
                    // 也从预分配数据源删除相关项
                    PADataSource.SafelyOperationPreviewAssignItems(_DSPAItems =>
                    {
                        foreach (var _rmUATItem in rmUATItems)
                        {
                            var _rmDSPAItem = _DSPAItems.FirstOrDefault(i => i.UATKey == _rmUATItem.ItemKey
                                    && i.FAccId == _rmUATItem.FundAccountId && i.CId == _rmUATItem.ContractId);
                            if (_rmDSPAItem != null)
                                _DSPAItems.Remove(_rmDSPAItem);
                        }
                    });
                });
            }
        }

        /// <summary>
        /// 添加或修改数据源的预分配项
        /// </summary>
        /// <param name="PAItem"></param>
        private void AddOrUpdateDataSourcePAItemWithPAItem(PositionPreviewAssignDM PAItem)
        {
            if (PAItem == null) return;

            var PAItemKey = new PositionPreviewAssignItemKey(PAItem.SubAccountId, PAItem.UATItemKey, PAItem.FundAccountId, PAItem.ContractId);
            var volume = PAItem.Volume;

            PADataSource.SafelyOperationPreviewAssignItems(_dataSourcePItems =>
            {
                var _dataSourcePItem = _dataSourcePItems.FirstOrDefault(i => i.SubAccId == PAItemKey.SubAccountId
                     && i.UATKey == PAItemKey.UATItemKey && i.FAccId == PAItemKey.FundAccountId 
                     && i.CId == PAItemKey.ContractId);
                if (_dataSourcePItem == null)
                {
                    _dataSourcePItem = new PPAItem
                    {
                        SubAccId = PAItemKey.SubAccountId,
                        UATKey = PAItemKey.UATItemKey,
                        FAccId = PAItemKey.FundAccountId,
                        CId = PAItemKey.ContractId
                    };
                    _dataSourcePItems.Add(_dataSourcePItem);
                }
                _dataSourcePItem.Vol = volume;
            });
        }

        private UnAssignTradeDM GetUATItemWithItemKey(UnAssignTradeItemKey UATItemKey)
        {
            lock (UATItems)
            {
                var tarUATItem = UATItems.FirstOrDefault(i => i.ItemKey == UATItemKey.ItemKey && i.FundAccountId == UATItemKey.FundAccountId && i.ContractId == UATItemKey.ContractId);
                return tarUATItem;
            }
        }

        /// <summary>
        /// 获取合适的预分配数据源，以满足未分配成交项的剩余未分配数量
        /// </summary>
        /// <param name="UATItemKey">未分配成交项 key</param>
        /// <param name="UATItemRestUnPreviewVolume">未分配项剩余未分配数量</param>
        /// <param name="excludePAItemKeys">不包括的预分配项 key 列表</param>
        /// <returns></returns>
        private IEnumerable<PPAItem> GetAppropriateDataSourcePAItemsToSatisfyUATItemRestUnPreviewVolume(UnAssignTradeItemKey UATItemKey,
            int UATItemRestUnPreviewVolume, IEnumerable<PositionPreviewAssignItemKey> excludePAItemKeys)
        {
            if (UATItemRestUnPreviewVolume <= 0) return null;
            if (excludePAItemKeys == null) excludePAItemKeys = new PositionPreviewAssignItemKey[] { };
            List<PPAItem> resultItems = new List<PPAItem>();
            PADataSource.SafelyOperationPreviewAssignItems(_dataSourcePAItems => 
            {
                var readyItems = _dataSourcePAItems.Where(i =>
                    {
                        var _key = new PositionPreviewAssignItemKey(i.SubAccId, i.UATKey, i.FAccId, i.CId);
                        return i.UATKey == UATItemKey.ItemKey
                            && i.FAccId == UATItemKey.FundAccountId
                            && i.CId == UATItemKey.ContractId
                            && i.Vol <= UATItemRestUnPreviewVolume
                            && !excludePAItemKeys.Contains(_key);
                    }).OrderByDescending(i => i.Vol).ToArray();
                
                var restOptVolume = UATItemRestUnPreviewVolume;
                foreach (var readyItem in readyItems)
                {
                    var readyItemVolume = readyItem.Vol;
                    if (readyItemVolume <= restOptVolume)
                    {
                        resultItems.Add(readyItem);
                        restOptVolume -= readyItemVolume;
                    }
                    if (restOptVolume <= 0) break;
                }
            });
            return resultItems;
        }

        /// <summary>
        /// 删除合适的预分配项，以满足未成交项的数量
        /// </summary>
        /// <param name="UATItem"></param>
        /// <param name="UATItemVolume"></param>
        private void RemoveAppropriatePAItemsToSatisfyUATItemVolume(UnAssignTradeDM UATItem, int UATItemVolume)
        {
            if (UATItem == null) return;
            lock (PAItemsLock)
            {
                var tarPAItems = PAItems.Where(i => i.UATItemKey == UATItem.ItemKey && i.FundAccountId == UATItem.FundAccountId && i.ContractId == UATItem.ContractId)
                    .OrderBy(i => i.Volume).ToArray();
                var tarPATotalVolume = tarPAItems.Sum(i => i.Volume);
                if (tarPATotalVolume > UATItemVolume)
                {
                    // 截取预分配
                    var currentPATotalVolume = tarPATotalVolume;
                    foreach (var tarPAItem in tarPAItems)
                    {
                        PAItems.Remove(tarPAItem);
                        DispatcherHelper.CheckBeginInvokeOnUI(() =>
                        {
                            UATItem.PAItems.Remove(tarPAItem);
                            UATPAService.PAItems.Remove(tarPAItem);

                            // 同时删除数据源中的相关项
                            PADataSource.SafelyOperationPreviewAssignItems(_DSPAItems =>
                            {
                                var _rmDSPAItem = _DSPAItems.FirstOrDefault(i => i.SubAccId == tarPAItem.SubAccountId
                                    && i.UATKey == tarPAItem.UATItemKey && i.FAccId == tarPAItem.FundAccountId
                                    && i.CId == tarPAItem.ContractId);
                                if (_rmDSPAItem != null)
                                    _DSPAItems.Remove(_rmDSPAItem);
                            });
                        });

                        currentPATotalVolume -= tarPAItem.Volume;
                        if (currentPATotalVolume <= UATItemVolume) break;
                    }
                }
            }
        }

        private void RefreshUATItemsAndHoldRefreshState(FundAccountRelatedDataRefreshStateHolder refreshStateHolder)
        {
            if (refreshStateHolder == null) return;
            if (UATItemsRefreshCTS == null)
            {
                UATItemsRefreshCTS = new CancellationTokenSource();
            }
            var cancelToken = UATItemsRefreshCTS.Token;
            UATItemsRefreshTaskFactory.StartNew(() =>
            {
                if (cancelToken.IsCancellationRequested) return;

                var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
                if (landingInfo == null) return;

                refreshStateHolder.DataRefreshState = DataRefreshState.Refreshing;
                UATItemsRefreshStateChanged?.Invoke(new FundAccountRelatedDataRefreshStateChangedArgs(landingInfo.SubUserId, refreshStateHolder.FundAccountId, refreshStateHolder.DataRefreshState));

                var resp = QueryUnAssignPositionItems(landingInfo, refreshStateHolder.FundAccountId, cancelToken);
                
                refreshStateHolder.DataRefreshState = (resp?.SourceException == null) ? DataRefreshState.SuccessRefreshed : DataRefreshState.FailedRefreshed;

                if (resp == null) return;
                if (cancelToken.IsCancellationRequested) return;

                UATItemsRefreshStateChanged?.Invoke(new FundAccountRelatedDataRefreshStateChangedArgs(landingInfo.SubUserId, refreshStateHolder.FundAccountId, refreshStateHolder.DataRefreshState));

                var queriedResultList = resp.CorrectResult;
                if (resp.SourceException != null) return;

                QueriedSourceUATItems(refreshStateHolder.FundAccountId, queriedResultList);
            });
        }

        private void QueriedSourceUATItems(long fundAccountId, IEnumerable<PositionUnassigned> srcUATItems)
        {
            lock (UATItemsLock)
            {
                var oldTarUATItems = UATItems.Where(i => i.FundAccountId == fundAccountId).ToArray();
                var newResultUATItems = srcUATItems?.Where(i => i.TradeAccountId == fundAccountId).ToArray();
                var newTarUATItemsKeys = newResultUATItems?.Select(i => new UnAssignTradeItemKey($"{i.InputId}", i.TradeAccountId, (int)i.SledContractId)).ToArray()
                        ?? new UnAssignTradeItemKey[] { };

                // remove not exist already UAT items
                var notExistTarUATItems = oldTarUATItems.Where(i =>
                {
                    var _key = new UnAssignTradeItemKey(i.ItemKey, i.FundAccountId, i.ContractId);
                    return !newTarUATItemsKeys.Contains(_key);
                }).ToArray();
                RemoveUATItems(notExistTarUATItems);

                if (newResultUATItems != null)
                {
                    foreach (var newResultItem in newResultUATItems)
                    {
                        var UATItemKey = new UnAssignTradeItemKey($"{newResultItem.InputId}", newResultItem.TradeAccountId, (int)newResultItem.SledContractId);
                        var tarUATItem = GetUATItemWithItemKey(UATItemKey);
                        if (tarUATItem == null)
                        {
                            tarUATItem = new UnAssignTradeDM(UATItemKey.ItemKey, UATItemKey.FundAccountId, UATItemKey.ContractId)
                            {
                                Price = newResultItem.Price,
                                Direction = newResultItem.PositionDirection == PositionDirection.POSITION_BUY ? ClientTradeDirection.BUY : ClientTradeDirection.SELL,
                                TradeTimestampMs = newResultItem.PositionTimestampMs
                            };
                            // setup contract detail
                            XueQiaoFoundationHelper.SetupTargetContract_ContractDetail(tarUATItem.ContractDetailContainer,
                                contractItemTreeQueryCtrl, XqContractNameFormatType.CommodityAcronym_Code_ContractCode);

                            UATItems.Add(tarUATItem);
                            DispatcherHelper.CheckBeginInvokeOnUI(() =>
                            {
                                UATPAService.UATItems.Add(tarUATItem);
                            });
                        }

                        // 调整未分配成交项
                        AdjustUATItemWithNewVolume(tarUATItem, newResultItem.Volume);
                    }
                }
            }
        }
        
        private void AdjustUATItemWithNewVolume(UnAssignTradeDM UATItem, int newVolume)
        {
            if (UATItem == null) return;
            lock (PAItemsLock)
            {
                var tarPAItems = PAItems.Where(i => i.UATItemKey == UATItem.ItemKey && i.FundAccountId == UATItem.FundAccountId && i.ContractId == UATItem.ContractId).ToArray();
                var tarPATotalVolume = tarPAItems.Sum(i => i.Volume);
                if (tarPATotalVolume > newVolume)
                {
                    // 截取预分配
                    RemoveAppropriatePAItemsToSatisfyUATItemVolume(UATItem, newVolume);
                }
                else if (tarPATotalVolume < newVolume)
                {
                    // 从数据源选择合适的预分配填充
                    var UATItemKey = new UnAssignTradeItemKey(UATItem.ItemKey, UATItem.FundAccountId, UATItem.ContractId);
                    var exculdePAItemKeys = tarPAItems.Select(i => new PositionPreviewAssignItemKey(i.SubAccountId, i.UATItemKey, i.FundAccountId, i.ContractId)).ToArray();
                    var satisfyPAItems = GetAppropriateDataSourcePAItemsToSatisfyUATItemRestUnPreviewVolume(UATItemKey, 
                        newVolume - tarPATotalVolume, exculdePAItemKeys);
                    if (satisfyPAItems != null)
                    {
                        foreach (var satisfyPAItem in satisfyPAItems)
                        {
                            var newPAItem = CreatePreviewAssignItem(new PositionPreviewAssignItemKey(satisfyPAItem.SubAccId, satisfyPAItem.UATKey, 
                                satisfyPAItem.FAccId, satisfyPAItem.CId));
                            newPAItem.UATItemDirection = UATItem.Direction;
                            newPAItem.UATItemPrice = UATItem.Price;
                            newPAItem.UATItemTradeTimestampMs = UATItem.TradeTimestampMs;
                            newPAItem.Volume = satisfyPAItem.Vol;

                            PAItems.Add(newPAItem);
                            DispatcherHelper.CheckBeginInvokeOnUI(() =>
                            {
                                UATItem.PAItems.Add(newPAItem);
                                UATPAService.PAItems.Add(newPAItem);
                            });
                        }
                    }
                }
                else
                {
                    // do nothing
                }
            }

            UATItem.Volume = newVolume;
        }

        private void SetupPAAccountInfoInContainer(PAItemAccountInfoContainer _PAItemAccountInfoContainer)
        {
            if ( _PAItemAccountInfoContainer == null) return;
            var subAccountId = _PAItemAccountInfoContainer.SubAccountId;
            var fundAccountId = _PAItemAccountInfoContainer.FundAccountId;

            var cachedSubAccItem = manageSubAccountCacheCtrl.GetCache(subAccountId);
            if (cachedSubAccItem != null)
            {
                _PAItemAccountInfoContainer.SubAccount = cachedSubAccItem;
            }
            else
            {
                Task.Run(() => 
                {
                    var queriedItem = manageSubAccountQueryCtrl.QuerySubAccount(subAccountId)?.CorrectResult;
                    if (queriedItem != null)
                    {
                        _PAItemAccountInfoContainer.SubAccount = queriedItem;
                    }
                });
            }

            var cachedFundAccItem = manageFundAccountCacheCtrl.GetCache(fundAccountId);
            if (cachedFundAccItem != null)
            {
                _PAItemAccountInfoContainer.FundAccount = cachedFundAccItem;
            }
            else
            {
                Task.Run(() =>
                {
                    var queriedItem = manageFundAccountQueryCtrl.QueryFundAccount(fundAccountId)?.CorrectResult;
                    if (queriedItem != null)
                    {
                        _PAItemAccountInfoContainer.FundAccount = queriedItem;
                    }
                });
            }
        }

        private PositionPreviewAssignDM CreatePreviewAssignItem(PositionPreviewAssignItemKey itemKey)
        {
            var PAItem = new PositionPreviewAssignDM(itemKey.SubAccountId, itemKey.UATItemKey, itemKey.FundAccountId, itemKey.ContractId);
            // setup contract detail
            XueQiaoFoundationHelper.SetupTargetContract_ContractDetail(PAItem.ContractDetailContainer, 
                contractItemTreeQueryCtrl, XqContractNameFormatType.CommodityAcronym_Code_ContractCode);
            // setup PA Account info
            SetupPAAccountInfoInContainer(PAItem.PAAccountInfoContainer);
            return PAItem;
        }
       

        private void UpdatePAItemWithTemplate(PositionPreviewAssignDM previewAssignItem,
            PAItemUpdateTemplate updateTemplate)
        {
            if (previewAssignItem == null || updateTemplate == null) return;
            if (updateTemplate.Volume != null)
                previewAssignItem.Volume = updateTemplate.Volume.Value;
        }

        
        private void CancelUATItemsRefresh()
        {
            lock (UATItemsRefreshLock)
            {
                if (UATItemsRefreshCTS != null)
                {
                    UATItemsRefreshCTS.Cancel();
                    UATItemsRefreshCTS.Dispose();
                    UATItemsRefreshCTS = null;
                }
                UATItemsRereshStateHolders.Clear();
            }
        }

        private void RemoveUATItemsForFundAccount(long? fundAccountId)
        {
            lock (PAItemsLock)
            {
                if (fundAccountId == null)
                {
                    PAItems.Clear();
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        UATPAService.PAItems.Clear();
                    });
                }
                else
                {
                    var rmPAItems = PAItems.Where(i => i.FundAccountId == fundAccountId);
                    foreach (var rmPAItem in rmPAItems)
                    {
                        PAItems.Remove(rmPAItem);
                    }
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        foreach (var rmPAItem in rmPAItems)
                        {
                            UATPAService.PAItems.Remove(rmPAItem);
                        }
                    });
                }
            }

            lock (UATItemsLock)
            {
                if (fundAccountId == null)
                {
                    UATItems.Clear();
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        UATPAService.UATItems.Clear();
                    });
                }
                else
                {
                    var rmUATItems = UATItems.Where(i => i.FundAccountId == fundAccountId);
                    foreach (var rmUATItem in rmUATItems)
                    {
                        UATItems.Remove(rmUATItem);
                    }
                    DispatcherHelper.CheckBeginInvokeOnUI(() =>
                    {
                        foreach (var rmUATItem in rmUATItems)
                        {
                            UATPAService.UATItems.Remove(rmUATItem);
                        }
                    });
                }
            }
        }

        /// <summary>
        /// 查询资金账户的所有未分配持仓
        /// </summary>
        /// <param name="landingInfo"></param>
        /// <param name="fundAccountId"></param>
        /// <param name="cancelToken"></param>
        /// <returns></returns>
        private IInterfaceInteractResponse<IEnumerable<PositionUnassigned>> QueryUnAssignPositionItems(LandingInfo landingInfo,
            long fundAccountId, CancellationToken cancelToken)
        {
            if (landingInfo == null) return null;
            var queryPageSize = 50;
            IInterfaceInteractResponse<PositionUnassignedPage> firstPageResp = null;
            var queryAllCtrl = new QueryAllItemsByPageHelper<PositionUnassigned>(pageIndex => {

                if (cancelToken.IsCancellationRequested) return null;

                var option = new ReqPositionUnassignedOption { TradeAccountId = fundAccountId };
                var pageOption = new IndexedPageOption
                {
                    NeedTotalCount = true,
                    PageIndex = pageIndex,
                    PageSize = queryPageSize
                };
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.reqPositionUnassigned(landingInfo, option, pageOption);
                if (resp == null) return null;
                if (pageIndex == 0)
                {
                    firstPageResp = resp;
                }
                var pageInfo = resp.CorrectResult;
                var pageResult = new QueryItemsByPageResult<PositionUnassigned>(resp.SourceException != null)
                {
                    TotalCount = pageInfo?.Total,
                    Page = pageInfo?.Page?.ToArray()
                };
                return pageResult;
            });

            queryAllCtrl.RemoveDuplicateFunc = _items =>
            {
                if (_items == null) return null;
                var idGroupedItems = _items.GroupBy(i => i.InputId);
                return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
            };

            var queriedItems = queryAllCtrl.QueryAllItems();
            if (firstPageResp == null) return null;

            var tarResp = new InterfaceInteractResponse<IEnumerable<PositionUnassigned>>(firstPageResp.Servant,
                firstPageResp.InterfaceName,
                firstPageResp.SourceException,
                firstPageResp.HasTransportException,
                firstPageResp.HttpResponseStatusCode,
                queriedItems)
            {
                CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                InteractInformation = firstPageResp.InteractInformation
            };
            return tarResp;
        }
    }
}
