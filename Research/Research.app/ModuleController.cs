using AppAssembler.Interfaces.Applications;
using ContainerShell.Interfaces.Applications;
using ContainerShell.Interfaces.DataModels;
using IDLAutoGenerated.Util;
using lib.xqclient_base.logger;
using lib.xqclient_base.thriftapi_mediation.Interface;
using Newtonsoft.Json;
using Prism.Events;
using Research.app.Controller;
using Research.app.Helper;
using Research.Interface.Application;
using Research.Interface.DataModel;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using System.Timers;
using System.Waf.Applications;
using xueqiao.trade.hosting.proxy;
using xueqiao.trade.hosting.terminal.ao;
using XueQiaoFoundation.BusinessResources.Constants;
using XueQiaoFoundation.BusinessResources.Models;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace Research.app
{
    /// <summary>
    /// Responsible for the whole module. 
    /// </summary>
    [Export(typeof(IModuleController)), Export(typeof(IResearchModuleService)), PartCreationPolicy(CreationPolicy.Shared)]
    internal class ModuleController : IModuleController, IResearchModuleService
    {
        private readonly IEventAggregator eventAggregator;
        private readonly Lazy<ILoginDataService> loginDataService;
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly Lazy<IContainerShellService> containerShellService;
        private readonly Lazy<IAppAssemblerService> appAssemblerService;
        private readonly Lazy<IUserSettingSyncController> userSettingSyncCtrl;
        private readonly ExportFactory<ResearchModuleRootViewController> moduleRootViewCtrlFactory;

        private ResearchModuleRootViewController moduleRootViewCtrl;
        private ResearchWorkspaceDataRoot researchWorkspaceDataRoot;

        // 同步云端用户设置数据定时器
        private Timer cloudUserSettingsSyncTimer;
        private readonly TaskFactory cloudUserSettingsSyncTimerTaskFactory = new TaskFactory(new OrderedTaskScheduler());
        
        private readonly IDIncreaser researchWorkspaceKeyIdIncreaser = new IDIncreaser();

        private bool shutdowned;

        [ImportingConstructor]
        public ModuleController(IEventAggregator eventAggregator,
            Lazy<ILoginDataService> loginDataService,
            Lazy<ILoginUserManageService> loginUserManageService,
            Lazy<IContainerShellService> containerShellService,
            Lazy<IAppAssemblerService> appAssemblerService,
            Lazy<IUserSettingSyncController> userSettingSyncCtrl,
            ExportFactory<ResearchModuleRootViewController> moduleRootViewCtrlFactory)
        {
            this.eventAggregator = eventAggregator;
            this.loginDataService = loginDataService;
            this.loginUserManageService = loginUserManageService;
            this.containerShellService = containerShellService;
            this.appAssemblerService = appAssemblerService;
            this.userSettingSyncCtrl = userSettingSyncCtrl;
            this.moduleRootViewCtrlFactory = moduleRootViewCtrlFactory;
        }

        public void Initialize()
        {
            loginUserManageService.Value.IsLogouting += RecvUserIsLogouting;
            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
            appAssemblerService.Value.AppShutdown += RecvAppShutdown;
            containerShellService.Value.XqInitializeDataInitialized += ReceiveInitialDataInitialized;
        }

        public void Run()
        {

        }

        public void Shutdown()
        {
            if (this.shutdowned) return;
            this.shutdowned = true;

            StopCloudUserSettingsSyncTimer();

            loginUserManageService.Value.IsLogouting -= RecvUserIsLogouting;
            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
            appAssemblerService.Value.AppShutdown -= RecvAppShutdown;
            containerShellService.Value.XqInitializeDataInitialized -= ReceiveInitialDataInitialized;

        }


        object IResearchModuleService.GetResearchModuleRootView(out Action showAction, out Action closeAction)
        {
            showAction = null;
            closeAction = null;

            if (this.moduleRootViewCtrl != null) return this.moduleRootViewCtrl.ContentView;

            if (researchWorkspaceDataRoot == null)
                ConfigResearchWorkspaceDataRoot();

            this.moduleRootViewCtrl = moduleRootViewCtrlFactory.CreateExport().Value;

            this.moduleRootViewCtrl.Initialize();
            this.moduleRootViewCtrl.Run();

            return this.moduleRootViewCtrl.ContentView;
        }

        public ResearchWorkspaceDataRoot ResearchWorkspaceDataRoot => this.researchWorkspaceDataRoot;

        string IResearchModuleService.GenerateResearchWorkspaceKey()
        {
            var loginResp = loginDataService.Value.ProxyLoginResp;
            var hostingTimestamp = (loginResp?.HostingTimens ?? 0) / 1000000;
            var localIncreasedId = researchWorkspaceKeyIdIncreaser.RequestIncreasedId();
            return $"{XueQiaoConstants.UserSettingKey_ResearchWorkspaceKeyPrefix}{hostingTimestamp}_${localIncreasedId}";
        }

        private void ConfigResearchWorkspaceDataRoot()
        {
            researchWorkspaceDataRoot = new ResearchWorkspaceDataRoot();
        }
        
        private void RecvUserIsLogouting(ProxyLoginResp currentLoginResp)
        {
            StopCloudUserSettingsSyncTimer();
            SyncCloudUserSettings(currentLoginResp?.HostingSession?.HostingSession2LandingInfo());
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            researchWorkspaceKeyIdIncreaser.Reset();

            // shut down current trade node page controller
            this.moduleRootViewCtrl?.Shutdown();
            this.moduleRootViewCtrl = null;

            this.researchWorkspaceDataRoot = null;
        }
        
        private void RecvAppShutdown()
        {
            StopCloudUserSettingsSyncTimer();
            SyncCloudUserSettings(loginDataService.Value.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo());
            Shutdown();
        }

        private void ReceiveInitialDataInitialized(InitializeDataRoot initializedData)
        {
            if (initializedData != null)
            {
                ConfigResearchWorkspaceDataRoot(initializedData);
            }

            StartCloudUserSettingsSyncTimer();
        }

        private void SyncCloudUserSettings(LandingInfo landingInfo)
        {
            if (landingInfo == null) return;

            AppLog.Debug($"Begin synchronize `Research` module CloudUserSettings.");
            WorkspaceWindowTree workspaceWindowTree = null;
            IEnumerable<ResearchWorkspaceItemTree> workspaceTreeList = null;

            var taskFactory = new TaskFactory();
            var tasks = new List<Task>();

            var wsdr = this.researchWorkspaceDataRoot;
            if (wsdr != null)
            {
                ResearchWorkspaceDataConvertHelper.GenerateResearchWorkspaceRelatedDataTrees(wsdr,
                    out workspaceWindowTree, out workspaceTreeList);
            }

            // update workspaceWindowTree
            if (workspaceWindowTree != null)
            {
                tasks.Add(taskFactory.StartNew(() =>
                {
                    var content = JsonConvert.SerializeObject(workspaceWindowTree);
                    if (content == null) return;
                    userSettingSyncCtrl.Value.UpdateUserSetting(new UserSettingUpdateReq(XueQiaoConstants.UserSettingKey_ResearchWorkspaceWindowTree,
                        content, landingInfo), out IInterfaceInteractResponse resp);
                }));
            }


            // update workspaceTreeList
            if (workspaceTreeList != null)
            {
                foreach (var detailTree in workspaceTreeList)
                {
                    var workspaceKey = detailTree.Workspace?.WorkspaceKey;
                    if (string.IsNullOrEmpty(workspaceKey)) continue;
                    tasks.Add(taskFactory.StartNew(() =>
                    {
                        var content = JsonConvert.SerializeObject(detailTree);
                        if (content == null) return;
                        userSettingSyncCtrl.Value.UpdateUserSetting(new UserSettingUpdateReq(workspaceKey,
                            content, landingInfo), out IInterfaceInteractResponse resp);
                    }));
                }
            }
            
            var taskArr = tasks.ToArray();
            Task.WaitAll(taskArr);

            AppLog.Debug($"End synchronize `Research` module CloudUserSettings.");
        }

        private void StartCloudUserSettingsSyncTimer()
        {
            StopCloudUserSettingsSyncTimer();
            cloudUserSettingsSyncTimer = new System.Timers.Timer();
            cloudUserSettingsSyncTimer.Elapsed += SyncUserDataTimer_Elapsed;
            cloudUserSettingsSyncTimer.Interval = 40000; // 40 秒进行一次同步
            cloudUserSettingsSyncTimer.Start();
        }

        private void StopCloudUserSettingsSyncTimer()
        {
            if (cloudUserSettingsSyncTimer != null)
            {
                cloudUserSettingsSyncTimer.Stop();
                cloudUserSettingsSyncTimer.Elapsed -= SyncUserDataTimer_Elapsed;
                cloudUserSettingsSyncTimer.Dispose();
                cloudUserSettingsSyncTimer = null;
            }
        }

        private void SyncUserDataTimer_Elapsed(object sender, ElapsedEventArgs e)
        {
            cloudUserSettingsSyncTimerTaskFactory.StartNew(() =>
            {
                SyncCloudUserSettings(loginDataService.Value.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo());
            });
        }


        private void ConfigResearchWorkspaceDataRoot(InitializeDataRoot initializedData)
        {
            var dtPackage = initializedData?.LoginUserSettingDataTreePackage;
            var dataRoot = ResearchWorkspaceDataConvertHelper.GenerateResearchWorkspaceDataRoot(
                dtPackage?.ResearchWorkspaceWindowTree,
                dtPackage?.ResearchWorkspaceList);
            this.researchWorkspaceDataRoot = dataRoot;
        }
    }
}
