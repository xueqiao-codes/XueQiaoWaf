using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation;
using lib.xqclient_base.thriftapi_mediation.Interface;
using Prism.Events;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Thrift.Collections;
using xueqiao.trade.hosting;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Helper.WeakDelegate;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace XueQiaoFoundation.Applications.Controllers
{
    [Export(typeof(IUserSubAccountRelatedItemQueryController)), Export(typeof(IXueQiaoFoundationSingletonController)), PartCreationPolicy(CreationPolicy.Shared)]
    internal class UserSubAccountRelatedItemQueryController : IUserSubAccountRelatedItemQueryController, IXueQiaoFoundationSingletonController
    {
        
        private readonly ILoginDataService loginDataService;
        private readonly IUserSubAccountRelatedItemCacheController relatedItemCacheController;
        private UserSubAccountRelatedItemsQueryControl relatedItemsQueryControl;

        [ImportingConstructor]
        public UserSubAccountRelatedItemQueryController(
            ILoginDataService loginDataService,
            IUserSubAccountRelatedItemCacheController relatedItemCacheController)
        {
            
            this.loginDataService = loginDataService;
            this.relatedItemCacheController = relatedItemCacheController;

            relatedItemsQueryControl = new UserSubAccountRelatedItemsQueryControl(loginDataService, relatedItemCacheController);
        }
        
        public void Shutdown()
        {
            relatedItemsQueryControl.Dispose();
        }

        public long QueryUserSubAccountRelatedItems(ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingSubAccountRelatedItem>>> handler)
        {
            return relatedItemsQueryControl.QueryItems(handler);
        }
        
        public void RemoveQueryUserSubAccountRelatedItemsHandler(long reqId)
        {
            relatedItemsQueryControl.RemoveQueryCallbackHandler(reqId);
        }

        public IInterfaceInteractResponse<IEnumerable<HostingSubAccountRelatedItem>> QueryUserSubAccountRelatedItems(CancellationToken cancelToken)
        {
            return relatedItemsQueryControl.QueryItems(cancelToken);
        }
        
        /// <summary>
        /// 用户的子账户关联关系查询控制
        /// </summary>
        class UserSubAccountRelatedItemsQueryControl : IDisposable
        {
            
            private readonly ILoginDataService loginDataService;
            private readonly IUserSubAccountRelatedItemCacheController relatedItemCacheController;

            private readonly IDIncreaser queryReqIdIncreaser = new IDIncreaser();
            private readonly Dictionary<long, ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingSubAccountRelatedItem>>>> queriedCallbackHandlers;
            private readonly List<ActionDelegateReference<UserSubAccountRelatedItemsQueryControl, IEnumerable<HostingSubAccountRelatedItem>>> queriedEventHandlers;
            private readonly object queryLock = new object();
            private Task<IInterfaceInteractResponse<IEnumerable<HostingSubAccountRelatedItem>>> queryTask;
            private CancellationTokenSource queryCts;
            private bool? isDisposed;

            public UserSubAccountRelatedItemsQueryControl(
            ILoginDataService loginDataService,
            IUserSubAccountRelatedItemCacheController relatedItemCacheController)
            {
                
                this.loginDataService = loginDataService;
                this.relatedItemCacheController = relatedItemCacheController;

                queriedCallbackHandlers = new Dictionary<long, ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingSubAccountRelatedItem>>>>();
                queriedEventHandlers = new List<ActionDelegateReference<UserSubAccountRelatedItemsQueryControl, IEnumerable<HostingSubAccountRelatedItem>>>();
            }

            public long? ComposeId { get; private set; }

            public event Action<UserSubAccountRelatedItemsQueryControl, IEnumerable<HostingSubAccountRelatedItem>> ItemsQueried
            {
                add
                {
                    lock (queryLock)
                    {
                        // 弱引用
                        queriedEventHandlers.Add(new ActionDelegateReference<UserSubAccountRelatedItemsQueryControl, IEnumerable<HostingSubAccountRelatedItem>>(value, false));
                    }
                }
                remove
                {
                    lock (queryLock)
                    {
                        queriedEventHandlers.RemoveAll(i => i.Target == value);
                    }
                }
            }

            public long QueryItems(ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingSubAccountRelatedItem>>> handler)
            {
                lock (queryLock)
                {
                    long reqId = 0;
                    if (handler != null)
                    {
                        reqId = queryReqIdIncreaser.RequestIncreasedId();
                        queriedCallbackHandlers.Add(reqId, handler);
                    }

                    if (queryTask != null
                        && queryTask.IsCanceled == false
                        && queryTask.IsCompleted == false
                        && queryTask.IsFaulted == false)
                    {
                        return reqId;
                    }

                    if (queryCts != null)
                    {
                        queryCts.Cancel();
                        queryCts.Dispose();
                        queryCts = null;
                    }
                    queryCts = new CancellationTokenSource();
                    var queryCancelToken = queryCts.Token;
                    queryTask = Task.Run(() => QueryItemsSync(queryCancelToken, true), queryCancelToken);
                    queryTask.ContinueWith(task =>
                    {
                        var resp = task.Result;
                        CallbackAndPublishEventForComposeItemsQueriedResponse(resp);
                    }, queryCancelToken);
                    return reqId;
                }
            }

            public void RemoveQueryCallbackHandler(long reqId)
            {
                lock (queryLock)
                {
                    queriedCallbackHandlers.Remove(reqId);
                }
            }

            public void Dispose()
            {
                if (isDisposed == true) return;
                isDisposed = true;
                if (queryCts != null)
                {
                    queryCts.Cancel();
                    queryCts.Dispose();
                    queryCts = null;
                }
            }

            public IInterfaceInteractResponse<IEnumerable<HostingSubAccountRelatedItem>> QueryItems(CancellationToken cancelToken)
            {
                var resp = QueryItemsSync(cancelToken, true);
                CallbackAndPublishEventForComposeItemsQueriedResponse(resp);
                return resp;
            }

            private void CallbackAndPublishEventForComposeItemsQueriedResponse(IInterfaceInteractResponse<IEnumerable<HostingSubAccountRelatedItem>> resp)
            {
                lock (queryLock)
                {
                    var callbackHandlers = queriedCallbackHandlers.Values.ToArray();
                    var eventHandlers = queriedEventHandlers.ToArray();
                    queriedCallbackHandlers.Clear();

                    foreach (var callbackHandlerItem in callbackHandlers)
                    {
                        callbackHandlerItem.Target?.Invoke(resp);
                    }

                    if (resp?.CorrectResult != null)
                    {
                        foreach (var eventHandlerItem in eventHandlers)
                        {
                            eventHandlerItem.Target?.Invoke(this, resp?.CorrectResult);
                        }
                    }
                }
            }

            private IInterfaceInteractResponse<IEnumerable<HostingSubAccountRelatedItem>> QueryItemsSync(CancellationToken cancelToken, bool cacheQueriedItems)
            {
                if (cancelToken.IsCancellationRequested) return null;
                var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
                if (landingInfo == null) return null;

                var querySubUserId = landingInfo.SubUserId;
                var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                    .getSARUTBySubUserId(landingInfo, new THashSet<int> { querySubUserId });
                if (resp == null) return null;
                if (cancelToken.IsCancellationRequested) return null;

                List<HostingSubAccountRelatedItem> relatedItems = null;
                resp.CorrectResult?.TryGetValue(querySubUserId, out relatedItems);

                var tarResp = new InterfaceInteractResponse<IEnumerable<HostingSubAccountRelatedItem>>(resp.Servant,
                    resp.InterfaceName,
                    resp.SourceException,
                    resp.HasTransportException,
                    resp.HttpResponseStatusCode,
                    relatedItems?.ToArray())
                {
                    CustomParsedExceptionResult = resp.CustomParsedExceptionResult,
                    InteractInformation = resp.InteractInformation
                };

                if (cacheQueriedItems)
                {
                    if (tarResp?.CorrectResult != null)
                    {
                        foreach (var relatedItem in tarResp.CorrectResult)
                        {
                            var cacheKey = new UserSubAccountRelatedCacheKey(relatedItem.SubUserId, relatedItem.SubAccountId);
                            relatedItemCacheController.Cache(cacheKey, relatedItem);
                        }
                    }
                }
                return tarResp;
            }
        }
    }
}
