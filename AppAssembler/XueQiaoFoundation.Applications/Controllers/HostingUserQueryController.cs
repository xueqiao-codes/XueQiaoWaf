using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation;
using lib.xqclient_base.thriftapi_mediation.Interface;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using xueqiao.trade.hosting;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Helper.WeakDelegate;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;

namespace XueQiaoFoundation.Applications.Controllers
{
    [Export(typeof(IHostingUserQueryController)), Export(typeof(IXueQiaoFoundationSingletonController)), PartCreationPolicy(CreationPolicy.Shared)]
    internal class HostingUserQueryController : IHostingUserQueryController, IXueQiaoFoundationSingletonController
    {
        
        private readonly ILoginDataService loginDataService;
        private readonly IHostingUserCacheController userCacheController;

        private readonly ConcurrentDictionary<int, HostingUserQueryControl> querUserByIdControlDictionary;
        private readonly HostingUserQueryControl queryAllUsersControl;

        [ImportingConstructor]
        public HostingUserQueryController(
            ILoginDataService loginDataService,
            IHostingUserCacheController userCacheController)
        {
            
            this.loginDataService = loginDataService;
            this.userCacheController = userCacheController;

            querUserByIdControlDictionary = new ConcurrentDictionary<int, HostingUserQueryControl>();
            queryAllUsersControl = new HostingUserQueryControl(null, loginDataService, userCacheController);
        }

        public void Shutdown()
        {
            queryAllUsersControl.Dispose();

            var queryItemByIdControls = querUserByIdControlDictionary.Values.ToArray();
            querUserByIdControlDictionary.Clear();
            foreach (var i in queryItemByIdControls)
            {
                i.ItemsQueried -= HostingUserQueryByIdControl_Queried;
                i.Dispose();
            }
        }

        public long QueryAllUsers(ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingUser>>> handler)
        {
            return queryAllUsersControl.QueryItems(handler);
        }

        public void RemoveQueryAllUsersHandler(long reqId)
        {
            queryAllUsersControl.RemoveQueryCallbackHandler(reqId);
        }

        public IInterfaceInteractResponse<IEnumerable<HostingUser>> QueryAllUsers(CancellationToken cancelToken)
        {
            return queryAllUsersControl.QueryItems(cancelToken);
        }

        public long QueryUser(int userId, ActionDelegateReference<IInterfaceInteractResponse<HostingUser>> handler)
        {
            var optItem = CreateQueryHostingUserByIdControl(userId);
            var wrapHandler = new Action<IInterfaceInteractResponse<IEnumerable<HostingUser>>>(_resp =>
            {
                handler?.Target?.Invoke(GetTargetHostingUserQueridResponse(userId, _resp));
            });
            return optItem.QueryItems(new ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingUser>>>(wrapHandler, true));
        }
        
        public void RemoveQueryUserHandler(int userId, long reqId)
        {
            if (querUserByIdControlDictionary.TryGetValue(userId, out HostingUserQueryControl queryItem))
            {
                queryItem.RemoveQueryCallbackHandler(reqId);
            }
        }

        public IInterfaceInteractResponse<HostingUser> QueryUser(int userId, CancellationToken cancelToken)
        {
            var resp = CreateQueryHostingUserByIdControl(userId).QueryItems(CancellationToken.None);
            return GetTargetHostingUserQueridResponse(userId, resp);
        }

        private IInterfaceInteractResponse<HostingUser> GetTargetHostingUserQueridResponse(int tarUserId, IInterfaceInteractResponse<IEnumerable<HostingUser>> sourceItemsResp)
        {
            IInterfaceInteractResponse<HostingUser> newResp = null;
            if (sourceItemsResp != null)
            {
                newResp = new InterfaceInteractResponse<HostingUser>(sourceItemsResp.Servant,
                    sourceItemsResp.InterfaceName,
                    sourceItemsResp.SourceException,
                    sourceItemsResp.HasTransportException,
                    sourceItemsResp.HttpResponseStatusCode,
                    sourceItemsResp.CorrectResult?.FirstOrDefault(i => i.SubUserId == tarUserId))
                {
                    CustomParsedExceptionResult = sourceItemsResp.CustomParsedExceptionResult,
                    InteractInformation = sourceItemsResp.InteractInformation
                };
            }
            return newResp;
        }

        private HostingUserQueryControl CreateQueryHostingUserByIdControl(int userId)
        {
            var optItem = querUserByIdControlDictionary.AddOrUpdate(userId,
                    (k) =>
                    {
                        var newItem = new HostingUserQueryControl(userId,
                            loginDataService,
                            userCacheController);
                        newItem.ItemsQueried += HostingUserQueryByIdControl_Queried;
                        return newItem;
                    },
                    (k, oldValue) =>
                    {
                        return oldValue;
                    });
            return optItem;
        }

        private void HostingUserQueryByIdControl_Queried(HostingUserQueryControl arg1, IEnumerable<HostingUser> arg2)
        {
            if (arg1.UserId is int userId)
            {
                if (querUserByIdControlDictionary.TryRemove(userId,
                    out HostingUserQueryControl _queryControl))
                {
                    _queryControl.ItemsQueried -= HostingUserQueryByIdControl_Queried;
                    _queryControl.Dispose();
                }
            }
        }

        /// <summary>
        /// 用户查询的控制。查询某个用户，设置 UserId；查询全部组合，UserId 设置为null
        /// </summary>
        class HostingUserQueryControl : IDisposable
        {
            
            private readonly ILoginDataService loginDataService;
            private readonly IHostingUserCacheController userCacheController;

            private readonly IDIncreaser queryReqIdIncreaser = new IDIncreaser();
            private readonly Dictionary<long, ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingUser>>>> queriedCallbackHandlers;
            private readonly List<ActionDelegateReference<HostingUserQueryControl, IEnumerable<HostingUser>>> queriedEventHandlers;
            private readonly object queryLock = new object();
            private Task<IInterfaceInteractResponse<IEnumerable<HostingUser>>> queryTask;
            private CancellationTokenSource queryCts;
            private bool? isDisposed;

            public HostingUserQueryControl(int? userId,
                
                ILoginDataService loginDataService,
                IHostingUserCacheController userCacheController)
            {
                this.UserId = userId;
                
                this.loginDataService = loginDataService;
                this.userCacheController = userCacheController;

                queriedCallbackHandlers = new Dictionary<long, ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingUser>>>>();
                queriedEventHandlers = new List<ActionDelegateReference<HostingUserQueryControl, IEnumerable<HostingUser>>>();
            }

            public int? UserId { get; private set; }

            public event Action<HostingUserQueryControl, IEnumerable<HostingUser>> ItemsQueried
            {
                add
                {
                    lock (queryLock)
                    {
                        // 弱引用
                        queriedEventHandlers.Add(new ActionDelegateReference<HostingUserQueryControl, IEnumerable<HostingUser>>(value, false));
                    }
                }
                remove
                {
                    lock (queryLock)
                    {
                        queriedEventHandlers.RemoveAll(i => i.Target == value);
                    }
                }
            }

            public long QueryItems(ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingUser>>> handler)
            {
                lock (queryLock)
                {
                    long reqId = 0;
                    if (handler != null)
                    {
                        reqId = queryReqIdIncreaser.RequestIncreasedId();
                        queriedCallbackHandlers.Add(reqId, handler);
                    }

                    if (queryTask != null
                        && queryTask.IsCanceled == false
                        && queryTask.IsCompleted == false
                        && queryTask.IsFaulted == false)
                    {
                        return reqId;
                    }

                    if (queryCts != null)
                    {
                        queryCts.Cancel();
                        queryCts.Dispose();
                        queryCts = null;
                    }
                    queryCts = new CancellationTokenSource();
                    var queryCancelToken = queryCts.Token;
                    queryTask = Task.Run(() => QueryItemsSync(queryCancelToken, true), queryCancelToken);
                    queryTask.ContinueWith(task =>
                    {
                        if (queryCancelToken.IsCancellationRequested) return;
                        CallbackAndPublishEventForItemsQueriedResponse(task.Result);
                    }, queryCancelToken);
                    return reqId;
                }
            }

            public void RemoveQueryCallbackHandler(long reqId)
            {
                lock (queryLock)
                {
                    queriedCallbackHandlers.Remove(reqId);
                }
            }

            public void Dispose()
            {
                if (isDisposed == true) return;
                isDisposed = true;
                if (queryCts != null)
                {
                    queryCts.Cancel();
                    queryCts.Dispose();
                    queryCts = null;
                }
            }

            public IInterfaceInteractResponse<IEnumerable<HostingUser>> QueryItems(CancellationToken cancelToken)
            {
                var resp = QueryItemsSync(cancelToken, true);
                if (cancelToken.IsCancellationRequested) return null;

                CallbackAndPublishEventForItemsQueriedResponse(resp);
                return resp;
            }

            private void CallbackAndPublishEventForItemsQueriedResponse(IInterfaceInteractResponse<IEnumerable<HostingUser>> resp)
            {
                lock (queryLock)
                {
                    var callbackHandlers = queriedCallbackHandlers.Values.ToArray();
                    var eventHandlers = queriedEventHandlers.ToArray();
                    queriedCallbackHandlers.Clear();

                    foreach (var callbackHandlerItem in callbackHandlers)
                    {
                        callbackHandlerItem.Target?.Invoke(resp);
                    }

                    if (resp?.CorrectResult != null)
                    {
                        foreach (var eventHandlerItem in eventHandlers)
                        {
                            eventHandlerItem.Target?.Invoke(this, resp?.CorrectResult);
                        }
                    }
                }
            }

            private IInterfaceInteractResponse<IEnumerable<HostingUser>> QueryItemsSync(CancellationToken cancelToken, bool cacheQueriedItems)
            {
                if (cancelToken.IsCancellationRequested) return null;
                var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
                if (landingInfo == null) return null;

                var queryPageSize = 50;
                IInterfaceInteractResponse<QueryHostingUserPage> firstPageResp = null;
                var queryOption = new QueryHostingUserOption { OrderType = HostingUserOrderType.OrderByCreateTimestampAsc };
                if (this.UserId.HasValue)
                {
                    queryOption.SubUserId = this.UserId.Value;
                }

                var queryAllCtrl = new QueryAllItemsByPageHelper<HostingUser>(pageIndex => {
                    if (cancelToken.IsCancellationRequested) return null;
                    var pageOption = new IndexedPageOption
                    {
                        NeedTotalCount = true,
                        PageIndex = pageIndex,
                        PageSize = queryPageSize
                    };

                    var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getHostingUserPage(landingInfo, queryOption, pageOption);
                    if (resp == null) return null;
                    if (pageIndex == 0)
                    {
                        firstPageResp = resp;
                    }
                    var pageInfo = resp.CorrectResult;
                    var pageResult = new QueryItemsByPageResult<HostingUser>(resp.SourceException != null)
                    {
                        TotalCount = pageInfo?.TotalCount,
                        Page = pageInfo?.ResultList?.ToArray()
                    };
                    return pageResult;
                });

                queryAllCtrl.RemoveDuplicateFunc = _items =>
                {
                    if (_items == null) return null;
                    var idGroupedItems = _items.GroupBy(i => i.SubUserId);
                    return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
                };

                var queriedItems = queryAllCtrl.QueryAllItems();
                if (firstPageResp == null) return null;
                if (cancelToken.IsCancellationRequested) return null;

                var tarResp = new InterfaceInteractResponse<IEnumerable<HostingUser>>(firstPageResp.Servant,
                    firstPageResp.InterfaceName,
                    firstPageResp.SourceException,
                    firstPageResp.HasTransportException,
                    firstPageResp.HttpResponseStatusCode,
                    queriedItems)
                {
                    CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                    InteractInformation = firstPageResp.InteractInformation
                };

                if (cacheQueriedItems)
                {
                    if (tarResp?.CorrectResult != null)
                    {
                        foreach (var userItem in tarResp.CorrectResult)
                        {
                            userCacheController.Cache(userItem.SubUserId, userItem);
                        }
                    }
                }
                return tarResp;
            }
        }
    }
}
