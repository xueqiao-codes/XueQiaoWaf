using business_foundation_lib.xq_thriftlib_config;
using IDLAutoGenerated.Util;
using lib.xqclient_base.thriftapi_mediation;
using lib.xqclient_base.thriftapi_mediation.Interface;
using Prism.Events;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Thrift.Collections;
using xueqiao.trade.hosting.arbitrage.thriftapi;
using xueqiao.trade.hosting.proxy;
using xueqiao.trade.hosting.terminal.ao;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.Shared.Helper;
using XueQiaoFoundation.Shared.Helper.WeakDelegate;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;


namespace XueQiaoFoundation.Applications.Controllers
{
    /// <summary>
    /// 子账户的雪橇订单查询控制器
    /// </summary>
    [Export(typeof(ISubAccountXQEffectOrderQueryController)), Export(typeof(IXueQiaoFoundationSingletonController)), PartCreationPolicy(CreationPolicy.Shared)]
    internal class SubAccountXQEffectOrderQueryController : ISubAccountXQEffectOrderQueryController, IXueQiaoFoundationSingletonController
    {
        
        private readonly Lazy<ILoginUserManageService> loginUserManageService;
        private readonly ILoginDataService loginDataService;
       
        private readonly ConcurrentDictionary<long, SubAccountXQOrderListQueryControl> subAccountXQOrderListQueryControls;

        [ImportingConstructor]
        public SubAccountXQEffectOrderQueryController(
            Lazy<ILoginUserManageService> loginUserManageService,
            ILoginDataService loginDataService)
        {
            
            this.loginUserManageService = loginUserManageService;
            this.loginDataService = loginDataService;

            this.subAccountXQOrderListQueryControls = new ConcurrentDictionary<long, SubAccountXQOrderListQueryControl>();

            loginUserManageService.Value.HasLogouted += RecvUserHasLogouted;
        }

        public void Shutdown()
        {
            ClearAllSubAccountXQOrderListQueries();
            loginUserManageService.Value.HasLogouted -= RecvUserHasLogouted;
        }

        /// <summary>
        /// 异步查询子账户的订单
        /// </summary>
        /// <param name="subAccountId">子账户 id</param>
        /// <param name="handler">结果处理</param>
        /// <returns>请求 id</returns>
        public long SubAccountQueryXQOrders(long subAccountId, 
            ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingXQOrderWithTradeList>>> handler)
        {
            return CreateSubAccountXQOrderListQueryControl(subAccountId).QueryOrderListAsync(handler);
        }

        /// <summary>
        /// 移除查询子账户的订单的处理
        /// </summary>
        /// <param name="subAccountId">子账户 id</param>
        /// <param name="reqId">请求 id</param>
        public void RemoveSubAccountQueryXQOrdersHandler(long subAccountId, long reqId)
        {
            if (subAccountXQOrderListQueryControls.TryGetValue(subAccountId, out SubAccountXQOrderListQueryControl queryControl))
            {
                queryControl.RemoveQueryCallbackHandler(reqId);
            }
        }

        /// <summary>
        /// 同步查询子账户的订单
        /// </summary>
        /// <param name="subAccountId">子账户 id</param>
        /// <returns></returns>
        public IInterfaceInteractResponse<IEnumerable<HostingXQOrderWithTradeList>> SubAccountQueryXQOrdersSync(long subAccountId, CancellationToken cancelToken)
        {
            return CreateSubAccountXQOrderListQueryControl(subAccountId).QueryOrderList(cancelToken);
        }

        private void RecvUserHasLogouted(ProxyLoginResp lastLoginResp)
        {
            ClearAllSubAccountXQOrderListQueries();
        }

        private void ClearAllSubAccountXQOrderListQueries()
        {
            var queryControls = subAccountXQOrderListQueryControls.Values.ToArray();
            subAccountXQOrderListQueryControls.Clear();
            foreach (var i in queryControls)
            {
                i.OrderListQueried -= SubAccountXQOrderListQueryControl_OrdersQueried;
                i.Dispose();
            }
        }

        private SubAccountXQOrderListQueryControl CreateSubAccountXQOrderListQueryControl(long subAccountId)
        {
            var optItem = subAccountXQOrderListQueryControls.AddOrUpdate(subAccountId,
                    (k) =>
                    {
                        var newItem = new SubAccountXQOrderListQueryControl(subAccountId,
                            loginDataService);
                        newItem.OrderListQueried += SubAccountXQOrderListQueryControl_OrdersQueried; ;
                        return newItem;
                    },
                    (k, oldValue) =>
                    {
                        return oldValue;
                    });
            return optItem;
        }

        private void SubAccountXQOrderListQueryControl_OrdersQueried(SubAccountXQOrderListQueryControl arg1, IEnumerable<HostingXQOrderWithTradeList> arg2)
        {
            if (subAccountXQOrderListQueryControls.TryRemove(arg1.SubAccountId,
                    out SubAccountXQOrderListQueryControl _queryControl))
            {
                _queryControl.OrderListQueried -= SubAccountXQOrderListQueryControl_OrdersQueried;
                _queryControl.Dispose();
            }
        }

        /// <summary>
        /// 子账户的雪橇订单列表查询的控制。
        /// </summary>
        class SubAccountXQOrderListQueryControl : IDisposable
        {
            
            private readonly ILoginDataService loginDataService;

            private readonly IDIncreaser queryReqIdIncreaser = new IDIncreaser();
            private readonly Dictionary<long, ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingXQOrderWithTradeList>>>> queriedCallbackHandlers;
            private readonly List<ActionDelegateReference<SubAccountXQOrderListQueryControl, IEnumerable<HostingXQOrderWithTradeList>>> queriedEventHandlers;
            private readonly object queryLock = new object();
            private Task<IInterfaceInteractResponse<IEnumerable<HostingXQOrderWithTradeList>>> queryTask;
            private CancellationTokenSource queryCts;
            private bool? isDisposed;

            public SubAccountXQOrderListQueryControl(long subAccountId,
                
                ILoginDataService loginDataService)
            {
                this.SubAccountId = subAccountId;
                
                this.loginDataService = loginDataService;

                queriedCallbackHandlers = new Dictionary<long, ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingXQOrderWithTradeList>>>>();
                queriedEventHandlers = new List<ActionDelegateReference<SubAccountXQOrderListQueryControl, IEnumerable<HostingXQOrderWithTradeList>>>();
            }

            public long SubAccountId { get; private set; }

            public event Action<SubAccountXQOrderListQueryControl, IEnumerable<HostingXQOrderWithTradeList>> OrderListQueried
            {
                add
                {
                    lock (queryLock)
                    {
                        // 弱引用
                        queriedEventHandlers.Add(new ActionDelegateReference<SubAccountXQOrderListQueryControl, IEnumerable<HostingXQOrderWithTradeList>>(value, false));
                    }
                }
                remove
                {
                    lock (queryLock)
                    {
                        queriedEventHandlers.RemoveAll(i => i.Target == value);
                    }
                }
            }


            public long QueryOrderListAsync(ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<HostingXQOrderWithTradeList>>> handler)
            {
                lock (queryLock)
                {
                    long reqId = 0;
                    if (handler != null)
                    {
                        reqId = queryReqIdIncreaser.RequestIncreasedId();
                        queriedCallbackHandlers.Add(reqId, handler);
                    }

                    if (queryTask != null
                        && queryTask.IsCanceled == false
                        && queryTask.IsCompleted == false
                        && queryTask.IsFaulted == false)
                    {
                        return reqId;
                    }

                    if (queryCts != null)
                    {
                        queryCts.Cancel();
                        queryCts.Dispose();
                        queryCts = null;
                    }
                    queryCts = new CancellationTokenSource();
                    var queryCancelToken = queryCts.Token;
                    queryTask = Task.Run(() => QueryOrderListSync(queryCancelToken), queryCancelToken);
                    queryTask.ContinueWith(task =>
                    {
                        var resp = task.Result;
                        CallbackAndPublishEventForOrderListQueriedResponse(resp);
                    }, queryCancelToken);
                    return reqId;
                }
            }

            public void RemoveQueryCallbackHandler(long reqId)
            {
                lock (queryLock)
                {
                    queriedCallbackHandlers.Remove(reqId);
                }
            }

            public void Dispose()
            {
                if (isDisposed == true) return;
                isDisposed = true;
                if (queryCts != null)
                {
                    queryCts.Cancel();
                    queryCts.Dispose();
                    queryCts = null;
                }
            }

            public IInterfaceInteractResponse<IEnumerable<HostingXQOrderWithTradeList>> QueryOrderList(CancellationToken cancelToken)
            {
                var resp = QueryOrderListSync(cancelToken);
                CallbackAndPublishEventForOrderListQueriedResponse(resp);
                return resp;
            }

            private void CallbackAndPublishEventForOrderListQueriedResponse(IInterfaceInteractResponse<IEnumerable<HostingXQOrderWithTradeList>> resp)
            {
                lock (queryLock)
                {
                    var callbackHandlers = queriedCallbackHandlers.Values.ToArray();
                    var eventHandlers = queriedEventHandlers.ToArray();
                    queriedCallbackHandlers.Clear();

                    foreach (var callbackHandlerItem in callbackHandlers)
                    {
                        callbackHandlerItem.Target?.Invoke(resp);
                    }

                    if (resp?.CorrectResult != null)
                    {
                        foreach (var eventHandlerItem in eventHandlers)
                        {
                            eventHandlerItem.Target?.Invoke(this, resp?.CorrectResult);
                        }
                    }
                }
            }

            private IInterfaceInteractResponse<IEnumerable<HostingXQOrderWithTradeList>> QueryOrderListSync(CancellationToken cancelToken)
            {
                if (cancelToken.IsCancellationRequested) return null;
                var landingInfo = loginDataService.ProxyLoginResp?.HostingSession?.HostingSession2LandingInfo();
                if (landingInfo == null) return null;

                var queryPageSize = 200;
                IInterfaceInteractResponse<HostingXQOrderWithTradeListPage> firstPageResp = null;
                var queryOption = new QueryEffectXQOrderIndexOption
                {
                    SubAccountIds = new THashSet<long> { this.SubAccountId }
                };

                var queryAllCtrl = new QueryAllItemsByPageHelper<HostingXQOrderWithTradeList>(pageIndex => {
                    if (cancelToken.IsCancellationRequested) return null;
                    var pageOption = new IndexedPageOption
                    {
                        NeedTotalCount = true,
                        PageIndex = pageIndex,
                        PageSize = queryPageSize
                    };

                    var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub
                        .getEffectXQOrderWithTradeListPage(landingInfo, queryOption, pageOption);
                    if (resp == null) return null;
                    if (pageIndex == 0)
                    {
                        firstPageResp = resp;
                    }
                    var pageInfo = resp.CorrectResult;
                    var pageResult = new QueryItemsByPageResult<HostingXQOrderWithTradeList>(resp.SourceException != null)
                    {
                        TotalCount = pageInfo?.TotalCount,
                        Page = pageInfo?.ResultList?.ToArray()
                    };
                    return pageResult;
                });

                queryAllCtrl.RemoveDuplicateFunc = _items =>
                {
                    if (_items == null) return null;
                    var idGroupedItems = _items.GroupBy(i => i.Order?.OrderId);
                    return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
                };

                var queriedItems = queryAllCtrl.QueryAllItems();
                if (firstPageResp == null) return null;
                if (cancelToken.IsCancellationRequested) return null;

                var tarResp = new InterfaceInteractResponse<IEnumerable<HostingXQOrderWithTradeList>>(firstPageResp.Servant,
                    firstPageResp.InterfaceName,
                    firstPageResp.SourceException,
                    firstPageResp.HasTransportException,
                    firstPageResp.HttpResponseStatusCode,
                    queriedItems)
                {
                    CustomParsedExceptionResult = firstPageResp.CustomParsedExceptionResult,
                    InteractInformation = firstPageResp.InteractInformation
                };
                return tarResp;
            }
        }
    }
}
