using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.Composition;
using XueQiaoWaf.LoginUserManage.Interfaces.Applications;
using System.Collections.Concurrent;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using IDLAutoGenerated.Util;
using System.Threading;
using NativeModel.Contract;
using XueQiaoFoundation.Interfaces.Applications;
using xueqiao.contract.standard;
using XueQiaoFoundation.Shared.Helper.WeakDelegate;
using XueQiaoFoundation.Shared.Helper;
using lib.xqclient_base.thriftapi_mediation.Interface;
using lib.xqclient_base.thriftapi_mediation;
using business_foundation_lib.xq_thriftlib_config;

namespace XueQiaoFoundation.Applications.Controllers
{
    [Export(typeof(IContractQueryController)), Export(typeof(IXueQiaoFoundationSingletonController)), PartCreationPolicy(CreationPolicy.Shared)]
    internal class ContractQueryController : IContractQueryController, IXueQiaoFoundationSingletonController
    {
        
        private readonly ILoginDataService loginDataService;
        private readonly IContractCacheController contractCacheController;
        
        private readonly ConcurrentDictionary<int, QueryContractDetailByContractIdControl> queryContractByContractIdControlDictionary;
        private readonly ConcurrentDictionary<QueryContractsByCommodityReqKey, QueryContractDetailsByCommodityIdControl> queryContractsByCommodityIdControlDictionary;

        [ImportingConstructor]
        public ContractQueryController(
            ILoginDataService loginDataService,
            IContractCacheController contractCacheController)
        {
            
            this.loginDataService = loginDataService;
            this.contractCacheController = contractCacheController;

            queryContractByContractIdControlDictionary = new ConcurrentDictionary<int, QueryContractDetailByContractIdControl>();
            queryContractsByCommodityIdControlDictionary = new ConcurrentDictionary<QueryContractsByCommodityReqKey, QueryContractDetailsByCommodityIdControl>();
        }

        public void Shutdown()
        {
            var queryContractControls = queryContractByContractIdControlDictionary.Values.ToArray();
            queryContractByContractIdControlDictionary.Clear();
            foreach (var i in queryContractControls)
            {
                i.ContractDetailQueried -= QueryContractDetailByContractIdControl_Queried;
                i.Dispose();
            }

            var queryContractsByCommodityIdControls = queryContractsByCommodityIdControlDictionary.Values.ToArray();
            queryContractsByCommodityIdControlDictionary.Clear();
            foreach (var i in queryContractsByCommodityIdControls)
            {
                i.ContractDetailQueried -= QueryContractDetailsByCommodityIdControl_Queried;
                i.Dispose();
            }
        }

        public long QueryContract(int contractId, ActionDelegateReference<IInterfaceInteractResponse<NativeContract>> handler)
        {
            var optItem = CreateQueryContractByContractIdControl(contractId);
            return optItem.RequestQuery(handler);
        }

        public void RemoveQueryContractHandler(int contractId, long reqId)
        {
            if (queryContractByContractIdControlDictionary.TryGetValue(contractId, out QueryContractDetailByContractIdControl queryItem))
            {
                queryItem.RemoveQueryCallbackHandler(reqId);
            }
        }

        public IInterfaceInteractResponse<NativeContract> QueryContract(int contractId)
        {
            var optItem = CreateQueryContractByContractIdControl(contractId);
            return optItem.QuerySync();
        }

        public long QueryContracts(QueryContractsByCommodityReqKey queryKey,
            ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<NativeContract>>> handler)
        {
            var optItem = CreateQueryContractsByCommodityControl(queryKey);
            return optItem.QueryContracts(handler);
        }

        public void RemoveQueryContractsHandler(QueryContractsByCommodityReqKey queryKey, long reqId)
        {
            if (queryKey == null) return;
            if (queryContractsByCommodityIdControlDictionary.TryGetValue(queryKey, out QueryContractDetailsByCommodityIdControl queryItem))
            {
                queryItem.RemoveQueryCallbackHandler(reqId);
            }
        }

        public IInterfaceInteractResponse<IEnumerable<NativeContract>> QueryContracts(QueryContractsByCommodityReqKey queryKey)
        {
            var optItem = CreateQueryContractsByCommodityControl(queryKey);
            return optItem.QueryContractsSync();
        }

        private QueryContractDetailByContractIdControl CreateQueryContractByContractIdControl(int contractId)
        {
            var optItem = queryContractByContractIdControlDictionary.AddOrUpdate(contractId,
                (k) =>
                {
                    var newItem = new QueryContractDetailByContractIdControl(contractId,
                        loginDataService,
                        contractCacheController);
                    newItem.ContractDetailQueried += QueryContractDetailByContractIdControl_Queried;
                    return newItem;
                },
                (k, oldValue) =>
                {
                    return oldValue;
                });
            return optItem;
        }

        private QueryContractDetailsByCommodityIdControl CreateQueryContractsByCommodityControl(QueryContractsByCommodityReqKey queryKey)
        {
            var optItem = queryContractsByCommodityIdControlDictionary.AddOrUpdate(queryKey,
                (k) =>
                {
                    var newItem = new QueryContractDetailsByCommodityIdControl(queryKey,
                        loginDataService,
                        contractCacheController);
                    newItem.ContractDetailQueried += QueryContractDetailsByCommodityIdControl_Queried;
                    return newItem;
                },
                (k, oldValue) =>
                {
                    return oldValue;
                });
            return optItem;
        }

        private void QueryContractDetailByContractIdControl_Queried(NativeContract obj)
        {
            if (obj.SledContractId is int contractId)
            {
                if (queryContractByContractIdControlDictionary.TryRemove(contractId, 
                    out QueryContractDetailByContractIdControl _queryControl))
                {
                    _queryControl.ContractDetailQueried -= QueryContractDetailByContractIdControl_Queried;
                    _queryControl.Dispose();
                }
            }
        }

        private void QueryContractDetailsByCommodityIdControl_Queried(QueryContractDetailsByCommodityIdControl queryControl, IEnumerable<NativeContract> objs)
        {
            if (objs == null || !objs.Any()) return;
            if (queryControl != null)
            {
                if (queryContractsByCommodityIdControlDictionary.TryRemove(queryControl.QueryKey,
                    out QueryContractDetailsByCommodityIdControl _queryControl))
                {
                    _queryControl.ContractDetailQueried -= QueryContractDetailsByCommodityIdControl_Queried;
                    _queryControl.Dispose();
                }
            }
        }


        /// <summary>
        /// 通过合约 id 查询合约详情的控制
        /// </summary>
        class QueryContractDetailByContractIdControl : IDisposable
        {
            
            private readonly ILoginDataService loginDataService;
            private readonly IContractCacheController contractCacheController;

            private readonly IDIncreaser queryReqIdIncreaser = new IDIncreaser();
            private readonly Dictionary<long, ActionDelegateReference<IInterfaceInteractResponse<NativeContract>>> queriedCallbackHandlers;
            private readonly List<ActionDelegateReference<NativeContract>> queriedEventHandlers;
            private readonly object contractQueryLock = new object();
            private Task<IInterfaceInteractResponse<SledContractPage>> queryTask;
            private CancellationTokenSource queryCts;
            private bool? isDisposed;

            public QueryContractDetailByContractIdControl(int contractId,
                
                ILoginDataService loginDataService,
                IContractCacheController contractCacheController)
            {
                if (contractId <= 0) throw new ArgumentException("`contractId` must > 0.");
                this.ContractId = contractId;
                
                this.loginDataService = loginDataService;
                this.contractCacheController = contractCacheController;

                queriedCallbackHandlers = new Dictionary<long, ActionDelegateReference<IInterfaceInteractResponse<NativeContract>>>();
                queriedEventHandlers = new List<ActionDelegateReference<NativeContract>>();
            }
            
            public int ContractId { get; private set; }
            
            public event Action<NativeContract> ContractDetailQueried
            {
                add
                {
                    lock (contractQueryLock)
                    {
                        // 弱引用
                        queriedEventHandlers.Add(new ActionDelegateReference<NativeContract>(value, false));
                    }
                }
                remove
                {
                    lock (contractQueryLock)
                    {
                        queriedEventHandlers.RemoveAll(i => i.Target == value);
                    }
                }
            }

            public long RequestQuery(ActionDelegateReference<IInterfaceInteractResponse<NativeContract>> handler)
            {
                lock (contractQueryLock)
                {
                    long reqId = 0;
                    if (handler != null)
                    {
                        reqId = queryReqIdIncreaser.RequestIncreasedId();
                        queriedCallbackHandlers.Add(reqId, handler);
                    }

                    if (queryTask != null
                        && queryTask?.IsCanceled == false
                        && queryTask?.IsCompleted == false
                        && queryTask?.IsFaulted == false)
                    {
                        return reqId;
                    }

                    var loginResp = loginDataService.ProxyLoginResp;
                    if (loginResp == null) return reqId;

                    if (queryCts != null)
                    {
                        queryCts.Cancel();
                        queryCts.Dispose();
                        queryCts = null;
                    }
                    queryCts = new CancellationTokenSource();
                    var cancelToken = queryCts.Token;
                    queryTask = XqThriftLibConfigurationManager.SharedInstance.ContractOnlineServiceHttpStub
                        .reqSledContractAsync(GenerateQueryOption(), 0, 1, cancelToken);
                    queryTask.ContinueWith(task =>
                    {
                        var resp = task.Result;
                        if (cancelToken.IsCancellationRequested) return;
                        HandleContractQueriedResponse(resp);
                    });

                    return reqId;
                }
            }

            public void RemoveQueryCallbackHandler(long reqId)
            {
                lock (contractQueryLock)
                {
                    queriedCallbackHandlers.Remove(reqId);
                }
            }

            public void Dispose()
            {
                if (isDisposed == true) return;
                isDisposed = true;
                if (queryCts != null)
                {
                    queryCts.Cancel();
                    queryCts.Dispose();
                    queryCts = null;
                }
            }

            public IInterfaceInteractResponse<NativeContract> QuerySync()
            {
                var resp = XqThriftLibConfigurationManager.SharedInstance.ContractOnlineServiceHttpStub.reqSledContract(GenerateQueryOption(), 0, 1);
                return HandleContractQueriedResponse(resp);
            }

            private ReqSledContractOption GenerateQueryOption()
            {
                var loginResp = loginDataService.ProxyLoginResp;
                if (loginResp == null) return null;
                var option = new ReqSledContractOption
                {
                    PlatformEnv = loginResp.HostingRunningMode.Contract_HostingRunningMode2TechPlatformEnv(),
                    SledContractIdList = new List<int> { ContractId }
                };
                return option;
            }

            private IInterfaceInteractResponse<NativeContract> HandleContractQueriedResponse(IInterfaceInteractResponse<SledContractPage> resp)
            {
                if (resp == null) return null;
                lock (contractQueryLock)
                {
                    var callbackHandlers = queriedCallbackHandlers.Values.ToArray();
                    var eventHandlers = queriedEventHandlers.ToArray();

                    queriedCallbackHandlers.Clear();

                    var tarResp = GenerateContractQueryResponse(resp);
                    // 缓存
                    if (tarResp?.CorrectResult is NativeContract contract)
                    {
                        contractCacheController.Cache(contract.SledContractId, contract);
                    }

                    foreach (var handlerItem in callbackHandlers)
                    {
                        handlerItem.Target?.Invoke(tarResp);
                    }

                    if (tarResp?.CorrectResult != null)
                    {
                        foreach (var eventHandlerItem in eventHandlers)
                        {
                            eventHandlerItem.Target?.Invoke(tarResp.CorrectResult);
                        }
                    }

                    return tarResp;
                }
            }

            private IInterfaceInteractResponse<NativeContract> GenerateContractQueryResponse(IInterfaceInteractResponse<SledContractPage> srcResp)
            {
                if (srcResp == null) return null;

                var targetResultItem = srcResp.CorrectResult?.Page?.FirstOrDefault(c => c.SledContractId == ContractId);
                var tarResp = new InterfaceInteractResponse<NativeContract>(srcResp.Servant,
                    srcResp.InterfaceName,
                    srcResp.SourceException,
                    srcResp.HasTransportException,
                    srcResp.HttpResponseStatusCode,
                    targetResultItem?.ToNativeContract())
                {
                    InteractInformation = srcResp.InteractInformation,
                    CustomParsedExceptionResult = srcResp.CustomParsedExceptionResult
                };
                return tarResp;
            }
        }
        
        /// <summary>
        /// 通过商品 id 查询合约列表的控制
        /// </summary>
        class QueryContractDetailsByCommodityIdControl : IDisposable
        {
            
            private readonly ILoginDataService loginDataService;
            private readonly IContractCacheController contractCacheController;

            private readonly IDIncreaser queryReqIdIncreaser = new IDIncreaser();
            private readonly Dictionary<long, ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<NativeContract>>>> queriedCallbackHandlers;
            private readonly List<ActionDelegateReference<QueryContractDetailsByCommodityIdControl, IEnumerable<NativeContract>>> queriedEventHandlers;
            private readonly object contractsQueryLock = new object();
            private Task<IInterfaceInteractResponse<IEnumerable<NativeContract>>> queryTask;
            private CancellationTokenSource queryCts;
            private bool? isDisposed;

            public QueryContractDetailsByCommodityIdControl(QueryContractsByCommodityReqKey queryKey,
                 
                ILoginDataService loginDataService,
                IContractCacheController contractCacheController)
            {
                if (queryKey == null) throw new ArgumentNullException("queryKey");
                this.QueryKey = queryKey;
                
                this.loginDataService = loginDataService;
                this.contractCacheController = contractCacheController;

                queriedCallbackHandlers = new Dictionary<long, ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<NativeContract>>>>();
                queriedEventHandlers = new List<ActionDelegateReference<QueryContractDetailsByCommodityIdControl, IEnumerable<NativeContract>>>();
            }

            public readonly QueryContractsByCommodityReqKey QueryKey;

            public event Action<QueryContractDetailsByCommodityIdControl, IEnumerable<NativeContract>> ContractDetailQueried
            {
                add
                {
                    lock (contractsQueryLock)
                    {
                        // 弱引用
                        queriedEventHandlers.Add(new ActionDelegateReference<QueryContractDetailsByCommodityIdControl, IEnumerable<NativeContract>>(value, false));
                    }
                }
                remove
                {
                    lock (contractsQueryLock)
                    {
                        queriedEventHandlers.RemoveAll(i => i.Target == value);
                    }
                }
            }

            public long QueryContracts(ActionDelegateReference<IInterfaceInteractResponse<IEnumerable<NativeContract>>> handler)
            {
                lock (contractsQueryLock)
                {
                    long reqId = 0;
                    if (handler != null)
                    {
                        reqId = queryReqIdIncreaser.RequestIncreasedId();
                        queriedCallbackHandlers.Add(reqId, handler);
                    }

                    if (queryTask != null
                        && queryTask.IsCanceled == false
                        && queryTask.IsCompleted == false
                        && queryTask.IsFaulted == false)
                    {
                        return reqId;
                    }

                    if (queryCts != null)
                    {
                        queryCts.Cancel();
                        queryCts.Dispose();
                        queryCts = null;
                    }
                    queryCts = new CancellationTokenSource();
                    var cancelToken = queryCts.Token;
                    queryTask = Task.Run(() => QueryContractsSync(cancelToken, true), cancelToken);
                    queryTask.ContinueWith(task =>
                    {
                        if (cancelToken.IsCancellationRequested) return;
                        CallbackAndPublishEventForItemsQueriedResponse(task.Result);
                    }, cancelToken);
                    return reqId;
                }
            }


            public void RemoveQueryCallbackHandler(long reqId)
            {
                lock (contractsQueryLock)
                {
                    queriedCallbackHandlers.Remove(reqId);
                }
            }

            public void Dispose()
            {
                if (isDisposed == true) return;
                isDisposed = true;
                if (queryCts != null)
                {
                    queryCts.Cancel();
                    queryCts.Dispose();
                    queryCts = null;
                }
            }

            public IInterfaceInteractResponse<IEnumerable<NativeContract>> QueryContractsSync()
            {
                var resp = QueryContractsSync(CancellationToken.None, true);
                CallbackAndPublishEventForItemsQueriedResponse(resp);
                return resp;
            }

            private void CallbackAndPublishEventForItemsQueriedResponse(IInterfaceInteractResponse<IEnumerable<NativeContract>> resp)
            {
                if (resp == null) return;
                lock (contractsQueryLock)
                {
                    var callbackHandlers = queriedCallbackHandlers.Values.ToArray();
                    var eventHandlers = queriedEventHandlers.ToArray();
                    queriedCallbackHandlers.Clear();

                    foreach (var callbackHandlerItem in callbackHandlers)
                    {
                        callbackHandlerItem.Target?.Invoke(resp);
                    }

                    if (resp?.CorrectResult is IEnumerable<NativeContract> list)
                    {
                        foreach (var eventHandlerItem in eventHandlers)
                        {
                            eventHandlerItem.Target?.Invoke(this, list);
                        }
                    }
                }
            }

            private IInterfaceInteractResponse<SledContractPage> QueryContractPage(int commodityId,
                ContractStatus status, int pageIndex, int pageSize)
            {
                var loginResp = loginDataService.ProxyLoginResp;
                if (loginResp == null) return null;

                var option = new ReqSledContractOption
                {
                    ContractStatus = status,
                    PlatformEnv = loginResp.HostingRunningMode.Contract_HostingRunningMode2TechPlatformEnv(),
                    SledCommodityId = commodityId
                };
                return XqThriftLibConfigurationManager.SharedInstance.ContractOnlineServiceHttpStub.reqSledContract(option, pageIndex, pageSize);
            }

            private void QueryAllContracts(CancellationToken ct,
                int commodityId, ContractStatus status,
                out IInterfaceInteractResponse respInfo,
                out IEnumerable<SledContract> queriedContracts)
            {
                respInfo = null;
                queriedContracts = null;

                var queryPageSize = 50;
                IInterfaceInteractResponse<SledContractPage> firstPageResp = null;
                var queryAllCtrl = new QueryAllItemsByPageHelper<SledContract>(pageIndex => {
                    if (ct.IsCancellationRequested) return null;

                    var resp = QueryContractPage(commodityId, status, pageIndex, queryPageSize);
                    if (resp == null) return null;
                    if (pageIndex == 0)
                    {
                        firstPageResp = resp;
                    }
                    var pageInfo = resp.CorrectResult;
                    var pageResult = new QueryItemsByPageResult<SledContract>(resp.SourceException != null)
                    {
                        TotalCount = pageInfo?.Total,
                        Page = pageInfo?.Page?.ToArray()
                    };
                    return pageResult;
                });
                
                queryAllCtrl.RemoveDuplicateFunc = _items =>
                {
                    if (_items == null) return null;
                    var idGroupedItems = _items.GroupBy(i => i.SledContractId);
                    return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
                };

                var queriedItems = queryAllCtrl.QueryAllItems();
                respInfo = firstPageResp;
                queriedContracts = queriedItems;
            }

            private void QueryLimitSizeContracts(CancellationToken ct,
                int commodityId, ContractStatus status, int limitSize,
                out IInterfaceInteractResponse respInfo,
                out IEnumerable<SledContract> queriedContracts)
            {
                respInfo = null;
                queriedContracts = null;

                var queryPageSize = limitSize < 50 ? limitSize : 50;
                IInterfaceInteractResponse<SledContractPage> firstPageResp = null;
                var queryAllCtrl = new QueryAllItemsByPageHelper<SledContract>(pageIndex => {
                    if (ct.IsCancellationRequested) return null;

                    var resp = QueryContractPage(commodityId, status, pageIndex, queryPageSize);
                    if (resp == null) return null;
                    if (pageIndex == 0)
                    {
                        firstPageResp = resp;
                    }
                    var pageInfo = resp.CorrectResult;
                    var pageResult = new QueryItemsByPageResult<SledContract>(resp.SourceException != null)
                    {
                        TotalCount = pageInfo?.Total,
                        Page = pageInfo?.Page?.ToArray()
                    };
                    return pageResult;
                });

                queryAllCtrl.ContinueQueryNextPageFunc = (totalQueriedItems, lastTimeQueridResult) =>
                {
                    if (lastTimeQueridResult == null) return false;
                    if (lastTimeQueridResult?.Page?.Any() != true) return false;

                    if (totalQueriedItems != null)
                    {
                        var idGroupedItems = totalQueriedItems.GroupBy(i => i.SledContractId);
                        if (idGroupedItems.Count() >= limitSize) return false;
                    }

                    return true;
                };

                queryAllCtrl.RemoveDuplicateFunc = _items =>
                {
                    if (_items == null) return null;
                    var idGroupedItems = _items.GroupBy(i => i.SledContractId);
                    return idGroupedItems.Select(i => i.LastOrDefault()).ToArray();
                };

                var queriedItems = queryAllCtrl.QueryAllItems();
                respInfo = firstPageResp;
                queriedContracts = queriedItems;
            }

            private IInterfaceInteractResponse<IEnumerable<NativeContract>> QueryContractsSync(CancellationToken ct, bool cacheQueriedItems)
            {
                IInterfaceInteractResponse resultResp = null;
                IEnumerable<SledContract> queriedContracts = null;
                if (QueryKey.LimitSize == null || QueryKey.LimitSize <= 0)
                {
                    QueryAllContracts(ct, QueryKey.CommodityId, QueryKey.Status, 
                        out resultResp, out queriedContracts);
                }
                else
                {
                    QueryLimitSizeContracts(ct, QueryKey.CommodityId, QueryKey.Status, QueryKey.LimitSize.Value, 
                        out resultResp, out queriedContracts);
                }

                if (resultResp != null)
                {
                    var tarResp = new InterfaceInteractResponse<IEnumerable<NativeContract>>(resultResp.Servant, resultResp.InterfaceName, resultResp.SourceException, resultResp.HasTransportException, resultResp.HttpResponseStatusCode, queriedContracts?.Select(i => i.ToNativeContract()))
                    {
                        CustomParsedExceptionResult = resultResp.CustomParsedExceptionResult,
                        InteractInformation = resultResp.InteractInformation,
                    };

                    if (cacheQueriedItems)
                    {
                        if (tarResp?.CorrectResult != null)
                        {
                            foreach (var contract in tarResp.CorrectResult)
                            {
                                contractCacheController.Cache(contract.SledContractId, contract);
                            }
                        }
                    }
                    return tarResp;
                }
                
                return null;
            }
        }
    }
}
