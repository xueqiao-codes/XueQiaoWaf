using IDLAutoGenerated.Util;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using xueqiao.trade.hosting.terminal.ao;
using XueQiaoFoundation.Interfaces.Applications;
using XueQiaoFoundation.BusinessResources.Models;
using lib.xqclient_base.logger;
using business_foundation_lib.xq_thriftlib_config;

namespace XueQiaoFoundation.Applications.Dao
{
    [Export(typeof(IUserSubscribeDataDao)), PartCreationPolicy(CreationPolicy.Shared)]
    internal class UserSubscribeDataDaoRemote : IUserSubscribeDataDao
    {
        private const string UserSubscribeDataStoreKey = "kUserSubscribeData";
        

        [ImportingConstructor]
        public UserSubscribeDataDaoRemote()
        {
            
        }

        public UserSubscribeDataTree GetUserSubscribeData(LandingInfo landingInfo, out int? dataVersion)
        {
            dataVersion = null;

            var resp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getUserSetting(landingInfo, UserSubscribeDataStoreKey);
            if (resp == null || resp.SourceException != null || resp.CorrectResult == null)
            {
                AppLog.Error("Failed to GetUserSubscribeData.");
                return null;
            }

            var content = resp.CorrectResult.Content;
            dataVersion = resp.CorrectResult.Version;

            if (content == null) return null;

            try
            {
                var deserializedData = JsonConvert.DeserializeObject<UserSubscribeDataTree>(content);
                if (deserializedData == null)
                {
                    AppLog.Warn($"Json deserialize failed for output:{content}");
                }
                return deserializedData;
            }
            catch (Exception e)
            {
                AppLog.Error($"Deserialize user subscribe data failed. e:{e}");
                return null;
            }
        }

        public int? SaveSubscribeData(LandingInfo landingInfo, UserSubscribeDataTree subscribeTree, int dataVersion)
        {
            if (subscribeTree == null) return null;
            if (landingInfo == null) return null;

            string serializeContent = null;
            try
            {
                serializeContent = JsonConvert.SerializeObject(subscribeTree);
            }
            catch (Exception e)
            {
                AppLog.Error($"Serialize user subscribe data failed. e:{e}");
                return null;
            }
            if (serializeContent == null)
            {
                AppLog.Error($"Failed to json serialize subscribeTree.");
                return null;
            }

            var updateSetting = new HostingUserSetting
            {
                Content = serializeContent,
                Version = dataVersion
            };

            var saveResp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.updateUserSetting(landingInfo, UserSubscribeDataStoreKey, updateSetting);
            if (saveResp.SourceException == null) return updateSetting.Version;

            if (saveResp.CustomParsedExceptionResult?.BusinessErrorCode == ErrorCodeConstants.ERROR_CONFIG_VERSION_LOW
                || saveResp.CustomParsedExceptionResult?.BusinessErrorCode == ErrorCodeConstants.ERROR_CONFIG_LOST)
            {
                var dataVersionResp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.getUserSettingVersion(landingInfo, UserSubscribeDataStoreKey);

                bool needRetry = false;
                if (dataVersionResp.CustomParsedExceptionResult?.BusinessErrorCode == ErrorCodeConstants.ERROR_CONFIG_LOST)
                {
                    needRetry = true;
                }
                else if (dataVersionResp.CorrectResult is int queriedVersion)
                {
                    updateSetting.Version = queriedVersion + 1;
                    needRetry = true;
                }

                if (needRetry)
                {
                    // retry again
                    saveResp = XqThriftLibConfigurationManager.SharedInstance.TradeHostingTerminalAoHttpStub.updateUserSetting(landingInfo, UserSubscribeDataStoreKey, updateSetting);
                    if (saveResp.SourceException == null)
                        return updateSetting.Version;
                    else
                    {
                        AppLog.Error($"Failed to SaveSubscribeData.");
                        return null;
                    }
                }
                return null;
            }
            else
            {
                return null;
            }
        }
    }
}
