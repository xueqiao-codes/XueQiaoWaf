using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using xueqiao.broker;
using xueqiao.quotation;
using xueqiao.trade.hosting;
using xueqiao.trade.hosting.arbitrage.thriftapi;
using xueqiao.trade.hosting.proxy;
using xueqiao.trade.hosting.terminal.ao;

namespace IDLAutoGenerated.Util
{
    public static class Extensions
    {
        public static string HostingRunningMode2QuotationPlatformEnv(this HostingRunningMode runningMode)
        {
            switch (runningMode)
            {
                case HostingRunningMode.REAL_HOSTING:
                    return quotation_itemConstants.PLATFORM_XUEQIAO;
                case HostingRunningMode.SIM_HOSTING:
                    return quotation_itemConstants.PLATFORM_SIMU_XUEQIAO;
                case HostingRunningMode.ALLDAY_HOSTING:
                    return quotation_itemConstants.PLATFORM_SIMU_XUEQIAO;
                default:
                    return quotation_itemConstants.PLATFORM_SIMU_XUEQIAO;
            }
        }

        public static xueqiao.contract.standard.TechPlatformEnv Contract_HostingRunningMode2TechPlatformEnv(this HostingRunningMode runningMode)
        {
            xueqiao.contract.standard.TechPlatformEnv platformEnv = xueqiao.contract.standard.TechPlatformEnv.SIM;
            if (runningMode == HostingRunningMode.REAL_HOSTING)
                platformEnv = xueqiao.contract.standard.TechPlatformEnv.REAL;
            else if (runningMode == HostingRunningMode.SIM_HOSTING)
                platformEnv = xueqiao.contract.standard.TechPlatformEnv.SIM;
            return platformEnv;
        }

        public static xueqiao.broker.TechPlatformEnv Broker_HostingRunningMode2TechPlatformEnv(this HostingRunningMode runningMode)
        {
            xueqiao.broker.TechPlatformEnv platformEnv = xueqiao.broker.TechPlatformEnv.SIM;
            if (runningMode == HostingRunningMode.REAL_HOSTING)
                platformEnv = xueqiao.broker.TechPlatformEnv.REAL;
            else if (runningMode == HostingRunningMode.SIM_HOSTING)
                platformEnv = xueqiao.broker.TechPlatformEnv.SIM;
            return platformEnv;
        }

        public static LandingInfo HostingSession2LandingInfo(this HostingSession hostingSession)
        {
            var landingInfo = new LandingInfo();
            landingInfo.MachineId = hostingSession.MachineId;
            landingInfo.SubUserId = hostingSession.SubUserId;
            landingInfo.Token = hostingSession.Token;
            return landingInfo;
        }

        public static string GenerateQuotationContractSymbol(string sledContractCode,
            int sledCommodityType,
            string sledCommodityCode,
            string sledExchangeCode)
        {
            if (string.IsNullOrEmpty(sledContractCode)
                || string.IsNullOrEmpty(sledCommodityCode)
                || string.IsNullOrEmpty(sledExchangeCode))
            {
                throw new ArgumentException("Some args of sledContractCode, sledCommodityType, sledCommodityCode, sledExchangeCode are empty.");
            }
            var args = new string[] { sledExchangeCode, $"{sledCommodityType}", sledCommodityCode, sledContractCode };
            var symbol = HttpUtility.UrlEncode(string.Join("|", args));
            return Regex.Replace(symbol, @"%[a-f\d]{2}", m => m.Value.ToUpper());
        }

        public static void ParseContractSymbol(this string contractSymbol, 
            out string sledContractCode,
            out int sledCommodityType,
            out string sledCommodityCode,
            out string sledExchangeCode)
        {
            if (string.IsNullOrEmpty(contractSymbol))
            {
                throw new ArgumentException("contractSymbol can't be null or empty.");
            }

            var tmpStr = HttpUtility.UrlDecode(contractSymbol);
            var splits = tmpStr.Split(new String[] { "|" }, StringSplitOptions.None);
            sledExchangeCode = splits[0];
            sledCommodityType = System.Convert.ToInt32(splits[1]);
            sledCommodityCode = splits[2];
            sledContractCode = splits[3];
        }


        public static string LogFormatHostingXQOrder(this HostingXQOrder xqOrder)
        {
            return $"HostingXQOrder{{OrderId: {xqOrder.OrderId}, Version:{xqOrder.Version}, OrderState:{xqOrder.OrderState}, OrderTarget:{xqOrder.OrderTarget}";
        }

        public static string LogFormatHostingXQTrade(this HostingXQTrade xqTrade)
        {
            return $"HostingXQTrade{{TradeId:{xqTrade.TradeId}, SubAccountId:{xqTrade.SubAccountId}, SubUserId:{xqTrade.SubUserId}, TradeVolume:{xqTrade.TradeVolume}, TradePrice:{xqTrade.TradePrice}, CreateTimestampMs:{xqTrade.CreateTimestampMs}, TradeTarget:{xqTrade.TradeTarget}}}";
        }

        public static string LogFormatExecTrade(this HostingExecTrade execTrade)
        {
            return $"ExecTrade{{ExecTradeId: {execTrade.ExecTradeId}, ExecOrderId:{execTrade.ExecOrderId}, SubUserId:{execTrade.SubUserId}, TradePrice:{execTrade.TradePrice}, TradeVolume:{execTrade.TradeVolume}, ContractSummary:{execTrade.ContractSummary}";
        }

        public static string LogFormatExecOrder(this HostingExecOrder execOrder)
        {
            return $"ExecOrder{{ExecTradeId: ExecOrderId:{execOrder.ExecOrderId}, SubUserId:{execOrder.SubUserId}, State:{execOrder.StateInfo?.CurrentState}, StateMsg:{execOrder.StateInfo?.StatusMsg}";
        }

        /// <summary>
        /// 用于显示的格式化执行订单的最近一次撤单信息
        /// </summary>
        /// <param name="revokeInfo"></param>
        /// <param name="defaultReturnValueWhenNull">当结果为null时的默认返回</param>
        /// <returns></returns>
        public static string DisplayFormatExecOrderLastRevokeInfo(this HostingExecOrderRevokeInfo revokeInfo, string defaultReturnValueWhenNull)
        {
            var parts = new List<string>();
            if (!string.IsNullOrEmpty(revokeInfo.LastRevokeUpsideRejectReason) || (revokeInfo.__isset.lastRevokeUpsideErrorCode && revokeInfo.LastRevokeUpsideErrorCode != 0))
            {
                // 优先展示上手的错误
                var _sb = new StringBuilder();
                _sb.Append(string.IsNullOrEmpty(revokeInfo.LastRevokeUpsideRejectReason) ? "上手错误" : revokeInfo.LastRevokeUpsideRejectReason);
                if ((revokeInfo.__isset.lastRevokeUpsideErrorCode && revokeInfo.LastRevokeUpsideErrorCode != 0))
                {
                    _sb.Append($"({revokeInfo.LastRevokeUpsideErrorCode})");
                }
                parts.Add(_sb.ToString());
            }
            else if (revokeInfo.__isset.lastRevokeFailedErrorCode && revokeInfo.LastRevokeFailedErrorCode != 0)
            {
                // 如果上手无错误，显示撤单的内部错误
                parts.Add($"撤单失败({revokeInfo.LastRevokeFailedErrorCode})");
            }
            
            return parts.Count==0 ? defaultReturnValueWhenNull : string.Join(", ", parts.ToArray());
        }

        /// <summary>
        /// 用于显示的格式化交易账号的扩展信息
        /// </summary>
        /// <param name="tradeAccount"></param>
        /// <returns></returns>
        public static string DisplayFormatHostingTradeAccountProperties(this HostingTradeAccount tradeAccount)
        {
            var sortedProperties = tradeAccount.AccountProperties?.OrderBy(i => i.Key);
            if (sortedProperties == null) return null;
            var formatProps = sortedProperties.Select(i => $"{i.Key}：{i.Value}").ToArray();
            return string.Join("\n", formatProps);
        }

        /// <summary>
        /// 从交易账号数据结构中获取易盛9.0 authcode
        /// </summary>
        /// <param name="tradeAccount"></param>
        /// <returns></returns>
        public static string GetEs9_AuthCode(this HostingTradeAccount tradeAccount)
        {
            var accProperties = tradeAccount.AccountProperties;
            if (accProperties == null) return null;
            accProperties.TryGetValue(trade_hosting_basicConstants.ESUNNY9_AUTHCODE_PROPKEY, out string es9AuthCode);
            return es9AuthCode;
        }

        /// <summary>
        /// 从交易账号数据结构中获取易盛3.0 的特殊字段值
        /// </summary>
        /// <param name="tradeAccount"></param>
        /// <param name="es3_AppId">app id</param>
        /// <param name="es3_CertInfo">cert info</param>
        public static void GetEs3Properties(this HostingTradeAccount tradeAccount, out string es3_AppId, out string es3_CertInfo)
        {
            es3_AppId = null;
            es3_CertInfo = null;
            var accProperties = tradeAccount.AccountProperties;
            if (accProperties == null) return;

            accProperties.TryGetValue(trade_hosting_basicConstants.ESUNNY3_APPID_PROPKEY, out es3_AppId);
            accProperties.TryGetValue(trade_hosting_basicConstants.ESUNNY3_CERTINFO_PROPKEY, out es3_CertInfo);
        }

        /// <summary>
        /// 从交易账号数据结构中获取 CTP 的特殊字段值
        /// </summary>
        /// <param name="tradeAccount"></param>
        /// <param name="ctp_AppId">app id</param>
        /// <param name="ctp_Authcode">auth code</param>
        public static void GetCTPProperties(this HostingTradeAccount tradeAccount, out string ctp_AppId, out string ctp_Authcode)
        {
            ctp_AppId = null;
            ctp_Authcode = null;
            var accProperties = tradeAccount.AccountProperties;
            if (accProperties == null) return;

            accProperties.TryGetValue(trade_hosting_basicConstants.CTP_STS_APPID, out ctp_AppId);
            accProperties.TryGetValue(trade_hosting_basicConstants.CTP_STS_AUTHCODE, out ctp_Authcode);
        }

        /// <summary>
        /// 交易平台是否支持外盘交易
        /// </summary>
        /// <param name="tradeAccount"></param>
        /// <returns></returns>
        public static bool IsTechPlatformSupportOutter(this BrokerTechPlatform brokerTechPlatform)
        {
            return brokerTechPlatform == BrokerTechPlatform.TECH_ESUNNY_3 
                || brokerTechPlatform == BrokerTechPlatform.TECH_ESUNNY_9;
        }

        public static BrokerTechPlatform? ToBrokerTechPlatform(this BrokerPlatform brokerPlatform)
        {
            switch (brokerPlatform)
            {
                case BrokerPlatform.CTP:
                    return BrokerTechPlatform.TECH_CTP;
                case BrokerPlatform.ESUNNY:
                    return BrokerTechPlatform.TECH_ESUNNY_9;
                case BrokerPlatform.ESUNNY_3:
                    return BrokerTechPlatform.TECH_ESUNNY_3;
                default:
                    return null;
            }
        }

        public static BrokerPlatform ToBrokerPlatform(this BrokerTechPlatform brokerTechPlatform)
        {
            switch (brokerTechPlatform)
            {
                case BrokerTechPlatform.TECH_CTP:
                    return BrokerPlatform.CTP;
                case BrokerTechPlatform.TECH_ESUNNY_9:
                    return BrokerPlatform.ESUNNY;
                case BrokerTechPlatform.TECH_ESUNNY_3:
                    return BrokerPlatform.ESUNNY_3;
                default:
                    return BrokerPlatform.NONE;
            }
        }
        
        public static IEnumerable<HostingXQTrade> JoinAllTradeItems(this IEnumerable<HostingXQOrderWithTradeList> orderWithTradeList)
        {
            if (orderWithTradeList?.Any() != true) return null;
            var tradeList = new List<HostingXQTrade>();
            foreach (var xqOrder in orderWithTradeList)
            {
                if (xqOrder.TradeList == null) continue;
                foreach (var xqTrade in xqOrder.TradeList)
                {
                    tradeList.Add(xqTrade);
                }
            }
            return tradeList.ToArray();
        }
        
        public static VersionNum ToProtocalVersion(this Version localVersion)
        {
            if (localVersion == null) return null;
            return new VersionNum { MajorVersionNum = localVersion.Major, MinorVersionNum = localVersion.Minor, BuildVersionNum = localVersion.Build, ReversionNum = localVersion.Revision }; ;
        }

        public static Version ToLocalVersion(this VersionNum protocalVersion)
        {
            if (protocalVersion == null) return null;
            return new Version(protocalVersion.MajorVersionNum, protocalVersion.MinorVersionNum, protocalVersion.BuildVersionNum, protocalVersion.ReversionNum);
        }
    }
}
