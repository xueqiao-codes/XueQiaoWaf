/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.working.order.thriftapi
{

  /// <summary>
  /// 资金账户
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AssetAccount : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private string _accountName;
    private string _password;
    private string _nickName;
    private string _authorizationCode;
    private long _brokerId;
    private long _brokerAccessId;
    private Dictionary<string, string> _extraInfo;

    public string AccountName
    {
      get
      {
        return _accountName;
      }
      set
      {
        __isset.accountName = true;
        SetProperty(ref _accountName, value);
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        SetProperty(ref _password, value);
      }
    }

    public string NickName
    {
      get
      {
        return _nickName;
      }
      set
      {
        __isset.nickName = true;
        SetProperty(ref _nickName, value);
      }
    }

    public string AuthorizationCode
    {
      get
      {
        return _authorizationCode;
      }
      set
      {
        __isset.authorizationCode = true;
        SetProperty(ref _authorizationCode, value);
      }
    }

    public long BrokerId
    {
      get
      {
        return _brokerId;
      }
      set
      {
        __isset.brokerId = true;
        SetProperty(ref _brokerId, value);
      }
    }

    public long BrokerAccessId
    {
      get
      {
        return _brokerAccessId;
      }
      set
      {
        __isset.brokerAccessId = true;
        SetProperty(ref _brokerAccessId, value);
      }
    }

    public Dictionary<string, string> ExtraInfo
    {
      get
      {
        return _extraInfo;
      }
      set
      {
        __isset.extraInfo = true;
        SetProperty(ref _extraInfo, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accountName;
      public bool password;
      public bool nickName;
      public bool authorizationCode;
      public bool brokerId;
      public bool brokerAccessId;
      public bool extraInfo;
    }

    public AssetAccount() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccountName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Password = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              NickName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              AuthorizationCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              BrokerId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              BrokerAccessId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                ExtraInfo = new Dictionary<string, string>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  string _key2;
                  string _val3;
                  _key2 = iprot.ReadString();
                  _val3 = iprot.ReadString();
                  ExtraInfo[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AssetAccount");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccountName != null && __isset.accountName) {
        field.Name = "accountName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccountName);
        oprot.WriteFieldEnd();
      }
      if (Password != null && __isset.password) {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Password);
        oprot.WriteFieldEnd();
      }
      if (NickName != null && __isset.nickName) {
        field.Name = "nickName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NickName);
        oprot.WriteFieldEnd();
      }
      if (AuthorizationCode != null && __isset.authorizationCode) {
        field.Name = "authorizationCode";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AuthorizationCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.brokerId) {
        field.Name = "brokerId";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BrokerId);
        oprot.WriteFieldEnd();
      }
      if (__isset.brokerAccessId) {
        field.Name = "brokerAccessId";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BrokerAccessId);
        oprot.WriteFieldEnd();
      }
      if (ExtraInfo != null && __isset.extraInfo) {
        field.Name = "extraInfo";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraInfo.Count));
          foreach (string _iter4 in ExtraInfo.Keys)
          {
            oprot.WriteString(_iter4);
            oprot.WriteString(ExtraInfo[_iter4]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AssetAccount(");
      sb.Append("AccountName: ");
      sb.Append(AccountName);
      sb.Append(",Password: ");
      sb.Append(Password);
      sb.Append(",NickName: ");
      sb.Append(NickName);
      sb.Append(",AuthorizationCode: ");
      sb.Append(AuthorizationCode);
      sb.Append(",BrokerId: ");
      sb.Append(BrokerId);
      sb.Append(",BrokerAccessId: ");
      sb.Append(BrokerAccessId);
      sb.Append(",ExtraInfo: ");
      if (ExtraInfo == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (string _iter5 in ExtraInfo.Keys)
        {
          sb.Append(_iter5.ToString());
          sb.Append(":");
          sb.Append(ExtraInfo[_iter5].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(")");
      return sb.ToString();
    }

  }

}
