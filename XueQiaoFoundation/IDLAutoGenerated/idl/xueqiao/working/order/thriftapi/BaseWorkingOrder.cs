/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.working.order.thriftapi
{

  /// <summary>
  /// 工单基本信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BaseWorkingOrder : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _orderId;
    private long _companyId;
    private long _companyUserId;
    private WorkingOrderType _workingOrderType;
    private WorkingOrderState _state;
    private long _createTimestamp;
    private long _lastModifyTimestamp;
    private string _operateUser;

    public long OrderId
    {
      get
      {
        return _orderId;
      }
      set
      {
        __isset.orderId = true;
        SetProperty(ref _orderId, value);
      }
    }

    public long CompanyId
    {
      get
      {
        return _companyId;
      }
      set
      {
        __isset.companyId = true;
        SetProperty(ref _companyId, value);
      }
    }

    public long CompanyUserId
    {
      get
      {
        return _companyUserId;
      }
      set
      {
        __isset.companyUserId = true;
        SetProperty(ref _companyUserId, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="WorkingOrderType"/>
    /// </summary>
    public WorkingOrderType WorkingOrderType
    {
      get
      {
        return _workingOrderType;
      }
      set
      {
        __isset.workingOrderType = true;
        SetProperty(ref _workingOrderType, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="WorkingOrderState"/>
    /// </summary>
    public WorkingOrderState State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        SetProperty(ref _state, value);
      }
    }

    public long CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public long LastModifyTimestamp
    {
      get
      {
        return _lastModifyTimestamp;
      }
      set
      {
        __isset.lastModifyTimestamp = true;
        SetProperty(ref _lastModifyTimestamp, value);
      }
    }

    public string OperateUser
    {
      get
      {
        return _operateUser;
      }
      set
      {
        __isset.operateUser = true;
        SetProperty(ref _operateUser, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool orderId;
      public bool companyId;
      public bool companyUserId;
      public bool workingOrderType;
      public bool state;
      public bool createTimestamp;
      public bool lastModifyTimestamp;
      public bool operateUser;
    }

    public BaseWorkingOrder() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              OrderId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              CompanyId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              CompanyUserId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              WorkingOrderType = (WorkingOrderType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              State = (WorkingOrderState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              CreateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              LastModifyTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              OperateUser = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BaseWorkingOrder");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.orderId) {
        field.Name = "orderId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(OrderId);
        oprot.WriteFieldEnd();
      }
      if (__isset.companyId) {
        field.Name = "companyId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CompanyId);
        oprot.WriteFieldEnd();
      }
      if (__isset.companyUserId) {
        field.Name = "companyUserId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CompanyUserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.workingOrderType) {
        field.Name = "workingOrderType";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)WorkingOrderType);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)State);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModifyTimestamp) {
        field.Name = "lastModifyTimestamp";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModifyTimestamp);
        oprot.WriteFieldEnd();
      }
      if (OperateUser != null && __isset.operateUser) {
        field.Name = "operateUser";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OperateUser);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BaseWorkingOrder(");
      sb.Append("OrderId: ");
      sb.Append(OrderId);
      sb.Append(",CompanyId: ");
      sb.Append(CompanyId);
      sb.Append(",CompanyUserId: ");
      sb.Append(CompanyUserId);
      sb.Append(",WorkingOrderType: ");
      sb.Append(WorkingOrderType);
      sb.Append(",State: ");
      sb.Append(State);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastModifyTimestamp: ");
      sb.Append(LastModifyTimestamp);
      sb.Append(",OperateUser: ");
      sb.Append(OperateUser);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
