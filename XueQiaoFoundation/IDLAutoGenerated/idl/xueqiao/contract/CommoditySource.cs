/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CommoditySource : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _sourceId;
    private List<string> _exchangeMic;
    private xueqiao.contract.standard.TechPlatform _techPlatformSource;
    private xueqiao.contract.standard.TechPlatformEnv _techPlatformEnv;
    private long _createTimestamp;
    private long _lastModifyTimestamp;

    public int SourceId
    {
      get
      {
        return _sourceId;
      }
      set
      {
        __isset.sourceId = true;
        SetProperty(ref _sourceId, value);
      }
    }

    public List<string> ExchangeMic
    {
      get
      {
        return _exchangeMic;
      }
      set
      {
        __isset.exchangeMic = true;
        SetProperty(ref _exchangeMic, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.contract.standard.TechPlatform"/>
    /// </summary>
    public xueqiao.contract.standard.TechPlatform TechPlatformSource
    {
      get
      {
        return _techPlatformSource;
      }
      set
      {
        __isset.techPlatformSource = true;
        SetProperty(ref _techPlatformSource, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.contract.standard.TechPlatformEnv"/>
    /// </summary>
    public xueqiao.contract.standard.TechPlatformEnv TechPlatformEnv
    {
      get
      {
        return _techPlatformEnv;
      }
      set
      {
        __isset.techPlatformEnv = true;
        SetProperty(ref _techPlatformEnv, value);
      }
    }

    public long CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public long LastModifyTimestamp
    {
      get
      {
        return _lastModifyTimestamp;
      }
      set
      {
        __isset.lastModifyTimestamp = true;
        SetProperty(ref _lastModifyTimestamp, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sourceId;
      public bool exchangeMic;
      public bool techPlatformSource;
      public bool techPlatformEnv;
      public bool createTimestamp;
      public bool lastModifyTimestamp;
    }

    public CommoditySource() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SourceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                ExchangeMic = new List<string>();
                TList _list232 = iprot.ReadListBegin();
                for( int _i233 = 0; _i233 < _list232.Count; ++_i233)
                {
                  string _elem234 = null;
                  _elem234 = iprot.ReadString();
                  ExchangeMic.Add(_elem234);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TechPlatformSource = (xueqiao.contract.standard.TechPlatform)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              TechPlatformEnv = (xueqiao.contract.standard.TechPlatformEnv)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.I64) {
              CreateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.I64) {
              LastModifyTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CommoditySource");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.sourceId) {
        field.Name = "sourceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SourceId);
        oprot.WriteFieldEnd();
      }
      if (ExchangeMic != null && __isset.exchangeMic) {
        field.Name = "exchangeMic";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ExchangeMic.Count));
          foreach (string _iter235 in ExchangeMic)
          {
            oprot.WriteString(_iter235);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.techPlatformSource) {
        field.Name = "techPlatformSource";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TechPlatformSource);
        oprot.WriteFieldEnd();
      }
      if (__isset.techPlatformEnv) {
        field.Name = "techPlatformEnv";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TechPlatformEnv);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I64;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModifyTimestamp) {
        field.Name = "lastModifyTimestamp";
        field.Type = TType.I64;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModifyTimestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CommoditySource(");
      sb.Append("SourceId: ");
      sb.Append(SourceId);
      sb.Append(",ExchangeMic: ");
      if (ExchangeMic == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (string _iter236 in ExchangeMic)
        {
          sb.Append(_iter236.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",TechPlatformSource: ");
      sb.Append(TechPlatformSource);
      sb.Append(",TechPlatformEnv: ");
      sb.Append(TechPlatformEnv);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastModifyTimestamp: ");
      sb.Append(LastModifyTimestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
