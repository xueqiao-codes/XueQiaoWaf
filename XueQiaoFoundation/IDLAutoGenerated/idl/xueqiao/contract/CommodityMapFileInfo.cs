/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CommodityMapFileInfo : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private byte[] _commodityMapFile;
    private xueqiao.contract.standard.TechPlatform _techPlatform;
    private int _brokerEntryId;
    private string _fileMD5;
    private string _path;
    private string _url;
    private int _version;
    private int _fileInfoId;
    private CommodityMapFileStatus _status;
    private long _createTimestamp;
    private long _lastModityTimestamp;

    public byte[] CommodityMapFile
    {
      get
      {
        return _commodityMapFile;
      }
      set
      {
        __isset.commodityMapFile = true;
        SetProperty(ref _commodityMapFile, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.contract.standard.TechPlatform"/>
    /// </summary>
    public xueqiao.contract.standard.TechPlatform TechPlatform
    {
      get
      {
        return _techPlatform;
      }
      set
      {
        __isset.techPlatform = true;
        SetProperty(ref _techPlatform, value);
      }
    }

    public int BrokerEntryId
    {
      get
      {
        return _brokerEntryId;
      }
      set
      {
        __isset.brokerEntryId = true;
        SetProperty(ref _brokerEntryId, value);
      }
    }

    public string FileMD5
    {
      get
      {
        return _fileMD5;
      }
      set
      {
        __isset.fileMD5 = true;
        SetProperty(ref _fileMD5, value);
      }
    }

    public string Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        SetProperty(ref _path, value);
      }
    }

    public string Url
    {
      get
      {
        return _url;
      }
      set
      {
        __isset.url = true;
        SetProperty(ref _url, value);
      }
    }

    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        SetProperty(ref _version, value);
      }
    }

    public int FileInfoId
    {
      get
      {
        return _fileInfoId;
      }
      set
      {
        __isset.fileInfoId = true;
        SetProperty(ref _fileInfoId, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="CommodityMapFileStatus"/>
    /// </summary>
    public CommodityMapFileStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        SetProperty(ref _status, value);
      }
    }

    public long CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public long LastModityTimestamp
    {
      get
      {
        return _lastModityTimestamp;
      }
      set
      {
        __isset.lastModityTimestamp = true;
        SetProperty(ref _lastModityTimestamp, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool commodityMapFile;
      public bool techPlatform;
      public bool brokerEntryId;
      public bool fileMD5;
      public bool path;
      public bool url;
      public bool version;
      public bool fileInfoId;
      public bool status;
      public bool createTimestamp;
      public bool lastModityTimestamp;
    }

    public CommodityMapFileInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              CommodityMapFile = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TechPlatform = (xueqiao.contract.standard.TechPlatform)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              BrokerEntryId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              FileMD5 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Path = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Url = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              FileInfoId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Status = (CommodityMapFileStatus)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I64) {
              CreateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.I64) {
              LastModityTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CommodityMapFileInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (CommodityMapFile != null && __isset.commodityMapFile) {
        field.Name = "commodityMapFile";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(CommodityMapFile);
        oprot.WriteFieldEnd();
      }
      if (__isset.techPlatform) {
        field.Name = "techPlatform";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TechPlatform);
        oprot.WriteFieldEnd();
      }
      if (__isset.brokerEntryId) {
        field.Name = "brokerEntryId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BrokerEntryId);
        oprot.WriteFieldEnd();
      }
      if (FileMD5 != null && __isset.fileMD5) {
        field.Name = "fileMD5";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FileMD5);
        oprot.WriteFieldEnd();
      }
      if (Path != null && __isset.path) {
        field.Name = "path";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Path);
        oprot.WriteFieldEnd();
      }
      if (Url != null && __isset.url) {
        field.Name = "url";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Url);
        oprot.WriteFieldEnd();
      }
      if (__isset.version) {
        field.Name = "version";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Version);
        oprot.WriteFieldEnd();
      }
      if (__isset.fileInfoId) {
        field.Name = "fileInfoId";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FileInfoId);
        oprot.WriteFieldEnd();
      }
      if (__isset.status) {
        field.Name = "status";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Status);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I64;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModityTimestamp) {
        field.Name = "lastModityTimestamp";
        field.Type = TType.I64;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModityTimestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CommodityMapFileInfo(");
      sb.Append("CommodityMapFile: ");
      sb.Append(CommodityMapFile);
      sb.Append(",TechPlatform: ");
      sb.Append(TechPlatform);
      sb.Append(",BrokerEntryId: ");
      sb.Append(BrokerEntryId);
      sb.Append(",FileMD5: ");
      sb.Append(FileMD5);
      sb.Append(",Path: ");
      sb.Append(Path);
      sb.Append(",Url: ");
      sb.Append(Url);
      sb.Append(",Version: ");
      sb.Append(Version);
      sb.Append(",FileInfoId: ");
      sb.Append(FileInfoId);
      sb.Append(",Status: ");
      sb.Append(Status);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastModityTimestamp: ");
      sb.Append(LastModityTimestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
