/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SledCommoditySpecTradeTime : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _sledCommodityId;
    private int _specTradeTimeId;
    private long _nonTradeStartTimestamp;
    private long _nonTradeEndTimestamp;
    private NextTradeOpenType _nextTradeOpenType;
    private long _createTimestamp;
    private long _lastModifyTimestamp;

    public int SledCommodityId
    {
      get
      {
        return _sledCommodityId;
      }
      set
      {
        __isset.sledCommodityId = true;
        SetProperty(ref _sledCommodityId, value);
      }
    }

    public int SpecTradeTimeId
    {
      get
      {
        return _specTradeTimeId;
      }
      set
      {
        __isset.specTradeTimeId = true;
        SetProperty(ref _specTradeTimeId, value);
      }
    }

    public long NonTradeStartTimestamp
    {
      get
      {
        return _nonTradeStartTimestamp;
      }
      set
      {
        __isset.nonTradeStartTimestamp = true;
        SetProperty(ref _nonTradeStartTimestamp, value);
      }
    }

    public long NonTradeEndTimestamp
    {
      get
      {
        return _nonTradeEndTimestamp;
      }
      set
      {
        __isset.nonTradeEndTimestamp = true;
        SetProperty(ref _nonTradeEndTimestamp, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="NextTradeOpenType"/>
    /// </summary>
    public NextTradeOpenType NextTradeOpenType
    {
      get
      {
        return _nextTradeOpenType;
      }
      set
      {
        __isset.nextTradeOpenType = true;
        SetProperty(ref _nextTradeOpenType, value);
      }
    }

    public long CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public long LastModifyTimestamp
    {
      get
      {
        return _lastModifyTimestamp;
      }
      set
      {
        __isset.lastModifyTimestamp = true;
        SetProperty(ref _lastModifyTimestamp, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sledCommodityId;
      public bool specTradeTimeId;
      public bool nonTradeStartTimestamp;
      public bool nonTradeEndTimestamp;
      public bool nextTradeOpenType;
      public bool createTimestamp;
      public bool lastModifyTimestamp;
    }

    public SledCommoditySpecTradeTime() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SledCommodityId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              SpecTradeTimeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              NonTradeStartTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              NonTradeEndTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              NextTradeOpenType = (NextTradeOpenType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              CreateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              LastModifyTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SledCommoditySpecTradeTime");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.sledCommodityId) {
        field.Name = "sledCommodityId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SledCommodityId);
        oprot.WriteFieldEnd();
      }
      if (__isset.specTradeTimeId) {
        field.Name = "specTradeTimeId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SpecTradeTimeId);
        oprot.WriteFieldEnd();
      }
      if (__isset.nonTradeStartTimestamp) {
        field.Name = "nonTradeStartTimestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NonTradeStartTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.nonTradeEndTimestamp) {
        field.Name = "nonTradeEndTimestamp";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NonTradeEndTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.nextTradeOpenType) {
        field.Name = "nextTradeOpenType";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)NextTradeOpenType);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModifyTimestamp) {
        field.Name = "lastModifyTimestamp";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModifyTimestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SledCommoditySpecTradeTime(");
      sb.Append("SledCommodityId: ");
      sb.Append(SledCommodityId);
      sb.Append(",SpecTradeTimeId: ");
      sb.Append(SpecTradeTimeId);
      sb.Append(",NonTradeStartTimestamp: ");
      sb.Append(NonTradeStartTimestamp);
      sb.Append(",NonTradeEndTimestamp: ");
      sb.Append(NonTradeEndTimestamp);
      sb.Append(",NextTradeOpenType: ");
      sb.Append(NextTradeOpenType);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastModifyTimestamp: ");
      sb.Append(LastModifyTimestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
