/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SpecTradeTime : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _specTradeTimeId;
    private string _exchangeMic;
    private List<int> _sledCommodityIds;
    private long _nonTradeStartTimestamp;
    private long _nonTradeEndTimestamp;
    private NextTradeOpenType _nextTradeOpenType;
    private long _createTimestamp;
    private long _lastModifyTimestamp;
    private List<string> _sledCommodityTypes;
    private List<string> _sledCommodityNames;
    private string _zoneId;

    public int SpecTradeTimeId
    {
      get
      {
        return _specTradeTimeId;
      }
      set
      {
        __isset.specTradeTimeId = true;
        SetProperty(ref _specTradeTimeId, value);
      }
    }

    public string ExchangeMic
    {
      get
      {
        return _exchangeMic;
      }
      set
      {
        __isset.exchangeMic = true;
        SetProperty(ref _exchangeMic, value);
      }
    }

    public List<int> SledCommodityIds
    {
      get
      {
        return _sledCommodityIds;
      }
      set
      {
        __isset.sledCommodityIds = true;
        SetProperty(ref _sledCommodityIds, value);
      }
    }

    public long NonTradeStartTimestamp
    {
      get
      {
        return _nonTradeStartTimestamp;
      }
      set
      {
        __isset.nonTradeStartTimestamp = true;
        SetProperty(ref _nonTradeStartTimestamp, value);
      }
    }

    public long NonTradeEndTimestamp
    {
      get
      {
        return _nonTradeEndTimestamp;
      }
      set
      {
        __isset.nonTradeEndTimestamp = true;
        SetProperty(ref _nonTradeEndTimestamp, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="NextTradeOpenType"/>
    /// </summary>
    public NextTradeOpenType NextTradeOpenType
    {
      get
      {
        return _nextTradeOpenType;
      }
      set
      {
        __isset.nextTradeOpenType = true;
        SetProperty(ref _nextTradeOpenType, value);
      }
    }

    public long CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public long LastModifyTimestamp
    {
      get
      {
        return _lastModifyTimestamp;
      }
      set
      {
        __isset.lastModifyTimestamp = true;
        SetProperty(ref _lastModifyTimestamp, value);
      }
    }

    public List<string> SledCommodityTypes
    {
      get
      {
        return _sledCommodityTypes;
      }
      set
      {
        __isset.sledCommodityTypes = true;
        SetProperty(ref _sledCommodityTypes, value);
      }
    }

    public List<string> SledCommodityNames
    {
      get
      {
        return _sledCommodityNames;
      }
      set
      {
        __isset.sledCommodityNames = true;
        SetProperty(ref _sledCommodityNames, value);
      }
    }

    public string ZoneId
    {
      get
      {
        return _zoneId;
      }
      set
      {
        __isset.zoneId = true;
        SetProperty(ref _zoneId, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool specTradeTimeId;
      public bool exchangeMic;
      public bool sledCommodityIds;
      public bool nonTradeStartTimestamp;
      public bool nonTradeEndTimestamp;
      public bool nextTradeOpenType;
      public bool createTimestamp;
      public bool lastModifyTimestamp;
      public bool sledCommodityTypes;
      public bool sledCommodityNames;
      public bool zoneId;
    }

    public SpecTradeTime() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SpecTradeTimeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ExchangeMic = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                SledCommodityIds = new List<int>();
                TList _list172 = iprot.ReadListBegin();
                for( int _i173 = 0; _i173 < _list172.Count; ++_i173)
                {
                  int _elem174 = 0;
                  _elem174 = iprot.ReadI32();
                  SledCommodityIds.Add(_elem174);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              NonTradeStartTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              NonTradeEndTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              NextTradeOpenType = (NextTradeOpenType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              CreateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              LastModifyTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                SledCommodityTypes = new List<string>();
                TList _list175 = iprot.ReadListBegin();
                for( int _i176 = 0; _i176 < _list175.Count; ++_i176)
                {
                  string _elem177 = null;
                  _elem177 = iprot.ReadString();
                  SledCommodityTypes.Add(_elem177);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                SledCommodityNames = new List<string>();
                TList _list178 = iprot.ReadListBegin();
                for( int _i179 = 0; _i179 < _list178.Count; ++_i179)
                {
                  string _elem180 = null;
                  _elem180 = iprot.ReadString();
                  SledCommodityNames.Add(_elem180);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              ZoneId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SpecTradeTime");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.specTradeTimeId) {
        field.Name = "specTradeTimeId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SpecTradeTimeId);
        oprot.WriteFieldEnd();
      }
      if (ExchangeMic != null && __isset.exchangeMic) {
        field.Name = "exchangeMic";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExchangeMic);
        oprot.WriteFieldEnd();
      }
      if (SledCommodityIds != null && __isset.sledCommodityIds) {
        field.Name = "sledCommodityIds";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, SledCommodityIds.Count));
          foreach (int _iter181 in SledCommodityIds)
          {
            oprot.WriteI32(_iter181);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.nonTradeStartTimestamp) {
        field.Name = "nonTradeStartTimestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NonTradeStartTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.nonTradeEndTimestamp) {
        field.Name = "nonTradeEndTimestamp";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NonTradeEndTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.nextTradeOpenType) {
        field.Name = "nextTradeOpenType";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)NextTradeOpenType);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModifyTimestamp) {
        field.Name = "lastModifyTimestamp";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModifyTimestamp);
        oprot.WriteFieldEnd();
      }
      if (SledCommodityTypes != null && __isset.sledCommodityTypes) {
        field.Name = "sledCommodityTypes";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, SledCommodityTypes.Count));
          foreach (string _iter182 in SledCommodityTypes)
          {
            oprot.WriteString(_iter182);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SledCommodityNames != null && __isset.sledCommodityNames) {
        field.Name = "sledCommodityNames";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, SledCommodityNames.Count));
          foreach (string _iter183 in SledCommodityNames)
          {
            oprot.WriteString(_iter183);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ZoneId != null && __isset.zoneId) {
        field.Name = "zoneId";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ZoneId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SpecTradeTime(");
      sb.Append("SpecTradeTimeId: ");
      sb.Append(SpecTradeTimeId);
      sb.Append(",ExchangeMic: ");
      sb.Append(ExchangeMic);
      sb.Append(",SledCommodityIds: ");
      if (SledCommodityIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (int _iter184 in SledCommodityIds)
        {
          sb.Append(_iter184.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",NonTradeStartTimestamp: ");
      sb.Append(NonTradeStartTimestamp);
      sb.Append(",NonTradeEndTimestamp: ");
      sb.Append(NonTradeEndTimestamp);
      sb.Append(",NextTradeOpenType: ");
      sb.Append(NextTradeOpenType);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastModifyTimestamp: ");
      sb.Append(LastModifyTimestamp);
      sb.Append(",SledCommodityTypes: ");
      if (SledCommodityTypes == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (string _iter185 in SledCommodityTypes)
        {
          sb.Append(_iter185.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",SledCommodityNames: ");
      if (SledCommodityNames == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (string _iter186 in SledCommodityNames)
        {
          sb.Append(_iter186.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",ZoneId: ");
      sb.Append(ZoneId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
