/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract.standard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReqCommodityMappingOption : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private List<int> _sledCommodityIdList;
    private string _exchange;
    private string _commodityType;
    private string _commodityCode;
    private int _brokerEntryId;
    private List<int> _mapIds;
    private TechPlatform _techPlatform;
    private bool _needTotalCount;

    public List<int> SledCommodityIdList
    {
      get
      {
        return _sledCommodityIdList;
      }
      set
      {
        __isset.sledCommodityIdList = true;
        SetProperty(ref _sledCommodityIdList, value);
      }
    }

    public string Exchange
    {
      get
      {
        return _exchange;
      }
      set
      {
        __isset.exchange = true;
        SetProperty(ref _exchange, value);
      }
    }

    public string CommodityType
    {
      get
      {
        return _commodityType;
      }
      set
      {
        __isset.commodityType = true;
        SetProperty(ref _commodityType, value);
      }
    }

    public string CommodityCode
    {
      get
      {
        return _commodityCode;
      }
      set
      {
        __isset.commodityCode = true;
        SetProperty(ref _commodityCode, value);
      }
    }

    public int BrokerEntryId
    {
      get
      {
        return _brokerEntryId;
      }
      set
      {
        __isset.brokerEntryId = true;
        SetProperty(ref _brokerEntryId, value);
      }
    }

    public List<int> MapIds
    {
      get
      {
        return _mapIds;
      }
      set
      {
        __isset.mapIds = true;
        SetProperty(ref _mapIds, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TechPlatform"/>
    /// </summary>
    public TechPlatform TechPlatform
    {
      get
      {
        return _techPlatform;
      }
      set
      {
        __isset.techPlatform = true;
        SetProperty(ref _techPlatform, value);
      }
    }

    public bool NeedTotalCount
    {
      get
      {
        return _needTotalCount;
      }
      set
      {
        __isset.needTotalCount = true;
        SetProperty(ref _needTotalCount, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sledCommodityIdList;
      public bool exchange;
      public bool commodityType;
      public bool commodityCode;
      public bool brokerEntryId;
      public bool mapIds;
      public bool techPlatform;
      public bool needTotalCount;
    }

    public ReqCommodityMappingOption() {
      this._needTotalCount = true;
      this.__isset.needTotalCount = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                SledCommodityIdList = new List<int>();
                TList _list60 = iprot.ReadListBegin();
                for( int _i61 = 0; _i61 < _list60.Count; ++_i61)
                {
                  int _elem62 = 0;
                  _elem62 = iprot.ReadI32();
                  SledCommodityIdList.Add(_elem62);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Exchange = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              CommodityType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              CommodityCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              BrokerEntryId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                MapIds = new List<int>();
                TList _list63 = iprot.ReadListBegin();
                for( int _i64 = 0; _i64 < _list63.Count; ++_i64)
                {
                  int _elem65 = 0;
                  _elem65 = iprot.ReadI32();
                  MapIds.Add(_elem65);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              TechPlatform = (TechPlatform)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              NeedTotalCount = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ReqCommodityMappingOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SledCommodityIdList != null && __isset.sledCommodityIdList) {
        field.Name = "sledCommodityIdList";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, SledCommodityIdList.Count));
          foreach (int _iter66 in SledCommodityIdList)
          {
            oprot.WriteI32(_iter66);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Exchange != null && __isset.exchange) {
        field.Name = "exchange";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Exchange);
        oprot.WriteFieldEnd();
      }
      if (CommodityType != null && __isset.commodityType) {
        field.Name = "commodityType";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CommodityType);
        oprot.WriteFieldEnd();
      }
      if (CommodityCode != null && __isset.commodityCode) {
        field.Name = "commodityCode";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CommodityCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.brokerEntryId) {
        field.Name = "brokerEntryId";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BrokerEntryId);
        oprot.WriteFieldEnd();
      }
      if (MapIds != null && __isset.mapIds) {
        field.Name = "mapIds";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, MapIds.Count));
          foreach (int _iter67 in MapIds)
          {
            oprot.WriteI32(_iter67);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.techPlatform) {
        field.Name = "techPlatform";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TechPlatform);
        oprot.WriteFieldEnd();
      }
      if (__isset.needTotalCount) {
        field.Name = "needTotalCount";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(NeedTotalCount);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ReqCommodityMappingOption(");
      sb.Append("SledCommodityIdList: ");
      if (SledCommodityIdList == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (int _iter68 in SledCommodityIdList)
        {
          sb.Append(_iter68.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",Exchange: ");
      sb.Append(Exchange);
      sb.Append(",CommodityType: ");
      sb.Append(CommodityType);
      sb.Append(",CommodityCode: ");
      sb.Append(CommodityCode);
      sb.Append(",BrokerEntryId: ");
      sb.Append(BrokerEntryId);
      sb.Append(",MapIds: ");
      if (MapIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (int _iter69 in MapIds)
        {
          sb.Append(_iter69.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",TechPlatform: ");
      sb.Append(TechPlatform);
      sb.Append(",NeedTotalCount: ");
      sb.Append(NeedTotalCount);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
