/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract.standard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SledExchange : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _sledExchangeId;
    private string _exchangeMic;
    private string _country;
    private string _countryCode;
    private string _operatingMic;
    private ExchangeOperatingMicType _operatingMicType;
    private string _nameInstitution;
    private string _acronym;
    private string _city;
    private string _website;
    private string _cnName;
    private string _cnAcronym;
    private string _zoneId;
    private long _timeLagMs;
    private long _activeStartTimestamp;
    private long _activeEndTimestamp;
    private long _createTimestamp;
    private long _lastModityTimestamp;

    public int SledExchangeId
    {
      get
      {
        return _sledExchangeId;
      }
      set
      {
        __isset.sledExchangeId = true;
        SetProperty(ref _sledExchangeId, value);
      }
    }

    public string ExchangeMic
    {
      get
      {
        return _exchangeMic;
      }
      set
      {
        __isset.exchangeMic = true;
        SetProperty(ref _exchangeMic, value);
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        SetProperty(ref _country, value);
      }
    }

    public string CountryCode
    {
      get
      {
        return _countryCode;
      }
      set
      {
        __isset.countryCode = true;
        SetProperty(ref _countryCode, value);
      }
    }

    public string OperatingMic
    {
      get
      {
        return _operatingMic;
      }
      set
      {
        __isset.operatingMic = true;
        SetProperty(ref _operatingMic, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ExchangeOperatingMicType"/>
    /// </summary>
    public ExchangeOperatingMicType OperatingMicType
    {
      get
      {
        return _operatingMicType;
      }
      set
      {
        __isset.operatingMicType = true;
        SetProperty(ref _operatingMicType, value);
      }
    }

    public string NameInstitution
    {
      get
      {
        return _nameInstitution;
      }
      set
      {
        __isset.nameInstitution = true;
        SetProperty(ref _nameInstitution, value);
      }
    }

    public string Acronym
    {
      get
      {
        return _acronym;
      }
      set
      {
        __isset.acronym = true;
        SetProperty(ref _acronym, value);
      }
    }

    public string City
    {
      get
      {
        return _city;
      }
      set
      {
        __isset.city = true;
        SetProperty(ref _city, value);
      }
    }

    public string Website
    {
      get
      {
        return _website;
      }
      set
      {
        __isset.website = true;
        SetProperty(ref _website, value);
      }
    }

    public string CnName
    {
      get
      {
        return _cnName;
      }
      set
      {
        __isset.cnName = true;
        SetProperty(ref _cnName, value);
      }
    }

    public string CnAcronym
    {
      get
      {
        return _cnAcronym;
      }
      set
      {
        __isset.cnAcronym = true;
        SetProperty(ref _cnAcronym, value);
      }
    }

    public string ZoneId
    {
      get
      {
        return _zoneId;
      }
      set
      {
        __isset.zoneId = true;
        SetProperty(ref _zoneId, value);
      }
    }

    public long TimeLagMs
    {
      get
      {
        return _timeLagMs;
      }
      set
      {
        __isset.timeLagMs = true;
        SetProperty(ref _timeLagMs, value);
      }
    }

    public long ActiveStartTimestamp
    {
      get
      {
        return _activeStartTimestamp;
      }
      set
      {
        __isset.activeStartTimestamp = true;
        SetProperty(ref _activeStartTimestamp, value);
      }
    }

    public long ActiveEndTimestamp
    {
      get
      {
        return _activeEndTimestamp;
      }
      set
      {
        __isset.activeEndTimestamp = true;
        SetProperty(ref _activeEndTimestamp, value);
      }
    }

    public long CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public long LastModityTimestamp
    {
      get
      {
        return _lastModityTimestamp;
      }
      set
      {
        __isset.lastModityTimestamp = true;
        SetProperty(ref _lastModityTimestamp, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sledExchangeId;
      public bool exchangeMic;
      public bool country;
      public bool countryCode;
      public bool operatingMic;
      public bool operatingMicType;
      public bool nameInstitution;
      public bool acronym;
      public bool city;
      public bool website;
      public bool cnName;
      public bool cnAcronym;
      public bool zoneId;
      public bool timeLagMs;
      public bool activeStartTimestamp;
      public bool activeEndTimestamp;
      public bool createTimestamp;
      public bool lastModityTimestamp;
    }

    public SledExchange() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SledExchangeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ExchangeMic = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Country = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              CountryCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              OperatingMic = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              OperatingMicType = (ExchangeOperatingMicType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              NameInstitution = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Acronym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              City = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Website = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              CnName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              CnAcronym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              ZoneId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              TimeLagMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.I64) {
              ActiveStartTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.I64) {
              ActiveEndTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I64) {
              CreateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.I64) {
              LastModityTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SledExchange");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.sledExchangeId) {
        field.Name = "sledExchangeId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SledExchangeId);
        oprot.WriteFieldEnd();
      }
      if (ExchangeMic != null && __isset.exchangeMic) {
        field.Name = "exchangeMic";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExchangeMic);
        oprot.WriteFieldEnd();
      }
      if (Country != null && __isset.country) {
        field.Name = "country";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Country);
        oprot.WriteFieldEnd();
      }
      if (CountryCode != null && __isset.countryCode) {
        field.Name = "countryCode";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CountryCode);
        oprot.WriteFieldEnd();
      }
      if (OperatingMic != null && __isset.operatingMic) {
        field.Name = "operatingMic";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OperatingMic);
        oprot.WriteFieldEnd();
      }
      if (__isset.operatingMicType) {
        field.Name = "operatingMicType";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)OperatingMicType);
        oprot.WriteFieldEnd();
      }
      if (NameInstitution != null && __isset.nameInstitution) {
        field.Name = "nameInstitution";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NameInstitution);
        oprot.WriteFieldEnd();
      }
      if (Acronym != null && __isset.acronym) {
        field.Name = "acronym";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Acronym);
        oprot.WriteFieldEnd();
      }
      if (City != null && __isset.city) {
        field.Name = "city";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(City);
        oprot.WriteFieldEnd();
      }
      if (Website != null && __isset.website) {
        field.Name = "website";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Website);
        oprot.WriteFieldEnd();
      }
      if (CnName != null && __isset.cnName) {
        field.Name = "cnName";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CnName);
        oprot.WriteFieldEnd();
      }
      if (CnAcronym != null && __isset.cnAcronym) {
        field.Name = "cnAcronym";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CnAcronym);
        oprot.WriteFieldEnd();
      }
      if (ZoneId != null && __isset.zoneId) {
        field.Name = "zoneId";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ZoneId);
        oprot.WriteFieldEnd();
      }
      if (__isset.timeLagMs) {
        field.Name = "timeLagMs";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TimeLagMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeStartTimestamp) {
        field.Name = "activeStartTimestamp";
        field.Type = TType.I64;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ActiveStartTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeEndTimestamp) {
        field.Name = "activeEndTimestamp";
        field.Type = TType.I64;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ActiveEndTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I64;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModityTimestamp) {
        field.Name = "lastModityTimestamp";
        field.Type = TType.I64;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModityTimestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SledExchange(");
      sb.Append("SledExchangeId: ");
      sb.Append(SledExchangeId);
      sb.Append(",ExchangeMic: ");
      sb.Append(ExchangeMic);
      sb.Append(",Country: ");
      sb.Append(Country);
      sb.Append(",CountryCode: ");
      sb.Append(CountryCode);
      sb.Append(",OperatingMic: ");
      sb.Append(OperatingMic);
      sb.Append(",OperatingMicType: ");
      sb.Append(OperatingMicType);
      sb.Append(",NameInstitution: ");
      sb.Append(NameInstitution);
      sb.Append(",Acronym: ");
      sb.Append(Acronym);
      sb.Append(",City: ");
      sb.Append(City);
      sb.Append(",Website: ");
      sb.Append(Website);
      sb.Append(",CnName: ");
      sb.Append(CnName);
      sb.Append(",CnAcronym: ");
      sb.Append(CnAcronym);
      sb.Append(",ZoneId: ");
      sb.Append(ZoneId);
      sb.Append(",TimeLagMs: ");
      sb.Append(TimeLagMs);
      sb.Append(",ActiveStartTimestamp: ");
      sb.Append(ActiveStartTimestamp);
      sb.Append(",ActiveEndTimestamp: ");
      sb.Append(ActiveEndTimestamp);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastModityTimestamp: ");
      sb.Append(LastModityTimestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
