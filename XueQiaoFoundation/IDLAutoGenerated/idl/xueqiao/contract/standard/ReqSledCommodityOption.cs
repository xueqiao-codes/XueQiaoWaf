/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract.standard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReqSledCommodityOption : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private List<int> _sledCommodityIdList;
    private string _exchangeMic;
    private SledCommodityType _sledCommodityType;
    private string _sledCommodityCode;
    private TechPlatformEnv _platformEnv;
    private bool _needTotalCount;
    private string _sledCommodityCodePartical;
    private string _engNamePartical;
    private string _cnNamePartical;

    public List<int> SledCommodityIdList
    {
      get
      {
        return _sledCommodityIdList;
      }
      set
      {
        __isset.sledCommodityIdList = true;
        SetProperty(ref _sledCommodityIdList, value);
      }
    }

    public string ExchangeMic
    {
      get
      {
        return _exchangeMic;
      }
      set
      {
        __isset.exchangeMic = true;
        SetProperty(ref _exchangeMic, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="SledCommodityType"/>
    /// </summary>
    public SledCommodityType SledCommodityType
    {
      get
      {
        return _sledCommodityType;
      }
      set
      {
        __isset.sledCommodityType = true;
        SetProperty(ref _sledCommodityType, value);
      }
    }

    public string SledCommodityCode
    {
      get
      {
        return _sledCommodityCode;
      }
      set
      {
        __isset.sledCommodityCode = true;
        SetProperty(ref _sledCommodityCode, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TechPlatformEnv"/>
    /// </summary>
    public TechPlatformEnv PlatformEnv
    {
      get
      {
        return _platformEnv;
      }
      set
      {
        __isset.platformEnv = true;
        SetProperty(ref _platformEnv, value);
      }
    }

    public bool NeedTotalCount
    {
      get
      {
        return _needTotalCount;
      }
      set
      {
        __isset.needTotalCount = true;
        SetProperty(ref _needTotalCount, value);
      }
    }

    public string SledCommodityCodePartical
    {
      get
      {
        return _sledCommodityCodePartical;
      }
      set
      {
        __isset.sledCommodityCodePartical = true;
        SetProperty(ref _sledCommodityCodePartical, value);
      }
    }

    public string EngNamePartical
    {
      get
      {
        return _engNamePartical;
      }
      set
      {
        __isset.engNamePartical = true;
        SetProperty(ref _engNamePartical, value);
      }
    }

    public string CnNamePartical
    {
      get
      {
        return _cnNamePartical;
      }
      set
      {
        __isset.cnNamePartical = true;
        SetProperty(ref _cnNamePartical, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sledCommodityIdList;
      public bool exchangeMic;
      public bool sledCommodityType;
      public bool sledCommodityCode;
      public bool platformEnv;
      public bool needTotalCount;
      public bool sledCommodityCodePartical;
      public bool engNamePartical;
      public bool cnNamePartical;
    }

    public ReqSledCommodityOption() {
      this._needTotalCount = true;
      this.__isset.needTotalCount = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                SledCommodityIdList = new List<int>();
                TList _list30 = iprot.ReadListBegin();
                for( int _i31 = 0; _i31 < _list30.Count; ++_i31)
                {
                  int _elem32 = 0;
                  _elem32 = iprot.ReadI32();
                  SledCommodityIdList.Add(_elem32);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ExchangeMic = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              SledCommodityType = (SledCommodityType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              SledCommodityCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              PlatformEnv = (TechPlatformEnv)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              NeedTotalCount = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              SledCommodityCodePartical = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              EngNamePartical = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              CnNamePartical = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ReqSledCommodityOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SledCommodityIdList != null && __isset.sledCommodityIdList) {
        field.Name = "sledCommodityIdList";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, SledCommodityIdList.Count));
          foreach (int _iter33 in SledCommodityIdList)
          {
            oprot.WriteI32(_iter33);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ExchangeMic != null && __isset.exchangeMic) {
        field.Name = "exchangeMic";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExchangeMic);
        oprot.WriteFieldEnd();
      }
      if (__isset.sledCommodityType) {
        field.Name = "sledCommodityType";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)SledCommodityType);
        oprot.WriteFieldEnd();
      }
      if (SledCommodityCode != null && __isset.sledCommodityCode) {
        field.Name = "sledCommodityCode";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SledCommodityCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.platformEnv) {
        field.Name = "platformEnv";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)PlatformEnv);
        oprot.WriteFieldEnd();
      }
      if (__isset.needTotalCount) {
        field.Name = "needTotalCount";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(NeedTotalCount);
        oprot.WriteFieldEnd();
      }
      if (SledCommodityCodePartical != null && __isset.sledCommodityCodePartical) {
        field.Name = "sledCommodityCodePartical";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SledCommodityCodePartical);
        oprot.WriteFieldEnd();
      }
      if (EngNamePartical != null && __isset.engNamePartical) {
        field.Name = "engNamePartical";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EngNamePartical);
        oprot.WriteFieldEnd();
      }
      if (CnNamePartical != null && __isset.cnNamePartical) {
        field.Name = "cnNamePartical";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CnNamePartical);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ReqSledCommodityOption(");
      sb.Append("SledCommodityIdList: ");
      if (SledCommodityIdList == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (int _iter34 in SledCommodityIdList)
        {
          sb.Append(_iter34.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",ExchangeMic: ");
      sb.Append(ExchangeMic);
      sb.Append(",SledCommodityType: ");
      sb.Append(SledCommodityType);
      sb.Append(",SledCommodityCode: ");
      sb.Append(SledCommodityCode);
      sb.Append(",PlatformEnv: ");
      sb.Append(PlatformEnv);
      sb.Append(",NeedTotalCount: ");
      sb.Append(NeedTotalCount);
      sb.Append(",SledCommodityCodePartical: ");
      sb.Append(SledCommodityCodePartical);
      sb.Append(",EngNamePartical: ");
      sb.Append(EngNamePartical);
      sb.Append(",CnNamePartical: ");
      sb.Append(CnNamePartical);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
