/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract.standard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SledCommodityConfig : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _configId;
    private DeliveryMode _deliveryMode;
    private int _deliveryDays;
    private int _maxSingleOrderVol;
    private int _maxHoldVol;
    private CalculateMode _commissionCalculateMode;
    private double _openCloseFee;
    private CalculateMode _marginCalculateMode;
    private double _initialMargin;
    private double _maintenanceMargin;
    private double _sellInitialMargin;
    private double _sellMaintenanceMargin;
    private double _lockMargin;
    private long _activeStartTimestamp;
    private long _activeEndTimestamp;
    private string _measureUnit;
    private double _chargeUnit;
    private long _createTimestamp;
    private long _lastModityTimestamp;

    public int ConfigId
    {
      get
      {
        return _configId;
      }
      set
      {
        __isset.configId = true;
        SetProperty(ref _configId, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="DeliveryMode"/>
    /// </summary>
    public DeliveryMode DeliveryMode
    {
      get
      {
        return _deliveryMode;
      }
      set
      {
        __isset.deliveryMode = true;
        SetProperty(ref _deliveryMode, value);
      }
    }

    public int DeliveryDays
    {
      get
      {
        return _deliveryDays;
      }
      set
      {
        __isset.deliveryDays = true;
        SetProperty(ref _deliveryDays, value);
      }
    }

    public int MaxSingleOrderVol
    {
      get
      {
        return _maxSingleOrderVol;
      }
      set
      {
        __isset.maxSingleOrderVol = true;
        SetProperty(ref _maxSingleOrderVol, value);
      }
    }

    public int MaxHoldVol
    {
      get
      {
        return _maxHoldVol;
      }
      set
      {
        __isset.maxHoldVol = true;
        SetProperty(ref _maxHoldVol, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="CalculateMode"/>
    /// </summary>
    public CalculateMode CommissionCalculateMode
    {
      get
      {
        return _commissionCalculateMode;
      }
      set
      {
        __isset.commissionCalculateMode = true;
        SetProperty(ref _commissionCalculateMode, value);
      }
    }

    public double OpenCloseFee
    {
      get
      {
        return _openCloseFee;
      }
      set
      {
        __isset.openCloseFee = true;
        SetProperty(ref _openCloseFee, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="CalculateMode"/>
    /// </summary>
    public CalculateMode MarginCalculateMode
    {
      get
      {
        return _marginCalculateMode;
      }
      set
      {
        __isset.marginCalculateMode = true;
        SetProperty(ref _marginCalculateMode, value);
      }
    }

    public double InitialMargin
    {
      get
      {
        return _initialMargin;
      }
      set
      {
        __isset.initialMargin = true;
        SetProperty(ref _initialMargin, value);
      }
    }

    public double MaintenanceMargin
    {
      get
      {
        return _maintenanceMargin;
      }
      set
      {
        __isset.maintenanceMargin = true;
        SetProperty(ref _maintenanceMargin, value);
      }
    }

    public double SellInitialMargin
    {
      get
      {
        return _sellInitialMargin;
      }
      set
      {
        __isset.sellInitialMargin = true;
        SetProperty(ref _sellInitialMargin, value);
      }
    }

    public double SellMaintenanceMargin
    {
      get
      {
        return _sellMaintenanceMargin;
      }
      set
      {
        __isset.sellMaintenanceMargin = true;
        SetProperty(ref _sellMaintenanceMargin, value);
      }
    }

    public double LockMargin
    {
      get
      {
        return _lockMargin;
      }
      set
      {
        __isset.lockMargin = true;
        SetProperty(ref _lockMargin, value);
      }
    }

    public long ActiveStartTimestamp
    {
      get
      {
        return _activeStartTimestamp;
      }
      set
      {
        __isset.activeStartTimestamp = true;
        SetProperty(ref _activeStartTimestamp, value);
      }
    }

    public long ActiveEndTimestamp
    {
      get
      {
        return _activeEndTimestamp;
      }
      set
      {
        __isset.activeEndTimestamp = true;
        SetProperty(ref _activeEndTimestamp, value);
      }
    }

    public string MeasureUnit
    {
      get
      {
        return _measureUnit;
      }
      set
      {
        __isset.measureUnit = true;
        SetProperty(ref _measureUnit, value);
      }
    }

    public double ChargeUnit
    {
      get
      {
        return _chargeUnit;
      }
      set
      {
        __isset.chargeUnit = true;
        SetProperty(ref _chargeUnit, value);
      }
    }

    public long CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public long LastModityTimestamp
    {
      get
      {
        return _lastModityTimestamp;
      }
      set
      {
        __isset.lastModityTimestamp = true;
        SetProperty(ref _lastModityTimestamp, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool configId;
      public bool deliveryMode;
      public bool deliveryDays;
      public bool maxSingleOrderVol;
      public bool maxHoldVol;
      public bool commissionCalculateMode;
      public bool openCloseFee;
      public bool marginCalculateMode;
      public bool initialMargin;
      public bool maintenanceMargin;
      public bool sellInitialMargin;
      public bool sellMaintenanceMargin;
      public bool lockMargin;
      public bool activeStartTimestamp;
      public bool activeEndTimestamp;
      public bool measureUnit;
      public bool chargeUnit;
      public bool createTimestamp;
      public bool lastModityTimestamp;
    }

    public SledCommodityConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ConfigId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              DeliveryMode = (DeliveryMode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              DeliveryDays = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I32) {
              MaxSingleOrderVol = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              MaxHoldVol = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              CommissionCalculateMode = (CalculateMode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Double) {
              OpenCloseFee = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.I32) {
              MarginCalculateMode = (CalculateMode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.Double) {
              InitialMargin = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.Double) {
              MaintenanceMargin = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.Double) {
              SellInitialMargin = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Double) {
              SellMaintenanceMargin = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.Double) {
              LockMargin = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.I64) {
              ActiveStartTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.I64) {
              ActiveEndTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 34:
            if (field.Type == TType.String) {
              MeasureUnit = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 35:
            if (field.Type == TType.Double) {
              ChargeUnit = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I64) {
              CreateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.I64) {
              LastModityTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SledCommodityConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.configId) {
        field.Name = "configId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ConfigId);
        oprot.WriteFieldEnd();
      }
      if (__isset.deliveryMode) {
        field.Name = "deliveryMode";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)DeliveryMode);
        oprot.WriteFieldEnd();
      }
      if (__isset.deliveryDays) {
        field.Name = "deliveryDays";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeliveryDays);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxSingleOrderVol) {
        field.Name = "maxSingleOrderVol";
        field.Type = TType.I32;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxSingleOrderVol);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxHoldVol) {
        field.Name = "maxHoldVol";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxHoldVol);
        oprot.WriteFieldEnd();
      }
      if (__isset.commissionCalculateMode) {
        field.Name = "commissionCalculateMode";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)CommissionCalculateMode);
        oprot.WriteFieldEnd();
      }
      if (__isset.openCloseFee) {
        field.Name = "openCloseFee";
        field.Type = TType.Double;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(OpenCloseFee);
        oprot.WriteFieldEnd();
      }
      if (__isset.marginCalculateMode) {
        field.Name = "marginCalculateMode";
        field.Type = TType.I32;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)MarginCalculateMode);
        oprot.WriteFieldEnd();
      }
      if (__isset.initialMargin) {
        field.Name = "initialMargin";
        field.Type = TType.Double;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(InitialMargin);
        oprot.WriteFieldEnd();
      }
      if (__isset.maintenanceMargin) {
        field.Name = "maintenanceMargin";
        field.Type = TType.Double;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(MaintenanceMargin);
        oprot.WriteFieldEnd();
      }
      if (__isset.sellInitialMargin) {
        field.Name = "sellInitialMargin";
        field.Type = TType.Double;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(SellInitialMargin);
        oprot.WriteFieldEnd();
      }
      if (__isset.sellMaintenanceMargin) {
        field.Name = "sellMaintenanceMargin";
        field.Type = TType.Double;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(SellMaintenanceMargin);
        oprot.WriteFieldEnd();
      }
      if (__isset.lockMargin) {
        field.Name = "lockMargin";
        field.Type = TType.Double;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LockMargin);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeStartTimestamp) {
        field.Name = "activeStartTimestamp";
        field.Type = TType.I64;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ActiveStartTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeEndTimestamp) {
        field.Name = "activeEndTimestamp";
        field.Type = TType.I64;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ActiveEndTimestamp);
        oprot.WriteFieldEnd();
      }
      if (MeasureUnit != null && __isset.measureUnit) {
        field.Name = "measureUnit";
        field.Type = TType.String;
        field.ID = 34;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MeasureUnit);
        oprot.WriteFieldEnd();
      }
      if (__isset.chargeUnit) {
        field.Name = "chargeUnit";
        field.Type = TType.Double;
        field.ID = 35;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ChargeUnit);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I64;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModityTimestamp) {
        field.Name = "lastModityTimestamp";
        field.Type = TType.I64;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModityTimestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SledCommodityConfig(");
      sb.Append("ConfigId: ");
      sb.Append(ConfigId);
      sb.Append(",DeliveryMode: ");
      sb.Append(DeliveryMode);
      sb.Append(",DeliveryDays: ");
      sb.Append(DeliveryDays);
      sb.Append(",MaxSingleOrderVol: ");
      sb.Append(MaxSingleOrderVol);
      sb.Append(",MaxHoldVol: ");
      sb.Append(MaxHoldVol);
      sb.Append(",CommissionCalculateMode: ");
      sb.Append(CommissionCalculateMode);
      sb.Append(",OpenCloseFee: ");
      sb.Append(OpenCloseFee);
      sb.Append(",MarginCalculateMode: ");
      sb.Append(MarginCalculateMode);
      sb.Append(",InitialMargin: ");
      sb.Append(InitialMargin);
      sb.Append(",MaintenanceMargin: ");
      sb.Append(MaintenanceMargin);
      sb.Append(",SellInitialMargin: ");
      sb.Append(SellInitialMargin);
      sb.Append(",SellMaintenanceMargin: ");
      sb.Append(SellMaintenanceMargin);
      sb.Append(",LockMargin: ");
      sb.Append(LockMargin);
      sb.Append(",ActiveStartTimestamp: ");
      sb.Append(ActiveStartTimestamp);
      sb.Append(",ActiveEndTimestamp: ");
      sb.Append(ActiveEndTimestamp);
      sb.Append(",MeasureUnit: ");
      sb.Append(MeasureUnit);
      sb.Append(",ChargeUnit: ");
      sb.Append(ChargeUnit);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastModityTimestamp: ");
      sb.Append(LastModityTimestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
