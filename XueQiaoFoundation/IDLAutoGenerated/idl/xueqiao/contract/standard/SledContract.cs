/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract.standard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SledContract : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _sledContractId;
    private int _sledCommodityId;
    private string _sledContractCode;
    private List<int> _relateContractIds;
    private string _sledTag;
    private string _contractEngName;
    private string _contractCnName;
    private string _contractTcName;
    private long _contractExpDate;
    private long _lastTradeDate;
    private long _firstNoticeDate;
    private TechPlatformEnv _platformEnv;
    private ContractStatus _contractStatus;
    private bool _subscribeXQQuote;
    private long _activeStartTimestamp;
    private long _activeEndTimestamp;
    private long _createTimestamp;
    private long _lastModityTimestamp;

    public int SledContractId
    {
      get
      {
        return _sledContractId;
      }
      set
      {
        __isset.sledContractId = true;
        SetProperty(ref _sledContractId, value);
      }
    }

    public int SledCommodityId
    {
      get
      {
        return _sledCommodityId;
      }
      set
      {
        __isset.sledCommodityId = true;
        SetProperty(ref _sledCommodityId, value);
      }
    }

    public string SledContractCode
    {
      get
      {
        return _sledContractCode;
      }
      set
      {
        __isset.sledContractCode = true;
        SetProperty(ref _sledContractCode, value);
      }
    }

    public List<int> RelateContractIds
    {
      get
      {
        return _relateContractIds;
      }
      set
      {
        __isset.relateContractIds = true;
        SetProperty(ref _relateContractIds, value);
      }
    }

    public string SledTag
    {
      get
      {
        return _sledTag;
      }
      set
      {
        __isset.sledTag = true;
        SetProperty(ref _sledTag, value);
      }
    }

    public string ContractEngName
    {
      get
      {
        return _contractEngName;
      }
      set
      {
        __isset.contractEngName = true;
        SetProperty(ref _contractEngName, value);
      }
    }

    public string ContractCnName
    {
      get
      {
        return _contractCnName;
      }
      set
      {
        __isset.contractCnName = true;
        SetProperty(ref _contractCnName, value);
      }
    }

    public string ContractTcName
    {
      get
      {
        return _contractTcName;
      }
      set
      {
        __isset.contractTcName = true;
        SetProperty(ref _contractTcName, value);
      }
    }

    public long ContractExpDate
    {
      get
      {
        return _contractExpDate;
      }
      set
      {
        __isset.contractExpDate = true;
        SetProperty(ref _contractExpDate, value);
      }
    }

    public long LastTradeDate
    {
      get
      {
        return _lastTradeDate;
      }
      set
      {
        __isset.lastTradeDate = true;
        SetProperty(ref _lastTradeDate, value);
      }
    }

    public long FirstNoticeDate
    {
      get
      {
        return _firstNoticeDate;
      }
      set
      {
        __isset.firstNoticeDate = true;
        SetProperty(ref _firstNoticeDate, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TechPlatformEnv"/>
    /// </summary>
    public TechPlatformEnv PlatformEnv
    {
      get
      {
        return _platformEnv;
      }
      set
      {
        __isset.platformEnv = true;
        SetProperty(ref _platformEnv, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ContractStatus"/>
    /// </summary>
    public ContractStatus ContractStatus
    {
      get
      {
        return _contractStatus;
      }
      set
      {
        __isset.contractStatus = true;
        SetProperty(ref _contractStatus, value);
      }
    }

    public bool SubscribeXQQuote
    {
      get
      {
        return _subscribeXQQuote;
      }
      set
      {
        __isset.subscribeXQQuote = true;
        SetProperty(ref _subscribeXQQuote, value);
      }
    }

    public long ActiveStartTimestamp
    {
      get
      {
        return _activeStartTimestamp;
      }
      set
      {
        __isset.activeStartTimestamp = true;
        SetProperty(ref _activeStartTimestamp, value);
      }
    }

    public long ActiveEndTimestamp
    {
      get
      {
        return _activeEndTimestamp;
      }
      set
      {
        __isset.activeEndTimestamp = true;
        SetProperty(ref _activeEndTimestamp, value);
      }
    }

    public long CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public long LastModityTimestamp
    {
      get
      {
        return _lastModityTimestamp;
      }
      set
      {
        __isset.lastModityTimestamp = true;
        SetProperty(ref _lastModityTimestamp, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sledContractId;
      public bool sledCommodityId;
      public bool sledContractCode;
      public bool relateContractIds;
      public bool sledTag;
      public bool contractEngName;
      public bool contractCnName;
      public bool contractTcName;
      public bool contractExpDate;
      public bool lastTradeDate;
      public bool firstNoticeDate;
      public bool platformEnv;
      public bool contractStatus;
      public bool subscribeXQQuote;
      public bool activeStartTimestamp;
      public bool activeEndTimestamp;
      public bool createTimestamp;
      public bool lastModityTimestamp;
    }

    public SledContract() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SledContractId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              SledCommodityId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              SledContractCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                RelateContractIds = new List<int>();
                TList _list10 = iprot.ReadListBegin();
                for( int _i11 = 0; _i11 < _list10.Count; ++_i11)
                {
                  int _elem12 = 0;
                  _elem12 = iprot.ReadI32();
                  RelateContractIds.Add(_elem12);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              SledTag = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              ContractEngName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              ContractCnName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              ContractTcName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              ContractExpDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              LastTradeDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              FirstNoticeDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              PlatformEnv = (TechPlatformEnv)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I32) {
              ContractStatus = (ContractStatus)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Bool) {
              SubscribeXQQuote = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.I64) {
              ActiveStartTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.I64) {
              ActiveEndTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I64) {
              CreateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.I64) {
              LastModityTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SledContract");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.sledContractId) {
        field.Name = "sledContractId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SledContractId);
        oprot.WriteFieldEnd();
      }
      if (__isset.sledCommodityId) {
        field.Name = "sledCommodityId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SledCommodityId);
        oprot.WriteFieldEnd();
      }
      if (SledContractCode != null && __isset.sledContractCode) {
        field.Name = "sledContractCode";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SledContractCode);
        oprot.WriteFieldEnd();
      }
      if (RelateContractIds != null && __isset.relateContractIds) {
        field.Name = "relateContractIds";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, RelateContractIds.Count));
          foreach (int _iter13 in RelateContractIds)
          {
            oprot.WriteI32(_iter13);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SledTag != null && __isset.sledTag) {
        field.Name = "sledTag";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SledTag);
        oprot.WriteFieldEnd();
      }
      if (ContractEngName != null && __isset.contractEngName) {
        field.Name = "contractEngName";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContractEngName);
        oprot.WriteFieldEnd();
      }
      if (ContractCnName != null && __isset.contractCnName) {
        field.Name = "contractCnName";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContractCnName);
        oprot.WriteFieldEnd();
      }
      if (ContractTcName != null && __isset.contractTcName) {
        field.Name = "contractTcName";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContractTcName);
        oprot.WriteFieldEnd();
      }
      if (__isset.contractExpDate) {
        field.Name = "contractExpDate";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ContractExpDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastTradeDate) {
        field.Name = "lastTradeDate";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastTradeDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.firstNoticeDate) {
        field.Name = "firstNoticeDate";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(FirstNoticeDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.platformEnv) {
        field.Name = "platformEnv";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)PlatformEnv);
        oprot.WriteFieldEnd();
      }
      if (__isset.contractStatus) {
        field.Name = "contractStatus";
        field.Type = TType.I32;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ContractStatus);
        oprot.WriteFieldEnd();
      }
      if (__isset.subscribeXQQuote) {
        field.Name = "subscribeXQQuote";
        field.Type = TType.Bool;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SubscribeXQQuote);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeStartTimestamp) {
        field.Name = "activeStartTimestamp";
        field.Type = TType.I64;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ActiveStartTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeEndTimestamp) {
        field.Name = "activeEndTimestamp";
        field.Type = TType.I64;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ActiveEndTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I64;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModityTimestamp) {
        field.Name = "lastModityTimestamp";
        field.Type = TType.I64;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModityTimestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SledContract(");
      sb.Append("SledContractId: ");
      sb.Append(SledContractId);
      sb.Append(",SledCommodityId: ");
      sb.Append(SledCommodityId);
      sb.Append(",SledContractCode: ");
      sb.Append(SledContractCode);
      sb.Append(",RelateContractIds: ");
      if (RelateContractIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (int _iter14 in RelateContractIds)
        {
          sb.Append(_iter14.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",SledTag: ");
      sb.Append(SledTag);
      sb.Append(",ContractEngName: ");
      sb.Append(ContractEngName);
      sb.Append(",ContractCnName: ");
      sb.Append(ContractCnName);
      sb.Append(",ContractTcName: ");
      sb.Append(ContractTcName);
      sb.Append(",ContractExpDate: ");
      sb.Append(ContractExpDate);
      sb.Append(",LastTradeDate: ");
      sb.Append(LastTradeDate);
      sb.Append(",FirstNoticeDate: ");
      sb.Append(FirstNoticeDate);
      sb.Append(",PlatformEnv: ");
      sb.Append(PlatformEnv);
      sb.Append(",ContractStatus: ");
      sb.Append(ContractStatus);
      sb.Append(",SubscribeXQQuote: ");
      sb.Append(SubscribeXQQuote);
      sb.Append(",ActiveStartTimestamp: ");
      sb.Append(ActiveStartTimestamp);
      sb.Append(",ActiveEndTimestamp: ");
      sb.Append(ActiveEndTimestamp);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastModityTimestamp: ");
      sb.Append(LastModityTimestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
