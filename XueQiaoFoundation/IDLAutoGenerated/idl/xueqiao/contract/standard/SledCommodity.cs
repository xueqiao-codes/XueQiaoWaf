/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract.standard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SledCommodity : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _sledCommodityId;
    private string _exchangeMic;
    private SledCommodityType _sledCommodityType;
    private string _sledCommodityCode;
    private List<int> _relateCommodityIds;
    private string _tradeCurrency;
    private string _zoneId;
    private double _contractSize;
    private double _tickSize;
    private int _denominator;
    private CmbDirect _cmbDirect;
    private CommodityState _commodityState;
    private List<SledCommodityConfig> _sledCommodityConfig;
    private string _engName;
    private string _cnName;
    private string _tcName;
    private bool _isAlsoSupportSim;
    private string _engAcronym;
    private string _cnAcronym;
    private string _tcAcronym;
    private long _activeStartTimestamp;
    private long _activeEndTimestamp;
    private long _createTimestamp;
    private long _lastModityTimestamp;

    public int SledCommodityId
    {
      get
      {
        return _sledCommodityId;
      }
      set
      {
        __isset.sledCommodityId = true;
        SetProperty(ref _sledCommodityId, value);
      }
    }

    public string ExchangeMic
    {
      get
      {
        return _exchangeMic;
      }
      set
      {
        __isset.exchangeMic = true;
        SetProperty(ref _exchangeMic, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="SledCommodityType"/>
    /// </summary>
    public SledCommodityType SledCommodityType
    {
      get
      {
        return _sledCommodityType;
      }
      set
      {
        __isset.sledCommodityType = true;
        SetProperty(ref _sledCommodityType, value);
      }
    }

    public string SledCommodityCode
    {
      get
      {
        return _sledCommodityCode;
      }
      set
      {
        __isset.sledCommodityCode = true;
        SetProperty(ref _sledCommodityCode, value);
      }
    }

    public List<int> RelateCommodityIds
    {
      get
      {
        return _relateCommodityIds;
      }
      set
      {
        __isset.relateCommodityIds = true;
        SetProperty(ref _relateCommodityIds, value);
      }
    }

    public string TradeCurrency
    {
      get
      {
        return _tradeCurrency;
      }
      set
      {
        __isset.tradeCurrency = true;
        SetProperty(ref _tradeCurrency, value);
      }
    }

    public string ZoneId
    {
      get
      {
        return _zoneId;
      }
      set
      {
        __isset.zoneId = true;
        SetProperty(ref _zoneId, value);
      }
    }

    public double ContractSize
    {
      get
      {
        return _contractSize;
      }
      set
      {
        __isset.contractSize = true;
        SetProperty(ref _contractSize, value);
      }
    }

    public double TickSize
    {
      get
      {
        return _tickSize;
      }
      set
      {
        __isset.tickSize = true;
        SetProperty(ref _tickSize, value);
      }
    }

    public int Denominator
    {
      get
      {
        return _denominator;
      }
      set
      {
        __isset.denominator = true;
        SetProperty(ref _denominator, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="CmbDirect"/>
    /// </summary>
    public CmbDirect CmbDirect
    {
      get
      {
        return _cmbDirect;
      }
      set
      {
        __isset.cmbDirect = true;
        SetProperty(ref _cmbDirect, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="CommodityState"/>
    /// </summary>
    public CommodityState CommodityState
    {
      get
      {
        return _commodityState;
      }
      set
      {
        __isset.commodityState = true;
        SetProperty(ref _commodityState, value);
      }
    }

    public List<SledCommodityConfig> SledCommodityConfig
    {
      get
      {
        return _sledCommodityConfig;
      }
      set
      {
        __isset.sledCommodityConfig = true;
        SetProperty(ref _sledCommodityConfig, value);
      }
    }

    public string EngName
    {
      get
      {
        return _engName;
      }
      set
      {
        __isset.engName = true;
        SetProperty(ref _engName, value);
      }
    }

    public string CnName
    {
      get
      {
        return _cnName;
      }
      set
      {
        __isset.cnName = true;
        SetProperty(ref _cnName, value);
      }
    }

    public string TcName
    {
      get
      {
        return _tcName;
      }
      set
      {
        __isset.tcName = true;
        SetProperty(ref _tcName, value);
      }
    }

    public bool IsAlsoSupportSim
    {
      get
      {
        return _isAlsoSupportSim;
      }
      set
      {
        __isset.isAlsoSupportSim = true;
        SetProperty(ref _isAlsoSupportSim, value);
      }
    }

    public string EngAcronym
    {
      get
      {
        return _engAcronym;
      }
      set
      {
        __isset.engAcronym = true;
        SetProperty(ref _engAcronym, value);
      }
    }

    public string CnAcronym
    {
      get
      {
        return _cnAcronym;
      }
      set
      {
        __isset.cnAcronym = true;
        SetProperty(ref _cnAcronym, value);
      }
    }

    public string TcAcronym
    {
      get
      {
        return _tcAcronym;
      }
      set
      {
        __isset.tcAcronym = true;
        SetProperty(ref _tcAcronym, value);
      }
    }

    public long ActiveStartTimestamp
    {
      get
      {
        return _activeStartTimestamp;
      }
      set
      {
        __isset.activeStartTimestamp = true;
        SetProperty(ref _activeStartTimestamp, value);
      }
    }

    public long ActiveEndTimestamp
    {
      get
      {
        return _activeEndTimestamp;
      }
      set
      {
        __isset.activeEndTimestamp = true;
        SetProperty(ref _activeEndTimestamp, value);
      }
    }

    public long CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public long LastModityTimestamp
    {
      get
      {
        return _lastModityTimestamp;
      }
      set
      {
        __isset.lastModityTimestamp = true;
        SetProperty(ref _lastModityTimestamp, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sledCommodityId;
      public bool exchangeMic;
      public bool sledCommodityType;
      public bool sledCommodityCode;
      public bool relateCommodityIds;
      public bool tradeCurrency;
      public bool zoneId;
      public bool contractSize;
      public bool tickSize;
      public bool denominator;
      public bool cmbDirect;
      public bool commodityState;
      public bool sledCommodityConfig;
      public bool engName;
      public bool cnName;
      public bool tcName;
      public bool isAlsoSupportSim;
      public bool engAcronym;
      public bool cnAcronym;
      public bool tcAcronym;
      public bool activeStartTimestamp;
      public bool activeEndTimestamp;
      public bool createTimestamp;
      public bool lastModityTimestamp;
    }

    public SledCommodity() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SledCommodityId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ExchangeMic = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              SledCommodityType = (SledCommodityType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              SledCommodityCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                RelateCommodityIds = new List<int>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  int _elem2 = 0;
                  _elem2 = iprot.ReadI32();
                  RelateCommodityIds.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              TradeCurrency = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              ZoneId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              ContractSize = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Double) {
              TickSize = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Denominator = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              CmbDirect = (CmbDirect)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              CommodityState = (CommodityState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.List) {
              {
                SledCommodityConfig = new List<SledCommodityConfig>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  SledCommodityConfig _elem5 = new SledCommodityConfig();
                  _elem5 = new SledCommodityConfig();
                  _elem5.Read(iprot);
                  SledCommodityConfig.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.String) {
              EngName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.String) {
              CnName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.String) {
              TcName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.Bool) {
              IsAlsoSupportSim = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.String) {
              EngAcronym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.String) {
              CnAcronym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.String) {
              TcAcronym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.I64) {
              ActiveStartTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.I64) {
              ActiveEndTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I64) {
              CreateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.I64) {
              LastModityTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SledCommodity");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.sledCommodityId) {
        field.Name = "sledCommodityId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SledCommodityId);
        oprot.WriteFieldEnd();
      }
      if (ExchangeMic != null && __isset.exchangeMic) {
        field.Name = "exchangeMic";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExchangeMic);
        oprot.WriteFieldEnd();
      }
      if (__isset.sledCommodityType) {
        field.Name = "sledCommodityType";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)SledCommodityType);
        oprot.WriteFieldEnd();
      }
      if (SledCommodityCode != null && __isset.sledCommodityCode) {
        field.Name = "sledCommodityCode";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SledCommodityCode);
        oprot.WriteFieldEnd();
      }
      if (RelateCommodityIds != null && __isset.relateCommodityIds) {
        field.Name = "relateCommodityIds";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, RelateCommodityIds.Count));
          foreach (int _iter6 in RelateCommodityIds)
          {
            oprot.WriteI32(_iter6);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (TradeCurrency != null && __isset.tradeCurrency) {
        field.Name = "tradeCurrency";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TradeCurrency);
        oprot.WriteFieldEnd();
      }
      if (ZoneId != null && __isset.zoneId) {
        field.Name = "zoneId";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ZoneId);
        oprot.WriteFieldEnd();
      }
      if (__isset.contractSize) {
        field.Name = "contractSize";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ContractSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.tickSize) {
        field.Name = "tickSize";
        field.Type = TType.Double;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(TickSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.denominator) {
        field.Name = "denominator";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Denominator);
        oprot.WriteFieldEnd();
      }
      if (__isset.cmbDirect) {
        field.Name = "cmbDirect";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)CmbDirect);
        oprot.WriteFieldEnd();
      }
      if (__isset.commodityState) {
        field.Name = "commodityState";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)CommodityState);
        oprot.WriteFieldEnd();
      }
      if (SledCommodityConfig != null && __isset.sledCommodityConfig) {
        field.Name = "sledCommodityConfig";
        field.Type = TType.List;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, SledCommodityConfig.Count));
          foreach (SledCommodityConfig _iter7 in SledCommodityConfig)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (EngName != null && __isset.engName) {
        field.Name = "engName";
        field.Type = TType.String;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EngName);
        oprot.WriteFieldEnd();
      }
      if (CnName != null && __isset.cnName) {
        field.Name = "cnName";
        field.Type = TType.String;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CnName);
        oprot.WriteFieldEnd();
      }
      if (TcName != null && __isset.tcName) {
        field.Name = "tcName";
        field.Type = TType.String;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TcName);
        oprot.WriteFieldEnd();
      }
      if (__isset.isAlsoSupportSim) {
        field.Name = "isAlsoSupportSim";
        field.Type = TType.Bool;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsAlsoSupportSim);
        oprot.WriteFieldEnd();
      }
      if (EngAcronym != null && __isset.engAcronym) {
        field.Name = "engAcronym";
        field.Type = TType.String;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EngAcronym);
        oprot.WriteFieldEnd();
      }
      if (CnAcronym != null && __isset.cnAcronym) {
        field.Name = "cnAcronym";
        field.Type = TType.String;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CnAcronym);
        oprot.WriteFieldEnd();
      }
      if (TcAcronym != null && __isset.tcAcronym) {
        field.Name = "tcAcronym";
        field.Type = TType.String;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TcAcronym);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeStartTimestamp) {
        field.Name = "activeStartTimestamp";
        field.Type = TType.I64;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ActiveStartTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeEndTimestamp) {
        field.Name = "activeEndTimestamp";
        field.Type = TType.I64;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ActiveEndTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I64;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModityTimestamp) {
        field.Name = "lastModityTimestamp";
        field.Type = TType.I64;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModityTimestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SledCommodity(");
      sb.Append("SledCommodityId: ");
      sb.Append(SledCommodityId);
      sb.Append(",ExchangeMic: ");
      sb.Append(ExchangeMic);
      sb.Append(",SledCommodityType: ");
      sb.Append(SledCommodityType);
      sb.Append(",SledCommodityCode: ");
      sb.Append(SledCommodityCode);
      sb.Append(",RelateCommodityIds: ");
      if (RelateCommodityIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (int _iter8 in RelateCommodityIds)
        {
          sb.Append(_iter8.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",TradeCurrency: ");
      sb.Append(TradeCurrency);
      sb.Append(",ZoneId: ");
      sb.Append(ZoneId);
      sb.Append(",ContractSize: ");
      sb.Append(ContractSize);
      sb.Append(",TickSize: ");
      sb.Append(TickSize);
      sb.Append(",Denominator: ");
      sb.Append(Denominator);
      sb.Append(",CmbDirect: ");
      sb.Append(CmbDirect);
      sb.Append(",CommodityState: ");
      sb.Append(CommodityState);
      sb.Append(",SledCommodityConfig: ");
      if (SledCommodityConfig == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (SledCommodityConfig _iter9 in SledCommodityConfig)
        {
          sb.Append(_iter9.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",EngName: ");
      sb.Append(EngName);
      sb.Append(",CnName: ");
      sb.Append(CnName);
      sb.Append(",TcName: ");
      sb.Append(TcName);
      sb.Append(",IsAlsoSupportSim: ");
      sb.Append(IsAlsoSupportSim);
      sb.Append(",EngAcronym: ");
      sb.Append(EngAcronym);
      sb.Append(",CnAcronym: ");
      sb.Append(CnAcronym);
      sb.Append(",TcAcronym: ");
      sb.Append(TcAcronym);
      sb.Append(",ActiveStartTimestamp: ");
      sb.Append(ActiveStartTimestamp);
      sb.Append(",ActiveEndTimestamp: ");
      sb.Append(ActiveEndTimestamp);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastModityTimestamp: ");
      sb.Append(LastModityTimestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
