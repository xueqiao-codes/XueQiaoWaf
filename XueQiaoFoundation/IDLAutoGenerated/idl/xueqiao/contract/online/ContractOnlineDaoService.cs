/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract.online
{
  public partial class ContractOnlineDaoService {
    /// <summary>
    /// 雪橇线上合约查询服务
    /// 
    /// </summary>
    public interface Iface {
      /// <summary>
      /// 
      /// 查询雪橇合约详细
      /// 返回雪橇合约详细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      xueqiao.contract.standard.SledContractPage reqSledContract(PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledContractOption option, int pageIndex, int pageSize);
      #if SILVERLIGHT
      IAsyncResult Begin_reqSledContract(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledContractOption option, int pageIndex, int pageSize);
      xueqiao.contract.standard.SledContractPage End_reqSledContract(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 
      /// 查询雪橇合约聚合详细
      /// 返回雪橇合约聚合详细
      /// 默认最大返回数pageSize = 50
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      xueqiao.contract.standard.SledContractDetailsPage reqSledContractDetail(PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledContractDetailsOption option, int pageIndex, int pageSize);
      #if SILVERLIGHT
      IAsyncResult Begin_reqSledContractDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledContractDetailsOption option, int pageIndex, int pageSize);
      xueqiao.contract.standard.SledContractDetailsPage End_reqSledContractDetail(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据 option 查询雪橇商品映射
      /// 返回商品映射信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      xueqiao.contract.standard.CommodityMappingPage reqCommodityMapping(PlatformArgs platformArgs, xueqiao.contract.standard.ReqCommodityMappingOption option, int pageIndex, int pageSize);
      #if SILVERLIGHT
      IAsyncResult Begin_reqCommodityMapping(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqCommodityMappingOption option, int pageIndex, int pageSize);
      xueqiao.contract.standard.CommodityMappingPage End_reqCommodityMapping(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询雪橇交易所
      /// 分页返回交易所信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      xueqiao.contract.standard.SledExchangePage reqSledExchange(PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledExchangeOption option, int pageIndex, int pageSize);
      #if SILVERLIGHT
      IAsyncResult Begin_reqSledExchange(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledExchangeOption option, int pageIndex, int pageSize);
      xueqiao.contract.standard.SledExchangePage End_reqSledExchange(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据 option 查询雪橇商品
      /// 分页返回雪橇商品信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      xueqiao.contract.standard.SledCommodityPage reqSledCommodity(PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledCommodityOption option, int pageIndex, int pageSize);
      #if SILVERLIGHT
      IAsyncResult Begin_reqSledCommodity(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledCommodityOption option, int pageIndex, int pageSize);
      xueqiao.contract.standard.SledCommodityPage End_reqSledCommodity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询最新的合约版本信息
      /// 返回合约版本信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      xueqiao.contract.ContractVersionPage reqContractVersion(PlatformArgs platformArgs, xueqiao.contract.ReqContractVersionOption option, int pageIndex, int pageSize);
      #if SILVERLIGHT
      IAsyncResult Begin_reqContractVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.ReqContractVersionOption option, int pageIndex, int pageSize);
      xueqiao.contract.ContractVersionPage End_reqContractVersion(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据versionId更新合约版本信息
      /// 返回合约版本信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="contractVersion"></param>
      void updateContractVersion(PlatformArgs platformArgs, xueqiao.contract.ContractVersion contractVersion);
      #if SILVERLIGHT
      IAsyncResult Begin_updateContractVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.ContractVersion contractVersion);
      void End_updateContractVersion(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 删除versionId对应的合约版本信息
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="versionId"></param>
      void removeContractVersion(PlatformArgs platformArgs, int versionId);
      #if SILVERLIGHT
      IAsyncResult Begin_removeContractVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, int versionId);
      void End_removeContractVersion(IAsyncResult asyncResult);
      #endif
      void addDbLocking(PlatformArgs platformArgs, xueqiao.contract.DbLockingInfo dbLockingInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_addDbLocking(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.DbLockingInfo dbLockingInfo);
      void End_addDbLocking(IAsyncResult asyncResult);
      #endif
      void removeDbLocking(PlatformArgs platformArgs, string lockedBy);
      #if SILVERLIGHT
      IAsyncResult Begin_removeDbLocking(AsyncCallback callback, object state, PlatformArgs platformArgs, string lockedBy);
      void End_removeDbLocking(IAsyncResult asyncResult);
      #endif
      xueqiao.contract.DbLockingInfo reqDbLockingInfo(PlatformArgs platformArgs);
      #if SILVERLIGHT
      IAsyncResult Begin_reqDbLockingInfo(AsyncCallback callback, object state, PlatformArgs platformArgs);
      xueqiao.contract.DbLockingInfo End_reqDbLockingInfo(IAsyncResult asyncResult);
      #endif
      xueqiao.contract.SledTradeTimePage reqSledTradeTime(PlatformArgs platformArgs, xueqiao.contract.ReqSledTradeTimeOption option, int pageIndex, int pageSize);
      #if SILVERLIGHT
      IAsyncResult Begin_reqSledTradeTime(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.ReqSledTradeTimeOption option, int pageIndex, int pageSize);
      xueqiao.contract.SledTradeTimePage End_reqSledTradeTime(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// 雪橇线上合约查询服务
    /// 
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqSledContract(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledContractOption option, int pageIndex, int pageSize)
      {
        return send_reqSledContract(callback, state, platformArgs, option, pageIndex, pageSize);
      }

      public xueqiao.contract.standard.SledContractPage End_reqSledContract(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqSledContract();
      }

      #endif

      /// <summary>
      /// 
      /// 查询雪橇合约详细
      /// 返回雪橇合约详细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      public xueqiao.contract.standard.SledContractPage reqSledContract(PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledContractOption option, int pageIndex, int pageSize)
      {
        #if !SILVERLIGHT
        send_reqSledContract(platformArgs, option, pageIndex, pageSize);
        return recv_reqSledContract();

        #else
        var asyncResult = Begin_reqSledContract(null, null, platformArgs, option, pageIndex, pageSize);
        return End_reqSledContract(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqSledContract(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledContractOption option, int pageIndex, int pageSize)
      #else
      public void send_reqSledContract(PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledContractOption option, int pageIndex, int pageSize)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqSledContract", TMessageType.Call, seqid_));
        reqSledContract_args args = new reqSledContract_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.contract.standard.SledContractPage recv_reqSledContract()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqSledContract_result result = new reqSledContract_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqSledContract failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqSledContractDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledContractDetailsOption option, int pageIndex, int pageSize)
      {
        return send_reqSledContractDetail(callback, state, platformArgs, option, pageIndex, pageSize);
      }

      public xueqiao.contract.standard.SledContractDetailsPage End_reqSledContractDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqSledContractDetail();
      }

      #endif

      /// <summary>
      /// 
      /// 查询雪橇合约聚合详细
      /// 返回雪橇合约聚合详细
      /// 默认最大返回数pageSize = 50
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      public xueqiao.contract.standard.SledContractDetailsPage reqSledContractDetail(PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledContractDetailsOption option, int pageIndex, int pageSize)
      {
        #if !SILVERLIGHT
        send_reqSledContractDetail(platformArgs, option, pageIndex, pageSize);
        return recv_reqSledContractDetail();

        #else
        var asyncResult = Begin_reqSledContractDetail(null, null, platformArgs, option, pageIndex, pageSize);
        return End_reqSledContractDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqSledContractDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledContractDetailsOption option, int pageIndex, int pageSize)
      #else
      public void send_reqSledContractDetail(PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledContractDetailsOption option, int pageIndex, int pageSize)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqSledContractDetail", TMessageType.Call, seqid_));
        reqSledContractDetail_args args = new reqSledContractDetail_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.contract.standard.SledContractDetailsPage recv_reqSledContractDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqSledContractDetail_result result = new reqSledContractDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqSledContractDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqCommodityMapping(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqCommodityMappingOption option, int pageIndex, int pageSize)
      {
        return send_reqCommodityMapping(callback, state, platformArgs, option, pageIndex, pageSize);
      }

      public xueqiao.contract.standard.CommodityMappingPage End_reqCommodityMapping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqCommodityMapping();
      }

      #endif

      /// <summary>
      /// 根据 option 查询雪橇商品映射
      /// 返回商品映射信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      public xueqiao.contract.standard.CommodityMappingPage reqCommodityMapping(PlatformArgs platformArgs, xueqiao.contract.standard.ReqCommodityMappingOption option, int pageIndex, int pageSize)
      {
        #if !SILVERLIGHT
        send_reqCommodityMapping(platformArgs, option, pageIndex, pageSize);
        return recv_reqCommodityMapping();

        #else
        var asyncResult = Begin_reqCommodityMapping(null, null, platformArgs, option, pageIndex, pageSize);
        return End_reqCommodityMapping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqCommodityMapping(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqCommodityMappingOption option, int pageIndex, int pageSize)
      #else
      public void send_reqCommodityMapping(PlatformArgs platformArgs, xueqiao.contract.standard.ReqCommodityMappingOption option, int pageIndex, int pageSize)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqCommodityMapping", TMessageType.Call, seqid_));
        reqCommodityMapping_args args = new reqCommodityMapping_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.contract.standard.CommodityMappingPage recv_reqCommodityMapping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqCommodityMapping_result result = new reqCommodityMapping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqCommodityMapping failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqSledExchange(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledExchangeOption option, int pageIndex, int pageSize)
      {
        return send_reqSledExchange(callback, state, platformArgs, option, pageIndex, pageSize);
      }

      public xueqiao.contract.standard.SledExchangePage End_reqSledExchange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqSledExchange();
      }

      #endif

      /// <summary>
      /// 查询雪橇交易所
      /// 分页返回交易所信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      public xueqiao.contract.standard.SledExchangePage reqSledExchange(PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledExchangeOption option, int pageIndex, int pageSize)
      {
        #if !SILVERLIGHT
        send_reqSledExchange(platformArgs, option, pageIndex, pageSize);
        return recv_reqSledExchange();

        #else
        var asyncResult = Begin_reqSledExchange(null, null, platformArgs, option, pageIndex, pageSize);
        return End_reqSledExchange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqSledExchange(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledExchangeOption option, int pageIndex, int pageSize)
      #else
      public void send_reqSledExchange(PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledExchangeOption option, int pageIndex, int pageSize)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqSledExchange", TMessageType.Call, seqid_));
        reqSledExchange_args args = new reqSledExchange_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.contract.standard.SledExchangePage recv_reqSledExchange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqSledExchange_result result = new reqSledExchange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqSledExchange failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqSledCommodity(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledCommodityOption option, int pageIndex, int pageSize)
      {
        return send_reqSledCommodity(callback, state, platformArgs, option, pageIndex, pageSize);
      }

      public xueqiao.contract.standard.SledCommodityPage End_reqSledCommodity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqSledCommodity();
      }

      #endif

      /// <summary>
      /// 根据 option 查询雪橇商品
      /// 分页返回雪橇商品信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      public xueqiao.contract.standard.SledCommodityPage reqSledCommodity(PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledCommodityOption option, int pageIndex, int pageSize)
      {
        #if !SILVERLIGHT
        send_reqSledCommodity(platformArgs, option, pageIndex, pageSize);
        return recv_reqSledCommodity();

        #else
        var asyncResult = Begin_reqSledCommodity(null, null, platformArgs, option, pageIndex, pageSize);
        return End_reqSledCommodity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqSledCommodity(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledCommodityOption option, int pageIndex, int pageSize)
      #else
      public void send_reqSledCommodity(PlatformArgs platformArgs, xueqiao.contract.standard.ReqSledCommodityOption option, int pageIndex, int pageSize)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqSledCommodity", TMessageType.Call, seqid_));
        reqSledCommodity_args args = new reqSledCommodity_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.contract.standard.SledCommodityPage recv_reqSledCommodity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqSledCommodity_result result = new reqSledCommodity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqSledCommodity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqContractVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.ReqContractVersionOption option, int pageIndex, int pageSize)
      {
        return send_reqContractVersion(callback, state, platformArgs, option, pageIndex, pageSize);
      }

      public xueqiao.contract.ContractVersionPage End_reqContractVersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqContractVersion();
      }

      #endif

      /// <summary>
      /// 查询最新的合约版本信息
      /// 返回合约版本信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageIndex"></param>
      /// <param name="pageSize"></param>
      public xueqiao.contract.ContractVersionPage reqContractVersion(PlatformArgs platformArgs, xueqiao.contract.ReqContractVersionOption option, int pageIndex, int pageSize)
      {
        #if !SILVERLIGHT
        send_reqContractVersion(platformArgs, option, pageIndex, pageSize);
        return recv_reqContractVersion();

        #else
        var asyncResult = Begin_reqContractVersion(null, null, platformArgs, option, pageIndex, pageSize);
        return End_reqContractVersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqContractVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.ReqContractVersionOption option, int pageIndex, int pageSize)
      #else
      public void send_reqContractVersion(PlatformArgs platformArgs, xueqiao.contract.ReqContractVersionOption option, int pageIndex, int pageSize)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqContractVersion", TMessageType.Call, seqid_));
        reqContractVersion_args args = new reqContractVersion_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.contract.ContractVersionPage recv_reqContractVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqContractVersion_result result = new reqContractVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqContractVersion failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateContractVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.ContractVersion contractVersion)
      {
        return send_updateContractVersion(callback, state, platformArgs, contractVersion);
      }

      public void End_updateContractVersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateContractVersion();
      }

      #endif

      /// <summary>
      /// 根据versionId更新合约版本信息
      /// 返回合约版本信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="contractVersion"></param>
      public void updateContractVersion(PlatformArgs platformArgs, xueqiao.contract.ContractVersion contractVersion)
      {
        #if !SILVERLIGHT
        send_updateContractVersion(platformArgs, contractVersion);
        recv_updateContractVersion();

        #else
        var asyncResult = Begin_updateContractVersion(null, null, platformArgs, contractVersion);
        End_updateContractVersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateContractVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.ContractVersion contractVersion)
      #else
      public void send_updateContractVersion(PlatformArgs platformArgs, xueqiao.contract.ContractVersion contractVersion)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateContractVersion", TMessageType.Call, seqid_));
        updateContractVersion_args args = new updateContractVersion_args();
        args.PlatformArgs = platformArgs;
        args.ContractVersion = contractVersion;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateContractVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateContractVersion_result result = new updateContractVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeContractVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, int versionId)
      {
        return send_removeContractVersion(callback, state, platformArgs, versionId);
      }

      public void End_removeContractVersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_removeContractVersion();
      }

      #endif

      /// <summary>
      /// 删除versionId对应的合约版本信息
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="versionId"></param>
      public void removeContractVersion(PlatformArgs platformArgs, int versionId)
      {
        #if !SILVERLIGHT
        send_removeContractVersion(platformArgs, versionId);
        recv_removeContractVersion();

        #else
        var asyncResult = Begin_removeContractVersion(null, null, platformArgs, versionId);
        End_removeContractVersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeContractVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, int versionId)
      #else
      public void send_removeContractVersion(PlatformArgs platformArgs, int versionId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeContractVersion", TMessageType.Call, seqid_));
        removeContractVersion_args args = new removeContractVersion_args();
        args.PlatformArgs = platformArgs;
        args.VersionId = versionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_removeContractVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeContractVersion_result result = new removeContractVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addDbLocking(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.DbLockingInfo dbLockingInfo)
      {
        return send_addDbLocking(callback, state, platformArgs, dbLockingInfo);
      }

      public void End_addDbLocking(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addDbLocking();
      }

      #endif

      public void addDbLocking(PlatformArgs platformArgs, xueqiao.contract.DbLockingInfo dbLockingInfo)
      {
        #if !SILVERLIGHT
        send_addDbLocking(platformArgs, dbLockingInfo);
        recv_addDbLocking();

        #else
        var asyncResult = Begin_addDbLocking(null, null, platformArgs, dbLockingInfo);
        End_addDbLocking(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addDbLocking(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.DbLockingInfo dbLockingInfo)
      #else
      public void send_addDbLocking(PlatformArgs platformArgs, xueqiao.contract.DbLockingInfo dbLockingInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addDbLocking", TMessageType.Call, seqid_));
        addDbLocking_args args = new addDbLocking_args();
        args.PlatformArgs = platformArgs;
        args.DbLockingInfo = dbLockingInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addDbLocking()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addDbLocking_result result = new addDbLocking_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeDbLocking(AsyncCallback callback, object state, PlatformArgs platformArgs, string lockedBy)
      {
        return send_removeDbLocking(callback, state, platformArgs, lockedBy);
      }

      public void End_removeDbLocking(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_removeDbLocking();
      }

      #endif

      public void removeDbLocking(PlatformArgs platformArgs, string lockedBy)
      {
        #if !SILVERLIGHT
        send_removeDbLocking(platformArgs, lockedBy);
        recv_removeDbLocking();

        #else
        var asyncResult = Begin_removeDbLocking(null, null, platformArgs, lockedBy);
        End_removeDbLocking(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeDbLocking(AsyncCallback callback, object state, PlatformArgs platformArgs, string lockedBy)
      #else
      public void send_removeDbLocking(PlatformArgs platformArgs, string lockedBy)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeDbLocking", TMessageType.Call, seqid_));
        removeDbLocking_args args = new removeDbLocking_args();
        args.PlatformArgs = platformArgs;
        args.LockedBy = lockedBy;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_removeDbLocking()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeDbLocking_result result = new removeDbLocking_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqDbLockingInfo(AsyncCallback callback, object state, PlatformArgs platformArgs)
      {
        return send_reqDbLockingInfo(callback, state, platformArgs);
      }

      public xueqiao.contract.DbLockingInfo End_reqDbLockingInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqDbLockingInfo();
      }

      #endif

      public xueqiao.contract.DbLockingInfo reqDbLockingInfo(PlatformArgs platformArgs)
      {
        #if !SILVERLIGHT
        send_reqDbLockingInfo(platformArgs);
        return recv_reqDbLockingInfo();

        #else
        var asyncResult = Begin_reqDbLockingInfo(null, null, platformArgs);
        return End_reqDbLockingInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqDbLockingInfo(AsyncCallback callback, object state, PlatformArgs platformArgs)
      #else
      public void send_reqDbLockingInfo(PlatformArgs platformArgs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqDbLockingInfo", TMessageType.Call, seqid_));
        reqDbLockingInfo_args args = new reqDbLockingInfo_args();
        args.PlatformArgs = platformArgs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.contract.DbLockingInfo recv_reqDbLockingInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqDbLockingInfo_result result = new reqDbLockingInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqDbLockingInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqSledTradeTime(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.ReqSledTradeTimeOption option, int pageIndex, int pageSize)
      {
        return send_reqSledTradeTime(callback, state, platformArgs, option, pageIndex, pageSize);
      }

      public xueqiao.contract.SledTradeTimePage End_reqSledTradeTime(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqSledTradeTime();
      }

      #endif

      public xueqiao.contract.SledTradeTimePage reqSledTradeTime(PlatformArgs platformArgs, xueqiao.contract.ReqSledTradeTimeOption option, int pageIndex, int pageSize)
      {
        #if !SILVERLIGHT
        send_reqSledTradeTime(platformArgs, option, pageIndex, pageSize);
        return recv_reqSledTradeTime();

        #else
        var asyncResult = Begin_reqSledTradeTime(null, null, platformArgs, option, pageIndex, pageSize);
        return End_reqSledTradeTime(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqSledTradeTime(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.contract.ReqSledTradeTimeOption option, int pageIndex, int pageSize)
      #else
      public void send_reqSledTradeTime(PlatformArgs platformArgs, xueqiao.contract.ReqSledTradeTimeOption option, int pageIndex, int pageSize)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqSledTradeTime", TMessageType.Call, seqid_));
        reqSledTradeTime_args args = new reqSledTradeTime_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.contract.SledTradeTimePage recv_reqSledTradeTime()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqSledTradeTime_result result = new reqSledTradeTime_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqSledTradeTime failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["reqSledContract"] = reqSledContract_Process;
        processMap_["reqSledContractDetail"] = reqSledContractDetail_Process;
        processMap_["reqCommodityMapping"] = reqCommodityMapping_Process;
        processMap_["reqSledExchange"] = reqSledExchange_Process;
        processMap_["reqSledCommodity"] = reqSledCommodity_Process;
        processMap_["reqContractVersion"] = reqContractVersion_Process;
        processMap_["updateContractVersion"] = updateContractVersion_Process;
        processMap_["removeContractVersion"] = removeContractVersion_Process;
        processMap_["addDbLocking"] = addDbLocking_Process;
        processMap_["removeDbLocking"] = removeDbLocking_Process;
        processMap_["reqDbLockingInfo"] = reqDbLockingInfo_Process;
        processMap_["reqSledTradeTime"] = reqSledTradeTime_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void reqSledContract_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqSledContract_args args = new reqSledContract_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqSledContract_result result = new reqSledContract_result();
        try {
          result.Success = iface_.reqSledContract(args.PlatformArgs, args.Option, args.PageIndex, args.PageSize);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqSledContract", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqSledContractDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqSledContractDetail_args args = new reqSledContractDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqSledContractDetail_result result = new reqSledContractDetail_result();
        try {
          result.Success = iface_.reqSledContractDetail(args.PlatformArgs, args.Option, args.PageIndex, args.PageSize);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqSledContractDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqCommodityMapping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqCommodityMapping_args args = new reqCommodityMapping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqCommodityMapping_result result = new reqCommodityMapping_result();
        try {
          result.Success = iface_.reqCommodityMapping(args.PlatformArgs, args.Option, args.PageIndex, args.PageSize);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqCommodityMapping", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqSledExchange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqSledExchange_args args = new reqSledExchange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqSledExchange_result result = new reqSledExchange_result();
        try {
          result.Success = iface_.reqSledExchange(args.PlatformArgs, args.Option, args.PageIndex, args.PageSize);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqSledExchange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqSledCommodity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqSledCommodity_args args = new reqSledCommodity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqSledCommodity_result result = new reqSledCommodity_result();
        try {
          result.Success = iface_.reqSledCommodity(args.PlatformArgs, args.Option, args.PageIndex, args.PageSize);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqSledCommodity", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqContractVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqContractVersion_args args = new reqContractVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqContractVersion_result result = new reqContractVersion_result();
        try {
          result.Success = iface_.reqContractVersion(args.PlatformArgs, args.Option, args.PageIndex, args.PageSize);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqContractVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateContractVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateContractVersion_args args = new updateContractVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateContractVersion_result result = new updateContractVersion_result();
        try {
          iface_.updateContractVersion(args.PlatformArgs, args.ContractVersion);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("updateContractVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeContractVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeContractVersion_args args = new removeContractVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeContractVersion_result result = new removeContractVersion_result();
        try {
          iface_.removeContractVersion(args.PlatformArgs, args.VersionId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("removeContractVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addDbLocking_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addDbLocking_args args = new addDbLocking_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addDbLocking_result result = new addDbLocking_result();
        try {
          iface_.addDbLocking(args.PlatformArgs, args.DbLockingInfo);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addDbLocking", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeDbLocking_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeDbLocking_args args = new removeDbLocking_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeDbLocking_result result = new removeDbLocking_result();
        try {
          iface_.removeDbLocking(args.PlatformArgs, args.LockedBy);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("removeDbLocking", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqDbLockingInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqDbLockingInfo_args args = new reqDbLockingInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqDbLockingInfo_result result = new reqDbLockingInfo_result();
        try {
          result.Success = iface_.reqDbLockingInfo(args.PlatformArgs);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqDbLockingInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqSledTradeTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqSledTradeTime_args args = new reqSledTradeTime_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqSledTradeTime_result result = new reqSledTradeTime_result();
        try {
          result.Success = iface_.reqSledTradeTime(args.PlatformArgs, args.Option, args.PageIndex, args.PageSize);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqSledTradeTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqSledContract_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.contract.standard.ReqSledContractOption _option;
      private int _pageIndex;
      private int _pageSize;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.contract.standard.ReqSledContractOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public int PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          SetProperty(ref _pageIndex, value);
        }
      }

      public int PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          SetProperty(ref _pageSize, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageIndex;
        public bool pageSize;
      }

      public reqSledContract_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.contract.standard.ReqSledContractOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PageIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                PageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqSledContract_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageSize);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqSledContract_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageIndex: ");
        sb.Append(PageIndex);
        sb.Append(",PageSize: ");
        sb.Append(PageSize);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqSledContract_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.contract.standard.SledContractPage _success;
      private ErrorInfo _err;

      public xueqiao.contract.standard.SledContractPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqSledContract_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.contract.standard.SledContractPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqSledContract_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqSledContract_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqSledContractDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.contract.standard.ReqSledContractDetailsOption _option;
      private int _pageIndex;
      private int _pageSize;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.contract.standard.ReqSledContractDetailsOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public int PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          SetProperty(ref _pageIndex, value);
        }
      }

      public int PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          SetProperty(ref _pageSize, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageIndex;
        public bool pageSize;
      }

      public reqSledContractDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.contract.standard.ReqSledContractDetailsOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PageIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                PageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqSledContractDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageSize);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqSledContractDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageIndex: ");
        sb.Append(PageIndex);
        sb.Append(",PageSize: ");
        sb.Append(PageSize);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqSledContractDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.contract.standard.SledContractDetailsPage _success;
      private ErrorInfo _err;

      public xueqiao.contract.standard.SledContractDetailsPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqSledContractDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.contract.standard.SledContractDetailsPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqSledContractDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqSledContractDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqCommodityMapping_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.contract.standard.ReqCommodityMappingOption _option;
      private int _pageIndex;
      private int _pageSize;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.contract.standard.ReqCommodityMappingOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public int PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          SetProperty(ref _pageIndex, value);
        }
      }

      public int PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          SetProperty(ref _pageSize, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageIndex;
        public bool pageSize;
      }

      public reqCommodityMapping_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.contract.standard.ReqCommodityMappingOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PageIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                PageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqCommodityMapping_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageSize);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqCommodityMapping_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageIndex: ");
        sb.Append(PageIndex);
        sb.Append(",PageSize: ");
        sb.Append(PageSize);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqCommodityMapping_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.contract.standard.CommodityMappingPage _success;
      private ErrorInfo _err;

      public xueqiao.contract.standard.CommodityMappingPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqCommodityMapping_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.contract.standard.CommodityMappingPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqCommodityMapping_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqCommodityMapping_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqSledExchange_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.contract.standard.ReqSledExchangeOption _option;
      private int _pageIndex;
      private int _pageSize;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.contract.standard.ReqSledExchangeOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public int PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          SetProperty(ref _pageIndex, value);
        }
      }

      public int PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          SetProperty(ref _pageSize, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageIndex;
        public bool pageSize;
      }

      public reqSledExchange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.contract.standard.ReqSledExchangeOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                PageIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                PageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqSledExchange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageSize);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqSledExchange_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageIndex: ");
        sb.Append(PageIndex);
        sb.Append(",PageSize: ");
        sb.Append(PageSize);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqSledExchange_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.contract.standard.SledExchangePage _success;
      private ErrorInfo _err;

      public xueqiao.contract.standard.SledExchangePage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqSledExchange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.contract.standard.SledExchangePage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqSledExchange_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqSledExchange_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqSledCommodity_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.contract.standard.ReqSledCommodityOption _option;
      private int _pageIndex;
      private int _pageSize;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.contract.standard.ReqSledCommodityOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public int PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          SetProperty(ref _pageIndex, value);
        }
      }

      public int PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          SetProperty(ref _pageSize, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageIndex;
        public bool pageSize;
      }

      public reqSledCommodity_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.contract.standard.ReqSledCommodityOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                PageIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                PageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqSledCommodity_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageSize);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqSledCommodity_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageIndex: ");
        sb.Append(PageIndex);
        sb.Append(",PageSize: ");
        sb.Append(PageSize);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqSledCommodity_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.contract.standard.SledCommodityPage _success;
      private ErrorInfo _err;

      public xueqiao.contract.standard.SledCommodityPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqSledCommodity_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.contract.standard.SledCommodityPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqSledCommodity_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqSledCommodity_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqContractVersion_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.contract.ReqContractVersionOption _option;
      private int _pageIndex;
      private int _pageSize;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.contract.ReqContractVersionOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public int PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          SetProperty(ref _pageIndex, value);
        }
      }

      public int PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          SetProperty(ref _pageSize, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageIndex;
        public bool pageSize;
      }

      public reqContractVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.contract.ReqContractVersionOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PageIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                PageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqContractVersion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageSize);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqContractVersion_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageIndex: ");
        sb.Append(PageIndex);
        sb.Append(",PageSize: ");
        sb.Append(PageSize);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqContractVersion_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.contract.ContractVersionPage _success;
      private ErrorInfo _err;

      public xueqiao.contract.ContractVersionPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqContractVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.contract.ContractVersionPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqContractVersion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqContractVersion_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateContractVersion_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.contract.ContractVersion _contractVersion;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.contract.ContractVersion ContractVersion
      {
        get
        {
          return _contractVersion;
        }
        set
        {
          __isset.contractVersion = true;
          SetProperty(ref _contractVersion, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool contractVersion;
      }

      public updateContractVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                ContractVersion = new xueqiao.contract.ContractVersion();
                ContractVersion.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateContractVersion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ContractVersion != null && __isset.contractVersion) {
          field.Name = "contractVersion";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          ContractVersion.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateContractVersion_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",ContractVersion: ");
        sb.Append(ContractVersion== null ? "<null>" : ContractVersion.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateContractVersion_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public updateContractVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateContractVersion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateContractVersion_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeContractVersion_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private int _versionId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public int VersionId
      {
        get
        {
          return _versionId;
        }
        set
        {
          __isset.versionId = true;
          SetProperty(ref _versionId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool versionId;
      }

      public removeContractVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                VersionId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeContractVersion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.versionId) {
          field.Name = "versionId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(VersionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeContractVersion_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",VersionId: ");
        sb.Append(VersionId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeContractVersion_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public removeContractVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeContractVersion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeContractVersion_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addDbLocking_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.contract.DbLockingInfo _dbLockingInfo;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.contract.DbLockingInfo DbLockingInfo
      {
        get
        {
          return _dbLockingInfo;
        }
        set
        {
          __isset.dbLockingInfo = true;
          SetProperty(ref _dbLockingInfo, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool dbLockingInfo;
      }

      public addDbLocking_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                DbLockingInfo = new xueqiao.contract.DbLockingInfo();
                DbLockingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addDbLocking_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DbLockingInfo != null && __isset.dbLockingInfo) {
          field.Name = "dbLockingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          DbLockingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addDbLocking_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",DbLockingInfo: ");
        sb.Append(DbLockingInfo== null ? "<null>" : DbLockingInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addDbLocking_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public addDbLocking_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addDbLocking_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addDbLocking_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeDbLocking_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private string _lockedBy;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public string LockedBy
      {
        get
        {
          return _lockedBy;
        }
        set
        {
          __isset.lockedBy = true;
          SetProperty(ref _lockedBy, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool lockedBy;
      }

      public removeDbLocking_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                LockedBy = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeDbLocking_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LockedBy != null && __isset.lockedBy) {
          field.Name = "lockedBy";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LockedBy);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeDbLocking_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LockedBy: ");
        sb.Append(LockedBy);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeDbLocking_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public removeDbLocking_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeDbLocking_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeDbLocking_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqDbLockingInfo_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
      }

      public reqDbLockingInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqDbLockingInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqDbLockingInfo_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqDbLockingInfo_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.contract.DbLockingInfo _success;
      private ErrorInfo _err;

      public xueqiao.contract.DbLockingInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqDbLockingInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.contract.DbLockingInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqDbLockingInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqDbLockingInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqSledTradeTime_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.contract.ReqSledTradeTimeOption _option;
      private int _pageIndex;
      private int _pageSize;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.contract.ReqSledTradeTimeOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public int PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          SetProperty(ref _pageIndex, value);
        }
      }

      public int PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          SetProperty(ref _pageSize, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageIndex;
        public bool pageSize;
      }

      public reqSledTradeTime_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.contract.ReqSledTradeTimeOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PageIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                PageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqSledTradeTime_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageSize);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqSledTradeTime_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageIndex: ");
        sb.Append(PageIndex);
        sb.Append(",PageSize: ");
        sb.Append(PageSize);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqSledTradeTime_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.contract.SledTradeTimePage _success;
      private ErrorInfo _err;

      public xueqiao.contract.SledTradeTimePage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqSledTradeTime_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.contract.SledTradeTimePage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqSledTradeTime_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqSledTradeTime_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
