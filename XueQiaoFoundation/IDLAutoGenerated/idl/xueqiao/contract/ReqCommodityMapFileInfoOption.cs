/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReqCommodityMapFileInfoOption : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private List<int> _brokerEntryIds;
    private xueqiao.contract.standard.TechPlatform _techPlatform;
    private List<int> _fileInfoIds;
    private CommodityMapFileStatus _status;

    public List<int> BrokerEntryIds
    {
      get
      {
        return _brokerEntryIds;
      }
      set
      {
        __isset.brokerEntryIds = true;
        SetProperty(ref _brokerEntryIds, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.contract.standard.TechPlatform"/>
    /// </summary>
    public xueqiao.contract.standard.TechPlatform TechPlatform
    {
      get
      {
        return _techPlatform;
      }
      set
      {
        __isset.techPlatform = true;
        SetProperty(ref _techPlatform, value);
      }
    }

    public List<int> FileInfoIds
    {
      get
      {
        return _fileInfoIds;
      }
      set
      {
        __isset.fileInfoIds = true;
        SetProperty(ref _fileInfoIds, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="CommodityMapFileStatus"/>
    /// </summary>
    public CommodityMapFileStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        SetProperty(ref _status, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool brokerEntryIds;
      public bool techPlatform;
      public bool fileInfoIds;
      public bool status;
    }

    public ReqCommodityMapFileInfoOption() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                BrokerEntryIds = new List<int>();
                TList _list5 = iprot.ReadListBegin();
                for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                {
                  int _elem7 = 0;
                  _elem7 = iprot.ReadI32();
                  BrokerEntryIds.Add(_elem7);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TechPlatform = (xueqiao.contract.standard.TechPlatform)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                FileInfoIds = new List<int>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  int _elem10 = 0;
                  _elem10 = iprot.ReadI32();
                  FileInfoIds.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Status = (CommodityMapFileStatus)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ReqCommodityMapFileInfoOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BrokerEntryIds != null && __isset.brokerEntryIds) {
        field.Name = "brokerEntryIds";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, BrokerEntryIds.Count));
          foreach (int _iter11 in BrokerEntryIds)
          {
            oprot.WriteI32(_iter11);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.techPlatform) {
        field.Name = "techPlatform";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TechPlatform);
        oprot.WriteFieldEnd();
      }
      if (FileInfoIds != null && __isset.fileInfoIds) {
        field.Name = "fileInfoIds";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, FileInfoIds.Count));
          foreach (int _iter12 in FileInfoIds)
          {
            oprot.WriteI32(_iter12);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.status) {
        field.Name = "status";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Status);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ReqCommodityMapFileInfoOption(");
      sb.Append("BrokerEntryIds: ");
      if (BrokerEntryIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (int _iter13 in BrokerEntryIds)
        {
          sb.Append(_iter13.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",TechPlatform: ");
      sb.Append(TechPlatform);
      sb.Append(",FileInfoIds: ");
      if (FileInfoIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (int _iter14 in FileInfoIds)
        {
          sb.Append(_iter14.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",Status: ");
      sb.Append(Status);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
