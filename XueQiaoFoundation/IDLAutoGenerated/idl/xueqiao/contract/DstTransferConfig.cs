/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DstTransferConfig : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _dstTransferConfigId;
    private List<string> _exchangeMics;
    private List<string> _sledCommodityTypes;
    private List<string> _sledCommodityNames;
    private List<int> _commodityIds;
    private int _standard2DstOffSetMinute;
    private long _createTimestamp;
    private long _lastModifyTimestamp;
    private bool _custom;

    public int DstTransferConfigId
    {
      get
      {
        return _dstTransferConfigId;
      }
      set
      {
        __isset.dstTransferConfigId = true;
        SetProperty(ref _dstTransferConfigId, value);
      }
    }

    public List<string> ExchangeMics
    {
      get
      {
        return _exchangeMics;
      }
      set
      {
        __isset.exchangeMics = true;
        SetProperty(ref _exchangeMics, value);
      }
    }

    public List<string> SledCommodityTypes
    {
      get
      {
        return _sledCommodityTypes;
      }
      set
      {
        __isset.sledCommodityTypes = true;
        SetProperty(ref _sledCommodityTypes, value);
      }
    }

    public List<string> SledCommodityNames
    {
      get
      {
        return _sledCommodityNames;
      }
      set
      {
        __isset.sledCommodityNames = true;
        SetProperty(ref _sledCommodityNames, value);
      }
    }

    public List<int> CommodityIds
    {
      get
      {
        return _commodityIds;
      }
      set
      {
        __isset.commodityIds = true;
        SetProperty(ref _commodityIds, value);
      }
    }

    public int Standard2DstOffSetMinute
    {
      get
      {
        return _standard2DstOffSetMinute;
      }
      set
      {
        __isset.standard2DstOffSetMinute = true;
        SetProperty(ref _standard2DstOffSetMinute, value);
      }
    }

    public long CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public long LastModifyTimestamp
    {
      get
      {
        return _lastModifyTimestamp;
      }
      set
      {
        __isset.lastModifyTimestamp = true;
        SetProperty(ref _lastModifyTimestamp, value);
      }
    }

    public bool Custom
    {
      get
      {
        return _custom;
      }
      set
      {
        __isset.custom = true;
        SetProperty(ref _custom, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool dstTransferConfigId;
      public bool exchangeMics;
      public bool sledCommodityTypes;
      public bool sledCommodityNames;
      public bool commodityIds;
      public bool standard2DstOffSetMinute;
      public bool createTimestamp;
      public bool lastModifyTimestamp;
      public bool custom;
    }

    public DstTransferConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DstTransferConfigId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                ExchangeMics = new List<string>();
                TList _list132 = iprot.ReadListBegin();
                for( int _i133 = 0; _i133 < _list132.Count; ++_i133)
                {
                  string _elem134 = null;
                  _elem134 = iprot.ReadString();
                  ExchangeMics.Add(_elem134);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                SledCommodityTypes = new List<string>();
                TList _list135 = iprot.ReadListBegin();
                for( int _i136 = 0; _i136 < _list135.Count; ++_i136)
                {
                  string _elem137 = null;
                  _elem137 = iprot.ReadString();
                  SledCommodityTypes.Add(_elem137);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                SledCommodityNames = new List<string>();
                TList _list138 = iprot.ReadListBegin();
                for( int _i139 = 0; _i139 < _list138.Count; ++_i139)
                {
                  string _elem140 = null;
                  _elem140 = iprot.ReadString();
                  SledCommodityNames.Add(_elem140);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                CommodityIds = new List<int>();
                TList _list141 = iprot.ReadListBegin();
                for( int _i142 = 0; _i142 < _list141.Count; ++_i142)
                {
                  int _elem143 = 0;
                  _elem143 = iprot.ReadI32();
                  CommodityIds.Add(_elem143);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Standard2DstOffSetMinute = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              CreateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              LastModifyTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              Custom = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DstTransferConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.dstTransferConfigId) {
        field.Name = "dstTransferConfigId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DstTransferConfigId);
        oprot.WriteFieldEnd();
      }
      if (ExchangeMics != null && __isset.exchangeMics) {
        field.Name = "exchangeMics";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ExchangeMics.Count));
          foreach (string _iter144 in ExchangeMics)
          {
            oprot.WriteString(_iter144);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SledCommodityTypes != null && __isset.sledCommodityTypes) {
        field.Name = "sledCommodityTypes";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, SledCommodityTypes.Count));
          foreach (string _iter145 in SledCommodityTypes)
          {
            oprot.WriteString(_iter145);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SledCommodityNames != null && __isset.sledCommodityNames) {
        field.Name = "sledCommodityNames";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, SledCommodityNames.Count));
          foreach (string _iter146 in SledCommodityNames)
          {
            oprot.WriteString(_iter146);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (CommodityIds != null && __isset.commodityIds) {
        field.Name = "commodityIds";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, CommodityIds.Count));
          foreach (int _iter147 in CommodityIds)
          {
            oprot.WriteI32(_iter147);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.standard2DstOffSetMinute) {
        field.Name = "standard2DstOffSetMinute";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Standard2DstOffSetMinute);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModifyTimestamp) {
        field.Name = "lastModifyTimestamp";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModifyTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.custom) {
        field.Name = "custom";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Custom);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DstTransferConfig(");
      sb.Append("DstTransferConfigId: ");
      sb.Append(DstTransferConfigId);
      sb.Append(",ExchangeMics: ");
      if (ExchangeMics == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (string _iter148 in ExchangeMics)
        {
          sb.Append(_iter148.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",SledCommodityTypes: ");
      if (SledCommodityTypes == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (string _iter149 in SledCommodityTypes)
        {
          sb.Append(_iter149.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",SledCommodityNames: ");
      if (SledCommodityNames == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (string _iter150 in SledCommodityNames)
        {
          sb.Append(_iter150.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",CommodityIds: ");
      if (CommodityIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (int _iter151 in CommodityIds)
        {
          sb.Append(_iter151.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",Standard2DstOffSetMinute: ");
      sb.Append(Standard2DstOffSetMinute);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastModifyTimestamp: ");
      sb.Append(LastModifyTimestamp);
      sb.Append(",Custom: ");
      sb.Append(Custom);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
