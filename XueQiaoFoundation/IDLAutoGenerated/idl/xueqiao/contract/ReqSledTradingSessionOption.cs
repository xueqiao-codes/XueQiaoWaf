/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReqSledTradingSessionOption : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _sledCommodityId;
    private THashSet<long> _tradeSessionIds;
    private TimeSystem _timeSystem;

    public int SledCommodityId
    {
      get
      {
        return _sledCommodityId;
      }
      set
      {
        __isset.sledCommodityId = true;
        SetProperty(ref _sledCommodityId, value);
      }
    }

    public THashSet<long> TradeSessionIds
    {
      get
      {
        return _tradeSessionIds;
      }
      set
      {
        __isset.tradeSessionIds = true;
        SetProperty(ref _tradeSessionIds, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TimeSystem"/>
    /// </summary>
    public TimeSystem TimeSystem
    {
      get
      {
        return _timeSystem;
      }
      set
      {
        __isset.timeSystem = true;
        SetProperty(ref _timeSystem, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sledCommodityId;
      public bool tradeSessionIds;
      public bool timeSystem;
    }

    public ReqSledTradingSessionOption() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SledCommodityId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Set) {
              {
                TradeSessionIds = new THashSet<long>();
                TSet _set95 = iprot.ReadSetBegin();
                for( int _i96 = 0; _i96 < _set95.Count; ++_i96)
                {
                  long _elem97 = 0;
                  _elem97 = iprot.ReadI64();
                  TradeSessionIds.Add(_elem97);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TimeSystem = (TimeSystem)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ReqSledTradingSessionOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.sledCommodityId) {
        field.Name = "sledCommodityId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SledCommodityId);
        oprot.WriteFieldEnd();
      }
      if (TradeSessionIds != null && __isset.tradeSessionIds) {
        field.Name = "tradeSessionIds";
        field.Type = TType.Set;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.I64, TradeSessionIds.Count));
          foreach (long _iter98 in TradeSessionIds)
          {
            oprot.WriteI64(_iter98);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.timeSystem) {
        field.Name = "timeSystem";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TimeSystem);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ReqSledTradingSessionOption(");
      sb.Append("SledCommodityId: ");
      sb.Append(SledCommodityId);
      sb.Append(",TradeSessionIds: ");
      if (TradeSessionIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (long _iter99 in TradeSessionIds)
        {
          sb.Append(_iter99.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",TimeSystem: ");
      sb.Append(TimeSystem);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
