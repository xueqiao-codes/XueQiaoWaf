/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReqCommoditySourceAccountOption : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private THashSet<int> _accountIds;
    private IndexedPageOption _pageOption;

    public THashSet<int> AccountIds
    {
      get
      {
        return _accountIds;
      }
      set
      {
        __isset.accountIds = true;
        SetProperty(ref _accountIds, value);
      }
    }

    public IndexedPageOption PageOption
    {
      get
      {
        return _pageOption;
      }
      set
      {
        __isset.pageOption = true;
        SetProperty(ref _pageOption, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accountIds;
      public bool pageOption;
    }

    public ReqCommoditySourceAccountOption() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Set) {
              {
                AccountIds = new THashSet<int>();
                TSet _set253 = iprot.ReadSetBegin();
                for( int _i254 = 0; _i254 < _set253.Count; ++_i254)
                {
                  int _elem255 = 0;
                  _elem255 = iprot.ReadI32();
                  AccountIds.Add(_elem255);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              PageOption = new IndexedPageOption();
              PageOption.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ReqCommoditySourceAccountOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccountIds != null && __isset.accountIds) {
        field.Name = "accountIds";
        field.Type = TType.Set;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.I32, AccountIds.Count));
          foreach (int _iter256 in AccountIds)
          {
            oprot.WriteI32(_iter256);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PageOption != null && __isset.pageOption) {
        field.Name = "pageOption";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        PageOption.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ReqCommoditySourceAccountOption(");
      sb.Append("AccountIds: ");
      if (AccountIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (int _iter257 in AccountIds)
        {
          sb.Append(_iter257.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",PageOption: ");
      sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
