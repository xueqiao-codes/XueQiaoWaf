/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CommoditySourceAccount : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _accountId;
    private xueqiao.contract.standard.TechPlatform _techPlatform;
    private xueqiao.contract.standard.TechPlatformEnv _techPlatformEnv;
    private string _accountName;
    private string _accountpwd;
    private int _brokerEntryId;
    private int _brokerAccessId;
    private Dictionary<string, string> _accountProperties;
    private AccountAccessState _accessState;
    private string _invalidReason;
    private int _apiRetCode;
    private string _ipAddress;
    private int _port;
    private long _createTimestamp;
    private long _lastModifyTimestamp;

    public int AccountId
    {
      get
      {
        return _accountId;
      }
      set
      {
        __isset.accountId = true;
        SetProperty(ref _accountId, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.contract.standard.TechPlatform"/>
    /// </summary>
    public xueqiao.contract.standard.TechPlatform TechPlatform
    {
      get
      {
        return _techPlatform;
      }
      set
      {
        __isset.techPlatform = true;
        SetProperty(ref _techPlatform, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.contract.standard.TechPlatformEnv"/>
    /// </summary>
    public xueqiao.contract.standard.TechPlatformEnv TechPlatformEnv
    {
      get
      {
        return _techPlatformEnv;
      }
      set
      {
        __isset.techPlatformEnv = true;
        SetProperty(ref _techPlatformEnv, value);
      }
    }

    public string AccountName
    {
      get
      {
        return _accountName;
      }
      set
      {
        __isset.accountName = true;
        SetProperty(ref _accountName, value);
      }
    }

    public string Accountpwd
    {
      get
      {
        return _accountpwd;
      }
      set
      {
        __isset.accountpwd = true;
        SetProperty(ref _accountpwd, value);
      }
    }

    public int BrokerEntryId
    {
      get
      {
        return _brokerEntryId;
      }
      set
      {
        __isset.brokerEntryId = true;
        SetProperty(ref _brokerEntryId, value);
      }
    }

    public int BrokerAccessId
    {
      get
      {
        return _brokerAccessId;
      }
      set
      {
        __isset.brokerAccessId = true;
        SetProperty(ref _brokerAccessId, value);
      }
    }

    public Dictionary<string, string> AccountProperties
    {
      get
      {
        return _accountProperties;
      }
      set
      {
        __isset.accountProperties = true;
        SetProperty(ref _accountProperties, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="AccountAccessState"/>
    /// </summary>
    public AccountAccessState AccessState
    {
      get
      {
        return _accessState;
      }
      set
      {
        __isset.accessState = true;
        SetProperty(ref _accessState, value);
      }
    }

    public string InvalidReason
    {
      get
      {
        return _invalidReason;
      }
      set
      {
        __isset.invalidReason = true;
        SetProperty(ref _invalidReason, value);
      }
    }

    public int ApiRetCode
    {
      get
      {
        return _apiRetCode;
      }
      set
      {
        __isset.apiRetCode = true;
        SetProperty(ref _apiRetCode, value);
      }
    }

    public string IpAddress
    {
      get
      {
        return _ipAddress;
      }
      set
      {
        __isset.ipAddress = true;
        SetProperty(ref _ipAddress, value);
      }
    }

    public int Port
    {
      get
      {
        return _port;
      }
      set
      {
        __isset.port = true;
        SetProperty(ref _port, value);
      }
    }

    public long CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public long LastModifyTimestamp
    {
      get
      {
        return _lastModifyTimestamp;
      }
      set
      {
        __isset.lastModifyTimestamp = true;
        SetProperty(ref _lastModifyTimestamp, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool accountId;
      public bool techPlatform;
      public bool techPlatformEnv;
      public bool accountName;
      public bool accountpwd;
      public bool brokerEntryId;
      public bool brokerAccessId;
      public bool accountProperties;
      public bool accessState;
      public bool invalidReason;
      public bool apiRetCode;
      public bool ipAddress;
      public bool port;
      public bool createTimestamp;
      public bool lastModifyTimestamp;
    }

    public CommoditySourceAccount() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              AccountId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TechPlatform = (xueqiao.contract.standard.TechPlatform)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TechPlatformEnv = (xueqiao.contract.standard.TechPlatformEnv)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              AccountName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Accountpwd = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              BrokerEntryId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              BrokerAccessId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Map) {
              {
                AccountProperties = new Dictionary<string, string>();
                TMap _map237 = iprot.ReadMapBegin();
                for( int _i238 = 0; _i238 < _map237.Count; ++_i238)
                {
                  string _key239;
                  string _val240;
                  _key239 = iprot.ReadString();
                  _val240 = iprot.ReadString();
                  AccountProperties[_key239] = _val240;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              AccessState = (AccountAccessState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              InvalidReason = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              ApiRetCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              IpAddress = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I32) {
              Port = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.I64) {
              CreateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.I64) {
              LastModifyTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CommoditySourceAccount");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.accountId) {
        field.Name = "accountId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AccountId);
        oprot.WriteFieldEnd();
      }
      if (__isset.techPlatform) {
        field.Name = "techPlatform";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TechPlatform);
        oprot.WriteFieldEnd();
      }
      if (__isset.techPlatformEnv) {
        field.Name = "techPlatformEnv";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TechPlatformEnv);
        oprot.WriteFieldEnd();
      }
      if (AccountName != null && __isset.accountName) {
        field.Name = "accountName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccountName);
        oprot.WriteFieldEnd();
      }
      if (Accountpwd != null && __isset.accountpwd) {
        field.Name = "accountpwd";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Accountpwd);
        oprot.WriteFieldEnd();
      }
      if (__isset.brokerEntryId) {
        field.Name = "brokerEntryId";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BrokerEntryId);
        oprot.WriteFieldEnd();
      }
      if (__isset.brokerAccessId) {
        field.Name = "brokerAccessId";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BrokerAccessId);
        oprot.WriteFieldEnd();
      }
      if (AccountProperties != null && __isset.accountProperties) {
        field.Name = "accountProperties";
        field.Type = TType.Map;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, AccountProperties.Count));
          foreach (string _iter241 in AccountProperties.Keys)
          {
            oprot.WriteString(_iter241);
            oprot.WriteString(AccountProperties[_iter241]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.accessState) {
        field.Name = "accessState";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)AccessState);
        oprot.WriteFieldEnd();
      }
      if (InvalidReason != null && __isset.invalidReason) {
        field.Name = "invalidReason";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InvalidReason);
        oprot.WriteFieldEnd();
      }
      if (__isset.apiRetCode) {
        field.Name = "apiRetCode";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ApiRetCode);
        oprot.WriteFieldEnd();
      }
      if (IpAddress != null && __isset.ipAddress) {
        field.Name = "ipAddress";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IpAddress);
        oprot.WriteFieldEnd();
      }
      if (__isset.port) {
        field.Name = "port";
        field.Type = TType.I32;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Port);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I64;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModifyTimestamp) {
        field.Name = "lastModifyTimestamp";
        field.Type = TType.I64;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModifyTimestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CommoditySourceAccount(");
      sb.Append("AccountId: ");
      sb.Append(AccountId);
      sb.Append(",TechPlatform: ");
      sb.Append(TechPlatform);
      sb.Append(",TechPlatformEnv: ");
      sb.Append(TechPlatformEnv);
      sb.Append(",AccountName: ");
      sb.Append(AccountName);
      sb.Append(",Accountpwd: ");
      sb.Append(Accountpwd);
      sb.Append(",BrokerEntryId: ");
      sb.Append(BrokerEntryId);
      sb.Append(",BrokerAccessId: ");
      sb.Append(BrokerAccessId);
      sb.Append(",AccountProperties: ");
      if (AccountProperties == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (string _iter242 in AccountProperties.Keys)
        {
          sb.Append(_iter242.ToString());
          sb.Append(":");
          sb.Append(AccountProperties[_iter242].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(",AccessState: ");
      sb.Append(AccessState);
      sb.Append(",InvalidReason: ");
      sb.Append(InvalidReason);
      sb.Append(",ApiRetCode: ");
      sb.Append(ApiRetCode);
      sb.Append(",IpAddress: ");
      sb.Append(IpAddress);
      sb.Append(",Port: ");
      sb.Append(Port);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastModifyTimestamp: ");
      sb.Append(LastModifyTimestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
