/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReqSledTradeTimeOption : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private List<int> _sledCommodityIds;
    private long _dateTimestamp;
    private string _date;
    private int _days;

    public List<int> SledCommodityIds
    {
      get
      {
        return _sledCommodityIds;
      }
      set
      {
        __isset.sledCommodityIds = true;
        SetProperty(ref _sledCommodityIds, value);
      }
    }

    public long DateTimestamp
    {
      get
      {
        return _dateTimestamp;
      }
      set
      {
        __isset.dateTimestamp = true;
        SetProperty(ref _dateTimestamp, value);
      }
    }

    public string Date
    {
      get
      {
        return _date;
      }
      set
      {
        __isset.date = true;
        SetProperty(ref _date, value);
      }
    }

    public int Days
    {
      get
      {
        return _days;
      }
      set
      {
        __isset.days = true;
        SetProperty(ref _days, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sledCommodityIds;
      public bool dateTimestamp;
      public bool date;
      public bool days;
    }

    public ReqSledTradeTimeOption() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                SledCommodityIds = new List<int>();
                TList _list75 = iprot.ReadListBegin();
                for( int _i76 = 0; _i76 < _list75.Count; ++_i76)
                {
                  int _elem77 = 0;
                  _elem77 = iprot.ReadI32();
                  SledCommodityIds.Add(_elem77);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              DateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Date = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Days = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ReqSledTradeTimeOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SledCommodityIds != null && __isset.sledCommodityIds) {
        field.Name = "sledCommodityIds";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, SledCommodityIds.Count));
          foreach (int _iter78 in SledCommodityIds)
          {
            oprot.WriteI32(_iter78);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.dateTimestamp) {
        field.Name = "dateTimestamp";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (Date != null && __isset.date) {
        field.Name = "date";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Date);
        oprot.WriteFieldEnd();
      }
      if (__isset.days) {
        field.Name = "days";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Days);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ReqSledTradeTimeOption(");
      sb.Append("SledCommodityIds: ");
      if (SledCommodityIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (int _iter79 in SledCommodityIds)
        {
          sb.Append(_iter79.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",DateTimestamp: ");
      sb.Append(DateTimestamp);
      sb.Append(",Date: ");
      sb.Append(Date);
      sb.Append(",Days: ");
      sb.Append(Days);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
