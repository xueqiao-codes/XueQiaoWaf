/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.contract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SledTradeTimeConfig : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _sledCommodityId;
    private Dictionary<Days, DayTradeTime> _standardWeekTradeTimes;
    private string _zoneId;
    private Dictionary<Days, DayTradeTime> _dstWeekTradeTimes;
    private long _createTimestamp;
    private long _lastModifyTimestamp;
    private bool _dstExists;

    public int SledCommodityId
    {
      get
      {
        return _sledCommodityId;
      }
      set
      {
        __isset.sledCommodityId = true;
        SetProperty(ref _sledCommodityId, value);
      }
    }

    public Dictionary<Days, DayTradeTime> StandardWeekTradeTimes
    {
      get
      {
        return _standardWeekTradeTimes;
      }
      set
      {
        __isset.standardWeekTradeTimes = true;
        SetProperty(ref _standardWeekTradeTimes, value);
      }
    }

    public string ZoneId
    {
      get
      {
        return _zoneId;
      }
      set
      {
        __isset.zoneId = true;
        SetProperty(ref _zoneId, value);
      }
    }

    public Dictionary<Days, DayTradeTime> DstWeekTradeTimes
    {
      get
      {
        return _dstWeekTradeTimes;
      }
      set
      {
        __isset.dstWeekTradeTimes = true;
        SetProperty(ref _dstWeekTradeTimes, value);
      }
    }

    public long CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public long LastModifyTimestamp
    {
      get
      {
        return _lastModifyTimestamp;
      }
      set
      {
        __isset.lastModifyTimestamp = true;
        SetProperty(ref _lastModifyTimestamp, value);
      }
    }

    public bool DstExists
    {
      get
      {
        return _dstExists;
      }
      set
      {
        __isset.dstExists = true;
        SetProperty(ref _dstExists, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sledCommodityId;
      public bool standardWeekTradeTimes;
      public bool zoneId;
      public bool dstWeekTradeTimes;
      public bool createTimestamp;
      public bool lastModifyTimestamp;
      public bool dstExists;
    }

    public SledTradeTimeConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SledCommodityId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                StandardWeekTradeTimes = new Dictionary<Days, DayTradeTime>();
                TMap _map110 = iprot.ReadMapBegin();
                for( int _i111 = 0; _i111 < _map110.Count; ++_i111)
                {
                  Days _key112;
                  DayTradeTime _val113;
                  _key112 = (Days)iprot.ReadI32();
                  _val113 = new DayTradeTime();
                  _val113.Read(iprot);
                  StandardWeekTradeTimes[_key112] = _val113;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              ZoneId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                DstWeekTradeTimes = new Dictionary<Days, DayTradeTime>();
                TMap _map114 = iprot.ReadMapBegin();
                for( int _i115 = 0; _i115 < _map114.Count; ++_i115)
                {
                  Days _key116;
                  DayTradeTime _val117;
                  _key116 = (Days)iprot.ReadI32();
                  _val117 = new DayTradeTime();
                  _val117.Read(iprot);
                  DstWeekTradeTimes[_key116] = _val117;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              CreateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              LastModifyTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              DstExists = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SledTradeTimeConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.sledCommodityId) {
        field.Name = "sledCommodityId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SledCommodityId);
        oprot.WriteFieldEnd();
      }
      if (StandardWeekTradeTimes != null && __isset.standardWeekTradeTimes) {
        field.Name = "standardWeekTradeTimes";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, StandardWeekTradeTimes.Count));
          foreach (Days _iter118 in StandardWeekTradeTimes.Keys)
          {
            oprot.WriteI32((int)_iter118);
            StandardWeekTradeTimes[_iter118].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ZoneId != null && __isset.zoneId) {
        field.Name = "zoneId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ZoneId);
        oprot.WriteFieldEnd();
      }
      if (DstWeekTradeTimes != null && __isset.dstWeekTradeTimes) {
        field.Name = "dstWeekTradeTimes";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, DstWeekTradeTimes.Count));
          foreach (Days _iter119 in DstWeekTradeTimes.Keys)
          {
            oprot.WriteI32((int)_iter119);
            DstWeekTradeTimes[_iter119].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModifyTimestamp) {
        field.Name = "lastModifyTimestamp";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModifyTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.dstExists) {
        field.Name = "dstExists";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(DstExists);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SledTradeTimeConfig(");
      sb.Append("SledCommodityId: ");
      sb.Append(SledCommodityId);
      sb.Append(",StandardWeekTradeTimes: ");
      if (StandardWeekTradeTimes == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (Days _iter120 in StandardWeekTradeTimes.Keys)
        {
          sb.Append(_iter120.ToString());
          sb.Append(":");
          sb.Append(StandardWeekTradeTimes[_iter120].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(",ZoneId: ");
      sb.Append(ZoneId);
      sb.Append(",DstWeekTradeTimes: ");
      if (DstWeekTradeTimes == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (Days _iter121 in DstWeekTradeTimes.Keys)
        {
          sb.Append(_iter121.ToString());
          sb.Append(":");
          sb.Append(DstWeekTradeTimes[_iter121].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastModifyTimestamp: ");
      sb.Append(LastModifyTimestamp);
      sb.Append(",DstExists: ");
      sb.Append(DstExists);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
