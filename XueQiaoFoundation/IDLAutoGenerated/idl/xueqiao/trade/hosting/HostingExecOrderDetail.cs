/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingExecOrderDetail : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private HostingExecOrderType _orderType;
    private double _limitPrice;
    private int _quantity;
    private HostingExecOrderTradeDirection _tradeDirection;
    private HostingExecOrderCreatorType _orderCreatorType;
    private HostingExecOrderMode _orderMode;
    private string _effectiveDateTime;
    private HostingExecOrderCondition _condition;
    private double _conditionPrice;

    /// <summary>
    /// 
    /// <seealso cref="HostingExecOrderType"/>
    /// </summary>
    public HostingExecOrderType OrderType
    {
      get
      {
        return _orderType;
      }
      set
      {
        __isset.orderType = true;
        SetProperty(ref _orderType, value);
      }
    }

    public double LimitPrice
    {
      get
      {
        return _limitPrice;
      }
      set
      {
        __isset.limitPrice = true;
        SetProperty(ref _limitPrice, value);
      }
    }

    public int Quantity
    {
      get
      {
        return _quantity;
      }
      set
      {
        __isset.quantity = true;
        SetProperty(ref _quantity, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="HostingExecOrderTradeDirection"/>
    /// </summary>
    public HostingExecOrderTradeDirection TradeDirection
    {
      get
      {
        return _tradeDirection;
      }
      set
      {
        __isset.tradeDirection = true;
        SetProperty(ref _tradeDirection, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="HostingExecOrderCreatorType"/>
    /// </summary>
    public HostingExecOrderCreatorType OrderCreatorType
    {
      get
      {
        return _orderCreatorType;
      }
      set
      {
        __isset.orderCreatorType = true;
        SetProperty(ref _orderCreatorType, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="HostingExecOrderMode"/>
    /// </summary>
    public HostingExecOrderMode OrderMode
    {
      get
      {
        return _orderMode;
      }
      set
      {
        __isset.orderMode = true;
        SetProperty(ref _orderMode, value);
      }
    }

    public string EffectiveDateTime
    {
      get
      {
        return _effectiveDateTime;
      }
      set
      {
        __isset.effectiveDateTime = true;
        SetProperty(ref _effectiveDateTime, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="HostingExecOrderCondition"/>
    /// </summary>
    public HostingExecOrderCondition Condition
    {
      get
      {
        return _condition;
      }
      set
      {
        __isset.condition = true;
        SetProperty(ref _condition, value);
      }
    }

    public double ConditionPrice
    {
      get
      {
        return _conditionPrice;
      }
      set
      {
        __isset.conditionPrice = true;
        SetProperty(ref _conditionPrice, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool orderType;
      public bool limitPrice;
      public bool quantity;
      public bool tradeDirection;
      public bool orderCreatorType;
      public bool orderMode;
      public bool effectiveDateTime;
      public bool condition;
      public bool conditionPrice;
    }

    public HostingExecOrderDetail() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              OrderType = (HostingExecOrderType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              LimitPrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Quantity = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              TradeDirection = (HostingExecOrderTradeDirection)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              OrderCreatorType = (HostingExecOrderCreatorType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              OrderMode = (HostingExecOrderMode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              EffectiveDateTime = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Condition = (HostingExecOrderCondition)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Double) {
              ConditionPrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingExecOrderDetail");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.orderType) {
        field.Name = "orderType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)OrderType);
        oprot.WriteFieldEnd();
      }
      if (__isset.limitPrice) {
        field.Name = "limitPrice";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LimitPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.quantity) {
        field.Name = "quantity";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Quantity);
        oprot.WriteFieldEnd();
      }
      if (__isset.tradeDirection) {
        field.Name = "tradeDirection";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TradeDirection);
        oprot.WriteFieldEnd();
      }
      if (__isset.orderCreatorType) {
        field.Name = "orderCreatorType";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)OrderCreatorType);
        oprot.WriteFieldEnd();
      }
      if (__isset.orderMode) {
        field.Name = "orderMode";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)OrderMode);
        oprot.WriteFieldEnd();
      }
      if (EffectiveDateTime != null && __isset.effectiveDateTime) {
        field.Name = "effectiveDateTime";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EffectiveDateTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.condition) {
        field.Name = "condition";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Condition);
        oprot.WriteFieldEnd();
      }
      if (__isset.conditionPrice) {
        field.Name = "conditionPrice";
        field.Type = TType.Double;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ConditionPrice);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingExecOrderDetail(");
      sb.Append("OrderType: ");
      sb.Append(OrderType);
      sb.Append(",LimitPrice: ");
      sb.Append(LimitPrice);
      sb.Append(",Quantity: ");
      sb.Append(Quantity);
      sb.Append(",TradeDirection: ");
      sb.Append(TradeDirection);
      sb.Append(",OrderCreatorType: ");
      sb.Append(OrderCreatorType);
      sb.Append(",OrderMode: ");
      sb.Append(OrderMode);
      sb.Append(",EffectiveDateTime: ");
      sb.Append(EffectiveDateTime);
      sb.Append(",Condition: ");
      sb.Append(Condition);
      sb.Append(",ConditionPrice: ");
      sb.Append(ConditionPrice);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
