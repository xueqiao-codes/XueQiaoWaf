/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingExecOrderLegContractSummary : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _legSledContractId;
    private string _legSledContractCode;
    private long _legSledCommodityId;
    private short _legSledCommodityType;
    private string _legSledCommodityCode;
    private string _legSledExchangeMic;

    public long LegSledContractId
    {
      get
      {
        return _legSledContractId;
      }
      set
      {
        __isset.legSledContractId = true;
        SetProperty(ref _legSledContractId, value);
      }
    }

    public string LegSledContractCode
    {
      get
      {
        return _legSledContractCode;
      }
      set
      {
        __isset.legSledContractCode = true;
        SetProperty(ref _legSledContractCode, value);
      }
    }

    public long LegSledCommodityId
    {
      get
      {
        return _legSledCommodityId;
      }
      set
      {
        __isset.legSledCommodityId = true;
        SetProperty(ref _legSledCommodityId, value);
      }
    }

    public short LegSledCommodityType
    {
      get
      {
        return _legSledCommodityType;
      }
      set
      {
        __isset.legSledCommodityType = true;
        SetProperty(ref _legSledCommodityType, value);
      }
    }

    public string LegSledCommodityCode
    {
      get
      {
        return _legSledCommodityCode;
      }
      set
      {
        __isset.legSledCommodityCode = true;
        SetProperty(ref _legSledCommodityCode, value);
      }
    }

    public string LegSledExchangeMic
    {
      get
      {
        return _legSledExchangeMic;
      }
      set
      {
        __isset.legSledExchangeMic = true;
        SetProperty(ref _legSledExchangeMic, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool legSledContractId;
      public bool legSledContractCode;
      public bool legSledCommodityId;
      public bool legSledCommodityType;
      public bool legSledCommodityCode;
      public bool legSledExchangeMic;
    }

    public HostingExecOrderLegContractSummary() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              LegSledContractId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              LegSledContractCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              LegSledCommodityId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              LegSledCommodityType = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              LegSledCommodityCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              LegSledExchangeMic = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingExecOrderLegContractSummary");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.legSledContractId) {
        field.Name = "legSledContractId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LegSledContractId);
        oprot.WriteFieldEnd();
      }
      if (LegSledContractCode != null && __isset.legSledContractCode) {
        field.Name = "legSledContractCode";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LegSledContractCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.legSledCommodityId) {
        field.Name = "legSledCommodityId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LegSledCommodityId);
        oprot.WriteFieldEnd();
      }
      if (__isset.legSledCommodityType) {
        field.Name = "legSledCommodityType";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(LegSledCommodityType);
        oprot.WriteFieldEnd();
      }
      if (LegSledCommodityCode != null && __isset.legSledCommodityCode) {
        field.Name = "legSledCommodityCode";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LegSledCommodityCode);
        oprot.WriteFieldEnd();
      }
      if (LegSledExchangeMic != null && __isset.legSledExchangeMic) {
        field.Name = "legSledExchangeMic";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LegSledExchangeMic);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingExecOrderLegContractSummary(");
      sb.Append("LegSledContractId: ");
      sb.Append(LegSledContractId);
      sb.Append(",LegSledContractCode: ");
      sb.Append(LegSledContractCode);
      sb.Append(",LegSledCommodityId: ");
      sb.Append(LegSledCommodityId);
      sb.Append(",LegSledCommodityType: ");
      sb.Append(LegSledCommodityType);
      sb.Append(",LegSledCommodityCode: ");
      sb.Append(LegSledCommodityCode);
      sb.Append(",LegSledExchangeMic: ");
      sb.Append(LegSledExchangeMic);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
