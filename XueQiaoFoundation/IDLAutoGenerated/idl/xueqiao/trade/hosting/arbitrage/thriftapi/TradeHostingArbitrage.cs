/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.arbitrage.thriftapi
{
  public partial class TradeHostingArbitrage {
    public interface Iface {
      void createXQOrder(PlatformArgs platformArgs, HostingXQOrder order);
      #if SILVERLIGHT
      IAsyncResult Begin_createXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, HostingXQOrder order);
      void End_createXQOrder(IAsyncResult asyncResult);
      #endif
      void cancelXQOrder(PlatformArgs platformArgs, string orderId);
      #if SILVERLIGHT
      IAsyncResult Begin_cancelXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId);
      void End_cancelXQOrder(IAsyncResult asyncResult);
      #endif
      void suspendXQOrder(PlatformArgs platformArgs, string orderId);
      #if SILVERLIGHT
      IAsyncResult Begin_suspendXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId);
      void End_suspendXQOrder(IAsyncResult asyncResult);
      #endif
      void resumeXQOrder(PlatformArgs platformArgs, string orderId, HostingXQOrderResumeMode resumeMode);
      #if SILVERLIGHT
      IAsyncResult Begin_resumeXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId, HostingXQOrderResumeMode resumeMode);
      void End_resumeXQOrder(IAsyncResult asyncResult);
      #endif
      QueryEffectXQOrderIndexPage getEffectXQOrderIndexPage(PlatformArgs platformArgs, QueryEffectXQOrderIndexOption qryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getEffectXQOrderIndexPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryEffectXQOrderIndexOption qryOption, IndexedPageOption pageOption);
      QueryEffectXQOrderIndexPage End_getEffectXQOrderIndexPage(IAsyncResult asyncResult);
      #endif
      Dictionary<string, HostingXQOrder> getXQOrders(PlatformArgs platformArgs, THashSet<string> orderIds);
      #if SILVERLIGHT
      IAsyncResult Begin_getXQOrders(AsyncCallback callback, object state, PlatformArgs platformArgs, THashSet<string> orderIds);
      Dictionary<string, HostingXQOrder> End_getXQOrders(IAsyncResult asyncResult);
      #endif
      Dictionary<string, List<HostingXQTrade>> getXQTrades(PlatformArgs platformArgs, THashSet<string> orderIds);
      #if SILVERLIGHT
      IAsyncResult Begin_getXQTrades(AsyncCallback callback, object state, PlatformArgs platformArgs, THashSet<string> orderIds);
      Dictionary<string, List<HostingXQTrade>> End_getXQTrades(IAsyncResult asyncResult);
      #endif
      Dictionary<string, HostingXQOrderWithTradeList> getXQOrderWithTradeLists(PlatformArgs platformArgs, THashSet<string> orderIds);
      #if SILVERLIGHT
      IAsyncResult Begin_getXQOrderWithTradeLists(AsyncCallback callback, object state, PlatformArgs platformArgs, THashSet<string> orderIds);
      Dictionary<string, HostingXQOrderWithTradeList> End_getXQOrderWithTradeLists(IAsyncResult asyncResult);
      #endif
      HostingXQOrderExecDetail getXQOrderExecDetail(PlatformArgs platformArgs, string orderId);
      #if SILVERLIGHT
      IAsyncResult Begin_getXQOrderExecDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId);
      HostingXQOrderExecDetail End_getXQOrderExecDetail(IAsyncResult asyncResult);
      #endif
      void clearAll(PlatformArgs platformArgs);
      #if SILVERLIGHT
      IAsyncResult Begin_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs);
      void End_clearAll(IAsyncResult asyncResult);
      #endif
      Dictionary<long, HostingXQTrade> filterXQTrades(PlatformArgs platformArgs, THashSet<string> orderIds, THashSet<long> tradeIds);
      #if SILVERLIGHT
      IAsyncResult Begin_filterXQTrades(AsyncCallback callback, object state, PlatformArgs platformArgs, THashSet<string> orderIds, THashSet<long> tradeIds);
      Dictionary<long, HostingXQTrade> End_filterXQTrades(IAsyncResult asyncResult);
      #endif
      List<HostingXQTradeRelatedItem> getXQTradeRelatedItems(PlatformArgs platformArgs, string orderId, long tradeId);
      #if SILVERLIGHT
      IAsyncResult Begin_getXQTradeRelatedItems(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId, long tradeId);
      List<HostingXQTradeRelatedItem> End_getXQTradeRelatedItems(IAsyncResult asyncResult);
      #endif
      HostingXQComposeLimitOrderSettings getSystemXQComposeLimitOrderSettings(PlatformArgs platformArgs);
      #if SILVERLIGHT
      IAsyncResult Begin_getSystemXQComposeLimitOrderSettings(AsyncCallback callback, object state, PlatformArgs platformArgs);
      HostingXQComposeLimitOrderSettings End_getSystemXQComposeLimitOrderSettings(IAsyncResult asyncResult);
      #endif
      void setSystemXQComposeLimitOrderSettings(PlatformArgs platformArgs, HostingXQComposeLimitOrderSettings settings);
      #if SILVERLIGHT
      IAsyncResult Begin_setSystemXQComposeLimitOrderSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, HostingXQComposeLimitOrderSettings settings);
      void End_setSystemXQComposeLimitOrderSettings(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_createXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, HostingXQOrder order)
      {
        return send_createXQOrder(callback, state, platformArgs, order);
      }

      public void End_createXQOrder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_createXQOrder();
      }

      #endif

      public void createXQOrder(PlatformArgs platformArgs, HostingXQOrder order)
      {
        #if !SILVERLIGHT
        send_createXQOrder(platformArgs, order);
        recv_createXQOrder();

        #else
        var asyncResult = Begin_createXQOrder(null, null, platformArgs, order);
        End_createXQOrder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, HostingXQOrder order)
      #else
      public void send_createXQOrder(PlatformArgs platformArgs, HostingXQOrder order)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createXQOrder", TMessageType.Call, seqid_));
        createXQOrder_args args = new createXQOrder_args();
        args.PlatformArgs = platformArgs;
        args.Order = order;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_createXQOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createXQOrder_result result = new createXQOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_cancelXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId)
      {
        return send_cancelXQOrder(callback, state, platformArgs, orderId);
      }

      public void End_cancelXQOrder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_cancelXQOrder();
      }

      #endif

      public void cancelXQOrder(PlatformArgs platformArgs, string orderId)
      {
        #if !SILVERLIGHT
        send_cancelXQOrder(platformArgs, orderId);
        recv_cancelXQOrder();

        #else
        var asyncResult = Begin_cancelXQOrder(null, null, platformArgs, orderId);
        End_cancelXQOrder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_cancelXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId)
      #else
      public void send_cancelXQOrder(PlatformArgs platformArgs, string orderId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("cancelXQOrder", TMessageType.Call, seqid_));
        cancelXQOrder_args args = new cancelXQOrder_args();
        args.PlatformArgs = platformArgs;
        args.OrderId = orderId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_cancelXQOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancelXQOrder_result result = new cancelXQOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_suspendXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId)
      {
        return send_suspendXQOrder(callback, state, platformArgs, orderId);
      }

      public void End_suspendXQOrder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_suspendXQOrder();
      }

      #endif

      public void suspendXQOrder(PlatformArgs platformArgs, string orderId)
      {
        #if !SILVERLIGHT
        send_suspendXQOrder(platformArgs, orderId);
        recv_suspendXQOrder();

        #else
        var asyncResult = Begin_suspendXQOrder(null, null, platformArgs, orderId);
        End_suspendXQOrder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_suspendXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId)
      #else
      public void send_suspendXQOrder(PlatformArgs platformArgs, string orderId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("suspendXQOrder", TMessageType.Call, seqid_));
        suspendXQOrder_args args = new suspendXQOrder_args();
        args.PlatformArgs = platformArgs;
        args.OrderId = orderId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_suspendXQOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        suspendXQOrder_result result = new suspendXQOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_resumeXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId, HostingXQOrderResumeMode resumeMode)
      {
        return send_resumeXQOrder(callback, state, platformArgs, orderId, resumeMode);
      }

      public void End_resumeXQOrder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_resumeXQOrder();
      }

      #endif

      public void resumeXQOrder(PlatformArgs platformArgs, string orderId, HostingXQOrderResumeMode resumeMode)
      {
        #if !SILVERLIGHT
        send_resumeXQOrder(platformArgs, orderId, resumeMode);
        recv_resumeXQOrder();

        #else
        var asyncResult = Begin_resumeXQOrder(null, null, platformArgs, orderId, resumeMode);
        End_resumeXQOrder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_resumeXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId, HostingXQOrderResumeMode resumeMode)
      #else
      public void send_resumeXQOrder(PlatformArgs platformArgs, string orderId, HostingXQOrderResumeMode resumeMode)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("resumeXQOrder", TMessageType.Call, seqid_));
        resumeXQOrder_args args = new resumeXQOrder_args();
        args.PlatformArgs = platformArgs;
        args.OrderId = orderId;
        args.ResumeMode = resumeMode;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_resumeXQOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        resumeXQOrder_result result = new resumeXQOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getEffectXQOrderIndexPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryEffectXQOrderIndexOption qryOption, IndexedPageOption pageOption)
      {
        return send_getEffectXQOrderIndexPage(callback, state, platformArgs, qryOption, pageOption);
      }

      public QueryEffectXQOrderIndexPage End_getEffectXQOrderIndexPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getEffectXQOrderIndexPage();
      }

      #endif

      public QueryEffectXQOrderIndexPage getEffectXQOrderIndexPage(PlatformArgs platformArgs, QueryEffectXQOrderIndexOption qryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getEffectXQOrderIndexPage(platformArgs, qryOption, pageOption);
        return recv_getEffectXQOrderIndexPage();

        #else
        var asyncResult = Begin_getEffectXQOrderIndexPage(null, null, platformArgs, qryOption, pageOption);
        return End_getEffectXQOrderIndexPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getEffectXQOrderIndexPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryEffectXQOrderIndexOption qryOption, IndexedPageOption pageOption)
      #else
      public void send_getEffectXQOrderIndexPage(PlatformArgs platformArgs, QueryEffectXQOrderIndexOption qryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getEffectXQOrderIndexPage", TMessageType.Call, seqid_));
        getEffectXQOrderIndexPage_args args = new getEffectXQOrderIndexPage_args();
        args.PlatformArgs = platformArgs;
        args.QryOption = qryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public QueryEffectXQOrderIndexPage recv_getEffectXQOrderIndexPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getEffectXQOrderIndexPage_result result = new getEffectXQOrderIndexPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getEffectXQOrderIndexPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getXQOrders(AsyncCallback callback, object state, PlatformArgs platformArgs, THashSet<string> orderIds)
      {
        return send_getXQOrders(callback, state, platformArgs, orderIds);
      }

      public Dictionary<string, HostingXQOrder> End_getXQOrders(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getXQOrders();
      }

      #endif

      public Dictionary<string, HostingXQOrder> getXQOrders(PlatformArgs platformArgs, THashSet<string> orderIds)
      {
        #if !SILVERLIGHT
        send_getXQOrders(platformArgs, orderIds);
        return recv_getXQOrders();

        #else
        var asyncResult = Begin_getXQOrders(null, null, platformArgs, orderIds);
        return End_getXQOrders(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getXQOrders(AsyncCallback callback, object state, PlatformArgs platformArgs, THashSet<string> orderIds)
      #else
      public void send_getXQOrders(PlatformArgs platformArgs, THashSet<string> orderIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getXQOrders", TMessageType.Call, seqid_));
        getXQOrders_args args = new getXQOrders_args();
        args.PlatformArgs = platformArgs;
        args.OrderIds = orderIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, HostingXQOrder> recv_getXQOrders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getXQOrders_result result = new getXQOrders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getXQOrders failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getXQTrades(AsyncCallback callback, object state, PlatformArgs platformArgs, THashSet<string> orderIds)
      {
        return send_getXQTrades(callback, state, platformArgs, orderIds);
      }

      public Dictionary<string, List<HostingXQTrade>> End_getXQTrades(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getXQTrades();
      }

      #endif

      public Dictionary<string, List<HostingXQTrade>> getXQTrades(PlatformArgs platformArgs, THashSet<string> orderIds)
      {
        #if !SILVERLIGHT
        send_getXQTrades(platformArgs, orderIds);
        return recv_getXQTrades();

        #else
        var asyncResult = Begin_getXQTrades(null, null, platformArgs, orderIds);
        return End_getXQTrades(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getXQTrades(AsyncCallback callback, object state, PlatformArgs platformArgs, THashSet<string> orderIds)
      #else
      public void send_getXQTrades(PlatformArgs platformArgs, THashSet<string> orderIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getXQTrades", TMessageType.Call, seqid_));
        getXQTrades_args args = new getXQTrades_args();
        args.PlatformArgs = platformArgs;
        args.OrderIds = orderIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, List<HostingXQTrade>> recv_getXQTrades()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getXQTrades_result result = new getXQTrades_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getXQTrades failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getXQOrderWithTradeLists(AsyncCallback callback, object state, PlatformArgs platformArgs, THashSet<string> orderIds)
      {
        return send_getXQOrderWithTradeLists(callback, state, platformArgs, orderIds);
      }

      public Dictionary<string, HostingXQOrderWithTradeList> End_getXQOrderWithTradeLists(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getXQOrderWithTradeLists();
      }

      #endif

      public Dictionary<string, HostingXQOrderWithTradeList> getXQOrderWithTradeLists(PlatformArgs platformArgs, THashSet<string> orderIds)
      {
        #if !SILVERLIGHT
        send_getXQOrderWithTradeLists(platformArgs, orderIds);
        return recv_getXQOrderWithTradeLists();

        #else
        var asyncResult = Begin_getXQOrderWithTradeLists(null, null, platformArgs, orderIds);
        return End_getXQOrderWithTradeLists(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getXQOrderWithTradeLists(AsyncCallback callback, object state, PlatformArgs platformArgs, THashSet<string> orderIds)
      #else
      public void send_getXQOrderWithTradeLists(PlatformArgs platformArgs, THashSet<string> orderIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getXQOrderWithTradeLists", TMessageType.Call, seqid_));
        getXQOrderWithTradeLists_args args = new getXQOrderWithTradeLists_args();
        args.PlatformArgs = platformArgs;
        args.OrderIds = orderIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, HostingXQOrderWithTradeList> recv_getXQOrderWithTradeLists()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getXQOrderWithTradeLists_result result = new getXQOrderWithTradeLists_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getXQOrderWithTradeLists failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getXQOrderExecDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId)
      {
        return send_getXQOrderExecDetail(callback, state, platformArgs, orderId);
      }

      public HostingXQOrderExecDetail End_getXQOrderExecDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getXQOrderExecDetail();
      }

      #endif

      public HostingXQOrderExecDetail getXQOrderExecDetail(PlatformArgs platformArgs, string orderId)
      {
        #if !SILVERLIGHT
        send_getXQOrderExecDetail(platformArgs, orderId);
        return recv_getXQOrderExecDetail();

        #else
        var asyncResult = Begin_getXQOrderExecDetail(null, null, platformArgs, orderId);
        return End_getXQOrderExecDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getXQOrderExecDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId)
      #else
      public void send_getXQOrderExecDetail(PlatformArgs platformArgs, string orderId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getXQOrderExecDetail", TMessageType.Call, seqid_));
        getXQOrderExecDetail_args args = new getXQOrderExecDetail_args();
        args.PlatformArgs = platformArgs;
        args.OrderId = orderId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingXQOrderExecDetail recv_getXQOrderExecDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getXQOrderExecDetail_result result = new getXQOrderExecDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getXQOrderExecDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs)
      {
        return send_clearAll(callback, state, platformArgs);
      }

      public void End_clearAll(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_clearAll();
      }

      #endif

      public void clearAll(PlatformArgs platformArgs)
      {
        #if !SILVERLIGHT
        send_clearAll(platformArgs);
        recv_clearAll();

        #else
        var asyncResult = Begin_clearAll(null, null, platformArgs);
        End_clearAll(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs)
      #else
      public void send_clearAll(PlatformArgs platformArgs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("clearAll", TMessageType.Call, seqid_));
        clearAll_args args = new clearAll_args();
        args.PlatformArgs = platformArgs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_clearAll()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        clearAll_result result = new clearAll_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_filterXQTrades(AsyncCallback callback, object state, PlatformArgs platformArgs, THashSet<string> orderIds, THashSet<long> tradeIds)
      {
        return send_filterXQTrades(callback, state, platformArgs, orderIds, tradeIds);
      }

      public Dictionary<long, HostingXQTrade> End_filterXQTrades(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_filterXQTrades();
      }

      #endif

      public Dictionary<long, HostingXQTrade> filterXQTrades(PlatformArgs platformArgs, THashSet<string> orderIds, THashSet<long> tradeIds)
      {
        #if !SILVERLIGHT
        send_filterXQTrades(platformArgs, orderIds, tradeIds);
        return recv_filterXQTrades();

        #else
        var asyncResult = Begin_filterXQTrades(null, null, platformArgs, orderIds, tradeIds);
        return End_filterXQTrades(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_filterXQTrades(AsyncCallback callback, object state, PlatformArgs platformArgs, THashSet<string> orderIds, THashSet<long> tradeIds)
      #else
      public void send_filterXQTrades(PlatformArgs platformArgs, THashSet<string> orderIds, THashSet<long> tradeIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("filterXQTrades", TMessageType.Call, seqid_));
        filterXQTrades_args args = new filterXQTrades_args();
        args.PlatformArgs = platformArgs;
        args.OrderIds = orderIds;
        args.TradeIds = tradeIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<long, HostingXQTrade> recv_filterXQTrades()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        filterXQTrades_result result = new filterXQTrades_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "filterXQTrades failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getXQTradeRelatedItems(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId, long tradeId)
      {
        return send_getXQTradeRelatedItems(callback, state, platformArgs, orderId, tradeId);
      }

      public List<HostingXQTradeRelatedItem> End_getXQTradeRelatedItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getXQTradeRelatedItems();
      }

      #endif

      public List<HostingXQTradeRelatedItem> getXQTradeRelatedItems(PlatformArgs platformArgs, string orderId, long tradeId)
      {
        #if !SILVERLIGHT
        send_getXQTradeRelatedItems(platformArgs, orderId, tradeId);
        return recv_getXQTradeRelatedItems();

        #else
        var asyncResult = Begin_getXQTradeRelatedItems(null, null, platformArgs, orderId, tradeId);
        return End_getXQTradeRelatedItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getXQTradeRelatedItems(AsyncCallback callback, object state, PlatformArgs platformArgs, string orderId, long tradeId)
      #else
      public void send_getXQTradeRelatedItems(PlatformArgs platformArgs, string orderId, long tradeId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getXQTradeRelatedItems", TMessageType.Call, seqid_));
        getXQTradeRelatedItems_args args = new getXQTradeRelatedItems_args();
        args.PlatformArgs = platformArgs;
        args.OrderId = orderId;
        args.TradeId = tradeId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<HostingXQTradeRelatedItem> recv_getXQTradeRelatedItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getXQTradeRelatedItems_result result = new getXQTradeRelatedItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getXQTradeRelatedItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSystemXQComposeLimitOrderSettings(AsyncCallback callback, object state, PlatformArgs platformArgs)
      {
        return send_getSystemXQComposeLimitOrderSettings(callback, state, platformArgs);
      }

      public HostingXQComposeLimitOrderSettings End_getSystemXQComposeLimitOrderSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSystemXQComposeLimitOrderSettings();
      }

      #endif

      public HostingXQComposeLimitOrderSettings getSystemXQComposeLimitOrderSettings(PlatformArgs platformArgs)
      {
        #if !SILVERLIGHT
        send_getSystemXQComposeLimitOrderSettings(platformArgs);
        return recv_getSystemXQComposeLimitOrderSettings();

        #else
        var asyncResult = Begin_getSystemXQComposeLimitOrderSettings(null, null, platformArgs);
        return End_getSystemXQComposeLimitOrderSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSystemXQComposeLimitOrderSettings(AsyncCallback callback, object state, PlatformArgs platformArgs)
      #else
      public void send_getSystemXQComposeLimitOrderSettings(PlatformArgs platformArgs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSystemXQComposeLimitOrderSettings", TMessageType.Call, seqid_));
        getSystemXQComposeLimitOrderSettings_args args = new getSystemXQComposeLimitOrderSettings_args();
        args.PlatformArgs = platformArgs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingXQComposeLimitOrderSettings recv_getSystemXQComposeLimitOrderSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSystemXQComposeLimitOrderSettings_result result = new getSystemXQComposeLimitOrderSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSystemXQComposeLimitOrderSettings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setSystemXQComposeLimitOrderSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, HostingXQComposeLimitOrderSettings settings)
      {
        return send_setSystemXQComposeLimitOrderSettings(callback, state, platformArgs, settings);
      }

      public void End_setSystemXQComposeLimitOrderSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setSystemXQComposeLimitOrderSettings();
      }

      #endif

      public void setSystemXQComposeLimitOrderSettings(PlatformArgs platformArgs, HostingXQComposeLimitOrderSettings settings)
      {
        #if !SILVERLIGHT
        send_setSystemXQComposeLimitOrderSettings(platformArgs, settings);
        recv_setSystemXQComposeLimitOrderSettings();

        #else
        var asyncResult = Begin_setSystemXQComposeLimitOrderSettings(null, null, platformArgs, settings);
        End_setSystemXQComposeLimitOrderSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setSystemXQComposeLimitOrderSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, HostingXQComposeLimitOrderSettings settings)
      #else
      public void send_setSystemXQComposeLimitOrderSettings(PlatformArgs platformArgs, HostingXQComposeLimitOrderSettings settings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setSystemXQComposeLimitOrderSettings", TMessageType.Call, seqid_));
        setSystemXQComposeLimitOrderSettings_args args = new setSystemXQComposeLimitOrderSettings_args();
        args.PlatformArgs = platformArgs;
        args.Settings = settings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setSystemXQComposeLimitOrderSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setSystemXQComposeLimitOrderSettings_result result = new setSystemXQComposeLimitOrderSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["createXQOrder"] = createXQOrder_Process;
        processMap_["cancelXQOrder"] = cancelXQOrder_Process;
        processMap_["suspendXQOrder"] = suspendXQOrder_Process;
        processMap_["resumeXQOrder"] = resumeXQOrder_Process;
        processMap_["getEffectXQOrderIndexPage"] = getEffectXQOrderIndexPage_Process;
        processMap_["getXQOrders"] = getXQOrders_Process;
        processMap_["getXQTrades"] = getXQTrades_Process;
        processMap_["getXQOrderWithTradeLists"] = getXQOrderWithTradeLists_Process;
        processMap_["getXQOrderExecDetail"] = getXQOrderExecDetail_Process;
        processMap_["clearAll"] = clearAll_Process;
        processMap_["filterXQTrades"] = filterXQTrades_Process;
        processMap_["getXQTradeRelatedItems"] = getXQTradeRelatedItems_Process;
        processMap_["getSystemXQComposeLimitOrderSettings"] = getSystemXQComposeLimitOrderSettings_Process;
        processMap_["setSystemXQComposeLimitOrderSettings"] = setSystemXQComposeLimitOrderSettings_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void createXQOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createXQOrder_args args = new createXQOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createXQOrder_result result = new createXQOrder_result();
        try {
          iface_.createXQOrder(args.PlatformArgs, args.Order);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("createXQOrder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancelXQOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancelXQOrder_args args = new cancelXQOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancelXQOrder_result result = new cancelXQOrder_result();
        try {
          iface_.cancelXQOrder(args.PlatformArgs, args.OrderId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("cancelXQOrder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void suspendXQOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        suspendXQOrder_args args = new suspendXQOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        suspendXQOrder_result result = new suspendXQOrder_result();
        try {
          iface_.suspendXQOrder(args.PlatformArgs, args.OrderId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("suspendXQOrder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void resumeXQOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        resumeXQOrder_args args = new resumeXQOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        resumeXQOrder_result result = new resumeXQOrder_result();
        try {
          iface_.resumeXQOrder(args.PlatformArgs, args.OrderId, args.ResumeMode);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("resumeXQOrder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getEffectXQOrderIndexPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getEffectXQOrderIndexPage_args args = new getEffectXQOrderIndexPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getEffectXQOrderIndexPage_result result = new getEffectXQOrderIndexPage_result();
        try {
          result.Success = iface_.getEffectXQOrderIndexPage(args.PlatformArgs, args.QryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getEffectXQOrderIndexPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getXQOrders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getXQOrders_args args = new getXQOrders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getXQOrders_result result = new getXQOrders_result();
        try {
          result.Success = iface_.getXQOrders(args.PlatformArgs, args.OrderIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getXQOrders", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getXQTrades_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getXQTrades_args args = new getXQTrades_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getXQTrades_result result = new getXQTrades_result();
        try {
          result.Success = iface_.getXQTrades(args.PlatformArgs, args.OrderIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getXQTrades", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getXQOrderWithTradeLists_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getXQOrderWithTradeLists_args args = new getXQOrderWithTradeLists_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getXQOrderWithTradeLists_result result = new getXQOrderWithTradeLists_result();
        try {
          result.Success = iface_.getXQOrderWithTradeLists(args.PlatformArgs, args.OrderIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getXQOrderWithTradeLists", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getXQOrderExecDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getXQOrderExecDetail_args args = new getXQOrderExecDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getXQOrderExecDetail_result result = new getXQOrderExecDetail_result();
        try {
          result.Success = iface_.getXQOrderExecDetail(args.PlatformArgs, args.OrderId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getXQOrderExecDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void clearAll_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        clearAll_args args = new clearAll_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        clearAll_result result = new clearAll_result();
        try {
          iface_.clearAll(args.PlatformArgs);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("clearAll", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void filterXQTrades_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        filterXQTrades_args args = new filterXQTrades_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        filterXQTrades_result result = new filterXQTrades_result();
        try {
          result.Success = iface_.filterXQTrades(args.PlatformArgs, args.OrderIds, args.TradeIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("filterXQTrades", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getXQTradeRelatedItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getXQTradeRelatedItems_args args = new getXQTradeRelatedItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getXQTradeRelatedItems_result result = new getXQTradeRelatedItems_result();
        try {
          result.Success = iface_.getXQTradeRelatedItems(args.PlatformArgs, args.OrderId, args.TradeId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getXQTradeRelatedItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSystemXQComposeLimitOrderSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSystemXQComposeLimitOrderSettings_args args = new getSystemXQComposeLimitOrderSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSystemXQComposeLimitOrderSettings_result result = new getSystemXQComposeLimitOrderSettings_result();
        try {
          result.Success = iface_.getSystemXQComposeLimitOrderSettings(args.PlatformArgs);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getSystemXQComposeLimitOrderSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setSystemXQComposeLimitOrderSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setSystemXQComposeLimitOrderSettings_args args = new setSystemXQComposeLimitOrderSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setSystemXQComposeLimitOrderSettings_result result = new setSystemXQComposeLimitOrderSettings_result();
        try {
          iface_.setSystemXQComposeLimitOrderSettings(args.PlatformArgs, args.Settings);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setSystemXQComposeLimitOrderSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createXQOrder_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private HostingXQOrder _order;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public HostingXQOrder Order
      {
        get
        {
          return _order;
        }
        set
        {
          __isset.order = true;
          SetProperty(ref _order, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool order;
      }

      public createXQOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Order = new HostingXQOrder();
                Order.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createXQOrder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Order != null && __isset.order) {
          field.Name = "order";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Order.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createXQOrder_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Order: ");
        sb.Append(Order== null ? "<null>" : Order.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createXQOrder_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public createXQOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createXQOrder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createXQOrder_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancelXQOrder_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private string _orderId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public string OrderId
      {
        get
        {
          return _orderId;
        }
        set
        {
          __isset.orderId = true;
          SetProperty(ref _orderId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool orderId;
      }

      public cancelXQOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OrderId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancelXQOrder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderId != null && __isset.orderId) {
          field.Name = "orderId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OrderId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancelXQOrder_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",OrderId: ");
        sb.Append(OrderId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancelXQOrder_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public cancelXQOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancelXQOrder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancelXQOrder_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class suspendXQOrder_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private string _orderId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public string OrderId
      {
        get
        {
          return _orderId;
        }
        set
        {
          __isset.orderId = true;
          SetProperty(ref _orderId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool orderId;
      }

      public suspendXQOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OrderId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("suspendXQOrder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderId != null && __isset.orderId) {
          field.Name = "orderId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OrderId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("suspendXQOrder_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",OrderId: ");
        sb.Append(OrderId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class suspendXQOrder_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public suspendXQOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("suspendXQOrder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("suspendXQOrder_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resumeXQOrder_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private string _orderId;
      private HostingXQOrderResumeMode _resumeMode;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public string OrderId
      {
        get
        {
          return _orderId;
        }
        set
        {
          __isset.orderId = true;
          SetProperty(ref _orderId, value);
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="HostingXQOrderResumeMode"/>
      /// </summary>
      public HostingXQOrderResumeMode ResumeMode
      {
        get
        {
          return _resumeMode;
        }
        set
        {
          __isset.resumeMode = true;
          SetProperty(ref _resumeMode, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool orderId;
        public bool resumeMode;
      }

      public resumeXQOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OrderId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                ResumeMode = (HostingXQOrderResumeMode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resumeXQOrder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderId != null && __isset.orderId) {
          field.Name = "orderId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OrderId);
          oprot.WriteFieldEnd();
        }
        if (__isset.resumeMode) {
          field.Name = "resumeMode";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ResumeMode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("resumeXQOrder_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",OrderId: ");
        sb.Append(OrderId);
        sb.Append(",ResumeMode: ");
        sb.Append(ResumeMode);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resumeXQOrder_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public resumeXQOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resumeXQOrder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("resumeXQOrder_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEffectXQOrderIndexPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryEffectXQOrderIndexOption _qryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryEffectXQOrderIndexOption QryOption
      {
        get
        {
          return _qryOption;
        }
        set
        {
          __isset.qryOption = true;
          SetProperty(ref _qryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool qryOption;
        public bool pageOption;
      }

      public getEffectXQOrderIndexPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QryOption = new QueryEffectXQOrderIndexOption();
                QryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEffectXQOrderIndexPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QryOption != null && __isset.qryOption) {
          field.Name = "qryOption";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getEffectXQOrderIndexPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QryOption: ");
        sb.Append(QryOption== null ? "<null>" : QryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEffectXQOrderIndexPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private QueryEffectXQOrderIndexPage _success;
      private ErrorInfo _err;

      public QueryEffectXQOrderIndexPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getEffectXQOrderIndexPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new QueryEffectXQOrderIndexPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEffectXQOrderIndexPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getEffectXQOrderIndexPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrders_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private THashSet<string> _orderIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public THashSet<string> OrderIds
      {
        get
        {
          return _orderIds;
        }
        set
        {
          __isset.orderIds = true;
          SetProperty(ref _orderIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool orderIds;
      }

      public getXQOrders_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  OrderIds = new THashSet<string>();
                  TSet _set97 = iprot.ReadSetBegin();
                  for( int _i98 = 0; _i98 < _set97.Count; ++_i98)
                  {
                    string _elem99 = null;
                    _elem99 = iprot.ReadString();
                    OrderIds.Add(_elem99);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrders_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderIds != null && __isset.orderIds) {
          field.Name = "orderIds";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, OrderIds.Count));
            foreach (string _iter100 in OrderIds)
            {
              oprot.WriteString(_iter100);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrders_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",OrderIds: ");
        if (OrderIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (string _iter101 in OrderIds)
          {
            sb.Append(_iter101.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrders_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private Dictionary<string, HostingXQOrder> _success;
      private ErrorInfo _err;

      public Dictionary<string, HostingXQOrder> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getXQOrders_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, HostingXQOrder>();
                  TMap _map102 = iprot.ReadMapBegin();
                  for( int _i103 = 0; _i103 < _map102.Count; ++_i103)
                  {
                    string _key104;
                    HostingXQOrder _val105;
                    _key104 = iprot.ReadString();
                    _val105 = new HostingXQOrder();
                    _val105.Read(iprot);
                    Success[_key104] = _val105;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrders_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter106 in Success.Keys)
              {
                oprot.WriteString(_iter106);
                Success[_iter106].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrders_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (string _iter107 in Success.Keys)
          {
            sb.Append(_iter107.ToString());
            sb.Append(":");
            sb.Append(Success[_iter107].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQTrades_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private THashSet<string> _orderIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public THashSet<string> OrderIds
      {
        get
        {
          return _orderIds;
        }
        set
        {
          __isset.orderIds = true;
          SetProperty(ref _orderIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool orderIds;
      }

      public getXQTrades_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  OrderIds = new THashSet<string>();
                  TSet _set108 = iprot.ReadSetBegin();
                  for( int _i109 = 0; _i109 < _set108.Count; ++_i109)
                  {
                    string _elem110 = null;
                    _elem110 = iprot.ReadString();
                    OrderIds.Add(_elem110);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQTrades_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderIds != null && __isset.orderIds) {
          field.Name = "orderIds";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, OrderIds.Count));
            foreach (string _iter111 in OrderIds)
            {
              oprot.WriteString(_iter111);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQTrades_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",OrderIds: ");
        if (OrderIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (string _iter112 in OrderIds)
          {
            sb.Append(_iter112.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQTrades_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private Dictionary<string, List<HostingXQTrade>> _success;
      private ErrorInfo _err;

      public Dictionary<string, List<HostingXQTrade>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getXQTrades_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, List<HostingXQTrade>>();
                  TMap _map113 = iprot.ReadMapBegin();
                  for( int _i114 = 0; _i114 < _map113.Count; ++_i114)
                  {
                    string _key115;
                    List<HostingXQTrade> _val116;
                    _key115 = iprot.ReadString();
                    {
                      _val116 = new List<HostingXQTrade>();
                      TList _list117 = iprot.ReadListBegin();
                      for( int _i118 = 0; _i118 < _list117.Count; ++_i118)
                      {
                        HostingXQTrade _elem119 = new HostingXQTrade();
                        _elem119 = new HostingXQTrade();
                        _elem119.Read(iprot);
                        _val116.Add(_elem119);
                      }
                      iprot.ReadListEnd();
                    }
                    Success[_key115] = _val116;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQTrades_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.List, Success.Count));
              foreach (string _iter120 in Success.Keys)
              {
                oprot.WriteString(_iter120);
                {
                  oprot.WriteListBegin(new TList(TType.Struct, Success[_iter120].Count));
                  foreach (HostingXQTrade _iter121 in Success[_iter120])
                  {
                    _iter121.Write(oprot);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQTrades_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (string _iter122 in Success.Keys)
          {
            sb.Append(_iter122.ToString());
            sb.Append(":");
            sb.Append(Success[_iter122].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrderWithTradeLists_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private THashSet<string> _orderIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public THashSet<string> OrderIds
      {
        get
        {
          return _orderIds;
        }
        set
        {
          __isset.orderIds = true;
          SetProperty(ref _orderIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool orderIds;
      }

      public getXQOrderWithTradeLists_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  OrderIds = new THashSet<string>();
                  TSet _set123 = iprot.ReadSetBegin();
                  for( int _i124 = 0; _i124 < _set123.Count; ++_i124)
                  {
                    string _elem125 = null;
                    _elem125 = iprot.ReadString();
                    OrderIds.Add(_elem125);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrderWithTradeLists_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderIds != null && __isset.orderIds) {
          field.Name = "orderIds";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, OrderIds.Count));
            foreach (string _iter126 in OrderIds)
            {
              oprot.WriteString(_iter126);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrderWithTradeLists_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",OrderIds: ");
        if (OrderIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (string _iter127 in OrderIds)
          {
            sb.Append(_iter127.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrderWithTradeLists_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private Dictionary<string, HostingXQOrderWithTradeList> _success;
      private ErrorInfo _err;

      public Dictionary<string, HostingXQOrderWithTradeList> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getXQOrderWithTradeLists_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, HostingXQOrderWithTradeList>();
                  TMap _map128 = iprot.ReadMapBegin();
                  for( int _i129 = 0; _i129 < _map128.Count; ++_i129)
                  {
                    string _key130;
                    HostingXQOrderWithTradeList _val131;
                    _key130 = iprot.ReadString();
                    _val131 = new HostingXQOrderWithTradeList();
                    _val131.Read(iprot);
                    Success[_key130] = _val131;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrderWithTradeLists_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter132 in Success.Keys)
              {
                oprot.WriteString(_iter132);
                Success[_iter132].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrderWithTradeLists_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (string _iter133 in Success.Keys)
          {
            sb.Append(_iter133.ToString());
            sb.Append(":");
            sb.Append(Success[_iter133].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrderExecDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private string _orderId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public string OrderId
      {
        get
        {
          return _orderId;
        }
        set
        {
          __isset.orderId = true;
          SetProperty(ref _orderId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool orderId;
      }

      public getXQOrderExecDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OrderId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrderExecDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderId != null && __isset.orderId) {
          field.Name = "orderId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OrderId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrderExecDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",OrderId: ");
        sb.Append(OrderId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrderExecDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingXQOrderExecDetail _success;
      private ErrorInfo _err;

      public HostingXQOrderExecDetail Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getXQOrderExecDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingXQOrderExecDetail();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrderExecDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrderExecDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearAll_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
      }

      public clearAll_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearAll_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearAll_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearAll_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public clearAll_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearAll_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearAll_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class filterXQTrades_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private THashSet<string> _orderIds;
      private THashSet<long> _tradeIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public THashSet<string> OrderIds
      {
        get
        {
          return _orderIds;
        }
        set
        {
          __isset.orderIds = true;
          SetProperty(ref _orderIds, value);
        }
      }

      public THashSet<long> TradeIds
      {
        get
        {
          return _tradeIds;
        }
        set
        {
          __isset.tradeIds = true;
          SetProperty(ref _tradeIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool orderIds;
        public bool tradeIds;
      }

      public filterXQTrades_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  OrderIds = new THashSet<string>();
                  TSet _set134 = iprot.ReadSetBegin();
                  for( int _i135 = 0; _i135 < _set134.Count; ++_i135)
                  {
                    string _elem136 = null;
                    _elem136 = iprot.ReadString();
                    OrderIds.Add(_elem136);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  TradeIds = new THashSet<long>();
                  TSet _set137 = iprot.ReadSetBegin();
                  for( int _i138 = 0; _i138 < _set137.Count; ++_i138)
                  {
                    long _elem139 = 0;
                    _elem139 = iprot.ReadI64();
                    TradeIds.Add(_elem139);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("filterXQTrades_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderIds != null && __isset.orderIds) {
          field.Name = "orderIds";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, OrderIds.Count));
            foreach (string _iter140 in OrderIds)
            {
              oprot.WriteString(_iter140);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (TradeIds != null && __isset.tradeIds) {
          field.Name = "tradeIds";
          field.Type = TType.Set;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I64, TradeIds.Count));
            foreach (long _iter141 in TradeIds)
            {
              oprot.WriteI64(_iter141);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("filterXQTrades_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",OrderIds: ");
        if (OrderIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (string _iter142 in OrderIds)
          {
            sb.Append(_iter142.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",TradeIds: ");
        if (TradeIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (long _iter143 in TradeIds)
          {
            sb.Append(_iter143.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class filterXQTrades_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private Dictionary<long, HostingXQTrade> _success;
      private ErrorInfo _err;

      public Dictionary<long, HostingXQTrade> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public filterXQTrades_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<long, HostingXQTrade>();
                  TMap _map144 = iprot.ReadMapBegin();
                  for( int _i145 = 0; _i145 < _map144.Count; ++_i145)
                  {
                    long _key146;
                    HostingXQTrade _val147;
                    _key146 = iprot.ReadI64();
                    _val147 = new HostingXQTrade();
                    _val147.Read(iprot);
                    Success[_key146] = _val147;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("filterXQTrades_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, Success.Count));
              foreach (long _iter148 in Success.Keys)
              {
                oprot.WriteI64(_iter148);
                Success[_iter148].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("filterXQTrades_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (long _iter149 in Success.Keys)
          {
            sb.Append(_iter149.ToString());
            sb.Append(":");
            sb.Append(Success[_iter149].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQTradeRelatedItems_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private string _orderId;
      private long _tradeId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public string OrderId
      {
        get
        {
          return _orderId;
        }
        set
        {
          __isset.orderId = true;
          SetProperty(ref _orderId, value);
        }
      }

      public long TradeId
      {
        get
        {
          return _tradeId;
        }
        set
        {
          __isset.tradeId = true;
          SetProperty(ref _tradeId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool orderId;
        public bool tradeId;
      }

      public getXQTradeRelatedItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OrderId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TradeId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQTradeRelatedItems_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderId != null && __isset.orderId) {
          field.Name = "orderId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OrderId);
          oprot.WriteFieldEnd();
        }
        if (__isset.tradeId) {
          field.Name = "tradeId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TradeId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQTradeRelatedItems_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",OrderId: ");
        sb.Append(OrderId);
        sb.Append(",TradeId: ");
        sb.Append(TradeId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQTradeRelatedItems_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<HostingXQTradeRelatedItem> _success;
      private ErrorInfo _err;

      public List<HostingXQTradeRelatedItem> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getXQTradeRelatedItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<HostingXQTradeRelatedItem>();
                  TList _list150 = iprot.ReadListBegin();
                  for( int _i151 = 0; _i151 < _list150.Count; ++_i151)
                  {
                    HostingXQTradeRelatedItem _elem152 = new HostingXQTradeRelatedItem();
                    _elem152 = new HostingXQTradeRelatedItem();
                    _elem152.Read(iprot);
                    Success.Add(_elem152);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQTradeRelatedItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (HostingXQTradeRelatedItem _iter153 in Success)
              {
                _iter153.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQTradeRelatedItems_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (HostingXQTradeRelatedItem _iter154 in Success)
          {
            sb.Append(_iter154.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSystemXQComposeLimitOrderSettings_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
      }

      public getSystemXQComposeLimitOrderSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSystemXQComposeLimitOrderSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSystemXQComposeLimitOrderSettings_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSystemXQComposeLimitOrderSettings_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingXQComposeLimitOrderSettings _success;
      private ErrorInfo _err;

      public HostingXQComposeLimitOrderSettings Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getSystemXQComposeLimitOrderSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingXQComposeLimitOrderSettings();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSystemXQComposeLimitOrderSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSystemXQComposeLimitOrderSettings_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setSystemXQComposeLimitOrderSettings_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private HostingXQComposeLimitOrderSettings _settings;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public HostingXQComposeLimitOrderSettings Settings
      {
        get
        {
          return _settings;
        }
        set
        {
          __isset.settings = true;
          SetProperty(ref _settings, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool settings;
      }

      public setSystemXQComposeLimitOrderSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Settings = new HostingXQComposeLimitOrderSettings();
                Settings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setSystemXQComposeLimitOrderSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Settings != null && __isset.settings) {
          field.Name = "settings";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Settings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setSystemXQComposeLimitOrderSettings_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Settings: ");
        sb.Append(Settings== null ? "<null>" : Settings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setSystemXQComposeLimitOrderSettings_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public setSystemXQComposeLimitOrderSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setSystemXQComposeLimitOrderSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setSystemXQComposeLimitOrderSettings_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
