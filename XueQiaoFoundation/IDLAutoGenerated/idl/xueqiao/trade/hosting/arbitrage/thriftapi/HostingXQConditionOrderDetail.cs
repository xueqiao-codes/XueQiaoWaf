/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.arbitrage.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingXQConditionOrderDetail : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private HostingXQEffectDate _effectDate;
    private List<HostingXQCondition> _conditions;
    private HostingXQConditionOrderLabel _label;

    public HostingXQEffectDate EffectDate
    {
      get
      {
        return _effectDate;
      }
      set
      {
        __isset.effectDate = true;
        SetProperty(ref _effectDate, value);
      }
    }

    public List<HostingXQCondition> Conditions
    {
      get
      {
        return _conditions;
      }
      set
      {
        __isset.conditions = true;
        SetProperty(ref _conditions, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="HostingXQConditionOrderLabel"/>
    /// </summary>
    public HostingXQConditionOrderLabel Label
    {
      get
      {
        return _label;
      }
      set
      {
        __isset.label = true;
        SetProperty(ref _label, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool effectDate;
      public bool conditions;
      public bool label;
    }

    public HostingXQConditionOrderDetail() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              EffectDate = new HostingXQEffectDate();
              EffectDate.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Conditions = new List<HostingXQCondition>();
                TList _list36 = iprot.ReadListBegin();
                for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                {
                  HostingXQCondition _elem38 = new HostingXQCondition();
                  _elem38 = new HostingXQCondition();
                  _elem38.Read(iprot);
                  Conditions.Add(_elem38);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Label = (HostingXQConditionOrderLabel)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingXQConditionOrderDetail");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (EffectDate != null && __isset.effectDate) {
        field.Name = "effectDate";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        EffectDate.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Conditions != null && __isset.conditions) {
        field.Name = "conditions";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Conditions.Count));
          foreach (HostingXQCondition _iter39 in Conditions)
          {
            _iter39.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.label) {
        field.Name = "label";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Label);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingXQConditionOrderDetail(");
      sb.Append("EffectDate: ");
      sb.Append(EffectDate== null ? "<null>" : EffectDate.ToString());
      sb.Append(",Conditions: ");
      if (Conditions == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (HostingXQCondition _iter40 in Conditions)
        {
          sb.Append(_iter40.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",Label: ");
      sb.Append(Label);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
