/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.arbitrage.thriftapi
{

  /// <summary>
  /// 针对组合限价单的设置
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingXQComposeLimitOrderSettings : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _defaultChaseTicks;
    private int _maxChaseTicks;
    private int _maxInvolRevokeLimitNum;
    private int _defaultInvolRevokeLimitNum;
    private double _defaultQuantityRatio;
    private double _minQuantityRatio;
    private double _defaultPriceProtectRatio;
    private double _maxPriceProtectRatio;

    public int DefaultChaseTicks
    {
      get
      {
        return _defaultChaseTicks;
      }
      set
      {
        __isset.defaultChaseTicks = true;
        SetProperty(ref _defaultChaseTicks, value);
      }
    }

    public int MaxChaseTicks
    {
      get
      {
        return _maxChaseTicks;
      }
      set
      {
        __isset.maxChaseTicks = true;
        SetProperty(ref _maxChaseTicks, value);
      }
    }

    public int MaxInvolRevokeLimitNum
    {
      get
      {
        return _maxInvolRevokeLimitNum;
      }
      set
      {
        __isset.maxInvolRevokeLimitNum = true;
        SetProperty(ref _maxInvolRevokeLimitNum, value);
      }
    }

    public int DefaultInvolRevokeLimitNum
    {
      get
      {
        return _defaultInvolRevokeLimitNum;
      }
      set
      {
        __isset.defaultInvolRevokeLimitNum = true;
        SetProperty(ref _defaultInvolRevokeLimitNum, value);
      }
    }

    public double DefaultQuantityRatio
    {
      get
      {
        return _defaultQuantityRatio;
      }
      set
      {
        __isset.defaultQuantityRatio = true;
        SetProperty(ref _defaultQuantityRatio, value);
      }
    }

    public double MinQuantityRatio
    {
      get
      {
        return _minQuantityRatio;
      }
      set
      {
        __isset.minQuantityRatio = true;
        SetProperty(ref _minQuantityRatio, value);
      }
    }

    public double DefaultPriceProtectRatio
    {
      get
      {
        return _defaultPriceProtectRatio;
      }
      set
      {
        __isset.defaultPriceProtectRatio = true;
        SetProperty(ref _defaultPriceProtectRatio, value);
      }
    }

    public double MaxPriceProtectRatio
    {
      get
      {
        return _maxPriceProtectRatio;
      }
      set
      {
        __isset.maxPriceProtectRatio = true;
        SetProperty(ref _maxPriceProtectRatio, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool defaultChaseTicks;
      public bool maxChaseTicks;
      public bool maxInvolRevokeLimitNum;
      public bool defaultInvolRevokeLimitNum;
      public bool defaultQuantityRatio;
      public bool minQuantityRatio;
      public bool defaultPriceProtectRatio;
      public bool maxPriceProtectRatio;
    }

    public HostingXQComposeLimitOrderSettings() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DefaultChaseTicks = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              MaxChaseTicks = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              MaxInvolRevokeLimitNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              DefaultInvolRevokeLimitNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              DefaultQuantityRatio = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              MinQuantityRatio = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              DefaultPriceProtectRatio = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              MaxPriceProtectRatio = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingXQComposeLimitOrderSettings");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.defaultChaseTicks) {
        field.Name = "defaultChaseTicks";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DefaultChaseTicks);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxChaseTicks) {
        field.Name = "maxChaseTicks";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxChaseTicks);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxInvolRevokeLimitNum) {
        field.Name = "maxInvolRevokeLimitNum";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxInvolRevokeLimitNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.defaultInvolRevokeLimitNum) {
        field.Name = "defaultInvolRevokeLimitNum";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DefaultInvolRevokeLimitNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.defaultQuantityRatio) {
        field.Name = "defaultQuantityRatio";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(DefaultQuantityRatio);
        oprot.WriteFieldEnd();
      }
      if (__isset.minQuantityRatio) {
        field.Name = "minQuantityRatio";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(MinQuantityRatio);
        oprot.WriteFieldEnd();
      }
      if (__isset.defaultPriceProtectRatio) {
        field.Name = "defaultPriceProtectRatio";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(DefaultPriceProtectRatio);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxPriceProtectRatio) {
        field.Name = "maxPriceProtectRatio";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(MaxPriceProtectRatio);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingXQComposeLimitOrderSettings(");
      sb.Append("DefaultChaseTicks: ");
      sb.Append(DefaultChaseTicks);
      sb.Append(",MaxChaseTicks: ");
      sb.Append(MaxChaseTicks);
      sb.Append(",MaxInvolRevokeLimitNum: ");
      sb.Append(MaxInvolRevokeLimitNum);
      sb.Append(",DefaultInvolRevokeLimitNum: ");
      sb.Append(DefaultInvolRevokeLimitNum);
      sb.Append(",DefaultQuantityRatio: ");
      sb.Append(DefaultQuantityRatio);
      sb.Append(",MinQuantityRatio: ");
      sb.Append(MinQuantityRatio);
      sb.Append(",DefaultPriceProtectRatio: ");
      sb.Append(DefaultPriceProtectRatio);
      sb.Append(",MaxPriceProtectRatio: ");
      sb.Append(MaxPriceProtectRatio);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
