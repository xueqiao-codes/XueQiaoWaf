/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.arbitrage.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingXQComposeLimitOrderParallelParams : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private Dictionary<long, HostingXQComposeLimitOrderLegChaseParam> _legChaseParams;
    private Dictionary<long, HostingXQComposeOrderLimitLegSendOrderExtraParam> _legSendOrderExtraParam;

    public Dictionary<long, HostingXQComposeLimitOrderLegChaseParam> LegChaseParams
    {
      get
      {
        return _legChaseParams;
      }
      set
      {
        __isset.legChaseParams = true;
        SetProperty(ref _legChaseParams, value);
      }
    }

    public Dictionary<long, HostingXQComposeOrderLimitLegSendOrderExtraParam> LegSendOrderExtraParam
    {
      get
      {
        return _legSendOrderExtraParam;
      }
      set
      {
        __isset.legSendOrderExtraParam = true;
        SetProperty(ref _legSendOrderExtraParam, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool legChaseParams;
      public bool legSendOrderExtraParam;
    }

    public HostingXQComposeLimitOrderParallelParams() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                LegChaseParams = new Dictionary<long, HostingXQComposeLimitOrderLegChaseParam>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  long _key2;
                  HostingXQComposeLimitOrderLegChaseParam _val3;
                  _key2 = iprot.ReadI64();
                  _val3 = new HostingXQComposeLimitOrderLegChaseParam();
                  _val3.Read(iprot);
                  LegChaseParams[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                LegSendOrderExtraParam = new Dictionary<long, HostingXQComposeOrderLimitLegSendOrderExtraParam>();
                TMap _map4 = iprot.ReadMapBegin();
                for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                {
                  long _key6;
                  HostingXQComposeOrderLimitLegSendOrderExtraParam _val7;
                  _key6 = iprot.ReadI64();
                  _val7 = new HostingXQComposeOrderLimitLegSendOrderExtraParam();
                  _val7.Read(iprot);
                  LegSendOrderExtraParam[_key6] = _val7;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingXQComposeLimitOrderParallelParams");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (LegChaseParams != null && __isset.legChaseParams) {
        field.Name = "legChaseParams";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, LegChaseParams.Count));
          foreach (long _iter8 in LegChaseParams.Keys)
          {
            oprot.WriteI64(_iter8);
            LegChaseParams[_iter8].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (LegSendOrderExtraParam != null && __isset.legSendOrderExtraParam) {
        field.Name = "legSendOrderExtraParam";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, LegSendOrderExtraParam.Count));
          foreach (long _iter9 in LegSendOrderExtraParam.Keys)
          {
            oprot.WriteI64(_iter9);
            LegSendOrderExtraParam[_iter9].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingXQComposeLimitOrderParallelParams(");
      sb.Append("LegChaseParams: ");
      if (LegChaseParams == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (long _iter10 in LegChaseParams.Keys)
        {
          sb.Append(_iter10.ToString());
          sb.Append(":");
          sb.Append(LegChaseParams[_iter10].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(",LegSendOrderExtraParam: ");
      if (LegSendOrderExtraParam == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (long _iter11 in LegSendOrderExtraParam.Keys)
        {
          sb.Append(_iter11.ToString());
          sb.Append(":");
          sb.Append(LegSendOrderExtraParam[_iter11].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(")");
      return sb.ToString();
    }

  }

}
