/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.arbitrage.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingXQComposeLimitOrderLegByParams : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private HostingXQComposeLimitOrderLegByTriggerType _legByTriggerType;
    private Dictionary<long, HostingXQComposeLimitOrderLegByPriceTryingParam> _firstLegTryingParams;
    private Dictionary<long, HostingXQComposeOrderLimitLegSendOrderExtraParam> _legSendOrderExtraParam;
    private Dictionary<long, HostingXQComposeLimitOrderLegChaseParam> _legChaseParams;
    private HostingXQComposeLimitOrderFirstLegChooseParam _firstLegChooseParam;
    private Dictionary<long, HostingXQComposeLimitOrderLegByFirstLegExtraParam> _firstLegExtraParams;

    /// <summary>
    /// 
    /// <seealso cref="HostingXQComposeLimitOrderLegByTriggerType"/>
    /// </summary>
    public HostingXQComposeLimitOrderLegByTriggerType LegByTriggerType
    {
      get
      {
        return _legByTriggerType;
      }
      set
      {
        __isset.legByTriggerType = true;
        SetProperty(ref _legByTriggerType, value);
      }
    }

    public Dictionary<long, HostingXQComposeLimitOrderLegByPriceTryingParam> FirstLegTryingParams
    {
      get
      {
        return _firstLegTryingParams;
      }
      set
      {
        __isset.firstLegTryingParams = true;
        SetProperty(ref _firstLegTryingParams, value);
      }
    }

    public Dictionary<long, HostingXQComposeOrderLimitLegSendOrderExtraParam> LegSendOrderExtraParam
    {
      get
      {
        return _legSendOrderExtraParam;
      }
      set
      {
        __isset.legSendOrderExtraParam = true;
        SetProperty(ref _legSendOrderExtraParam, value);
      }
    }

    public Dictionary<long, HostingXQComposeLimitOrderLegChaseParam> LegChaseParams
    {
      get
      {
        return _legChaseParams;
      }
      set
      {
        __isset.legChaseParams = true;
        SetProperty(ref _legChaseParams, value);
      }
    }

    public HostingXQComposeLimitOrderFirstLegChooseParam FirstLegChooseParam
    {
      get
      {
        return _firstLegChooseParam;
      }
      set
      {
        __isset.firstLegChooseParam = true;
        SetProperty(ref _firstLegChooseParam, value);
      }
    }

    public Dictionary<long, HostingXQComposeLimitOrderLegByFirstLegExtraParam> FirstLegExtraParams
    {
      get
      {
        return _firstLegExtraParams;
      }
      set
      {
        __isset.firstLegExtraParams = true;
        SetProperty(ref _firstLegExtraParams, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool legByTriggerType;
      public bool firstLegTryingParams;
      public bool legSendOrderExtraParam;
      public bool legChaseParams;
      public bool firstLegChooseParam;
      public bool firstLegExtraParams;
    }

    public HostingXQComposeLimitOrderLegByParams() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              LegByTriggerType = (HostingXQComposeLimitOrderLegByTriggerType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                FirstLegTryingParams = new Dictionary<long, HostingXQComposeLimitOrderLegByPriceTryingParam>();
                TMap _map12 = iprot.ReadMapBegin();
                for( int _i13 = 0; _i13 < _map12.Count; ++_i13)
                {
                  long _key14;
                  HostingXQComposeLimitOrderLegByPriceTryingParam _val15;
                  _key14 = iprot.ReadI64();
                  _val15 = new HostingXQComposeLimitOrderLegByPriceTryingParam();
                  _val15.Read(iprot);
                  FirstLegTryingParams[_key14] = _val15;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                LegSendOrderExtraParam = new Dictionary<long, HostingXQComposeOrderLimitLegSendOrderExtraParam>();
                TMap _map16 = iprot.ReadMapBegin();
                for( int _i17 = 0; _i17 < _map16.Count; ++_i17)
                {
                  long _key18;
                  HostingXQComposeOrderLimitLegSendOrderExtraParam _val19;
                  _key18 = iprot.ReadI64();
                  _val19 = new HostingXQComposeOrderLimitLegSendOrderExtraParam();
                  _val19.Read(iprot);
                  LegSendOrderExtraParam[_key18] = _val19;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                LegChaseParams = new Dictionary<long, HostingXQComposeLimitOrderLegChaseParam>();
                TMap _map20 = iprot.ReadMapBegin();
                for( int _i21 = 0; _i21 < _map20.Count; ++_i21)
                {
                  long _key22;
                  HostingXQComposeLimitOrderLegChaseParam _val23;
                  _key22 = iprot.ReadI64();
                  _val23 = new HostingXQComposeLimitOrderLegChaseParam();
                  _val23.Read(iprot);
                  LegChaseParams[_key22] = _val23;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              FirstLegChooseParam = new HostingXQComposeLimitOrderFirstLegChooseParam();
              FirstLegChooseParam.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                FirstLegExtraParams = new Dictionary<long, HostingXQComposeLimitOrderLegByFirstLegExtraParam>();
                TMap _map24 = iprot.ReadMapBegin();
                for( int _i25 = 0; _i25 < _map24.Count; ++_i25)
                {
                  long _key26;
                  HostingXQComposeLimitOrderLegByFirstLegExtraParam _val27;
                  _key26 = iprot.ReadI64();
                  _val27 = new HostingXQComposeLimitOrderLegByFirstLegExtraParam();
                  _val27.Read(iprot);
                  FirstLegExtraParams[_key26] = _val27;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingXQComposeLimitOrderLegByParams");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.legByTriggerType) {
        field.Name = "legByTriggerType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)LegByTriggerType);
        oprot.WriteFieldEnd();
      }
      if (FirstLegTryingParams != null && __isset.firstLegTryingParams) {
        field.Name = "firstLegTryingParams";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, FirstLegTryingParams.Count));
          foreach (long _iter28 in FirstLegTryingParams.Keys)
          {
            oprot.WriteI64(_iter28);
            FirstLegTryingParams[_iter28].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (LegSendOrderExtraParam != null && __isset.legSendOrderExtraParam) {
        field.Name = "legSendOrderExtraParam";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, LegSendOrderExtraParam.Count));
          foreach (long _iter29 in LegSendOrderExtraParam.Keys)
          {
            oprot.WriteI64(_iter29);
            LegSendOrderExtraParam[_iter29].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (LegChaseParams != null && __isset.legChaseParams) {
        field.Name = "legChaseParams";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, LegChaseParams.Count));
          foreach (long _iter30 in LegChaseParams.Keys)
          {
            oprot.WriteI64(_iter30);
            LegChaseParams[_iter30].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (FirstLegChooseParam != null && __isset.firstLegChooseParam) {
        field.Name = "firstLegChooseParam";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        FirstLegChooseParam.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (FirstLegExtraParams != null && __isset.firstLegExtraParams) {
        field.Name = "firstLegExtraParams";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, FirstLegExtraParams.Count));
          foreach (long _iter31 in FirstLegExtraParams.Keys)
          {
            oprot.WriteI64(_iter31);
            FirstLegExtraParams[_iter31].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingXQComposeLimitOrderLegByParams(");
      sb.Append("LegByTriggerType: ");
      sb.Append(LegByTriggerType);
      sb.Append(",FirstLegTryingParams: ");
      if (FirstLegTryingParams == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (long _iter32 in FirstLegTryingParams.Keys)
        {
          sb.Append(_iter32.ToString());
          sb.Append(":");
          sb.Append(FirstLegTryingParams[_iter32].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(",LegSendOrderExtraParam: ");
      if (LegSendOrderExtraParam == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (long _iter33 in LegSendOrderExtraParam.Keys)
        {
          sb.Append(_iter33.ToString());
          sb.Append(":");
          sb.Append(LegSendOrderExtraParam[_iter33].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(",LegChaseParams: ");
      if (LegChaseParams == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (long _iter34 in LegChaseParams.Keys)
        {
          sb.Append(_iter34.ToString());
          sb.Append(":");
          sb.Append(LegChaseParams[_iter34].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(",FirstLegChooseParam: ");
      sb.Append(FirstLegChooseParam== null ? "<null>" : FirstLegChooseParam.ToString());
      sb.Append(",FirstLegExtraParams: ");
      if (FirstLegExtraParams == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (long _iter35 in FirstLegExtraParams.Keys)
        {
          sb.Append(_iter35.ToString());
          sb.Append(":");
          sb.Append(FirstLegExtraParams[_iter35].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(")");
      return sb.ToString();
    }

  }

}
