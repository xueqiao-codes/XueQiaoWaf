/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.arbitrage.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingXQTradeRelatedItem : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private string _orderId;
    private long _tradeId;
    private long _execOrderId;
    private long _execTradeId;
    private long _execTradeLegId;
    private xueqiao.trade.hosting.HostingExecTradeDirection _execTradeLegDirection;
    private int _execTradeLegVolume;
    private double _execTradeLegPrice;
    private int _relatedTradeVolume;
    private long _sledContractId;
    private long _createTimestampMs;

    public string OrderId
    {
      get
      {
        return _orderId;
      }
      set
      {
        __isset.orderId = true;
        SetProperty(ref _orderId, value);
      }
    }

    public long TradeId
    {
      get
      {
        return _tradeId;
      }
      set
      {
        __isset.tradeId = true;
        SetProperty(ref _tradeId, value);
      }
    }

    public long ExecOrderId
    {
      get
      {
        return _execOrderId;
      }
      set
      {
        __isset.execOrderId = true;
        SetProperty(ref _execOrderId, value);
      }
    }

    public long ExecTradeId
    {
      get
      {
        return _execTradeId;
      }
      set
      {
        __isset.execTradeId = true;
        SetProperty(ref _execTradeId, value);
      }
    }

    public long ExecTradeLegId
    {
      get
      {
        return _execTradeLegId;
      }
      set
      {
        __isset.execTradeLegId = true;
        SetProperty(ref _execTradeLegId, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.trade.hosting.HostingExecTradeDirection"/>
    /// </summary>
    public xueqiao.trade.hosting.HostingExecTradeDirection ExecTradeLegDirection
    {
      get
      {
        return _execTradeLegDirection;
      }
      set
      {
        __isset.execTradeLegDirection = true;
        SetProperty(ref _execTradeLegDirection, value);
      }
    }

    public int ExecTradeLegVolume
    {
      get
      {
        return _execTradeLegVolume;
      }
      set
      {
        __isset.execTradeLegVolume = true;
        SetProperty(ref _execTradeLegVolume, value);
      }
    }

    public double ExecTradeLegPrice
    {
      get
      {
        return _execTradeLegPrice;
      }
      set
      {
        __isset.execTradeLegPrice = true;
        SetProperty(ref _execTradeLegPrice, value);
      }
    }

    public int RelatedTradeVolume
    {
      get
      {
        return _relatedTradeVolume;
      }
      set
      {
        __isset.relatedTradeVolume = true;
        SetProperty(ref _relatedTradeVolume, value);
      }
    }

    public long SledContractId
    {
      get
      {
        return _sledContractId;
      }
      set
      {
        __isset.sledContractId = true;
        SetProperty(ref _sledContractId, value);
      }
    }

    public long CreateTimestampMs
    {
      get
      {
        return _createTimestampMs;
      }
      set
      {
        __isset.createTimestampMs = true;
        SetProperty(ref _createTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool orderId;
      public bool tradeId;
      public bool execOrderId;
      public bool execTradeId;
      public bool execTradeLegId;
      public bool execTradeLegDirection;
      public bool execTradeLegVolume;
      public bool execTradeLegPrice;
      public bool relatedTradeVolume;
      public bool sledContractId;
      public bool createTimestampMs;
    }

    public HostingXQTradeRelatedItem() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              OrderId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              TradeId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              ExecOrderId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              ExecTradeId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              ExecTradeLegId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              ExecTradeLegDirection = (xueqiao.trade.hosting.HostingExecTradeDirection)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              ExecTradeLegVolume = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              ExecTradeLegPrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              RelatedTradeVolume = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              SledContractId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              CreateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingXQTradeRelatedItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (OrderId != null && __isset.orderId) {
        field.Name = "orderId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderId);
        oprot.WriteFieldEnd();
      }
      if (__isset.tradeId) {
        field.Name = "tradeId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TradeId);
        oprot.WriteFieldEnd();
      }
      if (__isset.execOrderId) {
        field.Name = "execOrderId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ExecOrderId);
        oprot.WriteFieldEnd();
      }
      if (__isset.execTradeId) {
        field.Name = "execTradeId";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ExecTradeId);
        oprot.WriteFieldEnd();
      }
      if (__isset.execTradeLegId) {
        field.Name = "execTradeLegId";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ExecTradeLegId);
        oprot.WriteFieldEnd();
      }
      if (__isset.execTradeLegDirection) {
        field.Name = "execTradeLegDirection";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ExecTradeLegDirection);
        oprot.WriteFieldEnd();
      }
      if (__isset.execTradeLegVolume) {
        field.Name = "execTradeLegVolume";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExecTradeLegVolume);
        oprot.WriteFieldEnd();
      }
      if (__isset.execTradeLegPrice) {
        field.Name = "execTradeLegPrice";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ExecTradeLegPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.relatedTradeVolume) {
        field.Name = "relatedTradeVolume";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RelatedTradeVolume);
        oprot.WriteFieldEnd();
      }
      if (__isset.sledContractId) {
        field.Name = "sledContractId";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SledContractId);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestampMs) {
        field.Name = "createTimestampMs";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingXQTradeRelatedItem(");
      sb.Append("OrderId: ");
      sb.Append(OrderId);
      sb.Append(",TradeId: ");
      sb.Append(TradeId);
      sb.Append(",ExecOrderId: ");
      sb.Append(ExecOrderId);
      sb.Append(",ExecTradeId: ");
      sb.Append(ExecTradeId);
      sb.Append(",ExecTradeLegId: ");
      sb.Append(ExecTradeLegId);
      sb.Append(",ExecTradeLegDirection: ");
      sb.Append(ExecTradeLegDirection);
      sb.Append(",ExecTradeLegVolume: ");
      sb.Append(ExecTradeLegVolume);
      sb.Append(",ExecTradeLegPrice: ");
      sb.Append(ExecTradeLegPrice);
      sb.Append(",RelatedTradeVolume: ");
      sb.Append(RelatedTradeVolume);
      sb.Append(",SledContractId: ");
      sb.Append(SledContractId);
      sb.Append(",CreateTimestampMs: ");
      sb.Append(CreateTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
