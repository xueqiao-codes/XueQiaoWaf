/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.arbitrage.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingXQTradeSummary : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _totalVolume;
    private double _averagePrice;
    private Dictionary<string, HostingXQSubTradeSummary> _subTradeSummaries;

    public int TotalVolume
    {
      get
      {
        return _totalVolume;
      }
      set
      {
        __isset.totalVolume = true;
        SetProperty(ref _totalVolume, value);
      }
    }

    public double AveragePrice
    {
      get
      {
        return _averagePrice;
      }
      set
      {
        __isset.averagePrice = true;
        SetProperty(ref _averagePrice, value);
      }
    }

    public Dictionary<string, HostingXQSubTradeSummary> SubTradeSummaries
    {
      get
      {
        return _subTradeSummaries;
      }
      set
      {
        __isset.subTradeSummaries = true;
        SetProperty(ref _subTradeSummaries, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool totalVolume;
      public bool averagePrice;
      public bool subTradeSummaries;
    }

    public HostingXQTradeSummary() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              TotalVolume = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              AveragePrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                SubTradeSummaries = new Dictionary<string, HostingXQSubTradeSummary>();
                TMap _map41 = iprot.ReadMapBegin();
                for( int _i42 = 0; _i42 < _map41.Count; ++_i42)
                {
                  string _key43;
                  HostingXQSubTradeSummary _val44;
                  _key43 = iprot.ReadString();
                  _val44 = new HostingXQSubTradeSummary();
                  _val44.Read(iprot);
                  SubTradeSummaries[_key43] = _val44;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingXQTradeSummary");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.totalVolume) {
        field.Name = "totalVolume";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalVolume);
        oprot.WriteFieldEnd();
      }
      if (__isset.averagePrice) {
        field.Name = "averagePrice";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(AveragePrice);
        oprot.WriteFieldEnd();
      }
      if (SubTradeSummaries != null && __isset.subTradeSummaries) {
        field.Name = "subTradeSummaries";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, SubTradeSummaries.Count));
          foreach (string _iter45 in SubTradeSummaries.Keys)
          {
            oprot.WriteString(_iter45);
            SubTradeSummaries[_iter45].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingXQTradeSummary(");
      sb.Append("TotalVolume: ");
      sb.Append(TotalVolume);
      sb.Append(",AveragePrice: ");
      sb.Append(AveragePrice);
      sb.Append(",SubTradeSummaries: ");
      if (SubTradeSummaries == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (string _iter46 in SubTradeSummaries.Keys)
        {
          sb.Append(_iter46.ToString());
          sb.Append(":");
          sb.Append(SubTradeSummaries[_iter46].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(")");
      return sb.ToString();
    }

  }

}
