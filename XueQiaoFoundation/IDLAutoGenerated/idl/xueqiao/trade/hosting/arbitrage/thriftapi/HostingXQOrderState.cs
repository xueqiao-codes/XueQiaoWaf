/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.arbitrage.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingXQOrderState : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private HostingXQOrderStateValue _stateValue;
    private long _stateTimestampMs;
    private HostingXQSuspendReason _suspendReason;
    private int _suspendedErrorCode;
    private int _cancelledErrorCode;
    private string _stateMsg;
    private string _execUsefulMsg;
    private bool _effectIndexCleaned;
    private HostingXQOrderResumeMode _resumeMode;

    /// <summary>
    /// 
    /// <seealso cref="HostingXQOrderStateValue"/>
    /// </summary>
    public HostingXQOrderStateValue StateValue
    {
      get
      {
        return _stateValue;
      }
      set
      {
        __isset.stateValue = true;
        SetProperty(ref _stateValue, value);
      }
    }

    public long StateTimestampMs
    {
      get
      {
        return _stateTimestampMs;
      }
      set
      {
        __isset.stateTimestampMs = true;
        SetProperty(ref _stateTimestampMs, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="HostingXQSuspendReason"/>
    /// </summary>
    public HostingXQSuspendReason SuspendReason
    {
      get
      {
        return _suspendReason;
      }
      set
      {
        __isset.suspendReason = true;
        SetProperty(ref _suspendReason, value);
      }
    }

    public int SuspendedErrorCode
    {
      get
      {
        return _suspendedErrorCode;
      }
      set
      {
        __isset.suspendedErrorCode = true;
        SetProperty(ref _suspendedErrorCode, value);
      }
    }

    public int CancelledErrorCode
    {
      get
      {
        return _cancelledErrorCode;
      }
      set
      {
        __isset.cancelledErrorCode = true;
        SetProperty(ref _cancelledErrorCode, value);
      }
    }

    public string StateMsg
    {
      get
      {
        return _stateMsg;
      }
      set
      {
        __isset.stateMsg = true;
        SetProperty(ref _stateMsg, value);
      }
    }

    public string ExecUsefulMsg
    {
      get
      {
        return _execUsefulMsg;
      }
      set
      {
        __isset.execUsefulMsg = true;
        SetProperty(ref _execUsefulMsg, value);
      }
    }

    public bool EffectIndexCleaned
    {
      get
      {
        return _effectIndexCleaned;
      }
      set
      {
        __isset.effectIndexCleaned = true;
        SetProperty(ref _effectIndexCleaned, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="HostingXQOrderResumeMode"/>
    /// </summary>
    public HostingXQOrderResumeMode ResumeMode
    {
      get
      {
        return _resumeMode;
      }
      set
      {
        __isset.resumeMode = true;
        SetProperty(ref _resumeMode, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool stateValue;
      public bool stateTimestampMs;
      public bool suspendReason;
      public bool suspendedErrorCode;
      public bool cancelledErrorCode;
      public bool stateMsg;
      public bool execUsefulMsg;
      public bool effectIndexCleaned;
      public bool resumeMode;
    }

    public HostingXQOrderState() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              StateValue = (HostingXQOrderStateValue)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              StateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              SuspendReason = (HostingXQSuspendReason)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              SuspendedErrorCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              CancelledErrorCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              StateMsg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              ExecUsefulMsg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              EffectIndexCleaned = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              ResumeMode = (HostingXQOrderResumeMode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingXQOrderState");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.stateValue) {
        field.Name = "stateValue";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)StateValue);
        oprot.WriteFieldEnd();
      }
      if (__isset.stateTimestampMs) {
        field.Name = "stateTimestampMs";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.suspendReason) {
        field.Name = "suspendReason";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)SuspendReason);
        oprot.WriteFieldEnd();
      }
      if (__isset.suspendedErrorCode) {
        field.Name = "suspendedErrorCode";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SuspendedErrorCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.cancelledErrorCode) {
        field.Name = "cancelledErrorCode";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CancelledErrorCode);
        oprot.WriteFieldEnd();
      }
      if (StateMsg != null && __isset.stateMsg) {
        field.Name = "stateMsg";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StateMsg);
        oprot.WriteFieldEnd();
      }
      if (ExecUsefulMsg != null && __isset.execUsefulMsg) {
        field.Name = "execUsefulMsg";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExecUsefulMsg);
        oprot.WriteFieldEnd();
      }
      if (__isset.effectIndexCleaned) {
        field.Name = "effectIndexCleaned";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(EffectIndexCleaned);
        oprot.WriteFieldEnd();
      }
      if (__isset.resumeMode) {
        field.Name = "resumeMode";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ResumeMode);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingXQOrderState(");
      sb.Append("StateValue: ");
      sb.Append(StateValue);
      sb.Append(",StateTimestampMs: ");
      sb.Append(StateTimestampMs);
      sb.Append(",SuspendReason: ");
      sb.Append(SuspendReason);
      sb.Append(",SuspendedErrorCode: ");
      sb.Append(SuspendedErrorCode);
      sb.Append(",CancelledErrorCode: ");
      sb.Append(CancelledErrorCode);
      sb.Append(",StateMsg: ");
      sb.Append(StateMsg);
      sb.Append(",ExecUsefulMsg: ");
      sb.Append(ExecUsefulMsg);
      sb.Append(",EffectIndexCleaned: ");
      sb.Append(EffectIndexCleaned);
      sb.Append(",ResumeMode: ");
      sb.Append(ResumeMode);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
