/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.arbitrage.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingXQOrder : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private string _orderId;
    private int _subUserId;
    private long _subAccountId;
    private HostingXQOrderType _orderType;
    private HostingXQTarget _orderTarget;
    private HostingXQOrderDetail _orderDetail;
    private HostingXQOrderState _orderState;
    private HostingXQTradeSummary _orderTradeSummary;
    private int _version;
    private long _createTimestampMs;
    private long _lastmodifyTimestampMs;
    private string _sourceOrderId;
    private string _actionOrderId;
    private long _gfdOrderEndTimestampMs;

    public string OrderId
    {
      get
      {
        return _orderId;
      }
      set
      {
        __isset.orderId = true;
        SetProperty(ref _orderId, value);
      }
    }

    public int SubUserId
    {
      get
      {
        return _subUserId;
      }
      set
      {
        __isset.subUserId = true;
        SetProperty(ref _subUserId, value);
      }
    }

    public long SubAccountId
    {
      get
      {
        return _subAccountId;
      }
      set
      {
        __isset.subAccountId = true;
        SetProperty(ref _subAccountId, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="HostingXQOrderType"/>
    /// </summary>
    public HostingXQOrderType OrderType
    {
      get
      {
        return _orderType;
      }
      set
      {
        __isset.orderType = true;
        SetProperty(ref _orderType, value);
      }
    }

    public HostingXQTarget OrderTarget
    {
      get
      {
        return _orderTarget;
      }
      set
      {
        __isset.orderTarget = true;
        SetProperty(ref _orderTarget, value);
      }
    }

    public HostingXQOrderDetail OrderDetail
    {
      get
      {
        return _orderDetail;
      }
      set
      {
        __isset.orderDetail = true;
        SetProperty(ref _orderDetail, value);
      }
    }

    public HostingXQOrderState OrderState
    {
      get
      {
        return _orderState;
      }
      set
      {
        __isset.orderState = true;
        SetProperty(ref _orderState, value);
      }
    }

    public HostingXQTradeSummary OrderTradeSummary
    {
      get
      {
        return _orderTradeSummary;
      }
      set
      {
        __isset.orderTradeSummary = true;
        SetProperty(ref _orderTradeSummary, value);
      }
    }

    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        SetProperty(ref _version, value);
      }
    }

    public long CreateTimestampMs
    {
      get
      {
        return _createTimestampMs;
      }
      set
      {
        __isset.createTimestampMs = true;
        SetProperty(ref _createTimestampMs, value);
      }
    }

    public long LastmodifyTimestampMs
    {
      get
      {
        return _lastmodifyTimestampMs;
      }
      set
      {
        __isset.lastmodifyTimestampMs = true;
        SetProperty(ref _lastmodifyTimestampMs, value);
      }
    }

    public string SourceOrderId
    {
      get
      {
        return _sourceOrderId;
      }
      set
      {
        __isset.sourceOrderId = true;
        SetProperty(ref _sourceOrderId, value);
      }
    }

    public string ActionOrderId
    {
      get
      {
        return _actionOrderId;
      }
      set
      {
        __isset.actionOrderId = true;
        SetProperty(ref _actionOrderId, value);
      }
    }

    public long GfdOrderEndTimestampMs
    {
      get
      {
        return _gfdOrderEndTimestampMs;
      }
      set
      {
        __isset.gfdOrderEndTimestampMs = true;
        SetProperty(ref _gfdOrderEndTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool orderId;
      public bool subUserId;
      public bool subAccountId;
      public bool orderType;
      public bool orderTarget;
      public bool orderDetail;
      public bool orderState;
      public bool orderTradeSummary;
      public bool version;
      public bool createTimestampMs;
      public bool lastmodifyTimestampMs;
      public bool sourceOrderId;
      public bool actionOrderId;
      public bool gfdOrderEndTimestampMs;
    }

    public HostingXQOrder() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              OrderId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              SubUserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              SubAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              OrderType = (HostingXQOrderType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              OrderTarget = new HostingXQTarget();
              OrderTarget.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              OrderDetail = new HostingXQOrderDetail();
              OrderDetail.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              OrderState = new HostingXQOrderState();
              OrderState.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              OrderTradeSummary = new HostingXQTradeSummary();
              OrderTradeSummary.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              CreateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              LastmodifyTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              SourceOrderId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              ActionOrderId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              GfdOrderEndTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingXQOrder");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (OrderId != null && __isset.orderId) {
        field.Name = "orderId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderId);
        oprot.WriteFieldEnd();
      }
      if (__isset.subUserId) {
        field.Name = "subUserId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SubUserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.subAccountId) {
        field.Name = "subAccountId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SubAccountId);
        oprot.WriteFieldEnd();
      }
      if (__isset.orderType) {
        field.Name = "orderType";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)OrderType);
        oprot.WriteFieldEnd();
      }
      if (OrderTarget != null && __isset.orderTarget) {
        field.Name = "orderTarget";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        OrderTarget.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (OrderDetail != null && __isset.orderDetail) {
        field.Name = "orderDetail";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        OrderDetail.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (OrderState != null && __isset.orderState) {
        field.Name = "orderState";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        OrderState.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (OrderTradeSummary != null && __isset.orderTradeSummary) {
        field.Name = "orderTradeSummary";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        OrderTradeSummary.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.version) {
        field.Name = "version";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Version);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestampMs) {
        field.Name = "createTimestampMs";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastmodifyTimestampMs) {
        field.Name = "lastmodifyTimestampMs";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastmodifyTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (SourceOrderId != null && __isset.sourceOrderId) {
        field.Name = "sourceOrderId";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SourceOrderId);
        oprot.WriteFieldEnd();
      }
      if (ActionOrderId != null && __isset.actionOrderId) {
        field.Name = "actionOrderId";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ActionOrderId);
        oprot.WriteFieldEnd();
      }
      if (__isset.gfdOrderEndTimestampMs) {
        field.Name = "gfdOrderEndTimestampMs";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(GfdOrderEndTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingXQOrder(");
      sb.Append("OrderId: ");
      sb.Append(OrderId);
      sb.Append(",SubUserId: ");
      sb.Append(SubUserId);
      sb.Append(",SubAccountId: ");
      sb.Append(SubAccountId);
      sb.Append(",OrderType: ");
      sb.Append(OrderType);
      sb.Append(",OrderTarget: ");
      sb.Append(OrderTarget== null ? "<null>" : OrderTarget.ToString());
      sb.Append(",OrderDetail: ");
      sb.Append(OrderDetail== null ? "<null>" : OrderDetail.ToString());
      sb.Append(",OrderState: ");
      sb.Append(OrderState== null ? "<null>" : OrderState.ToString());
      sb.Append(",OrderTradeSummary: ");
      sb.Append(OrderTradeSummary== null ? "<null>" : OrderTradeSummary.ToString());
      sb.Append(",Version: ");
      sb.Append(Version);
      sb.Append(",CreateTimestampMs: ");
      sb.Append(CreateTimestampMs);
      sb.Append(",LastmodifyTimestampMs: ");
      sb.Append(LastmodifyTimestampMs);
      sb.Append(",SourceOrderId: ");
      sb.Append(SourceOrderId);
      sb.Append(",ActionOrderId: ");
      sb.Append(ActionOrderId);
      sb.Append(",GfdOrderEndTimestampMs: ");
      sb.Append(GfdOrderEndTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
