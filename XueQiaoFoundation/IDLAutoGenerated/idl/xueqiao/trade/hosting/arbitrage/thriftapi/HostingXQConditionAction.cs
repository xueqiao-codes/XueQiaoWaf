/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.arbitrage.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingXQConditionAction : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private HostingXQOrderType _orderType;
    private HostingXQTradeDirection _tradeDirection;
    private HostingXQOrderPrice _price;
    private int _quantity;
    private HostingXQConditionActionExtra _extra;

    /// <summary>
    /// 
    /// <seealso cref="HostingXQOrderType"/>
    /// </summary>
    public HostingXQOrderType OrderType
    {
      get
      {
        return _orderType;
      }
      set
      {
        __isset.orderType = true;
        SetProperty(ref _orderType, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="HostingXQTradeDirection"/>
    /// </summary>
    public HostingXQTradeDirection TradeDirection
    {
      get
      {
        return _tradeDirection;
      }
      set
      {
        __isset.tradeDirection = true;
        SetProperty(ref _tradeDirection, value);
      }
    }

    public HostingXQOrderPrice Price
    {
      get
      {
        return _price;
      }
      set
      {
        __isset.price = true;
        SetProperty(ref _price, value);
      }
    }

    public int Quantity
    {
      get
      {
        return _quantity;
      }
      set
      {
        __isset.quantity = true;
        SetProperty(ref _quantity, value);
      }
    }

    public HostingXQConditionActionExtra Extra
    {
      get
      {
        return _extra;
      }
      set
      {
        __isset.extra = true;
        SetProperty(ref _extra, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool orderType;
      public bool tradeDirection;
      public bool price;
      public bool quantity;
      public bool extra;
    }

    public HostingXQConditionAction() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              OrderType = (HostingXQOrderType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TradeDirection = (HostingXQTradeDirection)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Price = new HostingXQOrderPrice();
              Price.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Quantity = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              Extra = new HostingXQConditionActionExtra();
              Extra.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingXQConditionAction");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.orderType) {
        field.Name = "orderType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)OrderType);
        oprot.WriteFieldEnd();
      }
      if (__isset.tradeDirection) {
        field.Name = "tradeDirection";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TradeDirection);
        oprot.WriteFieldEnd();
      }
      if (Price != null && __isset.price) {
        field.Name = "price";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Price.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.quantity) {
        field.Name = "quantity";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Quantity);
        oprot.WriteFieldEnd();
      }
      if (Extra != null && __isset.extra) {
        field.Name = "extra";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        Extra.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingXQConditionAction(");
      sb.Append("OrderType: ");
      sb.Append(OrderType);
      sb.Append(",TradeDirection: ");
      sb.Append(TradeDirection);
      sb.Append(",Price: ");
      sb.Append(Price== null ? "<null>" : Price.ToString());
      sb.Append(",Quantity: ");
      sb.Append(Quantity);
      sb.Append(",Extra: ");
      sb.Append(Extra== null ? "<null>" : Extra.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
