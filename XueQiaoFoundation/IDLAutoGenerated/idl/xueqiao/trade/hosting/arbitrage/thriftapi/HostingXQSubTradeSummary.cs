/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.arbitrage.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingXQSubTradeSummary : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private HostingXQTarget _subTarget;
    private int _subTradeVolume;
    private double _subTradeAveragePrice;

    public HostingXQTarget SubTarget
    {
      get
      {
        return _subTarget;
      }
      set
      {
        __isset.subTarget = true;
        SetProperty(ref _subTarget, value);
      }
    }

    public int SubTradeVolume
    {
      get
      {
        return _subTradeVolume;
      }
      set
      {
        __isset.subTradeVolume = true;
        SetProperty(ref _subTradeVolume, value);
      }
    }

    public double SubTradeAveragePrice
    {
      get
      {
        return _subTradeAveragePrice;
      }
      set
      {
        __isset.subTradeAveragePrice = true;
        SetProperty(ref _subTradeAveragePrice, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool subTarget;
      public bool subTradeVolume;
      public bool subTradeAveragePrice;
    }

    public HostingXQSubTradeSummary() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              SubTarget = new HostingXQTarget();
              SubTarget.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              SubTradeVolume = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              SubTradeAveragePrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingXQSubTradeSummary");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SubTarget != null && __isset.subTarget) {
        field.Name = "subTarget";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        SubTarget.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.subTradeVolume) {
        field.Name = "subTradeVolume";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SubTradeVolume);
        oprot.WriteFieldEnd();
      }
      if (__isset.subTradeAveragePrice) {
        field.Name = "subTradeAveragePrice";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(SubTradeAveragePrice);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingXQSubTradeSummary(");
      sb.Append("SubTarget: ");
      sb.Append(SubTarget== null ? "<null>" : SubTarget.ToString());
      sb.Append(",SubTradeVolume: ");
      sb.Append(SubTradeVolume);
      sb.Append(",SubTradeAveragePrice: ");
      sb.Append(SubTradeAveragePrice);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
