/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryHostingUserOption : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _subUserId;
    private string _loginNamePartical;
    private string _nickNamePartical;
    private string _loginNameWhole;
    private HostingUserOrderType _orderType;

    public int SubUserId
    {
      get
      {
        return _subUserId;
      }
      set
      {
        __isset.subUserId = true;
        SetProperty(ref _subUserId, value);
      }
    }

    public string LoginNamePartical
    {
      get
      {
        return _loginNamePartical;
      }
      set
      {
        __isset.loginNamePartical = true;
        SetProperty(ref _loginNamePartical, value);
      }
    }

    public string NickNamePartical
    {
      get
      {
        return _nickNamePartical;
      }
      set
      {
        __isset.nickNamePartical = true;
        SetProperty(ref _nickNamePartical, value);
      }
    }

    public string LoginNameWhole
    {
      get
      {
        return _loginNameWhole;
      }
      set
      {
        __isset.loginNameWhole = true;
        SetProperty(ref _loginNameWhole, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="HostingUserOrderType"/>
    /// </summary>
    public HostingUserOrderType OrderType
    {
      get
      {
        return _orderType;
      }
      set
      {
        __isset.orderType = true;
        SetProperty(ref _orderType, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool subUserId;
      public bool loginNamePartical;
      public bool nickNamePartical;
      public bool loginNameWhole;
      public bool orderType;
    }

    public QueryHostingUserOption() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 2:
            if (field.Type == TType.I32) {
              SubUserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              LoginNamePartical = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              NickNamePartical = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              LoginNameWhole = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              OrderType = (HostingUserOrderType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryHostingUserOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.subUserId) {
        field.Name = "subUserId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SubUserId);
        oprot.WriteFieldEnd();
      }
      if (LoginNamePartical != null && __isset.loginNamePartical) {
        field.Name = "loginNamePartical";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoginNamePartical);
        oprot.WriteFieldEnd();
      }
      if (NickNamePartical != null && __isset.nickNamePartical) {
        field.Name = "nickNamePartical";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NickNamePartical);
        oprot.WriteFieldEnd();
      }
      if (LoginNameWhole != null && __isset.loginNameWhole) {
        field.Name = "loginNameWhole";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoginNameWhole);
        oprot.WriteFieldEnd();
      }
      if (__isset.orderType) {
        field.Name = "orderType";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)OrderType);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QueryHostingUserOption(");
      sb.Append("SubUserId: ");
      sb.Append(SubUserId);
      sb.Append(",LoginNamePartical: ");
      sb.Append(LoginNamePartical);
      sb.Append(",NickNamePartical: ");
      sb.Append(NickNamePartical);
      sb.Append(",LoginNameWhole: ");
      sb.Append(LoginNameWhole);
      sb.Append(",OrderType: ");
      sb.Append(OrderType);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
