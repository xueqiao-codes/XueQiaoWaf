/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingInfo : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private HostingStatus _status;
    private int _tableVersion;
    private int _subUserTotalCount;
    private int _composeTotalCount;
    private int _onlineUserTotalCount;
    private long _machineId;
    private HostingRunningMode _runningMode;
    private string _buildVersion;

    /// <summary>
    /// 
    /// <seealso cref="HostingStatus"/>
    /// </summary>
    public HostingStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        SetProperty(ref _status, value);
      }
    }

    public int TableVersion
    {
      get
      {
        return _tableVersion;
      }
      set
      {
        __isset.tableVersion = true;
        SetProperty(ref _tableVersion, value);
      }
    }

    public int SubUserTotalCount
    {
      get
      {
        return _subUserTotalCount;
      }
      set
      {
        __isset.subUserTotalCount = true;
        SetProperty(ref _subUserTotalCount, value);
      }
    }

    public int ComposeTotalCount
    {
      get
      {
        return _composeTotalCount;
      }
      set
      {
        __isset.composeTotalCount = true;
        SetProperty(ref _composeTotalCount, value);
      }
    }

    public int OnlineUserTotalCount
    {
      get
      {
        return _onlineUserTotalCount;
      }
      set
      {
        __isset.onlineUserTotalCount = true;
        SetProperty(ref _onlineUserTotalCount, value);
      }
    }

    public long MachineId
    {
      get
      {
        return _machineId;
      }
      set
      {
        __isset.machineId = true;
        SetProperty(ref _machineId, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="HostingRunningMode"/>
    /// </summary>
    public HostingRunningMode RunningMode
    {
      get
      {
        return _runningMode;
      }
      set
      {
        __isset.runningMode = true;
        SetProperty(ref _runningMode, value);
      }
    }

    public string BuildVersion
    {
      get
      {
        return _buildVersion;
      }
      set
      {
        __isset.buildVersion = true;
        SetProperty(ref _buildVersion, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool status;
      public bool tableVersion;
      public bool subUserTotalCount;
      public bool composeTotalCount;
      public bool onlineUserTotalCount;
      public bool machineId;
      public bool runningMode;
      public bool buildVersion;
    }

    public HostingInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Status = (HostingStatus)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TableVersion = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              SubUserTotalCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              ComposeTotalCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              OnlineUserTotalCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              MachineId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              RunningMode = (HostingRunningMode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              BuildVersion = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.status) {
        field.Name = "status";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Status);
        oprot.WriteFieldEnd();
      }
      if (__isset.tableVersion) {
        field.Name = "tableVersion";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TableVersion);
        oprot.WriteFieldEnd();
      }
      if (__isset.subUserTotalCount) {
        field.Name = "subUserTotalCount";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SubUserTotalCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.composeTotalCount) {
        field.Name = "composeTotalCount";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ComposeTotalCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.onlineUserTotalCount) {
        field.Name = "onlineUserTotalCount";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(OnlineUserTotalCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.machineId) {
        field.Name = "machineId";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(MachineId);
        oprot.WriteFieldEnd();
      }
      if (__isset.runningMode) {
        field.Name = "runningMode";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)RunningMode);
        oprot.WriteFieldEnd();
      }
      if (BuildVersion != null && __isset.buildVersion) {
        field.Name = "buildVersion";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BuildVersion);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingInfo(");
      sb.Append("Status: ");
      sb.Append(Status);
      sb.Append(",TableVersion: ");
      sb.Append(TableVersion);
      sb.Append(",SubUserTotalCount: ");
      sb.Append(SubUserTotalCount);
      sb.Append(",ComposeTotalCount: ");
      sb.Append(ComposeTotalCount);
      sb.Append(",OnlineUserTotalCount: ");
      sb.Append(OnlineUserTotalCount);
      sb.Append(",MachineId: ");
      sb.Append(MachineId);
      sb.Append(",RunningMode: ");
      sb.Append(RunningMode);
      sb.Append(",BuildVersion: ");
      sb.Append(BuildVersion);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
