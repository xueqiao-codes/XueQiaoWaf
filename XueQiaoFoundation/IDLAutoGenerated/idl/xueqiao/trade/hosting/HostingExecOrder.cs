/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingExecOrder : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _execOrderId;
    private int _subUserId;
    private HostingExecOrderDetail _orderDetail;
    private HostingExecOrderContractSummary _contractSummary;
    private HostingExecOrderTradeAccountSummary _accountSummary;
    private HostingExecOrderRef _upsideOrderRef;
    private HostingExecOrderInputExt _orderInputExt;
    private long _subAccountId;
    private HostingExecOrderStateInfo _stateInfo;
    private HostingExecOrderRevokeInfo _revokeInfo;
    private HostingExecOrderDealInfo _dealInfo;
    private HostingExecOrderTradeSummary _tradeSummary;
    private List<HostingUpsideNotifyStateHandleInfo> _notifyStateHandleInfos;
    private long _relateExecOrderId;
    private long _createTimestampMs;
    private long _lastmodifyTimestampMs;
    private int _version;
    private string _source;
    private long _ttlTimestampMs;
    private long _verifyTimestampMs;

    public long ExecOrderId
    {
      get
      {
        return _execOrderId;
      }
      set
      {
        __isset.execOrderId = true;
        SetProperty(ref _execOrderId, value);
      }
    }

    public int SubUserId
    {
      get
      {
        return _subUserId;
      }
      set
      {
        __isset.subUserId = true;
        SetProperty(ref _subUserId, value);
      }
    }

    public HostingExecOrderDetail OrderDetail
    {
      get
      {
        return _orderDetail;
      }
      set
      {
        __isset.orderDetail = true;
        SetProperty(ref _orderDetail, value);
      }
    }

    public HostingExecOrderContractSummary ContractSummary
    {
      get
      {
        return _contractSummary;
      }
      set
      {
        __isset.contractSummary = true;
        SetProperty(ref _contractSummary, value);
      }
    }

    public HostingExecOrderTradeAccountSummary AccountSummary
    {
      get
      {
        return _accountSummary;
      }
      set
      {
        __isset.accountSummary = true;
        SetProperty(ref _accountSummary, value);
      }
    }

    public HostingExecOrderRef UpsideOrderRef
    {
      get
      {
        return _upsideOrderRef;
      }
      set
      {
        __isset.upsideOrderRef = true;
        SetProperty(ref _upsideOrderRef, value);
      }
    }

    public HostingExecOrderInputExt OrderInputExt
    {
      get
      {
        return _orderInputExt;
      }
      set
      {
        __isset.orderInputExt = true;
        SetProperty(ref _orderInputExt, value);
      }
    }

    public long SubAccountId
    {
      get
      {
        return _subAccountId;
      }
      set
      {
        __isset.subAccountId = true;
        SetProperty(ref _subAccountId, value);
      }
    }

    public HostingExecOrderStateInfo StateInfo
    {
      get
      {
        return _stateInfo;
      }
      set
      {
        __isset.stateInfo = true;
        SetProperty(ref _stateInfo, value);
      }
    }

    public HostingExecOrderRevokeInfo RevokeInfo
    {
      get
      {
        return _revokeInfo;
      }
      set
      {
        __isset.revokeInfo = true;
        SetProperty(ref _revokeInfo, value);
      }
    }

    public HostingExecOrderDealInfo DealInfo
    {
      get
      {
        return _dealInfo;
      }
      set
      {
        __isset.dealInfo = true;
        SetProperty(ref _dealInfo, value);
      }
    }

    public HostingExecOrderTradeSummary TradeSummary
    {
      get
      {
        return _tradeSummary;
      }
      set
      {
        __isset.tradeSummary = true;
        SetProperty(ref _tradeSummary, value);
      }
    }

    public List<HostingUpsideNotifyStateHandleInfo> NotifyStateHandleInfos
    {
      get
      {
        return _notifyStateHandleInfos;
      }
      set
      {
        __isset.notifyStateHandleInfos = true;
        SetProperty(ref _notifyStateHandleInfos, value);
      }
    }

    public long RelateExecOrderId
    {
      get
      {
        return _relateExecOrderId;
      }
      set
      {
        __isset.relateExecOrderId = true;
        SetProperty(ref _relateExecOrderId, value);
      }
    }

    public long CreateTimestampMs
    {
      get
      {
        return _createTimestampMs;
      }
      set
      {
        __isset.createTimestampMs = true;
        SetProperty(ref _createTimestampMs, value);
      }
    }

    public long LastmodifyTimestampMs
    {
      get
      {
        return _lastmodifyTimestampMs;
      }
      set
      {
        __isset.lastmodifyTimestampMs = true;
        SetProperty(ref _lastmodifyTimestampMs, value);
      }
    }

    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        SetProperty(ref _version, value);
      }
    }

    public string Source
    {
      get
      {
        return _source;
      }
      set
      {
        __isset.source = true;
        SetProperty(ref _source, value);
      }
    }

    public long TtlTimestampMs
    {
      get
      {
        return _ttlTimestampMs;
      }
      set
      {
        __isset.ttlTimestampMs = true;
        SetProperty(ref _ttlTimestampMs, value);
      }
    }

    public long VerifyTimestampMs
    {
      get
      {
        return _verifyTimestampMs;
      }
      set
      {
        __isset.verifyTimestampMs = true;
        SetProperty(ref _verifyTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool execOrderId;
      public bool subUserId;
      public bool orderDetail;
      public bool contractSummary;
      public bool accountSummary;
      public bool upsideOrderRef;
      public bool orderInputExt;
      public bool subAccountId;
      public bool stateInfo;
      public bool revokeInfo;
      public bool dealInfo;
      public bool tradeSummary;
      public bool notifyStateHandleInfos;
      public bool relateExecOrderId;
      public bool createTimestampMs;
      public bool lastmodifyTimestampMs;
      public bool version;
      public bool source;
      public bool ttlTimestampMs;
      public bool verifyTimestampMs;
    }

    public HostingExecOrder() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              ExecOrderId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              SubUserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              OrderDetail = new HostingExecOrderDetail();
              OrderDetail.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              ContractSummary = new HostingExecOrderContractSummary();
              ContractSummary.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              AccountSummary = new HostingExecOrderTradeAccountSummary();
              AccountSummary.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              UpsideOrderRef = new HostingExecOrderRef();
              UpsideOrderRef.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              OrderInputExt = new HostingExecOrderInputExt();
              OrderInputExt.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              SubAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              StateInfo = new HostingExecOrderStateInfo();
              StateInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Struct) {
              RevokeInfo = new HostingExecOrderRevokeInfo();
              RevokeInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Struct) {
              DealInfo = new HostingExecOrderDealInfo();
              DealInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.Struct) {
              TradeSummary = new HostingExecOrderTradeSummary();
              TradeSummary.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.List) {
              {
                NotifyStateHandleInfos = new List<HostingUpsideNotifyStateHandleInfo>();
                TList _list45 = iprot.ReadListBegin();
                for( int _i46 = 0; _i46 < _list45.Count; ++_i46)
                {
                  HostingUpsideNotifyStateHandleInfo _elem47 = new HostingUpsideNotifyStateHandleInfo();
                  _elem47 = new HostingUpsideNotifyStateHandleInfo();
                  _elem47.Read(iprot);
                  NotifyStateHandleInfos.Add(_elem47);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I64) {
              RelateExecOrderId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I64) {
              CreateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I64) {
              LastmodifyTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.I32) {
              Version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.String) {
              Source = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.I64) {
              TtlTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.I64) {
              VerifyTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingExecOrder");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.execOrderId) {
        field.Name = "execOrderId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ExecOrderId);
        oprot.WriteFieldEnd();
      }
      if (__isset.subUserId) {
        field.Name = "subUserId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SubUserId);
        oprot.WriteFieldEnd();
      }
      if (OrderDetail != null && __isset.orderDetail) {
        field.Name = "orderDetail";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        OrderDetail.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ContractSummary != null && __isset.contractSummary) {
        field.Name = "contractSummary";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        ContractSummary.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (AccountSummary != null && __isset.accountSummary) {
        field.Name = "accountSummary";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        AccountSummary.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (UpsideOrderRef != null && __isset.upsideOrderRef) {
        field.Name = "upsideOrderRef";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        UpsideOrderRef.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (OrderInputExt != null && __isset.orderInputExt) {
        field.Name = "orderInputExt";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        OrderInputExt.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.subAccountId) {
        field.Name = "subAccountId";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SubAccountId);
        oprot.WriteFieldEnd();
      }
      if (StateInfo != null && __isset.stateInfo) {
        field.Name = "stateInfo";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        StateInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (RevokeInfo != null && __isset.revokeInfo) {
        field.Name = "revokeInfo";
        field.Type = TType.Struct;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        RevokeInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (DealInfo != null && __isset.dealInfo) {
        field.Name = "dealInfo";
        field.Type = TType.Struct;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        DealInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (TradeSummary != null && __isset.tradeSummary) {
        field.Name = "tradeSummary";
        field.Type = TType.Struct;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        TradeSummary.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (NotifyStateHandleInfos != null && __isset.notifyStateHandleInfos) {
        field.Name = "notifyStateHandleInfos";
        field.Type = TType.List;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, NotifyStateHandleInfos.Count));
          foreach (HostingUpsideNotifyStateHandleInfo _iter48 in NotifyStateHandleInfos)
          {
            _iter48.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.relateExecOrderId) {
        field.Name = "relateExecOrderId";
        field.Type = TType.I64;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RelateExecOrderId);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestampMs) {
        field.Name = "createTimestampMs";
        field.Type = TType.I64;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastmodifyTimestampMs) {
        field.Name = "lastmodifyTimestampMs";
        field.Type = TType.I64;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastmodifyTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.version) {
        field.Name = "version";
        field.Type = TType.I32;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Version);
        oprot.WriteFieldEnd();
      }
      if (Source != null && __isset.source) {
        field.Name = "source";
        field.Type = TType.String;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Source);
        oprot.WriteFieldEnd();
      }
      if (__isset.ttlTimestampMs) {
        field.Name = "ttlTimestampMs";
        field.Type = TType.I64;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TtlTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.verifyTimestampMs) {
        field.Name = "verifyTimestampMs";
        field.Type = TType.I64;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(VerifyTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingExecOrder(");
      sb.Append("ExecOrderId: ");
      sb.Append(ExecOrderId);
      sb.Append(",SubUserId: ");
      sb.Append(SubUserId);
      sb.Append(",OrderDetail: ");
      sb.Append(OrderDetail== null ? "<null>" : OrderDetail.ToString());
      sb.Append(",ContractSummary: ");
      sb.Append(ContractSummary== null ? "<null>" : ContractSummary.ToString());
      sb.Append(",AccountSummary: ");
      sb.Append(AccountSummary== null ? "<null>" : AccountSummary.ToString());
      sb.Append(",UpsideOrderRef: ");
      sb.Append(UpsideOrderRef== null ? "<null>" : UpsideOrderRef.ToString());
      sb.Append(",OrderInputExt: ");
      sb.Append(OrderInputExt== null ? "<null>" : OrderInputExt.ToString());
      sb.Append(",SubAccountId: ");
      sb.Append(SubAccountId);
      sb.Append(",StateInfo: ");
      sb.Append(StateInfo== null ? "<null>" : StateInfo.ToString());
      sb.Append(",RevokeInfo: ");
      sb.Append(RevokeInfo== null ? "<null>" : RevokeInfo.ToString());
      sb.Append(",DealInfo: ");
      sb.Append(DealInfo== null ? "<null>" : DealInfo.ToString());
      sb.Append(",TradeSummary: ");
      sb.Append(TradeSummary== null ? "<null>" : TradeSummary.ToString());
      sb.Append(",NotifyStateHandleInfos: ");
      if (NotifyStateHandleInfos == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (HostingUpsideNotifyStateHandleInfo _iter49 in NotifyStateHandleInfos)
        {
          sb.Append(_iter49.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",RelateExecOrderId: ");
      sb.Append(RelateExecOrderId);
      sb.Append(",CreateTimestampMs: ");
      sb.Append(CreateTimestampMs);
      sb.Append(",LastmodifyTimestampMs: ");
      sb.Append(LastmodifyTimestampMs);
      sb.Append(",Version: ");
      sb.Append(Version);
      sb.Append(",Source: ");
      sb.Append(Source);
      sb.Append(",TtlTimestampMs: ");
      sb.Append(TtlTimestampMs);
      sb.Append(",VerifyTimestampMs: ");
      sb.Append(VerifyTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
