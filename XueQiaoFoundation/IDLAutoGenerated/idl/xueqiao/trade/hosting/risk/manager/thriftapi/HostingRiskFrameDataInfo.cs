/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.risk.manager.thriftapi
{

  /// <summary>
  /// 切面数据聚合
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingRiskFrameDataInfo : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private List<HostingRiskItemDataInfo> _globalDataInfos;
    private Dictionary<long, List<HostingRiskItemDataInfo>> _commodityDataInfos;
    private Dictionary<long, Dictionary<long, List<HostingRiskItemDataInfo>>> _contractDataInfos;

    public List<HostingRiskItemDataInfo> GlobalDataInfos
    {
      get
      {
        return _globalDataInfos;
      }
      set
      {
        __isset.globalDataInfos = true;
        SetProperty(ref _globalDataInfos, value);
      }
    }

    public Dictionary<long, List<HostingRiskItemDataInfo>> CommodityDataInfos
    {
      get
      {
        return _commodityDataInfos;
      }
      set
      {
        __isset.commodityDataInfos = true;
        SetProperty(ref _commodityDataInfos, value);
      }
    }

    public Dictionary<long, Dictionary<long, List<HostingRiskItemDataInfo>>> ContractDataInfos
    {
      get
      {
        return _contractDataInfos;
      }
      set
      {
        __isset.contractDataInfos = true;
        SetProperty(ref _contractDataInfos, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool globalDataInfos;
      public bool commodityDataInfos;
      public bool contractDataInfos;
    }

    public HostingRiskFrameDataInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                GlobalDataInfos = new List<HostingRiskItemDataInfo>();
                TList _list32 = iprot.ReadListBegin();
                for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                {
                  HostingRiskItemDataInfo _elem34 = new HostingRiskItemDataInfo();
                  _elem34 = new HostingRiskItemDataInfo();
                  _elem34.Read(iprot);
                  GlobalDataInfos.Add(_elem34);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                CommodityDataInfos = new Dictionary<long, List<HostingRiskItemDataInfo>>();
                TMap _map35 = iprot.ReadMapBegin();
                for( int _i36 = 0; _i36 < _map35.Count; ++_i36)
                {
                  long _key37;
                  List<HostingRiskItemDataInfo> _val38;
                  _key37 = iprot.ReadI64();
                  {
                    _val38 = new List<HostingRiskItemDataInfo>();
                    TList _list39 = iprot.ReadListBegin();
                    for( int _i40 = 0; _i40 < _list39.Count; ++_i40)
                    {
                      HostingRiskItemDataInfo _elem41 = new HostingRiskItemDataInfo();
                      _elem41 = new HostingRiskItemDataInfo();
                      _elem41.Read(iprot);
                      _val38.Add(_elem41);
                    }
                    iprot.ReadListEnd();
                  }
                  CommodityDataInfos[_key37] = _val38;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                ContractDataInfos = new Dictionary<long, Dictionary<long, List<HostingRiskItemDataInfo>>>();
                TMap _map42 = iprot.ReadMapBegin();
                for( int _i43 = 0; _i43 < _map42.Count; ++_i43)
                {
                  long _key44;
                  Dictionary<long, List<HostingRiskItemDataInfo>> _val45;
                  _key44 = iprot.ReadI64();
                  {
                    _val45 = new Dictionary<long, List<HostingRiskItemDataInfo>>();
                    TMap _map46 = iprot.ReadMapBegin();
                    for( int _i47 = 0; _i47 < _map46.Count; ++_i47)
                    {
                      long _key48;
                      List<HostingRiskItemDataInfo> _val49;
                      _key48 = iprot.ReadI64();
                      {
                        _val49 = new List<HostingRiskItemDataInfo>();
                        TList _list50 = iprot.ReadListBegin();
                        for( int _i51 = 0; _i51 < _list50.Count; ++_i51)
                        {
                          HostingRiskItemDataInfo _elem52 = new HostingRiskItemDataInfo();
                          _elem52 = new HostingRiskItemDataInfo();
                          _elem52.Read(iprot);
                          _val49.Add(_elem52);
                        }
                        iprot.ReadListEnd();
                      }
                      _val45[_key48] = _val49;
                    }
                    iprot.ReadMapEnd();
                  }
                  ContractDataInfos[_key44] = _val45;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingRiskFrameDataInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (GlobalDataInfos != null && __isset.globalDataInfos) {
        field.Name = "globalDataInfos";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, GlobalDataInfos.Count));
          foreach (HostingRiskItemDataInfo _iter53 in GlobalDataInfos)
          {
            _iter53.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (CommodityDataInfos != null && __isset.commodityDataInfos) {
        field.Name = "commodityDataInfos";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.List, CommodityDataInfos.Count));
          foreach (long _iter54 in CommodityDataInfos.Keys)
          {
            oprot.WriteI64(_iter54);
            {
              oprot.WriteListBegin(new TList(TType.Struct, CommodityDataInfos[_iter54].Count));
              foreach (HostingRiskItemDataInfo _iter55 in CommodityDataInfos[_iter54])
              {
                _iter55.Write(oprot);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ContractDataInfos != null && __isset.contractDataInfos) {
        field.Name = "contractDataInfos";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.Map, ContractDataInfos.Count));
          foreach (long _iter56 in ContractDataInfos.Keys)
          {
            oprot.WriteI64(_iter56);
            {
              oprot.WriteMapBegin(new TMap(TType.I64, TType.List, ContractDataInfos[_iter56].Count));
              foreach (long _iter57 in ContractDataInfos[_iter56].Keys)
              {
                oprot.WriteI64(_iter57);
                {
                  oprot.WriteListBegin(new TList(TType.Struct, ContractDataInfos[_iter56][_iter57].Count));
                  foreach (HostingRiskItemDataInfo _iter58 in ContractDataInfos[_iter56][_iter57])
                  {
                    _iter58.Write(oprot);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingRiskFrameDataInfo(");
      sb.Append("GlobalDataInfos: ");
      if (GlobalDataInfos == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (HostingRiskItemDataInfo _iter59 in GlobalDataInfos)
        {
          sb.Append(_iter59.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",CommodityDataInfos: ");
      if (CommodityDataInfos == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (long _iter60 in CommodityDataInfos.Keys)
        {
          sb.Append(_iter60.ToString());
          sb.Append(":");
          sb.Append(CommodityDataInfos[_iter60].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(",ContractDataInfos: ");
      if (ContractDataInfos == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (long _iter61 in ContractDataInfos.Keys)
        {
          sb.Append(_iter61.ToString());
          sb.Append(":");
          sb.Append(ContractDataInfos[_iter61].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(")");
      return sb.ToString();
    }

  }

}
