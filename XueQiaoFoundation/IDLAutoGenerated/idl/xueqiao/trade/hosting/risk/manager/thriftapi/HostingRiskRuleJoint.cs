/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.risk.manager.thriftapi
{

  /// <summary>
  /// 风控结构
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingRiskRuleJoint : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _version;
    private long _subAccountId;
    private bool _riskEnabled;
    private THashSet<string> _globalOpenedItemIds;
    private Dictionary<string, HostingRiskRuleItem> _globalRules;
    private THashSet<long> _tradedCommodityIds;
    private Dictionary<long, Dictionary<string, HostingRiskRuleItem>> _commodityRules;
    private THashSet<string> _commodityOpenedItemIds;

    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        SetProperty(ref _version, value);
      }
    }

    public long SubAccountId
    {
      get
      {
        return _subAccountId;
      }
      set
      {
        __isset.subAccountId = true;
        SetProperty(ref _subAccountId, value);
      }
    }

    public bool RiskEnabled
    {
      get
      {
        return _riskEnabled;
      }
      set
      {
        __isset.riskEnabled = true;
        SetProperty(ref _riskEnabled, value);
      }
    }

    public THashSet<string> GlobalOpenedItemIds
    {
      get
      {
        return _globalOpenedItemIds;
      }
      set
      {
        __isset.globalOpenedItemIds = true;
        SetProperty(ref _globalOpenedItemIds, value);
      }
    }

    public Dictionary<string, HostingRiskRuleItem> GlobalRules
    {
      get
      {
        return _globalRules;
      }
      set
      {
        __isset.globalRules = true;
        SetProperty(ref _globalRules, value);
      }
    }

    public THashSet<long> TradedCommodityIds
    {
      get
      {
        return _tradedCommodityIds;
      }
      set
      {
        __isset.tradedCommodityIds = true;
        SetProperty(ref _tradedCommodityIds, value);
      }
    }

    public Dictionary<long, Dictionary<string, HostingRiskRuleItem>> CommodityRules
    {
      get
      {
        return _commodityRules;
      }
      set
      {
        __isset.commodityRules = true;
        SetProperty(ref _commodityRules, value);
      }
    }

    public THashSet<string> CommodityOpenedItemIds
    {
      get
      {
        return _commodityOpenedItemIds;
      }
      set
      {
        __isset.commodityOpenedItemIds = true;
        SetProperty(ref _commodityOpenedItemIds, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool version;
      public bool subAccountId;
      public bool riskEnabled;
      public bool globalOpenedItemIds;
      public bool globalRules;
      public bool tradedCommodityIds;
      public bool commodityRules;
      public bool commodityOpenedItemIds;
    }

    public HostingRiskRuleJoint() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              SubAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              RiskEnabled = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Set) {
              {
                GlobalOpenedItemIds = new THashSet<string>();
                TSet _set0 = iprot.ReadSetBegin();
                for( int _i1 = 0; _i1 < _set0.Count; ++_i1)
                {
                  string _elem2 = null;
                  _elem2 = iprot.ReadString();
                  GlobalOpenedItemIds.Add(_elem2);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                GlobalRules = new Dictionary<string, HostingRiskRuleItem>();
                TMap _map3 = iprot.ReadMapBegin();
                for( int _i4 = 0; _i4 < _map3.Count; ++_i4)
                {
                  string _key5;
                  HostingRiskRuleItem _val6;
                  _key5 = iprot.ReadString();
                  _val6 = new HostingRiskRuleItem();
                  _val6.Read(iprot);
                  GlobalRules[_key5] = _val6;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Set) {
              {
                TradedCommodityIds = new THashSet<long>();
                TSet _set7 = iprot.ReadSetBegin();
                for( int _i8 = 0; _i8 < _set7.Count; ++_i8)
                {
                  long _elem9 = 0;
                  _elem9 = iprot.ReadI64();
                  TradedCommodityIds.Add(_elem9);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                CommodityRules = new Dictionary<long, Dictionary<string, HostingRiskRuleItem>>();
                TMap _map10 = iprot.ReadMapBegin();
                for( int _i11 = 0; _i11 < _map10.Count; ++_i11)
                {
                  long _key12;
                  Dictionary<string, HostingRiskRuleItem> _val13;
                  _key12 = iprot.ReadI64();
                  {
                    _val13 = new Dictionary<string, HostingRiskRuleItem>();
                    TMap _map14 = iprot.ReadMapBegin();
                    for( int _i15 = 0; _i15 < _map14.Count; ++_i15)
                    {
                      string _key16;
                      HostingRiskRuleItem _val17;
                      _key16 = iprot.ReadString();
                      _val17 = new HostingRiskRuleItem();
                      _val17.Read(iprot);
                      _val13[_key16] = _val17;
                    }
                    iprot.ReadMapEnd();
                  }
                  CommodityRules[_key12] = _val13;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Set) {
              {
                CommodityOpenedItemIds = new THashSet<string>();
                TSet _set18 = iprot.ReadSetBegin();
                for( int _i19 = 0; _i19 < _set18.Count; ++_i19)
                {
                  string _elem20 = null;
                  _elem20 = iprot.ReadString();
                  CommodityOpenedItemIds.Add(_elem20);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingRiskRuleJoint");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.version) {
        field.Name = "version";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Version);
        oprot.WriteFieldEnd();
      }
      if (__isset.subAccountId) {
        field.Name = "subAccountId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SubAccountId);
        oprot.WriteFieldEnd();
      }
      if (__isset.riskEnabled) {
        field.Name = "riskEnabled";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(RiskEnabled);
        oprot.WriteFieldEnd();
      }
      if (GlobalOpenedItemIds != null && __isset.globalOpenedItemIds) {
        field.Name = "globalOpenedItemIds";
        field.Type = TType.Set;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, GlobalOpenedItemIds.Count));
          foreach (string _iter21 in GlobalOpenedItemIds)
          {
            oprot.WriteString(_iter21);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (GlobalRules != null && __isset.globalRules) {
        field.Name = "globalRules";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, GlobalRules.Count));
          foreach (string _iter22 in GlobalRules.Keys)
          {
            oprot.WriteString(_iter22);
            GlobalRules[_iter22].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (TradedCommodityIds != null && __isset.tradedCommodityIds) {
        field.Name = "tradedCommodityIds";
        field.Type = TType.Set;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.I64, TradedCommodityIds.Count));
          foreach (long _iter23 in TradedCommodityIds)
          {
            oprot.WriteI64(_iter23);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (CommodityRules != null && __isset.commodityRules) {
        field.Name = "commodityRules";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.Map, CommodityRules.Count));
          foreach (long _iter24 in CommodityRules.Keys)
          {
            oprot.WriteI64(_iter24);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, CommodityRules[_iter24].Count));
              foreach (string _iter25 in CommodityRules[_iter24].Keys)
              {
                oprot.WriteString(_iter25);
                CommodityRules[_iter24][_iter25].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (CommodityOpenedItemIds != null && __isset.commodityOpenedItemIds) {
        field.Name = "commodityOpenedItemIds";
        field.Type = TType.Set;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, CommodityOpenedItemIds.Count));
          foreach (string _iter26 in CommodityOpenedItemIds)
          {
            oprot.WriteString(_iter26);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingRiskRuleJoint(");
      sb.Append("Version: ");
      sb.Append(Version);
      sb.Append(",SubAccountId: ");
      sb.Append(SubAccountId);
      sb.Append(",RiskEnabled: ");
      sb.Append(RiskEnabled);
      sb.Append(",GlobalOpenedItemIds: ");
      if (GlobalOpenedItemIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (string _iter27 in GlobalOpenedItemIds)
        {
          sb.Append(_iter27.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",GlobalRules: ");
      if (GlobalRules == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (string _iter28 in GlobalRules.Keys)
        {
          sb.Append(_iter28.ToString());
          sb.Append(":");
          sb.Append(GlobalRules[_iter28].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(",TradedCommodityIds: ");
      if (TradedCommodityIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (long _iter29 in TradedCommodityIds)
        {
          sb.Append(_iter29.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",CommodityRules: ");
      if (CommodityRules == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (long _iter30 in CommodityRules.Keys)
        {
          sb.Append(_iter30.ToString());
          sb.Append(":");
          sb.Append(CommodityRules[_iter30].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(",CommodityOpenedItemIds: ");
      if (CommodityOpenedItemIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (string _iter31 in CommodityOpenedItemIds)
        {
          sb.Append(_iter31.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(")");
      return sb.ToString();
    }

  }

}
