/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.risk.manager.thriftapi
{
  public partial class TradeHostingRiskManager {
    public interface Iface {
      /// <summary>
      /// 获取所有支持的风控项
      /// </summary>
      /// <param name="platformArgs"></param>
      List<HostingRiskSupportedItem> getAllSupportedItems(PlatformArgs platformArgs);
      #if SILVERLIGHT
      IAsyncResult Begin_getAllSupportedItems(AsyncCallback callback, object state, PlatformArgs platformArgs);
      List<HostingRiskSupportedItem> End_getAllSupportedItems(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取风控结构的版本
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      int getRiskRuleJointVersion(PlatformArgs platformArgs, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_getRiskRuleJointVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId);
      int End_getRiskRuleJointVersion(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取风控结构
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      HostingRiskRuleJoint getRiskRuleJoint(PlatformArgs platformArgs, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_getRiskRuleJoint(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId);
      HostingRiskRuleJoint End_getRiskRuleJoint(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 批量设置关注风控项
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      /// <param name="version"></param>
      /// <param name="openedItemIds"></param>
      /// <param name="closedItemIds"></param>
      HostingRiskRuleJoint batchSetSupportedItems(PlatformArgs platformArgs, long subAccountId, int version, THashSet<string> openedItemIds, THashSet<string> closedItemIds);
      #if SILVERLIGHT
      IAsyncResult Begin_batchSetSupportedItems(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, THashSet<string> openedItemIds, THashSet<string> closedItemIds);
      HostingRiskRuleJoint End_batchSetSupportedItems(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 批量操作可交易商品, 禁用商品会导致商品上的规则禁用
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      /// <param name="version"></param>
      /// <param name="enabledCommodityIds"></param>
      /// <param name="disabledCommodityIds"></param>
      HostingRiskRuleJoint batchSetTradedCommodityItems(PlatformArgs platformArgs, long subAccountId, int version, THashSet<long> enabledCommodityIds, THashSet<long> disabledCommodityIds);
      #if SILVERLIGHT
      IAsyncResult Begin_batchSetTradedCommodityItems(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, THashSet<long> enabledCommodityIds, THashSet<long> disabledCommodityIds);
      HostingRiskRuleJoint End_batchSetTradedCommodityItems(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 批量设置全局风控规则
      ///   以全局开放指标为Key
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      /// <param name="version"></param>
      /// <param name="ruleItems"></param>
      HostingRiskRuleJoint batchSetGlobalRules(PlatformArgs platformArgs, long subAccountId, int version, Dictionary<string, HostingRiskRuleItem> ruleItems);
      #if SILVERLIGHT
      IAsyncResult Begin_batchSetGlobalRules(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, Dictionary<string, HostingRiskRuleItem> ruleItems);
      HostingRiskRuleJoint End_batchSetGlobalRules(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 批量设置商品风控规则
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      /// <param name="version"></param>
      /// <param name="rules"></param>
      HostingRiskRuleJoint batchSetCommodityRules(PlatformArgs platformArgs, long subAccountId, int version, Dictionary<long, Dictionary<string, HostingRiskRuleItem>> rules);
      #if SILVERLIGHT
      IAsyncResult Begin_batchSetCommodityRules(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, Dictionary<long, Dictionary<string, HostingRiskRuleItem>> rules);
      HostingRiskRuleJoint End_batchSetCommodityRules(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 开启和关闭风控
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      /// <param name="version"></param>
      /// <param name="riskEnabled"></param>
      HostingRiskRuleJoint setRiskEnabled(PlatformArgs platformArgs, long subAccountId, int version, bool riskEnabled);
      #if SILVERLIGHT
      IAsyncResult Begin_setRiskEnabled(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, bool riskEnabled);
      HostingRiskRuleJoint End_setRiskEnabled(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取风控数据
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      HostingRiskFrameDataInfo getRiskFrameDataInfo(PlatformArgs platformArgs, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_getRiskFrameDataInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId);
      HostingRiskFrameDataInfo End_getRiskFrameDataInfo(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAllSupportedItems(AsyncCallback callback, object state, PlatformArgs platformArgs)
      {
        return send_getAllSupportedItems(callback, state, platformArgs);
      }

      public List<HostingRiskSupportedItem> End_getAllSupportedItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAllSupportedItems();
      }

      #endif

      /// <summary>
      /// 获取所有支持的风控项
      /// </summary>
      /// <param name="platformArgs"></param>
      public List<HostingRiskSupportedItem> getAllSupportedItems(PlatformArgs platformArgs)
      {
        #if !SILVERLIGHT
        send_getAllSupportedItems(platformArgs);
        return recv_getAllSupportedItems();

        #else
        var asyncResult = Begin_getAllSupportedItems(null, null, platformArgs);
        return End_getAllSupportedItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAllSupportedItems(AsyncCallback callback, object state, PlatformArgs platformArgs)
      #else
      public void send_getAllSupportedItems(PlatformArgs platformArgs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAllSupportedItems", TMessageType.Call, seqid_));
        getAllSupportedItems_args args = new getAllSupportedItems_args();
        args.PlatformArgs = platformArgs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<HostingRiskSupportedItem> recv_getAllSupportedItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAllSupportedItems_result result = new getAllSupportedItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllSupportedItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRiskRuleJointVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId)
      {
        return send_getRiskRuleJointVersion(callback, state, platformArgs, subAccountId);
      }

      public int End_getRiskRuleJointVersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRiskRuleJointVersion();
      }

      #endif

      /// <summary>
      /// 获取风控结构的版本
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      public int getRiskRuleJointVersion(PlatformArgs platformArgs, long subAccountId)
      {
        #if !SILVERLIGHT
        send_getRiskRuleJointVersion(platformArgs, subAccountId);
        return recv_getRiskRuleJointVersion();

        #else
        var asyncResult = Begin_getRiskRuleJointVersion(null, null, platformArgs, subAccountId);
        return End_getRiskRuleJointVersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRiskRuleJointVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId)
      #else
      public void send_getRiskRuleJointVersion(PlatformArgs platformArgs, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRiskRuleJointVersion", TMessageType.Call, seqid_));
        getRiskRuleJointVersion_args args = new getRiskRuleJointVersion_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_getRiskRuleJointVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRiskRuleJointVersion_result result = new getRiskRuleJointVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRiskRuleJointVersion failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRiskRuleJoint(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId)
      {
        return send_getRiskRuleJoint(callback, state, platformArgs, subAccountId);
      }

      public HostingRiskRuleJoint End_getRiskRuleJoint(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRiskRuleJoint();
      }

      #endif

      /// <summary>
      /// 获取风控结构
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      public HostingRiskRuleJoint getRiskRuleJoint(PlatformArgs platformArgs, long subAccountId)
      {
        #if !SILVERLIGHT
        send_getRiskRuleJoint(platformArgs, subAccountId);
        return recv_getRiskRuleJoint();

        #else
        var asyncResult = Begin_getRiskRuleJoint(null, null, platformArgs, subAccountId);
        return End_getRiskRuleJoint(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRiskRuleJoint(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId)
      #else
      public void send_getRiskRuleJoint(PlatformArgs platformArgs, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRiskRuleJoint", TMessageType.Call, seqid_));
        getRiskRuleJoint_args args = new getRiskRuleJoint_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingRiskRuleJoint recv_getRiskRuleJoint()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRiskRuleJoint_result result = new getRiskRuleJoint_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRiskRuleJoint failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchSetSupportedItems(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, THashSet<string> openedItemIds, THashSet<string> closedItemIds)
      {
        return send_batchSetSupportedItems(callback, state, platformArgs, subAccountId, version, openedItemIds, closedItemIds);
      }

      public HostingRiskRuleJoint End_batchSetSupportedItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_batchSetSupportedItems();
      }

      #endif

      /// <summary>
      /// 批量设置关注风控项
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      /// <param name="version"></param>
      /// <param name="openedItemIds"></param>
      /// <param name="closedItemIds"></param>
      public HostingRiskRuleJoint batchSetSupportedItems(PlatformArgs platformArgs, long subAccountId, int version, THashSet<string> openedItemIds, THashSet<string> closedItemIds)
      {
        #if !SILVERLIGHT
        send_batchSetSupportedItems(platformArgs, subAccountId, version, openedItemIds, closedItemIds);
        return recv_batchSetSupportedItems();

        #else
        var asyncResult = Begin_batchSetSupportedItems(null, null, platformArgs, subAccountId, version, openedItemIds, closedItemIds);
        return End_batchSetSupportedItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchSetSupportedItems(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, THashSet<string> openedItemIds, THashSet<string> closedItemIds)
      #else
      public void send_batchSetSupportedItems(PlatformArgs platformArgs, long subAccountId, int version, THashSet<string> openedItemIds, THashSet<string> closedItemIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchSetSupportedItems", TMessageType.Call, seqid_));
        batchSetSupportedItems_args args = new batchSetSupportedItems_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.Version = version;
        args.OpenedItemIds = openedItemIds;
        args.ClosedItemIds = closedItemIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingRiskRuleJoint recv_batchSetSupportedItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchSetSupportedItems_result result = new batchSetSupportedItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batchSetSupportedItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchSetTradedCommodityItems(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, THashSet<long> enabledCommodityIds, THashSet<long> disabledCommodityIds)
      {
        return send_batchSetTradedCommodityItems(callback, state, platformArgs, subAccountId, version, enabledCommodityIds, disabledCommodityIds);
      }

      public HostingRiskRuleJoint End_batchSetTradedCommodityItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_batchSetTradedCommodityItems();
      }

      #endif

      /// <summary>
      /// 批量操作可交易商品, 禁用商品会导致商品上的规则禁用
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      /// <param name="version"></param>
      /// <param name="enabledCommodityIds"></param>
      /// <param name="disabledCommodityIds"></param>
      public HostingRiskRuleJoint batchSetTradedCommodityItems(PlatformArgs platformArgs, long subAccountId, int version, THashSet<long> enabledCommodityIds, THashSet<long> disabledCommodityIds)
      {
        #if !SILVERLIGHT
        send_batchSetTradedCommodityItems(platformArgs, subAccountId, version, enabledCommodityIds, disabledCommodityIds);
        return recv_batchSetTradedCommodityItems();

        #else
        var asyncResult = Begin_batchSetTradedCommodityItems(null, null, platformArgs, subAccountId, version, enabledCommodityIds, disabledCommodityIds);
        return End_batchSetTradedCommodityItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchSetTradedCommodityItems(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, THashSet<long> enabledCommodityIds, THashSet<long> disabledCommodityIds)
      #else
      public void send_batchSetTradedCommodityItems(PlatformArgs platformArgs, long subAccountId, int version, THashSet<long> enabledCommodityIds, THashSet<long> disabledCommodityIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchSetTradedCommodityItems", TMessageType.Call, seqid_));
        batchSetTradedCommodityItems_args args = new batchSetTradedCommodityItems_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.Version = version;
        args.EnabledCommodityIds = enabledCommodityIds;
        args.DisabledCommodityIds = disabledCommodityIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingRiskRuleJoint recv_batchSetTradedCommodityItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchSetTradedCommodityItems_result result = new batchSetTradedCommodityItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batchSetTradedCommodityItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchSetGlobalRules(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, Dictionary<string, HostingRiskRuleItem> ruleItems)
      {
        return send_batchSetGlobalRules(callback, state, platformArgs, subAccountId, version, ruleItems);
      }

      public HostingRiskRuleJoint End_batchSetGlobalRules(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_batchSetGlobalRules();
      }

      #endif

      /// <summary>
      /// 批量设置全局风控规则
      ///   以全局开放指标为Key
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      /// <param name="version"></param>
      /// <param name="ruleItems"></param>
      public HostingRiskRuleJoint batchSetGlobalRules(PlatformArgs platformArgs, long subAccountId, int version, Dictionary<string, HostingRiskRuleItem> ruleItems)
      {
        #if !SILVERLIGHT
        send_batchSetGlobalRules(platformArgs, subAccountId, version, ruleItems);
        return recv_batchSetGlobalRules();

        #else
        var asyncResult = Begin_batchSetGlobalRules(null, null, platformArgs, subAccountId, version, ruleItems);
        return End_batchSetGlobalRules(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchSetGlobalRules(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, Dictionary<string, HostingRiskRuleItem> ruleItems)
      #else
      public void send_batchSetGlobalRules(PlatformArgs platformArgs, long subAccountId, int version, Dictionary<string, HostingRiskRuleItem> ruleItems)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchSetGlobalRules", TMessageType.Call, seqid_));
        batchSetGlobalRules_args args = new batchSetGlobalRules_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.Version = version;
        args.RuleItems = ruleItems;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingRiskRuleJoint recv_batchSetGlobalRules()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchSetGlobalRules_result result = new batchSetGlobalRules_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batchSetGlobalRules failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchSetCommodityRules(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, Dictionary<long, Dictionary<string, HostingRiskRuleItem>> rules)
      {
        return send_batchSetCommodityRules(callback, state, platformArgs, subAccountId, version, rules);
      }

      public HostingRiskRuleJoint End_batchSetCommodityRules(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_batchSetCommodityRules();
      }

      #endif

      /// <summary>
      /// 批量设置商品风控规则
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      /// <param name="version"></param>
      /// <param name="rules"></param>
      public HostingRiskRuleJoint batchSetCommodityRules(PlatformArgs platformArgs, long subAccountId, int version, Dictionary<long, Dictionary<string, HostingRiskRuleItem>> rules)
      {
        #if !SILVERLIGHT
        send_batchSetCommodityRules(platformArgs, subAccountId, version, rules);
        return recv_batchSetCommodityRules();

        #else
        var asyncResult = Begin_batchSetCommodityRules(null, null, platformArgs, subAccountId, version, rules);
        return End_batchSetCommodityRules(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchSetCommodityRules(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, Dictionary<long, Dictionary<string, HostingRiskRuleItem>> rules)
      #else
      public void send_batchSetCommodityRules(PlatformArgs platformArgs, long subAccountId, int version, Dictionary<long, Dictionary<string, HostingRiskRuleItem>> rules)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchSetCommodityRules", TMessageType.Call, seqid_));
        batchSetCommodityRules_args args = new batchSetCommodityRules_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.Version = version;
        args.Rules = rules;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingRiskRuleJoint recv_batchSetCommodityRules()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchSetCommodityRules_result result = new batchSetCommodityRules_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batchSetCommodityRules failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setRiskEnabled(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, bool riskEnabled)
      {
        return send_setRiskEnabled(callback, state, platformArgs, subAccountId, version, riskEnabled);
      }

      public HostingRiskRuleJoint End_setRiskEnabled(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_setRiskEnabled();
      }

      #endif

      /// <summary>
      /// 开启和关闭风控
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      /// <param name="version"></param>
      /// <param name="riskEnabled"></param>
      public HostingRiskRuleJoint setRiskEnabled(PlatformArgs platformArgs, long subAccountId, int version, bool riskEnabled)
      {
        #if !SILVERLIGHT
        send_setRiskEnabled(platformArgs, subAccountId, version, riskEnabled);
        return recv_setRiskEnabled();

        #else
        var asyncResult = Begin_setRiskEnabled(null, null, platformArgs, subAccountId, version, riskEnabled);
        return End_setRiskEnabled(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setRiskEnabled(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, int version, bool riskEnabled)
      #else
      public void send_setRiskEnabled(PlatformArgs platformArgs, long subAccountId, int version, bool riskEnabled)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setRiskEnabled", TMessageType.Call, seqid_));
        setRiskEnabled_args args = new setRiskEnabled_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.Version = version;
        args.RiskEnabled = riskEnabled;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingRiskRuleJoint recv_setRiskEnabled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setRiskEnabled_result result = new setRiskEnabled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setRiskEnabled failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRiskFrameDataInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId)
      {
        return send_getRiskFrameDataInfo(callback, state, platformArgs, subAccountId);
      }

      public HostingRiskFrameDataInfo End_getRiskFrameDataInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRiskFrameDataInfo();
      }

      #endif

      /// <summary>
      /// 获取风控数据
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      public HostingRiskFrameDataInfo getRiskFrameDataInfo(PlatformArgs platformArgs, long subAccountId)
      {
        #if !SILVERLIGHT
        send_getRiskFrameDataInfo(platformArgs, subAccountId);
        return recv_getRiskFrameDataInfo();

        #else
        var asyncResult = Begin_getRiskFrameDataInfo(null, null, platformArgs, subAccountId);
        return End_getRiskFrameDataInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRiskFrameDataInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId)
      #else
      public void send_getRiskFrameDataInfo(PlatformArgs platformArgs, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRiskFrameDataInfo", TMessageType.Call, seqid_));
        getRiskFrameDataInfo_args args = new getRiskFrameDataInfo_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingRiskFrameDataInfo recv_getRiskFrameDataInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRiskFrameDataInfo_result result = new getRiskFrameDataInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRiskFrameDataInfo failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["getAllSupportedItems"] = getAllSupportedItems_Process;
        processMap_["getRiskRuleJointVersion"] = getRiskRuleJointVersion_Process;
        processMap_["getRiskRuleJoint"] = getRiskRuleJoint_Process;
        processMap_["batchSetSupportedItems"] = batchSetSupportedItems_Process;
        processMap_["batchSetTradedCommodityItems"] = batchSetTradedCommodityItems_Process;
        processMap_["batchSetGlobalRules"] = batchSetGlobalRules_Process;
        processMap_["batchSetCommodityRules"] = batchSetCommodityRules_Process;
        processMap_["setRiskEnabled"] = setRiskEnabled_Process;
        processMap_["getRiskFrameDataInfo"] = getRiskFrameDataInfo_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void getAllSupportedItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAllSupportedItems_args args = new getAllSupportedItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAllSupportedItems_result result = new getAllSupportedItems_result();
        try {
          result.Success = iface_.getAllSupportedItems(args.PlatformArgs);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getAllSupportedItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRiskRuleJointVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRiskRuleJointVersion_args args = new getRiskRuleJointVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRiskRuleJointVersion_result result = new getRiskRuleJointVersion_result();
        try {
          result.Success = iface_.getRiskRuleJointVersion(args.PlatformArgs, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getRiskRuleJointVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRiskRuleJoint_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRiskRuleJoint_args args = new getRiskRuleJoint_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRiskRuleJoint_result result = new getRiskRuleJoint_result();
        try {
          result.Success = iface_.getRiskRuleJoint(args.PlatformArgs, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getRiskRuleJoint", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchSetSupportedItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchSetSupportedItems_args args = new batchSetSupportedItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchSetSupportedItems_result result = new batchSetSupportedItems_result();
        try {
          result.Success = iface_.batchSetSupportedItems(args.PlatformArgs, args.SubAccountId, args.Version, args.OpenedItemIds, args.ClosedItemIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchSetSupportedItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchSetTradedCommodityItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchSetTradedCommodityItems_args args = new batchSetTradedCommodityItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchSetTradedCommodityItems_result result = new batchSetTradedCommodityItems_result();
        try {
          result.Success = iface_.batchSetTradedCommodityItems(args.PlatformArgs, args.SubAccountId, args.Version, args.EnabledCommodityIds, args.DisabledCommodityIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchSetTradedCommodityItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchSetGlobalRules_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchSetGlobalRules_args args = new batchSetGlobalRules_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchSetGlobalRules_result result = new batchSetGlobalRules_result();
        try {
          result.Success = iface_.batchSetGlobalRules(args.PlatformArgs, args.SubAccountId, args.Version, args.RuleItems);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchSetGlobalRules", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchSetCommodityRules_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchSetCommodityRules_args args = new batchSetCommodityRules_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchSetCommodityRules_result result = new batchSetCommodityRules_result();
        try {
          result.Success = iface_.batchSetCommodityRules(args.PlatformArgs, args.SubAccountId, args.Version, args.Rules);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchSetCommodityRules", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setRiskEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setRiskEnabled_args args = new setRiskEnabled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setRiskEnabled_result result = new setRiskEnabled_result();
        try {
          result.Success = iface_.setRiskEnabled(args.PlatformArgs, args.SubAccountId, args.Version, args.RiskEnabled);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setRiskEnabled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRiskFrameDataInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRiskFrameDataInfo_args args = new getRiskFrameDataInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRiskFrameDataInfo_result result = new getRiskFrameDataInfo_result();
        try {
          result.Success = iface_.getRiskFrameDataInfo(args.PlatformArgs, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getRiskFrameDataInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllSupportedItems_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
      }

      public getAllSupportedItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllSupportedItems_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAllSupportedItems_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllSupportedItems_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<HostingRiskSupportedItem> _success;
      private ErrorInfo _err;

      public List<HostingRiskSupportedItem> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getAllSupportedItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<HostingRiskSupportedItem>();
                  TList _list62 = iprot.ReadListBegin();
                  for( int _i63 = 0; _i63 < _list62.Count; ++_i63)
                  {
                    HostingRiskSupportedItem _elem64 = new HostingRiskSupportedItem();
                    _elem64 = new HostingRiskSupportedItem();
                    _elem64.Read(iprot);
                    Success.Add(_elem64);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllSupportedItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (HostingRiskSupportedItem _iter65 in Success)
              {
                _iter65.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAllSupportedItems_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (HostingRiskSupportedItem _iter66 in Success)
          {
            sb.Append(_iter66.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRiskRuleJointVersion_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
      }

      public getRiskRuleJointVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRiskRuleJointVersion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRiskRuleJointVersion_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRiskRuleJointVersion_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private int _success;
      private ErrorInfo _err;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getRiskRuleJointVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRiskRuleJointVersion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRiskRuleJointVersion_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRiskRuleJoint_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
      }

      public getRiskRuleJoint_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRiskRuleJoint_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRiskRuleJoint_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRiskRuleJoint_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingRiskRuleJoint _success;
      private ErrorInfo _err;

      public HostingRiskRuleJoint Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getRiskRuleJoint_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingRiskRuleJoint();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRiskRuleJoint_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRiskRuleJoint_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetSupportedItems_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;
      private int _version;
      private THashSet<string> _openedItemIds;
      private THashSet<string> _closedItemIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          SetProperty(ref _version, value);
        }
      }

      public THashSet<string> OpenedItemIds
      {
        get
        {
          return _openedItemIds;
        }
        set
        {
          __isset.openedItemIds = true;
          SetProperty(ref _openedItemIds, value);
        }
      }

      public THashSet<string> ClosedItemIds
      {
        get
        {
          return _closedItemIds;
        }
        set
        {
          __isset.closedItemIds = true;
          SetProperty(ref _closedItemIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
        public bool version;
        public bool openedItemIds;
        public bool closedItemIds;
      }

      public batchSetSupportedItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Version = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Set) {
                {
                  OpenedItemIds = new THashSet<string>();
                  TSet _set67 = iprot.ReadSetBegin();
                  for( int _i68 = 0; _i68 < _set67.Count; ++_i68)
                  {
                    string _elem69 = null;
                    _elem69 = iprot.ReadString();
                    OpenedItemIds.Add(_elem69);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Set) {
                {
                  ClosedItemIds = new THashSet<string>();
                  TSet _set70 = iprot.ReadSetBegin();
                  for( int _i71 = 0; _i71 < _set70.Count; ++_i71)
                  {
                    string _elem72 = null;
                    _elem72 = iprot.ReadString();
                    ClosedItemIds.Add(_elem72);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetSupportedItems_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.version) {
          field.Name = "version";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Version);
          oprot.WriteFieldEnd();
        }
        if (OpenedItemIds != null && __isset.openedItemIds) {
          field.Name = "openedItemIds";
          field.Type = TType.Set;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, OpenedItemIds.Count));
            foreach (string _iter73 in OpenedItemIds)
            {
              oprot.WriteString(_iter73);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ClosedItemIds != null && __isset.closedItemIds) {
          field.Name = "closedItemIds";
          field.Type = TType.Set;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, ClosedItemIds.Count));
            foreach (string _iter74 in ClosedItemIds)
            {
              oprot.WriteString(_iter74);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetSupportedItems_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",Version: ");
        sb.Append(Version);
        sb.Append(",OpenedItemIds: ");
        if (OpenedItemIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (string _iter75 in OpenedItemIds)
          {
            sb.Append(_iter75.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",ClosedItemIds: ");
        if (ClosedItemIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (string _iter76 in ClosedItemIds)
          {
            sb.Append(_iter76.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetSupportedItems_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingRiskRuleJoint _success;
      private ErrorInfo _err;

      public HostingRiskRuleJoint Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public batchSetSupportedItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingRiskRuleJoint();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetSupportedItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetSupportedItems_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetTradedCommodityItems_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;
      private int _version;
      private THashSet<long> _enabledCommodityIds;
      private THashSet<long> _disabledCommodityIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          SetProperty(ref _version, value);
        }
      }

      public THashSet<long> EnabledCommodityIds
      {
        get
        {
          return _enabledCommodityIds;
        }
        set
        {
          __isset.enabledCommodityIds = true;
          SetProperty(ref _enabledCommodityIds, value);
        }
      }

      public THashSet<long> DisabledCommodityIds
      {
        get
        {
          return _disabledCommodityIds;
        }
        set
        {
          __isset.disabledCommodityIds = true;
          SetProperty(ref _disabledCommodityIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
        public bool version;
        public bool enabledCommodityIds;
        public bool disabledCommodityIds;
      }

      public batchSetTradedCommodityItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Version = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Set) {
                {
                  EnabledCommodityIds = new THashSet<long>();
                  TSet _set77 = iprot.ReadSetBegin();
                  for( int _i78 = 0; _i78 < _set77.Count; ++_i78)
                  {
                    long _elem79 = 0;
                    _elem79 = iprot.ReadI64();
                    EnabledCommodityIds.Add(_elem79);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Set) {
                {
                  DisabledCommodityIds = new THashSet<long>();
                  TSet _set80 = iprot.ReadSetBegin();
                  for( int _i81 = 0; _i81 < _set80.Count; ++_i81)
                  {
                    long _elem82 = 0;
                    _elem82 = iprot.ReadI64();
                    DisabledCommodityIds.Add(_elem82);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetTradedCommodityItems_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.version) {
          field.Name = "version";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Version);
          oprot.WriteFieldEnd();
        }
        if (EnabledCommodityIds != null && __isset.enabledCommodityIds) {
          field.Name = "enabledCommodityIds";
          field.Type = TType.Set;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I64, EnabledCommodityIds.Count));
            foreach (long _iter83 in EnabledCommodityIds)
            {
              oprot.WriteI64(_iter83);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (DisabledCommodityIds != null && __isset.disabledCommodityIds) {
          field.Name = "disabledCommodityIds";
          field.Type = TType.Set;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I64, DisabledCommodityIds.Count));
            foreach (long _iter84 in DisabledCommodityIds)
            {
              oprot.WriteI64(_iter84);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetTradedCommodityItems_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",Version: ");
        sb.Append(Version);
        sb.Append(",EnabledCommodityIds: ");
        if (EnabledCommodityIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (long _iter85 in EnabledCommodityIds)
          {
            sb.Append(_iter85.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",DisabledCommodityIds: ");
        if (DisabledCommodityIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (long _iter86 in DisabledCommodityIds)
          {
            sb.Append(_iter86.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetTradedCommodityItems_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingRiskRuleJoint _success;
      private ErrorInfo _err;

      public HostingRiskRuleJoint Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public batchSetTradedCommodityItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingRiskRuleJoint();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetTradedCommodityItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetTradedCommodityItems_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetGlobalRules_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;
      private int _version;
      private Dictionary<string, HostingRiskRuleItem> _ruleItems;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          SetProperty(ref _version, value);
        }
      }

      public Dictionary<string, HostingRiskRuleItem> RuleItems
      {
        get
        {
          return _ruleItems;
        }
        set
        {
          __isset.ruleItems = true;
          SetProperty(ref _ruleItems, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
        public bool version;
        public bool ruleItems;
      }

      public batchSetGlobalRules_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Version = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Map) {
                {
                  RuleItems = new Dictionary<string, HostingRiskRuleItem>();
                  TMap _map87 = iprot.ReadMapBegin();
                  for( int _i88 = 0; _i88 < _map87.Count; ++_i88)
                  {
                    string _key89;
                    HostingRiskRuleItem _val90;
                    _key89 = iprot.ReadString();
                    _val90 = new HostingRiskRuleItem();
                    _val90.Read(iprot);
                    RuleItems[_key89] = _val90;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetGlobalRules_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.version) {
          field.Name = "version";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Version);
          oprot.WriteFieldEnd();
        }
        if (RuleItems != null && __isset.ruleItems) {
          field.Name = "ruleItems";
          field.Type = TType.Map;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, RuleItems.Count));
            foreach (string _iter91 in RuleItems.Keys)
            {
              oprot.WriteString(_iter91);
              RuleItems[_iter91].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetGlobalRules_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",Version: ");
        sb.Append(Version);
        sb.Append(",RuleItems: ");
        if (RuleItems == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (string _iter92 in RuleItems.Keys)
          {
            sb.Append(_iter92.ToString());
            sb.Append(":");
            sb.Append(RuleItems[_iter92].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetGlobalRules_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingRiskRuleJoint _success;
      private ErrorInfo _err;

      public HostingRiskRuleJoint Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public batchSetGlobalRules_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingRiskRuleJoint();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetGlobalRules_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetGlobalRules_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetCommodityRules_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;
      private int _version;
      private Dictionary<long, Dictionary<string, HostingRiskRuleItem>> _rules;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          SetProperty(ref _version, value);
        }
      }

      public Dictionary<long, Dictionary<string, HostingRiskRuleItem>> Rules
      {
        get
        {
          return _rules;
        }
        set
        {
          __isset.rules = true;
          SetProperty(ref _rules, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
        public bool version;
        public bool rules;
      }

      public batchSetCommodityRules_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Version = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Map) {
                {
                  Rules = new Dictionary<long, Dictionary<string, HostingRiskRuleItem>>();
                  TMap _map93 = iprot.ReadMapBegin();
                  for( int _i94 = 0; _i94 < _map93.Count; ++_i94)
                  {
                    long _key95;
                    Dictionary<string, HostingRiskRuleItem> _val96;
                    _key95 = iprot.ReadI64();
                    {
                      _val96 = new Dictionary<string, HostingRiskRuleItem>();
                      TMap _map97 = iprot.ReadMapBegin();
                      for( int _i98 = 0; _i98 < _map97.Count; ++_i98)
                      {
                        string _key99;
                        HostingRiskRuleItem _val100;
                        _key99 = iprot.ReadString();
                        _val100 = new HostingRiskRuleItem();
                        _val100.Read(iprot);
                        _val96[_key99] = _val100;
                      }
                      iprot.ReadMapEnd();
                    }
                    Rules[_key95] = _val96;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetCommodityRules_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.version) {
          field.Name = "version";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Version);
          oprot.WriteFieldEnd();
        }
        if (Rules != null && __isset.rules) {
          field.Name = "rules";
          field.Type = TType.Map;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I64, TType.Map, Rules.Count));
            foreach (long _iter101 in Rules.Keys)
            {
              oprot.WriteI64(_iter101);
              {
                oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Rules[_iter101].Count));
                foreach (string _iter102 in Rules[_iter101].Keys)
                {
                  oprot.WriteString(_iter102);
                  Rules[_iter101][_iter102].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetCommodityRules_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",Version: ");
        sb.Append(Version);
        sb.Append(",Rules: ");
        if (Rules == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (long _iter103 in Rules.Keys)
          {
            sb.Append(_iter103.ToString());
            sb.Append(":");
            sb.Append(Rules[_iter103].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetCommodityRules_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingRiskRuleJoint _success;
      private ErrorInfo _err;

      public HostingRiskRuleJoint Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public batchSetCommodityRules_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingRiskRuleJoint();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetCommodityRules_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetCommodityRules_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setRiskEnabled_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;
      private int _version;
      private bool _riskEnabled;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          SetProperty(ref _version, value);
        }
      }

      public bool RiskEnabled
      {
        get
        {
          return _riskEnabled;
        }
        set
        {
          __isset.riskEnabled = true;
          SetProperty(ref _riskEnabled, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
        public bool version;
        public bool riskEnabled;
      }

      public setRiskEnabled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Version = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                RiskEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setRiskEnabled_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.version) {
          field.Name = "version";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Version);
          oprot.WriteFieldEnd();
        }
        if (__isset.riskEnabled) {
          field.Name = "riskEnabled";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(RiskEnabled);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setRiskEnabled_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",Version: ");
        sb.Append(Version);
        sb.Append(",RiskEnabled: ");
        sb.Append(RiskEnabled);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setRiskEnabled_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingRiskRuleJoint _success;
      private ErrorInfo _err;

      public HostingRiskRuleJoint Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public setRiskEnabled_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingRiskRuleJoint();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setRiskEnabled_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setRiskEnabled_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRiskFrameDataInfo_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
      }

      public getRiskFrameDataInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRiskFrameDataInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRiskFrameDataInfo_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRiskFrameDataInfo_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingRiskFrameDataInfo _success;
      private ErrorInfo _err;

      public HostingRiskFrameDataInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getRiskFrameDataInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingRiskFrameDataInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRiskFrameDataInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRiskFrameDataInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
