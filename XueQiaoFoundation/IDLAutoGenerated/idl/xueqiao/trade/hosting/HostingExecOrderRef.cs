/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingExecOrderRef : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private CTPOrderRef _ctpRef;
    private ESunny3OrderRef _esunny3Ref;
    private ESunny9OrderRef _esunny9Ref;

    public CTPOrderRef CtpRef
    {
      get
      {
        return _ctpRef;
      }
      set
      {
        __isset.ctpRef = true;
        SetProperty(ref _ctpRef, value);
      }
    }

    public ESunny3OrderRef Esunny3Ref
    {
      get
      {
        return _esunny3Ref;
      }
      set
      {
        __isset.esunny3Ref = true;
        SetProperty(ref _esunny3Ref, value);
      }
    }

    public ESunny9OrderRef Esunny9Ref
    {
      get
      {
        return _esunny9Ref;
      }
      set
      {
        __isset.esunny9Ref = true;
        SetProperty(ref _esunny9Ref, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ctpRef;
      public bool esunny3Ref;
      public bool esunny9Ref;
    }

    public HostingExecOrderRef() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              CtpRef = new CTPOrderRef();
              CtpRef.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Esunny3Ref = new ESunny3OrderRef();
              Esunny3Ref.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Esunny9Ref = new ESunny9OrderRef();
              Esunny9Ref.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingExecOrderRef");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (CtpRef != null && __isset.ctpRef) {
        field.Name = "ctpRef";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        CtpRef.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Esunny3Ref != null && __isset.esunny3Ref) {
        field.Name = "esunny3Ref";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Esunny3Ref.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Esunny9Ref != null && __isset.esunny9Ref) {
        field.Name = "esunny9Ref";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Esunny9Ref.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingExecOrderRef(");
      sb.Append("CtpRef: ");
      sb.Append(CtpRef== null ? "<null>" : CtpRef.ToString());
      sb.Append(",Esunny3Ref: ");
      sb.Append(Esunny3Ref== null ? "<null>" : Esunny3Ref.ToString());
      sb.Append(",Esunny9Ref: ");
      sb.Append(Esunny9Ref== null ? "<null>" : Esunny9Ref.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
