/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingUpsideNotifyStateInfo : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private HostingUpsideNotifyStateType _state;
    private HostingExecOrderDealInfo _dealInfo;
    private int _volumeTraded;
    private int _volumeResting;
    private double _tradeAveragePrice;
    private string _statusUsefulMsg;

    /// <summary>
    /// 
    /// <seealso cref="HostingUpsideNotifyStateType"/>
    /// </summary>
    public HostingUpsideNotifyStateType State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        SetProperty(ref _state, value);
      }
    }

    public HostingExecOrderDealInfo DealInfo
    {
      get
      {
        return _dealInfo;
      }
      set
      {
        __isset.dealInfo = true;
        SetProperty(ref _dealInfo, value);
      }
    }

    public int VolumeTraded
    {
      get
      {
        return _volumeTraded;
      }
      set
      {
        __isset.volumeTraded = true;
        SetProperty(ref _volumeTraded, value);
      }
    }

    public int VolumeResting
    {
      get
      {
        return _volumeResting;
      }
      set
      {
        __isset.volumeResting = true;
        SetProperty(ref _volumeResting, value);
      }
    }

    public double TradeAveragePrice
    {
      get
      {
        return _tradeAveragePrice;
      }
      set
      {
        __isset.tradeAveragePrice = true;
        SetProperty(ref _tradeAveragePrice, value);
      }
    }

    public string StatusUsefulMsg
    {
      get
      {
        return _statusUsefulMsg;
      }
      set
      {
        __isset.statusUsefulMsg = true;
        SetProperty(ref _statusUsefulMsg, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool state;
      public bool dealInfo;
      public bool volumeTraded;
      public bool volumeResting;
      public bool tradeAveragePrice;
      public bool statusUsefulMsg;
    }

    public HostingUpsideNotifyStateInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              State = (HostingUpsideNotifyStateType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              DealInfo = new HostingExecOrderDealInfo();
              DealInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              VolumeTraded = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              VolumeResting = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              TradeAveragePrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              StatusUsefulMsg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingUpsideNotifyStateInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)State);
        oprot.WriteFieldEnd();
      }
      if (DealInfo != null && __isset.dealInfo) {
        field.Name = "dealInfo";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        DealInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.volumeTraded) {
        field.Name = "volumeTraded";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(VolumeTraded);
        oprot.WriteFieldEnd();
      }
      if (__isset.volumeResting) {
        field.Name = "volumeResting";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(VolumeResting);
        oprot.WriteFieldEnd();
      }
      if (__isset.tradeAveragePrice) {
        field.Name = "tradeAveragePrice";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(TradeAveragePrice);
        oprot.WriteFieldEnd();
      }
      if (StatusUsefulMsg != null && __isset.statusUsefulMsg) {
        field.Name = "statusUsefulMsg";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StatusUsefulMsg);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingUpsideNotifyStateInfo(");
      sb.Append("State: ");
      sb.Append(State);
      sb.Append(",DealInfo: ");
      sb.Append(DealInfo== null ? "<null>" : DealInfo.ToString());
      sb.Append(",VolumeTraded: ");
      sb.Append(VolumeTraded);
      sb.Append(",VolumeResting: ");
      sb.Append(VolumeResting);
      sb.Append(",TradeAveragePrice: ");
      sb.Append(TradeAveragePrice);
      sb.Append(",StatusUsefulMsg: ");
      sb.Append(StatusUsefulMsg);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
