/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.adjust.thriftapi
{

  /// <summary>
  /// 未分配持仓
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PositionUnassigned : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _inputId;
    private long _inputSubUserId;
    private long _tradeAccountId;
    private long _sledContractId;
    private long _sledCommodityId;
    private double _price;
    private int _volume;
    private xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection _positionDirection;
    private long _positionTimestampMs;
    private long _createTimestampMs;
    private long _lastmodifyTimestampMs;

    public long InputId
    {
      get
      {
        return _inputId;
      }
      set
      {
        __isset.inputId = true;
        SetProperty(ref _inputId, value);
      }
    }

    public long InputSubUserId
    {
      get
      {
        return _inputSubUserId;
      }
      set
      {
        __isset.inputSubUserId = true;
        SetProperty(ref _inputSubUserId, value);
      }
    }

    public long TradeAccountId
    {
      get
      {
        return _tradeAccountId;
      }
      set
      {
        __isset.tradeAccountId = true;
        SetProperty(ref _tradeAccountId, value);
      }
    }

    public long SledContractId
    {
      get
      {
        return _sledContractId;
      }
      set
      {
        __isset.sledContractId = true;
        SetProperty(ref _sledContractId, value);
      }
    }

    public long SledCommodityId
    {
      get
      {
        return _sledCommodityId;
      }
      set
      {
        __isset.sledCommodityId = true;
        SetProperty(ref _sledCommodityId, value);
      }
    }

    public double Price
    {
      get
      {
        return _price;
      }
      set
      {
        __isset.price = true;
        SetProperty(ref _price, value);
      }
    }

    public int Volume
    {
      get
      {
        return _volume;
      }
      set
      {
        __isset.volume = true;
        SetProperty(ref _volume, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection"/>
    /// </summary>
    public xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection PositionDirection
    {
      get
      {
        return _positionDirection;
      }
      set
      {
        __isset.positionDirection = true;
        SetProperty(ref _positionDirection, value);
      }
    }

    public long PositionTimestampMs
    {
      get
      {
        return _positionTimestampMs;
      }
      set
      {
        __isset.positionTimestampMs = true;
        SetProperty(ref _positionTimestampMs, value);
      }
    }

    public long CreateTimestampMs
    {
      get
      {
        return _createTimestampMs;
      }
      set
      {
        __isset.createTimestampMs = true;
        SetProperty(ref _createTimestampMs, value);
      }
    }

    public long LastmodifyTimestampMs
    {
      get
      {
        return _lastmodifyTimestampMs;
      }
      set
      {
        __isset.lastmodifyTimestampMs = true;
        SetProperty(ref _lastmodifyTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool inputId;
      public bool inputSubUserId;
      public bool tradeAccountId;
      public bool sledContractId;
      public bool sledCommodityId;
      public bool price;
      public bool volume;
      public bool positionDirection;
      public bool positionTimestampMs;
      public bool createTimestampMs;
      public bool lastmodifyTimestampMs;
    }

    public PositionUnassigned() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              InputId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              InputSubUserId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              TradeAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              SledContractId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              SledCommodityId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Double) {
              Price = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Volume = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              PositionDirection = (xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              PositionTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I64) {
              CreateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.I64) {
              LastmodifyTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PositionUnassigned");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.inputId) {
        field.Name = "inputId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(InputId);
        oprot.WriteFieldEnd();
      }
      if (__isset.inputSubUserId) {
        field.Name = "inputSubUserId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(InputSubUserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.tradeAccountId) {
        field.Name = "tradeAccountId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TradeAccountId);
        oprot.WriteFieldEnd();
      }
      if (__isset.sledContractId) {
        field.Name = "sledContractId";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SledContractId);
        oprot.WriteFieldEnd();
      }
      if (__isset.sledCommodityId) {
        field.Name = "sledCommodityId";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SledCommodityId);
        oprot.WriteFieldEnd();
      }
      if (__isset.price) {
        field.Name = "price";
        field.Type = TType.Double;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Price);
        oprot.WriteFieldEnd();
      }
      if (__isset.volume) {
        field.Name = "volume";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Volume);
        oprot.WriteFieldEnd();
      }
      if (__isset.positionDirection) {
        field.Name = "positionDirection";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)PositionDirection);
        oprot.WriteFieldEnd();
      }
      if (__isset.positionTimestampMs) {
        field.Name = "positionTimestampMs";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PositionTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestampMs) {
        field.Name = "createTimestampMs";
        field.Type = TType.I64;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastmodifyTimestampMs) {
        field.Name = "lastmodifyTimestampMs";
        field.Type = TType.I64;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastmodifyTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PositionUnassigned(");
      sb.Append("InputId: ");
      sb.Append(InputId);
      sb.Append(",InputSubUserId: ");
      sb.Append(InputSubUserId);
      sb.Append(",TradeAccountId: ");
      sb.Append(TradeAccountId);
      sb.Append(",SledContractId: ");
      sb.Append(SledContractId);
      sb.Append(",SledCommodityId: ");
      sb.Append(SledCommodityId);
      sb.Append(",Price: ");
      sb.Append(Price);
      sb.Append(",Volume: ");
      sb.Append(Volume);
      sb.Append(",PositionDirection: ");
      sb.Append(PositionDirection);
      sb.Append(",PositionTimestampMs: ");
      sb.Append(PositionTimestampMs);
      sb.Append(",CreateTimestampMs: ");
      sb.Append(CreateTimestampMs);
      sb.Append(",LastmodifyTimestampMs: ");
      sb.Append(LastmodifyTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
