/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.adjust.thriftapi
{

  /// <summary>
  /// 持仓分配时，需要添加同步调用任务，用于持仓分配影响到其他服务时，确保成功调用
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PositionAssignTask : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _taskId;
    private xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned _positionAssigned;
    private AoType _aoType;
    private long _createTimestampMs;
    private long _lastmodifyTimestampMs;

    public long TaskId
    {
      get
      {
        return _taskId;
      }
      set
      {
        __isset.taskId = true;
        SetProperty(ref _taskId, value);
      }
    }

    public xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned PositionAssigned
    {
      get
      {
        return _positionAssigned;
      }
      set
      {
        __isset.positionAssigned = true;
        SetProperty(ref _positionAssigned, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="AoType"/>
    /// </summary>
    public AoType AoType
    {
      get
      {
        return _aoType;
      }
      set
      {
        __isset.aoType = true;
        SetProperty(ref _aoType, value);
      }
    }

    public long CreateTimestampMs
    {
      get
      {
        return _createTimestampMs;
      }
      set
      {
        __isset.createTimestampMs = true;
        SetProperty(ref _createTimestampMs, value);
      }
    }

    public long LastmodifyTimestampMs
    {
      get
      {
        return _lastmodifyTimestampMs;
      }
      set
      {
        __isset.lastmodifyTimestampMs = true;
        SetProperty(ref _lastmodifyTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool taskId;
      public bool positionAssigned;
      public bool aoType;
      public bool createTimestampMs;
      public bool lastmodifyTimestampMs;
    }

    public PositionAssignTask() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              TaskId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              PositionAssigned = new xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned();
              PositionAssigned.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              AoType = (AoType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              CreateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              LastmodifyTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PositionAssignTask");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.taskId) {
        field.Name = "taskId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TaskId);
        oprot.WriteFieldEnd();
      }
      if (PositionAssigned != null && __isset.positionAssigned) {
        field.Name = "positionAssigned";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        PositionAssigned.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.aoType) {
        field.Name = "aoType";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)AoType);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestampMs) {
        field.Name = "createTimestampMs";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastmodifyTimestampMs) {
        field.Name = "lastmodifyTimestampMs";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastmodifyTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PositionAssignTask(");
      sb.Append("TaskId: ");
      sb.Append(TaskId);
      sb.Append(",PositionAssigned: ");
      sb.Append(PositionAssigned== null ? "<null>" : PositionAssigned.ToString());
      sb.Append(",AoType: ");
      sb.Append(AoType);
      sb.Append(",CreateTimestampMs: ");
      sb.Append(CreateTimestampMs);
      sb.Append(",LastmodifyTimestampMs: ");
      sb.Append(LastmodifyTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
