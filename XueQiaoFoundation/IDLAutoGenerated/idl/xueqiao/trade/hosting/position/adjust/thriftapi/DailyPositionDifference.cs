/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.adjust.thriftapi
{

  /// <summary>
  /// 资金账户合约的每日净持仓差异
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DailyPositionDifference : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _dateSec;
    private long _tradeAccountId;
    private long _sledContractId;
    private int _sledNetPosition;
    private int _upsideNetPosition;
    private int _inputNetPosition;
    private int _sumNetPosition;
    private bool _persisted;
    private long _dotTimestampMs;
    private Milestone _milestone;
    private VerifyStatus _verifyStatus;
    private string _note;
    private long _createTimestampMs;
    private long _lastmodifyTimestampMs;
    private long _startTimestampMs;

    public long DateSec
    {
      get
      {
        return _dateSec;
      }
      set
      {
        __isset.dateSec = true;
        SetProperty(ref _dateSec, value);
      }
    }

    public long TradeAccountId
    {
      get
      {
        return _tradeAccountId;
      }
      set
      {
        __isset.tradeAccountId = true;
        SetProperty(ref _tradeAccountId, value);
      }
    }

    public long SledContractId
    {
      get
      {
        return _sledContractId;
      }
      set
      {
        __isset.sledContractId = true;
        SetProperty(ref _sledContractId, value);
      }
    }

    public int SledNetPosition
    {
      get
      {
        return _sledNetPosition;
      }
      set
      {
        __isset.sledNetPosition = true;
        SetProperty(ref _sledNetPosition, value);
      }
    }

    public int UpsideNetPosition
    {
      get
      {
        return _upsideNetPosition;
      }
      set
      {
        __isset.upsideNetPosition = true;
        SetProperty(ref _upsideNetPosition, value);
      }
    }

    public int InputNetPosition
    {
      get
      {
        return _inputNetPosition;
      }
      set
      {
        __isset.inputNetPosition = true;
        SetProperty(ref _inputNetPosition, value);
      }
    }

    public int SumNetPosition
    {
      get
      {
        return _sumNetPosition;
      }
      set
      {
        __isset.sumNetPosition = true;
        SetProperty(ref _sumNetPosition, value);
      }
    }

    public bool Persisted
    {
      get
      {
        return _persisted;
      }
      set
      {
        __isset.persisted = true;
        SetProperty(ref _persisted, value);
      }
    }

    public long DotTimestampMs
    {
      get
      {
        return _dotTimestampMs;
      }
      set
      {
        __isset.dotTimestampMs = true;
        SetProperty(ref _dotTimestampMs, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="Milestone"/>
    /// </summary>
    public Milestone Milestone
    {
      get
      {
        return _milestone;
      }
      set
      {
        __isset.milestone = true;
        SetProperty(ref _milestone, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="VerifyStatus"/>
    /// </summary>
    public VerifyStatus VerifyStatus
    {
      get
      {
        return _verifyStatus;
      }
      set
      {
        __isset.verifyStatus = true;
        SetProperty(ref _verifyStatus, value);
      }
    }

    public string Note
    {
      get
      {
        return _note;
      }
      set
      {
        __isset.note = true;
        SetProperty(ref _note, value);
      }
    }

    public long CreateTimestampMs
    {
      get
      {
        return _createTimestampMs;
      }
      set
      {
        __isset.createTimestampMs = true;
        SetProperty(ref _createTimestampMs, value);
      }
    }

    public long LastmodifyTimestampMs
    {
      get
      {
        return _lastmodifyTimestampMs;
      }
      set
      {
        __isset.lastmodifyTimestampMs = true;
        SetProperty(ref _lastmodifyTimestampMs, value);
      }
    }

    public long StartTimestampMs
    {
      get
      {
        return _startTimestampMs;
      }
      set
      {
        __isset.startTimestampMs = true;
        SetProperty(ref _startTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool dateSec;
      public bool tradeAccountId;
      public bool sledContractId;
      public bool sledNetPosition;
      public bool upsideNetPosition;
      public bool inputNetPosition;
      public bool sumNetPosition;
      public bool persisted;
      public bool dotTimestampMs;
      public bool milestone;
      public bool verifyStatus;
      public bool note;
      public bool createTimestampMs;
      public bool lastmodifyTimestampMs;
      public bool startTimestampMs;
    }

    public DailyPositionDifference() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              DateSec = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              TradeAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              SledContractId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              SledNetPosition = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              UpsideNetPosition = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              InputNetPosition = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              SumNetPosition = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              Persisted = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              DotTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Milestone = (Milestone)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              VerifyStatus = (VerifyStatus)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Note = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              CreateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              LastmodifyTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I64) {
              StartTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DailyPositionDifference");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.dateSec) {
        field.Name = "dateSec";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DateSec);
        oprot.WriteFieldEnd();
      }
      if (__isset.tradeAccountId) {
        field.Name = "tradeAccountId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TradeAccountId);
        oprot.WriteFieldEnd();
      }
      if (__isset.sledContractId) {
        field.Name = "sledContractId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SledContractId);
        oprot.WriteFieldEnd();
      }
      if (__isset.sledNetPosition) {
        field.Name = "sledNetPosition";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SledNetPosition);
        oprot.WriteFieldEnd();
      }
      if (__isset.upsideNetPosition) {
        field.Name = "upsideNetPosition";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UpsideNetPosition);
        oprot.WriteFieldEnd();
      }
      if (__isset.inputNetPosition) {
        field.Name = "inputNetPosition";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InputNetPosition);
        oprot.WriteFieldEnd();
      }
      if (__isset.sumNetPosition) {
        field.Name = "sumNetPosition";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SumNetPosition);
        oprot.WriteFieldEnd();
      }
      if (__isset.persisted) {
        field.Name = "persisted";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Persisted);
        oprot.WriteFieldEnd();
      }
      if (__isset.dotTimestampMs) {
        field.Name = "dotTimestampMs";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DotTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.milestone) {
        field.Name = "milestone";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Milestone);
        oprot.WriteFieldEnd();
      }
      if (__isset.verifyStatus) {
        field.Name = "verifyStatus";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)VerifyStatus);
        oprot.WriteFieldEnd();
      }
      if (Note != null && __isset.note) {
        field.Name = "note";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Note);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestampMs) {
        field.Name = "createTimestampMs";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastmodifyTimestampMs) {
        field.Name = "lastmodifyTimestampMs";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastmodifyTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTimestampMs) {
        field.Name = "startTimestampMs";
        field.Type = TType.I64;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DailyPositionDifference(");
      sb.Append("DateSec: ");
      sb.Append(DateSec);
      sb.Append(",TradeAccountId: ");
      sb.Append(TradeAccountId);
      sb.Append(",SledContractId: ");
      sb.Append(SledContractId);
      sb.Append(",SledNetPosition: ");
      sb.Append(SledNetPosition);
      sb.Append(",UpsideNetPosition: ");
      sb.Append(UpsideNetPosition);
      sb.Append(",InputNetPosition: ");
      sb.Append(InputNetPosition);
      sb.Append(",SumNetPosition: ");
      sb.Append(SumNetPosition);
      sb.Append(",Persisted: ");
      sb.Append(Persisted);
      sb.Append(",DotTimestampMs: ");
      sb.Append(DotTimestampMs);
      sb.Append(",Milestone: ");
      sb.Append(Milestone);
      sb.Append(",VerifyStatus: ");
      sb.Append(VerifyStatus);
      sb.Append(",Note: ");
      sb.Append(Note);
      sb.Append(",CreateTimestampMs: ");
      sb.Append(CreateTimestampMs);
      sb.Append(",LastmodifyTimestampMs: ");
      sb.Append(LastmodifyTimestampMs);
      sb.Append(",StartTimestampMs: ");
      sb.Append(StartTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
