/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.adjust.thriftapi
{
  public partial class TradeHostingPositionAdjust {
    public interface Iface {
      /// <summary>
      /// 录入持仓明细信息
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="positionManualInputs"></param>
      ManualInputPositionResp manualInputPosition(PlatformArgs platformArgs, List<PositionManualInput> positionManualInputs);
      #if SILVERLIGHT
      IAsyncResult Begin_manualInputPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, List<PositionManualInput> positionManualInputs);
      ManualInputPositionResp End_manualInputPosition(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询录入的持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      PositionManualInputPage reqManualInputPosition(PlatformArgs platformArgs, ReqPositionManualInputOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_reqManualInputPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionManualInputOption option, IndexedPageOption pageOption);
      PositionManualInputPage End_reqManualInputPosition(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询未分配的持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      PositionUnassignedPage reqPositionUnassigned(PlatformArgs platformArgs, ReqPositionUnassignedOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_reqPositionUnassigned(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionUnassignedOption option, IndexedPageOption pageOption);
      PositionUnassignedPage End_reqPositionUnassigned(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询已分配的持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      PositionAssignedPage reqPositionAssigned(PlatformArgs platformArgs, ReqPositionAssignedOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_reqPositionAssigned(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionAssignedOption option, IndexedPageOption pageOption);
      PositionAssignedPage End_reqPositionAssigned(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 分配持仓明细信息
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="assignOption"></param>
      xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp assignPosition(PlatformArgs platformArgs, List<PositionAssignOption> assignOption);
      #if SILVERLIGHT
      IAsyncResult Begin_assignPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, List<PositionAssignOption> assignOption);
      xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp End_assignPosition(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询持仓编辑锁信息
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="lockKey"></param>
      PositionEditLock reqPositionEditLock(PlatformArgs platformArgs, string lockKey);
      #if SILVERLIGHT
      IAsyncResult Begin_reqPositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, string lockKey);
      PositionEditLock End_reqPositionEditLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 申请持仓编辑加锁
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="positionEditLock"></param>
      void addPositionEditLock(PlatformArgs platformArgs, PositionEditLock positionEditLock);
      #if SILVERLIGHT
      IAsyncResult Begin_addPositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, PositionEditLock positionEditLock);
      void End_addPositionEditLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 释放持仓编辑锁
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="positionEditLock"></param>
      void removePositionEditLock(PlatformArgs platformArgs, PositionEditLock positionEditLock);
      #if SILVERLIGHT
      IAsyncResult Begin_removePositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, PositionEditLock positionEditLock);
      void End_removePositionEditLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询持仓核对历史
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      PositionVerifyPage reqPositionVerify(PlatformArgs platformArgs, ReqPositionVerifyOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_reqPositionVerify(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionVerifyOption option, IndexedPageOption pageOption);
      PositionVerifyPage End_reqPositionVerify(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询持仓核对明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      PositionDifferencePage reqPositionDifference(PlatformArgs platformArgs, ReqPositionDifferenceOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_reqPositionDifference(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionDifferenceOption option, IndexedPageOption pageOption);
      PositionDifferencePage End_reqPositionDifference(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 结算日期，格式为XXXX-XX-XX
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="tradeAccountId"></param>
      /// <param name="settlementDate"></param>
      SettlementTimeRelateSledReqTime reqSettlementTimeRelateSledReqTime(PlatformArgs platformArgs, long tradeAccountId, string settlementDate);
      #if SILVERLIGHT
      IAsyncResult Begin_reqSettlementTimeRelateSledReqTime(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId, string settlementDate);
      SettlementTimeRelateSledReqTime End_reqSettlementTimeRelateSledReqTime(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询日常持仓核对明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      DailyPositionDifferencePage reqDailyPositionDifference(PlatformArgs platformArgs, ReqDailyPositionDifferenceOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_reqDailyPositionDifference(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqDailyPositionDifferenceOption option, IndexedPageOption pageOption);
      DailyPositionDifferencePage End_reqDailyPositionDifference(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 更新日常持仓核对的备注和核对状态信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="difference"></param>
      void updateDailyPositionDifferenceNote(PlatformArgs platformArgs, DailyPositionDifference difference);
      #if SILVERLIGHT
      IAsyncResult Begin_updateDailyPositionDifferenceNote(AsyncCallback callback, object state, PlatformArgs platformArgs, DailyPositionDifference difference);
      void End_updateDailyPositionDifferenceNote(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 移除托管机上持仓资金的所有数据记录
      /// </summary>
      /// <param name="platformArgs"></param>
      void clearAll(PlatformArgs platformArgs);
      #if SILVERLIGHT
      IAsyncResult Begin_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs);
      void End_clearAll(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_manualInputPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, List<PositionManualInput> positionManualInputs)
      {
        return send_manualInputPosition(callback, state, platformArgs, positionManualInputs);
      }

      public ManualInputPositionResp End_manualInputPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_manualInputPosition();
      }

      #endif

      /// <summary>
      /// 录入持仓明细信息
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="positionManualInputs"></param>
      public ManualInputPositionResp manualInputPosition(PlatformArgs platformArgs, List<PositionManualInput> positionManualInputs)
      {
        #if !SILVERLIGHT
        send_manualInputPosition(platformArgs, positionManualInputs);
        return recv_manualInputPosition();

        #else
        var asyncResult = Begin_manualInputPosition(null, null, platformArgs, positionManualInputs);
        return End_manualInputPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_manualInputPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, List<PositionManualInput> positionManualInputs)
      #else
      public void send_manualInputPosition(PlatformArgs platformArgs, List<PositionManualInput> positionManualInputs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("manualInputPosition", TMessageType.Call, seqid_));
        manualInputPosition_args args = new manualInputPosition_args();
        args.PlatformArgs = platformArgs;
        args.PositionManualInputs = positionManualInputs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ManualInputPositionResp recv_manualInputPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        manualInputPosition_result result = new manualInputPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "manualInputPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqManualInputPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionManualInputOption option, IndexedPageOption pageOption)
      {
        return send_reqManualInputPosition(callback, state, platformArgs, option, pageOption);
      }

      public PositionManualInputPage End_reqManualInputPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqManualInputPosition();
      }

      #endif

      /// <summary>
      /// 查询录入的持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public PositionManualInputPage reqManualInputPosition(PlatformArgs platformArgs, ReqPositionManualInputOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_reqManualInputPosition(platformArgs, option, pageOption);
        return recv_reqManualInputPosition();

        #else
        var asyncResult = Begin_reqManualInputPosition(null, null, platformArgs, option, pageOption);
        return End_reqManualInputPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqManualInputPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionManualInputOption option, IndexedPageOption pageOption)
      #else
      public void send_reqManualInputPosition(PlatformArgs platformArgs, ReqPositionManualInputOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqManualInputPosition", TMessageType.Call, seqid_));
        reqManualInputPosition_args args = new reqManualInputPosition_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PositionManualInputPage recv_reqManualInputPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqManualInputPosition_result result = new reqManualInputPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqManualInputPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqPositionUnassigned(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionUnassignedOption option, IndexedPageOption pageOption)
      {
        return send_reqPositionUnassigned(callback, state, platformArgs, option, pageOption);
      }

      public PositionUnassignedPage End_reqPositionUnassigned(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqPositionUnassigned();
      }

      #endif

      /// <summary>
      /// 查询未分配的持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public PositionUnassignedPage reqPositionUnassigned(PlatformArgs platformArgs, ReqPositionUnassignedOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_reqPositionUnassigned(platformArgs, option, pageOption);
        return recv_reqPositionUnassigned();

        #else
        var asyncResult = Begin_reqPositionUnassigned(null, null, platformArgs, option, pageOption);
        return End_reqPositionUnassigned(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqPositionUnassigned(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionUnassignedOption option, IndexedPageOption pageOption)
      #else
      public void send_reqPositionUnassigned(PlatformArgs platformArgs, ReqPositionUnassignedOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqPositionUnassigned", TMessageType.Call, seqid_));
        reqPositionUnassigned_args args = new reqPositionUnassigned_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PositionUnassignedPage recv_reqPositionUnassigned()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqPositionUnassigned_result result = new reqPositionUnassigned_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqPositionUnassigned failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqPositionAssigned(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionAssignedOption option, IndexedPageOption pageOption)
      {
        return send_reqPositionAssigned(callback, state, platformArgs, option, pageOption);
      }

      public PositionAssignedPage End_reqPositionAssigned(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqPositionAssigned();
      }

      #endif

      /// <summary>
      /// 查询已分配的持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public PositionAssignedPage reqPositionAssigned(PlatformArgs platformArgs, ReqPositionAssignedOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_reqPositionAssigned(platformArgs, option, pageOption);
        return recv_reqPositionAssigned();

        #else
        var asyncResult = Begin_reqPositionAssigned(null, null, platformArgs, option, pageOption);
        return End_reqPositionAssigned(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqPositionAssigned(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionAssignedOption option, IndexedPageOption pageOption)
      #else
      public void send_reqPositionAssigned(PlatformArgs platformArgs, ReqPositionAssignedOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqPositionAssigned", TMessageType.Call, seqid_));
        reqPositionAssigned_args args = new reqPositionAssigned_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PositionAssignedPage recv_reqPositionAssigned()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqPositionAssigned_result result = new reqPositionAssigned_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqPositionAssigned failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_assignPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, List<PositionAssignOption> assignOption)
      {
        return send_assignPosition(callback, state, platformArgs, assignOption);
      }

      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp End_assignPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_assignPosition();
      }

      #endif

      /// <summary>
      /// 分配持仓明细信息
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="assignOption"></param>
      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp assignPosition(PlatformArgs platformArgs, List<PositionAssignOption> assignOption)
      {
        #if !SILVERLIGHT
        send_assignPosition(platformArgs, assignOption);
        return recv_assignPosition();

        #else
        var asyncResult = Begin_assignPosition(null, null, platformArgs, assignOption);
        return End_assignPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_assignPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, List<PositionAssignOption> assignOption)
      #else
      public void send_assignPosition(PlatformArgs platformArgs, List<PositionAssignOption> assignOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("assignPosition", TMessageType.Call, seqid_));
        assignPosition_args args = new assignPosition_args();
        args.PlatformArgs = platformArgs;
        args.AssignOption = assignOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp recv_assignPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        assignPosition_result result = new assignPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "assignPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqPositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, string lockKey)
      {
        return send_reqPositionEditLock(callback, state, platformArgs, lockKey);
      }

      public PositionEditLock End_reqPositionEditLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqPositionEditLock();
      }

      #endif

      /// <summary>
      /// 查询持仓编辑锁信息
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="lockKey"></param>
      public PositionEditLock reqPositionEditLock(PlatformArgs platformArgs, string lockKey)
      {
        #if !SILVERLIGHT
        send_reqPositionEditLock(platformArgs, lockKey);
        return recv_reqPositionEditLock();

        #else
        var asyncResult = Begin_reqPositionEditLock(null, null, platformArgs, lockKey);
        return End_reqPositionEditLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqPositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, string lockKey)
      #else
      public void send_reqPositionEditLock(PlatformArgs platformArgs, string lockKey)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqPositionEditLock", TMessageType.Call, seqid_));
        reqPositionEditLock_args args = new reqPositionEditLock_args();
        args.PlatformArgs = platformArgs;
        args.LockKey = lockKey;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PositionEditLock recv_reqPositionEditLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqPositionEditLock_result result = new reqPositionEditLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqPositionEditLock failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addPositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, PositionEditLock positionEditLock)
      {
        return send_addPositionEditLock(callback, state, platformArgs, positionEditLock);
      }

      public void End_addPositionEditLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addPositionEditLock();
      }

      #endif

      /// <summary>
      /// 申请持仓编辑加锁
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="positionEditLock"></param>
      public void addPositionEditLock(PlatformArgs platformArgs, PositionEditLock positionEditLock)
      {
        #if !SILVERLIGHT
        send_addPositionEditLock(platformArgs, positionEditLock);
        recv_addPositionEditLock();

        #else
        var asyncResult = Begin_addPositionEditLock(null, null, platformArgs, positionEditLock);
        End_addPositionEditLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addPositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, PositionEditLock positionEditLock)
      #else
      public void send_addPositionEditLock(PlatformArgs platformArgs, PositionEditLock positionEditLock)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addPositionEditLock", TMessageType.Call, seqid_));
        addPositionEditLock_args args = new addPositionEditLock_args();
        args.PlatformArgs = platformArgs;
        args.PositionEditLock = positionEditLock;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addPositionEditLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addPositionEditLock_result result = new addPositionEditLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removePositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, PositionEditLock positionEditLock)
      {
        return send_removePositionEditLock(callback, state, platformArgs, positionEditLock);
      }

      public void End_removePositionEditLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_removePositionEditLock();
      }

      #endif

      /// <summary>
      /// 释放持仓编辑锁
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="positionEditLock"></param>
      public void removePositionEditLock(PlatformArgs platformArgs, PositionEditLock positionEditLock)
      {
        #if !SILVERLIGHT
        send_removePositionEditLock(platformArgs, positionEditLock);
        recv_removePositionEditLock();

        #else
        var asyncResult = Begin_removePositionEditLock(null, null, platformArgs, positionEditLock);
        End_removePositionEditLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removePositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, PositionEditLock positionEditLock)
      #else
      public void send_removePositionEditLock(PlatformArgs platformArgs, PositionEditLock positionEditLock)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removePositionEditLock", TMessageType.Call, seqid_));
        removePositionEditLock_args args = new removePositionEditLock_args();
        args.PlatformArgs = platformArgs;
        args.PositionEditLock = positionEditLock;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_removePositionEditLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removePositionEditLock_result result = new removePositionEditLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqPositionVerify(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionVerifyOption option, IndexedPageOption pageOption)
      {
        return send_reqPositionVerify(callback, state, platformArgs, option, pageOption);
      }

      public PositionVerifyPage End_reqPositionVerify(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqPositionVerify();
      }

      #endif

      /// <summary>
      /// 查询持仓核对历史
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public PositionVerifyPage reqPositionVerify(PlatformArgs platformArgs, ReqPositionVerifyOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_reqPositionVerify(platformArgs, option, pageOption);
        return recv_reqPositionVerify();

        #else
        var asyncResult = Begin_reqPositionVerify(null, null, platformArgs, option, pageOption);
        return End_reqPositionVerify(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqPositionVerify(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionVerifyOption option, IndexedPageOption pageOption)
      #else
      public void send_reqPositionVerify(PlatformArgs platformArgs, ReqPositionVerifyOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqPositionVerify", TMessageType.Call, seqid_));
        reqPositionVerify_args args = new reqPositionVerify_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PositionVerifyPage recv_reqPositionVerify()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqPositionVerify_result result = new reqPositionVerify_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqPositionVerify failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqPositionDifference(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionDifferenceOption option, IndexedPageOption pageOption)
      {
        return send_reqPositionDifference(callback, state, platformArgs, option, pageOption);
      }

      public PositionDifferencePage End_reqPositionDifference(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqPositionDifference();
      }

      #endif

      /// <summary>
      /// 查询持仓核对明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public PositionDifferencePage reqPositionDifference(PlatformArgs platformArgs, ReqPositionDifferenceOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_reqPositionDifference(platformArgs, option, pageOption);
        return recv_reqPositionDifference();

        #else
        var asyncResult = Begin_reqPositionDifference(null, null, platformArgs, option, pageOption);
        return End_reqPositionDifference(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqPositionDifference(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqPositionDifferenceOption option, IndexedPageOption pageOption)
      #else
      public void send_reqPositionDifference(PlatformArgs platformArgs, ReqPositionDifferenceOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqPositionDifference", TMessageType.Call, seqid_));
        reqPositionDifference_args args = new reqPositionDifference_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PositionDifferencePage recv_reqPositionDifference()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqPositionDifference_result result = new reqPositionDifference_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqPositionDifference failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqSettlementTimeRelateSledReqTime(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId, string settlementDate)
      {
        return send_reqSettlementTimeRelateSledReqTime(callback, state, platformArgs, tradeAccountId, settlementDate);
      }

      public SettlementTimeRelateSledReqTime End_reqSettlementTimeRelateSledReqTime(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqSettlementTimeRelateSledReqTime();
      }

      #endif

      /// <summary>
      /// 结算日期，格式为XXXX-XX-XX
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="tradeAccountId"></param>
      /// <param name="settlementDate"></param>
      public SettlementTimeRelateSledReqTime reqSettlementTimeRelateSledReqTime(PlatformArgs platformArgs, long tradeAccountId, string settlementDate)
      {
        #if !SILVERLIGHT
        send_reqSettlementTimeRelateSledReqTime(platformArgs, tradeAccountId, settlementDate);
        return recv_reqSettlementTimeRelateSledReqTime();

        #else
        var asyncResult = Begin_reqSettlementTimeRelateSledReqTime(null, null, platformArgs, tradeAccountId, settlementDate);
        return End_reqSettlementTimeRelateSledReqTime(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqSettlementTimeRelateSledReqTime(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId, string settlementDate)
      #else
      public void send_reqSettlementTimeRelateSledReqTime(PlatformArgs platformArgs, long tradeAccountId, string settlementDate)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqSettlementTimeRelateSledReqTime", TMessageType.Call, seqid_));
        reqSettlementTimeRelateSledReqTime_args args = new reqSettlementTimeRelateSledReqTime_args();
        args.PlatformArgs = platformArgs;
        args.TradeAccountId = tradeAccountId;
        args.SettlementDate = settlementDate;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SettlementTimeRelateSledReqTime recv_reqSettlementTimeRelateSledReqTime()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqSettlementTimeRelateSledReqTime_result result = new reqSettlementTimeRelateSledReqTime_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqSettlementTimeRelateSledReqTime failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqDailyPositionDifference(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqDailyPositionDifferenceOption option, IndexedPageOption pageOption)
      {
        return send_reqDailyPositionDifference(callback, state, platformArgs, option, pageOption);
      }

      public DailyPositionDifferencePage End_reqDailyPositionDifference(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqDailyPositionDifference();
      }

      #endif

      /// <summary>
      /// 查询日常持仓核对明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public DailyPositionDifferencePage reqDailyPositionDifference(PlatformArgs platformArgs, ReqDailyPositionDifferenceOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_reqDailyPositionDifference(platformArgs, option, pageOption);
        return recv_reqDailyPositionDifference();

        #else
        var asyncResult = Begin_reqDailyPositionDifference(null, null, platformArgs, option, pageOption);
        return End_reqDailyPositionDifference(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqDailyPositionDifference(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqDailyPositionDifferenceOption option, IndexedPageOption pageOption)
      #else
      public void send_reqDailyPositionDifference(PlatformArgs platformArgs, ReqDailyPositionDifferenceOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqDailyPositionDifference", TMessageType.Call, seqid_));
        reqDailyPositionDifference_args args = new reqDailyPositionDifference_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DailyPositionDifferencePage recv_reqDailyPositionDifference()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqDailyPositionDifference_result result = new reqDailyPositionDifference_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqDailyPositionDifference failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateDailyPositionDifferenceNote(AsyncCallback callback, object state, PlatformArgs platformArgs, DailyPositionDifference difference)
      {
        return send_updateDailyPositionDifferenceNote(callback, state, platformArgs, difference);
      }

      public void End_updateDailyPositionDifferenceNote(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateDailyPositionDifferenceNote();
      }

      #endif

      /// <summary>
      /// 更新日常持仓核对的备注和核对状态信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="difference"></param>
      public void updateDailyPositionDifferenceNote(PlatformArgs platformArgs, DailyPositionDifference difference)
      {
        #if !SILVERLIGHT
        send_updateDailyPositionDifferenceNote(platformArgs, difference);
        recv_updateDailyPositionDifferenceNote();

        #else
        var asyncResult = Begin_updateDailyPositionDifferenceNote(null, null, platformArgs, difference);
        End_updateDailyPositionDifferenceNote(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateDailyPositionDifferenceNote(AsyncCallback callback, object state, PlatformArgs platformArgs, DailyPositionDifference difference)
      #else
      public void send_updateDailyPositionDifferenceNote(PlatformArgs platformArgs, DailyPositionDifference difference)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateDailyPositionDifferenceNote", TMessageType.Call, seqid_));
        updateDailyPositionDifferenceNote_args args = new updateDailyPositionDifferenceNote_args();
        args.PlatformArgs = platformArgs;
        args.Difference = difference;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateDailyPositionDifferenceNote()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateDailyPositionDifferenceNote_result result = new updateDailyPositionDifferenceNote_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs)
      {
        return send_clearAll(callback, state, platformArgs);
      }

      public void End_clearAll(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_clearAll();
      }

      #endif

      /// <summary>
      /// 移除托管机上持仓资金的所有数据记录
      /// </summary>
      /// <param name="platformArgs"></param>
      public void clearAll(PlatformArgs platformArgs)
      {
        #if !SILVERLIGHT
        send_clearAll(platformArgs);
        recv_clearAll();

        #else
        var asyncResult = Begin_clearAll(null, null, platformArgs);
        End_clearAll(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs)
      #else
      public void send_clearAll(PlatformArgs platformArgs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("clearAll", TMessageType.Call, seqid_));
        clearAll_args args = new clearAll_args();
        args.PlatformArgs = platformArgs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_clearAll()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        clearAll_result result = new clearAll_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["manualInputPosition"] = manualInputPosition_Process;
        processMap_["reqManualInputPosition"] = reqManualInputPosition_Process;
        processMap_["reqPositionUnassigned"] = reqPositionUnassigned_Process;
        processMap_["reqPositionAssigned"] = reqPositionAssigned_Process;
        processMap_["assignPosition"] = assignPosition_Process;
        processMap_["reqPositionEditLock"] = reqPositionEditLock_Process;
        processMap_["addPositionEditLock"] = addPositionEditLock_Process;
        processMap_["removePositionEditLock"] = removePositionEditLock_Process;
        processMap_["reqPositionVerify"] = reqPositionVerify_Process;
        processMap_["reqPositionDifference"] = reqPositionDifference_Process;
        processMap_["reqSettlementTimeRelateSledReqTime"] = reqSettlementTimeRelateSledReqTime_Process;
        processMap_["reqDailyPositionDifference"] = reqDailyPositionDifference_Process;
        processMap_["updateDailyPositionDifferenceNote"] = updateDailyPositionDifferenceNote_Process;
        processMap_["clearAll"] = clearAll_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void manualInputPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        manualInputPosition_args args = new manualInputPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        manualInputPosition_result result = new manualInputPosition_result();
        try {
          result.Success = iface_.manualInputPosition(args.PlatformArgs, args.PositionManualInputs);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("manualInputPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqManualInputPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqManualInputPosition_args args = new reqManualInputPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqManualInputPosition_result result = new reqManualInputPosition_result();
        try {
          result.Success = iface_.reqManualInputPosition(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqManualInputPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqPositionUnassigned_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqPositionUnassigned_args args = new reqPositionUnassigned_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqPositionUnassigned_result result = new reqPositionUnassigned_result();
        try {
          result.Success = iface_.reqPositionUnassigned(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqPositionUnassigned", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqPositionAssigned_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqPositionAssigned_args args = new reqPositionAssigned_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqPositionAssigned_result result = new reqPositionAssigned_result();
        try {
          result.Success = iface_.reqPositionAssigned(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqPositionAssigned", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void assignPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        assignPosition_args args = new assignPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        assignPosition_result result = new assignPosition_result();
        try {
          result.Success = iface_.assignPosition(args.PlatformArgs, args.AssignOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("assignPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqPositionEditLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqPositionEditLock_args args = new reqPositionEditLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqPositionEditLock_result result = new reqPositionEditLock_result();
        try {
          result.Success = iface_.reqPositionEditLock(args.PlatformArgs, args.LockKey);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqPositionEditLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addPositionEditLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addPositionEditLock_args args = new addPositionEditLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addPositionEditLock_result result = new addPositionEditLock_result();
        try {
          iface_.addPositionEditLock(args.PlatformArgs, args.PositionEditLock);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addPositionEditLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removePositionEditLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removePositionEditLock_args args = new removePositionEditLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removePositionEditLock_result result = new removePositionEditLock_result();
        try {
          iface_.removePositionEditLock(args.PlatformArgs, args.PositionEditLock);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("removePositionEditLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqPositionVerify_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqPositionVerify_args args = new reqPositionVerify_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqPositionVerify_result result = new reqPositionVerify_result();
        try {
          result.Success = iface_.reqPositionVerify(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqPositionVerify", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqPositionDifference_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqPositionDifference_args args = new reqPositionDifference_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqPositionDifference_result result = new reqPositionDifference_result();
        try {
          result.Success = iface_.reqPositionDifference(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqPositionDifference", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqSettlementTimeRelateSledReqTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqSettlementTimeRelateSledReqTime_args args = new reqSettlementTimeRelateSledReqTime_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqSettlementTimeRelateSledReqTime_result result = new reqSettlementTimeRelateSledReqTime_result();
        try {
          result.Success = iface_.reqSettlementTimeRelateSledReqTime(args.PlatformArgs, args.TradeAccountId, args.SettlementDate);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqSettlementTimeRelateSledReqTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqDailyPositionDifference_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqDailyPositionDifference_args args = new reqDailyPositionDifference_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqDailyPositionDifference_result result = new reqDailyPositionDifference_result();
        try {
          result.Success = iface_.reqDailyPositionDifference(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqDailyPositionDifference", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateDailyPositionDifferenceNote_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateDailyPositionDifferenceNote_args args = new updateDailyPositionDifferenceNote_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateDailyPositionDifferenceNote_result result = new updateDailyPositionDifferenceNote_result();
        try {
          iface_.updateDailyPositionDifferenceNote(args.PlatformArgs, args.Difference);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("updateDailyPositionDifferenceNote", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void clearAll_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        clearAll_args args = new clearAll_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        clearAll_result result = new clearAll_result();
        try {
          iface_.clearAll(args.PlatformArgs);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("clearAll", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class manualInputPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private List<PositionManualInput> _positionManualInputs;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public List<PositionManualInput> PositionManualInputs
      {
        get
        {
          return _positionManualInputs;
        }
        set
        {
          __isset.positionManualInputs = true;
          SetProperty(ref _positionManualInputs, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool positionManualInputs;
      }

      public manualInputPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  PositionManualInputs = new List<PositionManualInput>();
                  TList _list30 = iprot.ReadListBegin();
                  for( int _i31 = 0; _i31 < _list30.Count; ++_i31)
                  {
                    PositionManualInput _elem32 = new PositionManualInput();
                    _elem32 = new PositionManualInput();
                    _elem32.Read(iprot);
                    PositionManualInputs.Add(_elem32);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("manualInputPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PositionManualInputs != null && __isset.positionManualInputs) {
          field.Name = "positionManualInputs";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, PositionManualInputs.Count));
            foreach (PositionManualInput _iter33 in PositionManualInputs)
            {
              _iter33.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("manualInputPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",PositionManualInputs: ");
        if (PositionManualInputs == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (PositionManualInput _iter34 in PositionManualInputs)
          {
            sb.Append(_iter34.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class manualInputPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ManualInputPositionResp _success;
      private ErrorInfo _err;

      public ManualInputPositionResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public manualInputPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ManualInputPositionResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("manualInputPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("manualInputPosition_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqManualInputPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqPositionManualInputOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqPositionManualInputOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public reqManualInputPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqPositionManualInputOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqManualInputPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqManualInputPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqManualInputPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PositionManualInputPage _success;
      private ErrorInfo _err;

      public PositionManualInputPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqManualInputPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PositionManualInputPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqManualInputPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqManualInputPosition_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionUnassigned_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqPositionUnassignedOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqPositionUnassignedOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public reqPositionUnassigned_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqPositionUnassignedOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionUnassigned_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionUnassigned_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionUnassigned_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PositionUnassignedPage _success;
      private ErrorInfo _err;

      public PositionUnassignedPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqPositionUnassigned_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PositionUnassignedPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionUnassigned_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionUnassigned_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionAssigned_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqPositionAssignedOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqPositionAssignedOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public reqPositionAssigned_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqPositionAssignedOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionAssigned_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionAssigned_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionAssigned_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PositionAssignedPage _success;
      private ErrorInfo _err;

      public PositionAssignedPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqPositionAssigned_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PositionAssignedPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionAssigned_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionAssigned_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class assignPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private List<PositionAssignOption> _assignOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public List<PositionAssignOption> AssignOption
      {
        get
        {
          return _assignOption;
        }
        set
        {
          __isset.assignOption = true;
          SetProperty(ref _assignOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool assignOption;
      }

      public assignPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  AssignOption = new List<PositionAssignOption>();
                  TList _list35 = iprot.ReadListBegin();
                  for( int _i36 = 0; _i36 < _list35.Count; ++_i36)
                  {
                    PositionAssignOption _elem37 = new PositionAssignOption();
                    _elem37 = new PositionAssignOption();
                    _elem37.Read(iprot);
                    AssignOption.Add(_elem37);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("assignPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AssignOption != null && __isset.assignOption) {
          field.Name = "assignOption";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, AssignOption.Count));
            foreach (PositionAssignOption _iter38 in AssignOption)
            {
              _iter38.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("assignPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",AssignOption: ");
        if (AssignOption == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (PositionAssignOption _iter39 in AssignOption)
          {
            sb.Append(_iter39.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class assignPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public assignPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("assignPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("assignPosition_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionEditLock_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private string _lockKey;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public string LockKey
      {
        get
        {
          return _lockKey;
        }
        set
        {
          __isset.lockKey = true;
          SetProperty(ref _lockKey, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool lockKey;
      }

      public reqPositionEditLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                LockKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionEditLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LockKey != null && __isset.lockKey) {
          field.Name = "lockKey";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LockKey);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionEditLock_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LockKey: ");
        sb.Append(LockKey);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionEditLock_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PositionEditLock _success;
      private ErrorInfo _err;

      public PositionEditLock Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqPositionEditLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PositionEditLock();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionEditLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionEditLock_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addPositionEditLock_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private PositionEditLock _positionEditLock;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public PositionEditLock PositionEditLock
      {
        get
        {
          return _positionEditLock;
        }
        set
        {
          __isset.positionEditLock = true;
          SetProperty(ref _positionEditLock, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool positionEditLock;
      }

      public addPositionEditLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                PositionEditLock = new PositionEditLock();
                PositionEditLock.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addPositionEditLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PositionEditLock != null && __isset.positionEditLock) {
          field.Name = "positionEditLock";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          PositionEditLock.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addPositionEditLock_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",PositionEditLock: ");
        sb.Append(PositionEditLock== null ? "<null>" : PositionEditLock.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addPositionEditLock_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public addPositionEditLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addPositionEditLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addPositionEditLock_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removePositionEditLock_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private PositionEditLock _positionEditLock;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public PositionEditLock PositionEditLock
      {
        get
        {
          return _positionEditLock;
        }
        set
        {
          __isset.positionEditLock = true;
          SetProperty(ref _positionEditLock, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool positionEditLock;
      }

      public removePositionEditLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                PositionEditLock = new PositionEditLock();
                PositionEditLock.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removePositionEditLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PositionEditLock != null && __isset.positionEditLock) {
          field.Name = "positionEditLock";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          PositionEditLock.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removePositionEditLock_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",PositionEditLock: ");
        sb.Append(PositionEditLock== null ? "<null>" : PositionEditLock.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removePositionEditLock_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public removePositionEditLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removePositionEditLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removePositionEditLock_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionVerify_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqPositionVerifyOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqPositionVerifyOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public reqPositionVerify_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqPositionVerifyOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionVerify_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionVerify_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionVerify_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PositionVerifyPage _success;
      private ErrorInfo _err;

      public PositionVerifyPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqPositionVerify_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PositionVerifyPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionVerify_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionVerify_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionDifference_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqPositionDifferenceOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqPositionDifferenceOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public reqPositionDifference_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqPositionDifferenceOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionDifference_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionDifference_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionDifference_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PositionDifferencePage _success;
      private ErrorInfo _err;

      public PositionDifferencePage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqPositionDifference_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PositionDifferencePage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionDifference_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionDifference_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqSettlementTimeRelateSledReqTime_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _tradeAccountId;
      private string _settlementDate;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long TradeAccountId
      {
        get
        {
          return _tradeAccountId;
        }
        set
        {
          __isset.tradeAccountId = true;
          SetProperty(ref _tradeAccountId, value);
        }
      }

      public string SettlementDate
      {
        get
        {
          return _settlementDate;
        }
        set
        {
          __isset.settlementDate = true;
          SetProperty(ref _settlementDate, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool tradeAccountId;
        public bool settlementDate;
      }

      public reqSettlementTimeRelateSledReqTime_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                TradeAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SettlementDate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqSettlementTimeRelateSledReqTime_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.tradeAccountId) {
          field.Name = "tradeAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TradeAccountId);
          oprot.WriteFieldEnd();
        }
        if (SettlementDate != null && __isset.settlementDate) {
          field.Name = "settlementDate";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SettlementDate);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqSettlementTimeRelateSledReqTime_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",TradeAccountId: ");
        sb.Append(TradeAccountId);
        sb.Append(",SettlementDate: ");
        sb.Append(SettlementDate);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqSettlementTimeRelateSledReqTime_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private SettlementTimeRelateSledReqTime _success;
      private ErrorInfo _err;

      public SettlementTimeRelateSledReqTime Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqSettlementTimeRelateSledReqTime_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SettlementTimeRelateSledReqTime();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqSettlementTimeRelateSledReqTime_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqSettlementTimeRelateSledReqTime_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqDailyPositionDifference_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqDailyPositionDifferenceOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqDailyPositionDifferenceOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public reqDailyPositionDifference_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqDailyPositionDifferenceOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqDailyPositionDifference_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqDailyPositionDifference_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqDailyPositionDifference_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private DailyPositionDifferencePage _success;
      private ErrorInfo _err;

      public DailyPositionDifferencePage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqDailyPositionDifference_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DailyPositionDifferencePage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqDailyPositionDifference_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqDailyPositionDifference_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateDailyPositionDifferenceNote_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private DailyPositionDifference _difference;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public DailyPositionDifference Difference
      {
        get
        {
          return _difference;
        }
        set
        {
          __isset.difference = true;
          SetProperty(ref _difference, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool difference;
      }

      public updateDailyPositionDifferenceNote_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Difference = new DailyPositionDifference();
                Difference.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateDailyPositionDifferenceNote_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Difference != null && __isset.difference) {
          field.Name = "difference";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Difference.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateDailyPositionDifferenceNote_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Difference: ");
        sb.Append(Difference== null ? "<null>" : Difference.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateDailyPositionDifferenceNote_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public updateDailyPositionDifferenceNote_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateDailyPositionDifferenceNote_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateDailyPositionDifferenceNote_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearAll_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
      }

      public clearAll_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearAll_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearAll_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearAll_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public clearAll_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearAll_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearAll_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
