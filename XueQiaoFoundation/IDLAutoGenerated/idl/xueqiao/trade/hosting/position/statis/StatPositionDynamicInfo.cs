/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.statis
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class StatPositionDynamicInfo : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private string _targetKey;
    private long _subAccountId;
    private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType _targetType;
    private double _lastPrice;
    private double _positionProfit;
    private double _closedProfit;
    private double _totalProfit;
    private double _positionValue;
    private double _leverage;
    private Dictionary<string, double> _positionValueMap;
    private string _currency;
    private long _modifyTimestampMs;

    public string TargetKey
    {
      get
      {
        return _targetKey;
      }
      set
      {
        __isset.targetKey = true;
        SetProperty(ref _targetKey, value);
      }
    }

    public long SubAccountId
    {
      get
      {
        return _subAccountId;
      }
      set
      {
        __isset.subAccountId = true;
        SetProperty(ref _subAccountId, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType"/>
    /// </summary>
    public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType TargetType
    {
      get
      {
        return _targetType;
      }
      set
      {
        __isset.targetType = true;
        SetProperty(ref _targetType, value);
      }
    }

    public double LastPrice
    {
      get
      {
        return _lastPrice;
      }
      set
      {
        __isset.lastPrice = true;
        SetProperty(ref _lastPrice, value);
      }
    }

    public double PositionProfit
    {
      get
      {
        return _positionProfit;
      }
      set
      {
        __isset.positionProfit = true;
        SetProperty(ref _positionProfit, value);
      }
    }

    public double ClosedProfit
    {
      get
      {
        return _closedProfit;
      }
      set
      {
        __isset.closedProfit = true;
        SetProperty(ref _closedProfit, value);
      }
    }

    public double TotalProfit
    {
      get
      {
        return _totalProfit;
      }
      set
      {
        __isset.totalProfit = true;
        SetProperty(ref _totalProfit, value);
      }
    }

    public double PositionValue
    {
      get
      {
        return _positionValue;
      }
      set
      {
        __isset.positionValue = true;
        SetProperty(ref _positionValue, value);
      }
    }

    public double Leverage
    {
      get
      {
        return _leverage;
      }
      set
      {
        __isset.leverage = true;
        SetProperty(ref _leverage, value);
      }
    }

    public Dictionary<string, double> PositionValueMap
    {
      get
      {
        return _positionValueMap;
      }
      set
      {
        __isset.positionValueMap = true;
        SetProperty(ref _positionValueMap, value);
      }
    }

    public string Currency
    {
      get
      {
        return _currency;
      }
      set
      {
        __isset.currency = true;
        SetProperty(ref _currency, value);
      }
    }

    public long ModifyTimestampMs
    {
      get
      {
        return _modifyTimestampMs;
      }
      set
      {
        __isset.modifyTimestampMs = true;
        SetProperty(ref _modifyTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool targetKey;
      public bool subAccountId;
      public bool targetType;
      public bool lastPrice;
      public bool positionProfit;
      public bool closedProfit;
      public bool totalProfit;
      public bool positionValue;
      public bool leverage;
      public bool positionValueMap;
      public bool currency;
      public bool modifyTimestampMs;
    }

    public StatPositionDynamicInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              TargetKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              SubAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TargetType = (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              LastPrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              PositionProfit = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              ClosedProfit = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              TotalProfit = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Double) {
              PositionValue = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Double) {
              Leverage = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Map) {
              {
                PositionValueMap = new Dictionary<string, double>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  string _key2;
                  double _val3;
                  _key2 = iprot.ReadString();
                  _val3 = iprot.ReadDouble();
                  PositionValueMap[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              Currency = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I64) {
              ModifyTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StatPositionDynamicInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TargetKey != null && __isset.targetKey) {
        field.Name = "targetKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TargetKey);
        oprot.WriteFieldEnd();
      }
      if (__isset.subAccountId) {
        field.Name = "subAccountId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SubAccountId);
        oprot.WriteFieldEnd();
      }
      if (__isset.targetType) {
        field.Name = "targetType";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TargetType);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastPrice) {
        field.Name = "lastPrice";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LastPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.positionProfit) {
        field.Name = "positionProfit";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PositionProfit);
        oprot.WriteFieldEnd();
      }
      if (__isset.closedProfit) {
        field.Name = "closedProfit";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ClosedProfit);
        oprot.WriteFieldEnd();
      }
      if (__isset.totalProfit) {
        field.Name = "totalProfit";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(TotalProfit);
        oprot.WriteFieldEnd();
      }
      if (__isset.positionValue) {
        field.Name = "positionValue";
        field.Type = TType.Double;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PositionValue);
        oprot.WriteFieldEnd();
      }
      if (__isset.leverage) {
        field.Name = "leverage";
        field.Type = TType.Double;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Leverage);
        oprot.WriteFieldEnd();
      }
      if (PositionValueMap != null && __isset.positionValueMap) {
        field.Name = "positionValueMap";
        field.Type = TType.Map;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Double, PositionValueMap.Count));
          foreach (string _iter4 in PositionValueMap.Keys)
          {
            oprot.WriteString(_iter4);
            oprot.WriteDouble(PositionValueMap[_iter4]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Currency != null && __isset.currency) {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Currency);
        oprot.WriteFieldEnd();
      }
      if (__isset.modifyTimestampMs) {
        field.Name = "modifyTimestampMs";
        field.Type = TType.I64;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ModifyTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StatPositionDynamicInfo(");
      sb.Append("TargetKey: ");
      sb.Append(TargetKey);
      sb.Append(",SubAccountId: ");
      sb.Append(SubAccountId);
      sb.Append(",TargetType: ");
      sb.Append(TargetType);
      sb.Append(",LastPrice: ");
      sb.Append(LastPrice);
      sb.Append(",PositionProfit: ");
      sb.Append(PositionProfit);
      sb.Append(",ClosedProfit: ");
      sb.Append(ClosedProfit);
      sb.Append(",TotalProfit: ");
      sb.Append(TotalProfit);
      sb.Append(",PositionValue: ");
      sb.Append(PositionValue);
      sb.Append(",Leverage: ");
      sb.Append(Leverage);
      sb.Append(",PositionValueMap: ");
      if (PositionValueMap == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (string _iter5 in PositionValueMap.Keys)
        {
          sb.Append(_iter5.ToString());
          sb.Append(":");
          sb.Append(PositionValueMap[_iter5].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(",Currency: ");
      sb.Append(Currency);
      sb.Append(",ModifyTimestampMs: ");
      sb.Append(ModifyTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
