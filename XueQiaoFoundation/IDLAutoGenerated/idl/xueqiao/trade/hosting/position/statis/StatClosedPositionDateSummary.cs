/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.statis
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class StatClosedPositionDateSummary : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _dateSummaryId;
    private long _subAccountId;
    private string _targetKey;
    private long _archivedDateTimestampMs;
    private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType _targetType;
    private long _closedPosition;
    private List<ClosedProfit> _closedProfits;
    private double _spreadProfit;

    public long DateSummaryId
    {
      get
      {
        return _dateSummaryId;
      }
      set
      {
        __isset.dateSummaryId = true;
        SetProperty(ref _dateSummaryId, value);
      }
    }

    public long SubAccountId
    {
      get
      {
        return _subAccountId;
      }
      set
      {
        __isset.subAccountId = true;
        SetProperty(ref _subAccountId, value);
      }
    }

    public string TargetKey
    {
      get
      {
        return _targetKey;
      }
      set
      {
        __isset.targetKey = true;
        SetProperty(ref _targetKey, value);
      }
    }

    public long ArchivedDateTimestampMs
    {
      get
      {
        return _archivedDateTimestampMs;
      }
      set
      {
        __isset.archivedDateTimestampMs = true;
        SetProperty(ref _archivedDateTimestampMs, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType"/>
    /// </summary>
    public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType TargetType
    {
      get
      {
        return _targetType;
      }
      set
      {
        __isset.targetType = true;
        SetProperty(ref _targetType, value);
      }
    }

    public long ClosedPosition
    {
      get
      {
        return _closedPosition;
      }
      set
      {
        __isset.closedPosition = true;
        SetProperty(ref _closedPosition, value);
      }
    }

    public List<ClosedProfit> ClosedProfits
    {
      get
      {
        return _closedProfits;
      }
      set
      {
        __isset.closedProfits = true;
        SetProperty(ref _closedProfits, value);
      }
    }

    public double SpreadProfit
    {
      get
      {
        return _spreadProfit;
      }
      set
      {
        __isset.spreadProfit = true;
        SetProperty(ref _spreadProfit, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool dateSummaryId;
      public bool subAccountId;
      public bool targetKey;
      public bool archivedDateTimestampMs;
      public bool targetType;
      public bool closedPosition;
      public bool closedProfits;
      public bool spreadProfit;
    }

    public StatClosedPositionDateSummary() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              DateSummaryId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              SubAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              TargetKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              ArchivedDateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              TargetType = (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              ClosedPosition = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                ClosedProfits = new List<ClosedProfit>();
                TList _list11 = iprot.ReadListBegin();
                for( int _i12 = 0; _i12 < _list11.Count; ++_i12)
                {
                  ClosedProfit _elem13 = new ClosedProfit();
                  _elem13 = new ClosedProfit();
                  _elem13.Read(iprot);
                  ClosedProfits.Add(_elem13);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Double) {
              SpreadProfit = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StatClosedPositionDateSummary");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.dateSummaryId) {
        field.Name = "dateSummaryId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DateSummaryId);
        oprot.WriteFieldEnd();
      }
      if (__isset.subAccountId) {
        field.Name = "subAccountId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SubAccountId);
        oprot.WriteFieldEnd();
      }
      if (TargetKey != null && __isset.targetKey) {
        field.Name = "targetKey";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TargetKey);
        oprot.WriteFieldEnd();
      }
      if (__isset.archivedDateTimestampMs) {
        field.Name = "archivedDateTimestampMs";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ArchivedDateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.targetType) {
        field.Name = "targetType";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TargetType);
        oprot.WriteFieldEnd();
      }
      if (__isset.closedPosition) {
        field.Name = "closedPosition";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ClosedPosition);
        oprot.WriteFieldEnd();
      }
      if (ClosedProfits != null && __isset.closedProfits) {
        field.Name = "closedProfits";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ClosedProfits.Count));
          foreach (ClosedProfit _iter14 in ClosedProfits)
          {
            _iter14.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.spreadProfit) {
        field.Name = "spreadProfit";
        field.Type = TType.Double;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(SpreadProfit);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StatClosedPositionDateSummary(");
      sb.Append("DateSummaryId: ");
      sb.Append(DateSummaryId);
      sb.Append(",SubAccountId: ");
      sb.Append(SubAccountId);
      sb.Append(",TargetKey: ");
      sb.Append(TargetKey);
      sb.Append(",ArchivedDateTimestampMs: ");
      sb.Append(ArchivedDateTimestampMs);
      sb.Append(",TargetType: ");
      sb.Append(TargetType);
      sb.Append(",ClosedPosition: ");
      sb.Append(ClosedPosition);
      sb.Append(",ClosedProfits: ");
      if (ClosedProfits == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (ClosedProfit _iter15 in ClosedProfits)
        {
          sb.Append(_iter15.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",SpreadProfit: ");
      sb.Append(SpreadProfit);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
