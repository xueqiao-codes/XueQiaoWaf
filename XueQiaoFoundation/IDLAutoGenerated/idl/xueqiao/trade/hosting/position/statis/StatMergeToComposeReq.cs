/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.statis
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class StatMergeToComposeReq : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _subAccountId;
    private long _composeGraphId;
    private double _composePrice;
    private int _volume;
    private StatDirection _diretion;
    private List<MergeComposeLegData> _mergeComposeLegDataList;

    public long SubAccountId
    {
      get
      {
        return _subAccountId;
      }
      set
      {
        __isset.subAccountId = true;
        SetProperty(ref _subAccountId, value);
      }
    }

    public long ComposeGraphId
    {
      get
      {
        return _composeGraphId;
      }
      set
      {
        __isset.composeGraphId = true;
        SetProperty(ref _composeGraphId, value);
      }
    }

    public double ComposePrice
    {
      get
      {
        return _composePrice;
      }
      set
      {
        __isset.composePrice = true;
        SetProperty(ref _composePrice, value);
      }
    }

    public int Volume
    {
      get
      {
        return _volume;
      }
      set
      {
        __isset.volume = true;
        SetProperty(ref _volume, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="StatDirection"/>
    /// </summary>
    public StatDirection Diretion
    {
      get
      {
        return _diretion;
      }
      set
      {
        __isset.diretion = true;
        SetProperty(ref _diretion, value);
      }
    }

    public List<MergeComposeLegData> MergeComposeLegDataList
    {
      get
      {
        return _mergeComposeLegDataList;
      }
      set
      {
        __isset.mergeComposeLegDataList = true;
        SetProperty(ref _mergeComposeLegDataList, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool subAccountId;
      public bool composeGraphId;
      public bool composePrice;
      public bool volume;
      public bool diretion;
      public bool mergeComposeLegDataList;
    }

    public StatMergeToComposeReq() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              SubAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              ComposeGraphId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              ComposePrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Volume = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Diretion = (StatDirection)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                MergeComposeLegDataList = new List<MergeComposeLegData>();
                TList _list21 = iprot.ReadListBegin();
                for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                {
                  MergeComposeLegData _elem23 = new MergeComposeLegData();
                  _elem23 = new MergeComposeLegData();
                  _elem23.Read(iprot);
                  MergeComposeLegDataList.Add(_elem23);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StatMergeToComposeReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.subAccountId) {
        field.Name = "subAccountId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SubAccountId);
        oprot.WriteFieldEnd();
      }
      if (__isset.composeGraphId) {
        field.Name = "composeGraphId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ComposeGraphId);
        oprot.WriteFieldEnd();
      }
      if (__isset.composePrice) {
        field.Name = "composePrice";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ComposePrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.volume) {
        field.Name = "volume";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Volume);
        oprot.WriteFieldEnd();
      }
      if (__isset.diretion) {
        field.Name = "diretion";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Diretion);
        oprot.WriteFieldEnd();
      }
      if (MergeComposeLegDataList != null && __isset.mergeComposeLegDataList) {
        field.Name = "mergeComposeLegDataList";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MergeComposeLegDataList.Count));
          foreach (MergeComposeLegData _iter24 in MergeComposeLegDataList)
          {
            _iter24.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StatMergeToComposeReq(");
      sb.Append("SubAccountId: ");
      sb.Append(SubAccountId);
      sb.Append(",ComposeGraphId: ");
      sb.Append(ComposeGraphId);
      sb.Append(",ComposePrice: ");
      sb.Append(ComposePrice);
      sb.Append(",Volume: ");
      sb.Append(Volume);
      sb.Append(",Diretion: ");
      sb.Append(Diretion);
      sb.Append(",MergeComposeLegDataList: ");
      if (MergeComposeLegDataList == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (MergeComposeLegData _iter25 in MergeComposeLegDataList)
        {
          sb.Append(_iter25.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(")");
      return sb.ToString();
    }

  }

}
