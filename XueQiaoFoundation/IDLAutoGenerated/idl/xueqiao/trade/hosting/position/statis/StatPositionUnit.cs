/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.statis
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class StatPositionUnit : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _unitId;
    private long _positionItemId;
    private long _sledContractId;
    private double _unitPrice;
    private int _unitQuantity;
    private StatDirection _direction;
    private long _sourceDataTimestampMs;
    private long _subAccountId;
    private string _targetKey;
    private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType _targetType;
    private ExternalDataSource _source;

    public long UnitId
    {
      get
      {
        return _unitId;
      }
      set
      {
        __isset.unitId = true;
        SetProperty(ref _unitId, value);
      }
    }

    public long PositionItemId
    {
      get
      {
        return _positionItemId;
      }
      set
      {
        __isset.positionItemId = true;
        SetProperty(ref _positionItemId, value);
      }
    }

    public long SledContractId
    {
      get
      {
        return _sledContractId;
      }
      set
      {
        __isset.sledContractId = true;
        SetProperty(ref _sledContractId, value);
      }
    }

    public double UnitPrice
    {
      get
      {
        return _unitPrice;
      }
      set
      {
        __isset.unitPrice = true;
        SetProperty(ref _unitPrice, value);
      }
    }

    public int UnitQuantity
    {
      get
      {
        return _unitQuantity;
      }
      set
      {
        __isset.unitQuantity = true;
        SetProperty(ref _unitQuantity, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="StatDirection"/>
    /// </summary>
    public StatDirection Direction
    {
      get
      {
        return _direction;
      }
      set
      {
        __isset.direction = true;
        SetProperty(ref _direction, value);
      }
    }

    public long SourceDataTimestampMs
    {
      get
      {
        return _sourceDataTimestampMs;
      }
      set
      {
        __isset.sourceDataTimestampMs = true;
        SetProperty(ref _sourceDataTimestampMs, value);
      }
    }

    public long SubAccountId
    {
      get
      {
        return _subAccountId;
      }
      set
      {
        __isset.subAccountId = true;
        SetProperty(ref _subAccountId, value);
      }
    }

    public string TargetKey
    {
      get
      {
        return _targetKey;
      }
      set
      {
        __isset.targetKey = true;
        SetProperty(ref _targetKey, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType"/>
    /// </summary>
    public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType TargetType
    {
      get
      {
        return _targetType;
      }
      set
      {
        __isset.targetType = true;
        SetProperty(ref _targetType, value);
      }
    }

    public ExternalDataSource Source
    {
      get
      {
        return _source;
      }
      set
      {
        __isset.source = true;
        SetProperty(ref _source, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool unitId;
      public bool positionItemId;
      public bool sledContractId;
      public bool unitPrice;
      public bool unitQuantity;
      public bool direction;
      public bool sourceDataTimestampMs;
      public bool subAccountId;
      public bool targetKey;
      public bool targetType;
      public bool source;
    }

    public StatPositionUnit() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              UnitId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              PositionItemId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              SledContractId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              UnitPrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              UnitQuantity = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Direction = (StatDirection)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              SourceDataTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              SubAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              TargetKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              TargetType = (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 131:
            if (field.Type == TType.Struct) {
              Source = new ExternalDataSource();
              Source.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StatPositionUnit");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.unitId) {
        field.Name = "unitId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UnitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.positionItemId) {
        field.Name = "positionItemId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PositionItemId);
        oprot.WriteFieldEnd();
      }
      if (__isset.sledContractId) {
        field.Name = "sledContractId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SledContractId);
        oprot.WriteFieldEnd();
      }
      if (__isset.unitPrice) {
        field.Name = "unitPrice";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(UnitPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.unitQuantity) {
        field.Name = "unitQuantity";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UnitQuantity);
        oprot.WriteFieldEnd();
      }
      if (__isset.direction) {
        field.Name = "direction";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Direction);
        oprot.WriteFieldEnd();
      }
      if (__isset.sourceDataTimestampMs) {
        field.Name = "sourceDataTimestampMs";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SourceDataTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.subAccountId) {
        field.Name = "subAccountId";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SubAccountId);
        oprot.WriteFieldEnd();
      }
      if (TargetKey != null && __isset.targetKey) {
        field.Name = "targetKey";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TargetKey);
        oprot.WriteFieldEnd();
      }
      if (__isset.targetType) {
        field.Name = "targetType";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TargetType);
        oprot.WriteFieldEnd();
      }
      if (Source != null && __isset.source) {
        field.Name = "source";
        field.Type = TType.Struct;
        field.ID = 131;
        oprot.WriteFieldBegin(field);
        Source.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StatPositionUnit(");
      sb.Append("UnitId: ");
      sb.Append(UnitId);
      sb.Append(",PositionItemId: ");
      sb.Append(PositionItemId);
      sb.Append(",SledContractId: ");
      sb.Append(SledContractId);
      sb.Append(",UnitPrice: ");
      sb.Append(UnitPrice);
      sb.Append(",UnitQuantity: ");
      sb.Append(UnitQuantity);
      sb.Append(",Direction: ");
      sb.Append(Direction);
      sb.Append(",SourceDataTimestampMs: ");
      sb.Append(SourceDataTimestampMs);
      sb.Append(",SubAccountId: ");
      sb.Append(SubAccountId);
      sb.Append(",TargetKey: ");
      sb.Append(TargetKey);
      sb.Append(",TargetType: ");
      sb.Append(TargetType);
      sb.Append(",Source: ");
      sb.Append(Source== null ? "<null>" : Source.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
