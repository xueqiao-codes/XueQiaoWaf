/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.statis
{
  public partial class TradeHostingPositionStatis {
    public interface Iface {
      void clearAll(PlatformArgs platformArgs);
      #if SILVERLIGHT
      IAsyncResult Begin_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs);
      void End_clearAll(IAsyncResult asyncResult);
      #endif
      void contructCompose(PlatformArgs platformArgs, StatContructComposeReq contructComposeReq);
      #if SILVERLIGHT
      IAsyncResult Begin_contructCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, StatContructComposeReq contructComposeReq);
      void End_contructCompose(IAsyncResult asyncResult);
      #endif
      void disassembleCompose(PlatformArgs platformArgs, DisassembleComposePositionReq disassembleComposePositionReq);
      #if SILVERLIGHT
      IAsyncResult Begin_disassembleCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, DisassembleComposePositionReq disassembleComposePositionReq);
      void End_disassembleCompose(IAsyncResult asyncResult);
      #endif
      void batchClosePosition(PlatformArgs platformArgs, BatchClosedPositionReq batchClosedPositionReq);
      #if SILVERLIGHT
      IAsyncResult Begin_batchClosePosition(AsyncCallback callback, object state, PlatformArgs platformArgs, BatchClosedPositionReq batchClosedPositionReq);
      void End_batchClosePosition(IAsyncResult asyncResult);
      #endif
      void recoverClosedPosition(PlatformArgs platformArgs, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType);
      #if SILVERLIGHT
      IAsyncResult Begin_recoverClosedPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType);
      void End_recoverClosedPosition(IAsyncResult asyncResult);
      #endif
      void assignPosition(PlatformArgs platformArgs, xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned positionAssigned);
      #if SILVERLIGHT
      IAsyncResult Begin_assignPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned positionAssigned);
      void End_assignPosition(IAsyncResult asyncResult);
      #endif
      void mergeToCompose(PlatformArgs platformArgs, StatMergeToComposeReq mergeToComposeReq);
      #if SILVERLIGHT
      IAsyncResult Begin_mergeToCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, StatMergeToComposeReq mergeToComposeReq);
      void End_mergeToCompose(IAsyncResult asyncResult);
      #endif
      void deleteExpiredStatContractPosition(PlatformArgs platformArgs, long subAccountId, long sledContractId);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteExpiredStatContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long sledContractId);
      void End_deleteExpiredStatContractPosition(IAsyncResult asyncResult);
      #endif
      StatPositionSummaryPage queryStatPositionSummaryPage(PlatformArgs platformArgs, QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryStatPositionSummaryPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption);
      StatPositionSummaryPage End_queryStatPositionSummaryPage(IAsyncResult asyncResult);
      #endif
      StatPositionItemPage queryStatPositionItemPage(PlatformArgs platformArgs, QueryStatPositionItemOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryStatPositionItemPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatPositionItemOption queryOption, IndexedPageOption pageOption);
      StatPositionItemPage End_queryStatPositionItemPage(IAsyncResult asyncResult);
      #endif
      StatClosedPositionDateSummaryPage queryCurrentDayStatClosedPositionPage(PlatformArgs platformArgs, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType);
      #if SILVERLIGHT
      IAsyncResult Begin_queryCurrentDayStatClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType);
      StatClosedPositionDateSummaryPage End_queryCurrentDayStatClosedPositionPage(IAsyncResult asyncResult);
      #endif
      StatClosedPositionDetail queryStatClosedPositionDetail(PlatformArgs platformArgs, QueryStatClosedPositionItemOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryStatClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatClosedPositionItemOption queryOption, IndexedPageOption pageOption);
      StatClosedPositionDetail End_queryStatClosedPositionDetail(IAsyncResult asyncResult);
      #endif
      StatClosedPositionDateSummaryPage queryArchivedClosedPositionPage(PlatformArgs platformArgs, QueryStatClosedPositionDateSummaryOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryArchivedClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatClosedPositionDateSummaryOption queryOption, IndexedPageOption pageOption);
      StatClosedPositionDateSummaryPage End_queryArchivedClosedPositionPage(IAsyncResult asyncResult);
      #endif
      StatClosedPositionDetail queryArchivedClosedPositionDetail(PlatformArgs platformArgs, QueryStatArchiveItemOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryArchivedClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatArchiveItemOption queryOption, IndexedPageOption pageOption);
      StatClosedPositionDetail End_queryArchivedClosedPositionDetail(IAsyncResult asyncResult);
      #endif
      StatPositionSummaryExPage queryStatPositionSummaryExPage(PlatformArgs platformArgs, QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryStatPositionSummaryExPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption);
      StatPositionSummaryExPage End_queryStatPositionSummaryExPage(IAsyncResult asyncResult);
      #endif
      StatPositionUnitPage queryStatPositionUnitPage(PlatformArgs platformArgs, QueryStatPositionUnitOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryStatPositionUnitPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatPositionUnitOption queryOption, IndexedPageOption pageOption);
      StatPositionUnitPage End_queryStatPositionUnitPage(IAsyncResult asyncResult);
      #endif
      StatClosedPositionDateSummaryPage queryHistoryClosedPositionPage(PlatformArgs platformArgs, QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryHistoryClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption);
      StatClosedPositionDateSummaryPage End_queryHistoryClosedPositionPage(IAsyncResult asyncResult);
      #endif
      StatClosedPositionDetail queryHistoryClosedPositionDetail(PlatformArgs platformArgs, QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryHistoryClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption);
      StatClosedPositionDetail End_queryHistoryClosedPositionDetail(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs)
      {
        return send_clearAll(callback, state, platformArgs);
      }

      public void End_clearAll(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_clearAll();
      }

      #endif

      public void clearAll(PlatformArgs platformArgs)
      {
        #if !SILVERLIGHT
        send_clearAll(platformArgs);
        recv_clearAll();

        #else
        var asyncResult = Begin_clearAll(null, null, platformArgs);
        End_clearAll(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs)
      #else
      public void send_clearAll(PlatformArgs platformArgs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("clearAll", TMessageType.Call, seqid_));
        clearAll_args args = new clearAll_args();
        args.PlatformArgs = platformArgs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_clearAll()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        clearAll_result result = new clearAll_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_contructCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, StatContructComposeReq contructComposeReq)
      {
        return send_contructCompose(callback, state, platformArgs, contructComposeReq);
      }

      public void End_contructCompose(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_contructCompose();
      }

      #endif

      public void contructCompose(PlatformArgs platformArgs, StatContructComposeReq contructComposeReq)
      {
        #if !SILVERLIGHT
        send_contructCompose(platformArgs, contructComposeReq);
        recv_contructCompose();

        #else
        var asyncResult = Begin_contructCompose(null, null, platformArgs, contructComposeReq);
        End_contructCompose(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_contructCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, StatContructComposeReq contructComposeReq)
      #else
      public void send_contructCompose(PlatformArgs platformArgs, StatContructComposeReq contructComposeReq)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("contructCompose", TMessageType.Call, seqid_));
        contructCompose_args args = new contructCompose_args();
        args.PlatformArgs = platformArgs;
        args.ContructComposeReq = contructComposeReq;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_contructCompose()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        contructCompose_result result = new contructCompose_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_disassembleCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, DisassembleComposePositionReq disassembleComposePositionReq)
      {
        return send_disassembleCompose(callback, state, platformArgs, disassembleComposePositionReq);
      }

      public void End_disassembleCompose(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_disassembleCompose();
      }

      #endif

      public void disassembleCompose(PlatformArgs platformArgs, DisassembleComposePositionReq disassembleComposePositionReq)
      {
        #if !SILVERLIGHT
        send_disassembleCompose(platformArgs, disassembleComposePositionReq);
        recv_disassembleCompose();

        #else
        var asyncResult = Begin_disassembleCompose(null, null, platformArgs, disassembleComposePositionReq);
        End_disassembleCompose(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_disassembleCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, DisassembleComposePositionReq disassembleComposePositionReq)
      #else
      public void send_disassembleCompose(PlatformArgs platformArgs, DisassembleComposePositionReq disassembleComposePositionReq)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("disassembleCompose", TMessageType.Call, seqid_));
        disassembleCompose_args args = new disassembleCompose_args();
        args.PlatformArgs = platformArgs;
        args.DisassembleComposePositionReq = disassembleComposePositionReq;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_disassembleCompose()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        disassembleCompose_result result = new disassembleCompose_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchClosePosition(AsyncCallback callback, object state, PlatformArgs platformArgs, BatchClosedPositionReq batchClosedPositionReq)
      {
        return send_batchClosePosition(callback, state, platformArgs, batchClosedPositionReq);
      }

      public void End_batchClosePosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_batchClosePosition();
      }

      #endif

      public void batchClosePosition(PlatformArgs platformArgs, BatchClosedPositionReq batchClosedPositionReq)
      {
        #if !SILVERLIGHT
        send_batchClosePosition(platformArgs, batchClosedPositionReq);
        recv_batchClosePosition();

        #else
        var asyncResult = Begin_batchClosePosition(null, null, platformArgs, batchClosedPositionReq);
        End_batchClosePosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchClosePosition(AsyncCallback callback, object state, PlatformArgs platformArgs, BatchClosedPositionReq batchClosedPositionReq)
      #else
      public void send_batchClosePosition(PlatformArgs platformArgs, BatchClosedPositionReq batchClosedPositionReq)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchClosePosition", TMessageType.Call, seqid_));
        batchClosePosition_args args = new batchClosePosition_args();
        args.PlatformArgs = platformArgs;
        args.BatchClosedPositionReq = batchClosedPositionReq;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_batchClosePosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchClosePosition_result result = new batchClosePosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_recoverClosedPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      {
        return send_recoverClosedPosition(callback, state, platformArgs, subAccountId, targetKey, targetType);
      }

      public void End_recoverClosedPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_recoverClosedPosition();
      }

      #endif

      public void recoverClosedPosition(PlatformArgs platformArgs, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      {
        #if !SILVERLIGHT
        send_recoverClosedPosition(platformArgs, subAccountId, targetKey, targetType);
        recv_recoverClosedPosition();

        #else
        var asyncResult = Begin_recoverClosedPosition(null, null, platformArgs, subAccountId, targetKey, targetType);
        End_recoverClosedPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_recoverClosedPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      #else
      public void send_recoverClosedPosition(PlatformArgs platformArgs, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("recoverClosedPosition", TMessageType.Call, seqid_));
        recoverClosedPosition_args args = new recoverClosedPosition_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.TargetKey = targetKey;
        args.TargetType = targetType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_recoverClosedPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        recoverClosedPosition_result result = new recoverClosedPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_assignPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned positionAssigned)
      {
        return send_assignPosition(callback, state, platformArgs, positionAssigned);
      }

      public void End_assignPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_assignPosition();
      }

      #endif

      public void assignPosition(PlatformArgs platformArgs, xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned positionAssigned)
      {
        #if !SILVERLIGHT
        send_assignPosition(platformArgs, positionAssigned);
        recv_assignPosition();

        #else
        var asyncResult = Begin_assignPosition(null, null, platformArgs, positionAssigned);
        End_assignPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_assignPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned positionAssigned)
      #else
      public void send_assignPosition(PlatformArgs platformArgs, xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned positionAssigned)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("assignPosition", TMessageType.Call, seqid_));
        assignPosition_args args = new assignPosition_args();
        args.PlatformArgs = platformArgs;
        args.PositionAssigned = positionAssigned;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_assignPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        assignPosition_result result = new assignPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_mergeToCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, StatMergeToComposeReq mergeToComposeReq)
      {
        return send_mergeToCompose(callback, state, platformArgs, mergeToComposeReq);
      }

      public void End_mergeToCompose(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_mergeToCompose();
      }

      #endif

      public void mergeToCompose(PlatformArgs platformArgs, StatMergeToComposeReq mergeToComposeReq)
      {
        #if !SILVERLIGHT
        send_mergeToCompose(platformArgs, mergeToComposeReq);
        recv_mergeToCompose();

        #else
        var asyncResult = Begin_mergeToCompose(null, null, platformArgs, mergeToComposeReq);
        End_mergeToCompose(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_mergeToCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, StatMergeToComposeReq mergeToComposeReq)
      #else
      public void send_mergeToCompose(PlatformArgs platformArgs, StatMergeToComposeReq mergeToComposeReq)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("mergeToCompose", TMessageType.Call, seqid_));
        mergeToCompose_args args = new mergeToCompose_args();
        args.PlatformArgs = platformArgs;
        args.MergeToComposeReq = mergeToComposeReq;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_mergeToCompose()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mergeToCompose_result result = new mergeToCompose_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteExpiredStatContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long sledContractId)
      {
        return send_deleteExpiredStatContractPosition(callback, state, platformArgs, subAccountId, sledContractId);
      }

      public void End_deleteExpiredStatContractPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deleteExpiredStatContractPosition();
      }

      #endif

      public void deleteExpiredStatContractPosition(PlatformArgs platformArgs, long subAccountId, long sledContractId)
      {
        #if !SILVERLIGHT
        send_deleteExpiredStatContractPosition(platformArgs, subAccountId, sledContractId);
        recv_deleteExpiredStatContractPosition();

        #else
        var asyncResult = Begin_deleteExpiredStatContractPosition(null, null, platformArgs, subAccountId, sledContractId);
        End_deleteExpiredStatContractPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteExpiredStatContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long sledContractId)
      #else
      public void send_deleteExpiredStatContractPosition(PlatformArgs platformArgs, long subAccountId, long sledContractId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteExpiredStatContractPosition", TMessageType.Call, seqid_));
        deleteExpiredStatContractPosition_args args = new deleteExpiredStatContractPosition_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.SledContractId = sledContractId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deleteExpiredStatContractPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteExpiredStatContractPosition_result result = new deleteExpiredStatContractPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryStatPositionSummaryPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryStatPositionSummaryPage(callback, state, platformArgs, queryOption, pageOption);
      }

      public StatPositionSummaryPage End_queryStatPositionSummaryPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryStatPositionSummaryPage();
      }

      #endif

      public StatPositionSummaryPage queryStatPositionSummaryPage(PlatformArgs platformArgs, QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryStatPositionSummaryPage(platformArgs, queryOption, pageOption);
        return recv_queryStatPositionSummaryPage();

        #else
        var asyncResult = Begin_queryStatPositionSummaryPage(null, null, platformArgs, queryOption, pageOption);
        return End_queryStatPositionSummaryPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryStatPositionSummaryPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryStatPositionSummaryPage(PlatformArgs platformArgs, QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryStatPositionSummaryPage", TMessageType.Call, seqid_));
        queryStatPositionSummaryPage_args args = new queryStatPositionSummaryPage_args();
        args.PlatformArgs = platformArgs;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StatPositionSummaryPage recv_queryStatPositionSummaryPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryStatPositionSummaryPage_result result = new queryStatPositionSummaryPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryStatPositionSummaryPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryStatPositionItemPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatPositionItemOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryStatPositionItemPage(callback, state, platformArgs, queryOption, pageOption);
      }

      public StatPositionItemPage End_queryStatPositionItemPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryStatPositionItemPage();
      }

      #endif

      public StatPositionItemPage queryStatPositionItemPage(PlatformArgs platformArgs, QueryStatPositionItemOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryStatPositionItemPage(platformArgs, queryOption, pageOption);
        return recv_queryStatPositionItemPage();

        #else
        var asyncResult = Begin_queryStatPositionItemPage(null, null, platformArgs, queryOption, pageOption);
        return End_queryStatPositionItemPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryStatPositionItemPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatPositionItemOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryStatPositionItemPage(PlatformArgs platformArgs, QueryStatPositionItemOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryStatPositionItemPage", TMessageType.Call, seqid_));
        queryStatPositionItemPage_args args = new queryStatPositionItemPage_args();
        args.PlatformArgs = platformArgs;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StatPositionItemPage recv_queryStatPositionItemPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryStatPositionItemPage_result result = new queryStatPositionItemPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryStatPositionItemPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryCurrentDayStatClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      {
        return send_queryCurrentDayStatClosedPositionPage(callback, state, platformArgs, subAccountId, targetKey, targetType);
      }

      public StatClosedPositionDateSummaryPage End_queryCurrentDayStatClosedPositionPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryCurrentDayStatClosedPositionPage();
      }

      #endif

      public StatClosedPositionDateSummaryPage queryCurrentDayStatClosedPositionPage(PlatformArgs platformArgs, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      {
        #if !SILVERLIGHT
        send_queryCurrentDayStatClosedPositionPage(platformArgs, subAccountId, targetKey, targetType);
        return recv_queryCurrentDayStatClosedPositionPage();

        #else
        var asyncResult = Begin_queryCurrentDayStatClosedPositionPage(null, null, platformArgs, subAccountId, targetKey, targetType);
        return End_queryCurrentDayStatClosedPositionPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryCurrentDayStatClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      #else
      public void send_queryCurrentDayStatClosedPositionPage(PlatformArgs platformArgs, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryCurrentDayStatClosedPositionPage", TMessageType.Call, seqid_));
        queryCurrentDayStatClosedPositionPage_args args = new queryCurrentDayStatClosedPositionPage_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.TargetKey = targetKey;
        args.TargetType = targetType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StatClosedPositionDateSummaryPage recv_queryCurrentDayStatClosedPositionPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryCurrentDayStatClosedPositionPage_result result = new queryCurrentDayStatClosedPositionPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryCurrentDayStatClosedPositionPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryStatClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatClosedPositionItemOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryStatClosedPositionDetail(callback, state, platformArgs, queryOption, pageOption);
      }

      public StatClosedPositionDetail End_queryStatClosedPositionDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryStatClosedPositionDetail();
      }

      #endif

      public StatClosedPositionDetail queryStatClosedPositionDetail(PlatformArgs platformArgs, QueryStatClosedPositionItemOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryStatClosedPositionDetail(platformArgs, queryOption, pageOption);
        return recv_queryStatClosedPositionDetail();

        #else
        var asyncResult = Begin_queryStatClosedPositionDetail(null, null, platformArgs, queryOption, pageOption);
        return End_queryStatClosedPositionDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryStatClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatClosedPositionItemOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryStatClosedPositionDetail(PlatformArgs platformArgs, QueryStatClosedPositionItemOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryStatClosedPositionDetail", TMessageType.Call, seqid_));
        queryStatClosedPositionDetail_args args = new queryStatClosedPositionDetail_args();
        args.PlatformArgs = platformArgs;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StatClosedPositionDetail recv_queryStatClosedPositionDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryStatClosedPositionDetail_result result = new queryStatClosedPositionDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryStatClosedPositionDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryArchivedClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatClosedPositionDateSummaryOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryArchivedClosedPositionPage(callback, state, platformArgs, queryOption, pageOption);
      }

      public StatClosedPositionDateSummaryPage End_queryArchivedClosedPositionPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryArchivedClosedPositionPage();
      }

      #endif

      public StatClosedPositionDateSummaryPage queryArchivedClosedPositionPage(PlatformArgs platformArgs, QueryStatClosedPositionDateSummaryOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryArchivedClosedPositionPage(platformArgs, queryOption, pageOption);
        return recv_queryArchivedClosedPositionPage();

        #else
        var asyncResult = Begin_queryArchivedClosedPositionPage(null, null, platformArgs, queryOption, pageOption);
        return End_queryArchivedClosedPositionPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryArchivedClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatClosedPositionDateSummaryOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryArchivedClosedPositionPage(PlatformArgs platformArgs, QueryStatClosedPositionDateSummaryOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryArchivedClosedPositionPage", TMessageType.Call, seqid_));
        queryArchivedClosedPositionPage_args args = new queryArchivedClosedPositionPage_args();
        args.PlatformArgs = platformArgs;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StatClosedPositionDateSummaryPage recv_queryArchivedClosedPositionPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryArchivedClosedPositionPage_result result = new queryArchivedClosedPositionPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryArchivedClosedPositionPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryArchivedClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatArchiveItemOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryArchivedClosedPositionDetail(callback, state, platformArgs, queryOption, pageOption);
      }

      public StatClosedPositionDetail End_queryArchivedClosedPositionDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryArchivedClosedPositionDetail();
      }

      #endif

      public StatClosedPositionDetail queryArchivedClosedPositionDetail(PlatformArgs platformArgs, QueryStatArchiveItemOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryArchivedClosedPositionDetail(platformArgs, queryOption, pageOption);
        return recv_queryArchivedClosedPositionDetail();

        #else
        var asyncResult = Begin_queryArchivedClosedPositionDetail(null, null, platformArgs, queryOption, pageOption);
        return End_queryArchivedClosedPositionDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryArchivedClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatArchiveItemOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryArchivedClosedPositionDetail(PlatformArgs platformArgs, QueryStatArchiveItemOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryArchivedClosedPositionDetail", TMessageType.Call, seqid_));
        queryArchivedClosedPositionDetail_args args = new queryArchivedClosedPositionDetail_args();
        args.PlatformArgs = platformArgs;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StatClosedPositionDetail recv_queryArchivedClosedPositionDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryArchivedClosedPositionDetail_result result = new queryArchivedClosedPositionDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryArchivedClosedPositionDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryStatPositionSummaryExPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryStatPositionSummaryExPage(callback, state, platformArgs, queryOption, pageOption);
      }

      public StatPositionSummaryExPage End_queryStatPositionSummaryExPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryStatPositionSummaryExPage();
      }

      #endif

      public StatPositionSummaryExPage queryStatPositionSummaryExPage(PlatformArgs platformArgs, QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryStatPositionSummaryExPage(platformArgs, queryOption, pageOption);
        return recv_queryStatPositionSummaryExPage();

        #else
        var asyncResult = Begin_queryStatPositionSummaryExPage(null, null, platformArgs, queryOption, pageOption);
        return End_queryStatPositionSummaryExPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryStatPositionSummaryExPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryStatPositionSummaryExPage(PlatformArgs platformArgs, QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryStatPositionSummaryExPage", TMessageType.Call, seqid_));
        queryStatPositionSummaryExPage_args args = new queryStatPositionSummaryExPage_args();
        args.PlatformArgs = platformArgs;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StatPositionSummaryExPage recv_queryStatPositionSummaryExPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryStatPositionSummaryExPage_result result = new queryStatPositionSummaryExPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryStatPositionSummaryExPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryStatPositionUnitPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatPositionUnitOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryStatPositionUnitPage(callback, state, platformArgs, queryOption, pageOption);
      }

      public StatPositionUnitPage End_queryStatPositionUnitPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryStatPositionUnitPage();
      }

      #endif

      public StatPositionUnitPage queryStatPositionUnitPage(PlatformArgs platformArgs, QueryStatPositionUnitOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryStatPositionUnitPage(platformArgs, queryOption, pageOption);
        return recv_queryStatPositionUnitPage();

        #else
        var asyncResult = Begin_queryStatPositionUnitPage(null, null, platformArgs, queryOption, pageOption);
        return End_queryStatPositionUnitPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryStatPositionUnitPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryStatPositionUnitOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryStatPositionUnitPage(PlatformArgs platformArgs, QueryStatPositionUnitOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryStatPositionUnitPage", TMessageType.Call, seqid_));
        queryStatPositionUnitPage_args args = new queryStatPositionUnitPage_args();
        args.PlatformArgs = platformArgs;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StatPositionUnitPage recv_queryStatPositionUnitPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryStatPositionUnitPage_result result = new queryStatPositionUnitPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryStatPositionUnitPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryHistoryClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryHistoryClosedPositionPage(callback, state, platformArgs, queryOption, pageOption);
      }

      public StatClosedPositionDateSummaryPage End_queryHistoryClosedPositionPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryHistoryClosedPositionPage();
      }

      #endif

      public StatClosedPositionDateSummaryPage queryHistoryClosedPositionPage(PlatformArgs platformArgs, QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryHistoryClosedPositionPage(platformArgs, queryOption, pageOption);
        return recv_queryHistoryClosedPositionPage();

        #else
        var asyncResult = Begin_queryHistoryClosedPositionPage(null, null, platformArgs, queryOption, pageOption);
        return End_queryHistoryClosedPositionPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryHistoryClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryHistoryClosedPositionPage(PlatformArgs platformArgs, QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryHistoryClosedPositionPage", TMessageType.Call, seqid_));
        queryHistoryClosedPositionPage_args args = new queryHistoryClosedPositionPage_args();
        args.PlatformArgs = platformArgs;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StatClosedPositionDateSummaryPage recv_queryHistoryClosedPositionPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryHistoryClosedPositionPage_result result = new queryHistoryClosedPositionPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryHistoryClosedPositionPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryHistoryClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryHistoryClosedPositionDetail(callback, state, platformArgs, queryOption, pageOption);
      }

      public StatClosedPositionDetail End_queryHistoryClosedPositionDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryHistoryClosedPositionDetail();
      }

      #endif

      public StatClosedPositionDetail queryHistoryClosedPositionDetail(PlatformArgs platformArgs, QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryHistoryClosedPositionDetail(platformArgs, queryOption, pageOption);
        return recv_queryHistoryClosedPositionDetail();

        #else
        var asyncResult = Begin_queryHistoryClosedPositionDetail(null, null, platformArgs, queryOption, pageOption);
        return End_queryHistoryClosedPositionDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryHistoryClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryHistoryClosedPositionDetail(PlatformArgs platformArgs, QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryHistoryClosedPositionDetail", TMessageType.Call, seqid_));
        queryHistoryClosedPositionDetail_args args = new queryHistoryClosedPositionDetail_args();
        args.PlatformArgs = platformArgs;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StatClosedPositionDetail recv_queryHistoryClosedPositionDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryHistoryClosedPositionDetail_result result = new queryHistoryClosedPositionDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryHistoryClosedPositionDetail failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["clearAll"] = clearAll_Process;
        processMap_["contructCompose"] = contructCompose_Process;
        processMap_["disassembleCompose"] = disassembleCompose_Process;
        processMap_["batchClosePosition"] = batchClosePosition_Process;
        processMap_["recoverClosedPosition"] = recoverClosedPosition_Process;
        processMap_["assignPosition"] = assignPosition_Process;
        processMap_["mergeToCompose"] = mergeToCompose_Process;
        processMap_["deleteExpiredStatContractPosition"] = deleteExpiredStatContractPosition_Process;
        processMap_["queryStatPositionSummaryPage"] = queryStatPositionSummaryPage_Process;
        processMap_["queryStatPositionItemPage"] = queryStatPositionItemPage_Process;
        processMap_["queryCurrentDayStatClosedPositionPage"] = queryCurrentDayStatClosedPositionPage_Process;
        processMap_["queryStatClosedPositionDetail"] = queryStatClosedPositionDetail_Process;
        processMap_["queryArchivedClosedPositionPage"] = queryArchivedClosedPositionPage_Process;
        processMap_["queryArchivedClosedPositionDetail"] = queryArchivedClosedPositionDetail_Process;
        processMap_["queryStatPositionSummaryExPage"] = queryStatPositionSummaryExPage_Process;
        processMap_["queryStatPositionUnitPage"] = queryStatPositionUnitPage_Process;
        processMap_["queryHistoryClosedPositionPage"] = queryHistoryClosedPositionPage_Process;
        processMap_["queryHistoryClosedPositionDetail"] = queryHistoryClosedPositionDetail_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void clearAll_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        clearAll_args args = new clearAll_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        clearAll_result result = new clearAll_result();
        try {
          iface_.clearAll(args.PlatformArgs);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("clearAll", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void contructCompose_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        contructCompose_args args = new contructCompose_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        contructCompose_result result = new contructCompose_result();
        try {
          iface_.contructCompose(args.PlatformArgs, args.ContructComposeReq);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("contructCompose", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void disassembleCompose_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        disassembleCompose_args args = new disassembleCompose_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        disassembleCompose_result result = new disassembleCompose_result();
        try {
          iface_.disassembleCompose(args.PlatformArgs, args.DisassembleComposePositionReq);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("disassembleCompose", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchClosePosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchClosePosition_args args = new batchClosePosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchClosePosition_result result = new batchClosePosition_result();
        try {
          iface_.batchClosePosition(args.PlatformArgs, args.BatchClosedPositionReq);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchClosePosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void recoverClosedPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        recoverClosedPosition_args args = new recoverClosedPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        recoverClosedPosition_result result = new recoverClosedPosition_result();
        try {
          iface_.recoverClosedPosition(args.PlatformArgs, args.SubAccountId, args.TargetKey, args.TargetType);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("recoverClosedPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void assignPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        assignPosition_args args = new assignPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        assignPosition_result result = new assignPosition_result();
        try {
          iface_.assignPosition(args.PlatformArgs, args.PositionAssigned);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("assignPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mergeToCompose_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mergeToCompose_args args = new mergeToCompose_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mergeToCompose_result result = new mergeToCompose_result();
        try {
          iface_.mergeToCompose(args.PlatformArgs, args.MergeToComposeReq);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("mergeToCompose", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteExpiredStatContractPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteExpiredStatContractPosition_args args = new deleteExpiredStatContractPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteExpiredStatContractPosition_result result = new deleteExpiredStatContractPosition_result();
        try {
          iface_.deleteExpiredStatContractPosition(args.PlatformArgs, args.SubAccountId, args.SledContractId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("deleteExpiredStatContractPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryStatPositionSummaryPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryStatPositionSummaryPage_args args = new queryStatPositionSummaryPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryStatPositionSummaryPage_result result = new queryStatPositionSummaryPage_result();
        try {
          result.Success = iface_.queryStatPositionSummaryPage(args.PlatformArgs, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryStatPositionSummaryPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryStatPositionItemPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryStatPositionItemPage_args args = new queryStatPositionItemPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryStatPositionItemPage_result result = new queryStatPositionItemPage_result();
        try {
          result.Success = iface_.queryStatPositionItemPage(args.PlatformArgs, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryStatPositionItemPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryCurrentDayStatClosedPositionPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryCurrentDayStatClosedPositionPage_args args = new queryCurrentDayStatClosedPositionPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryCurrentDayStatClosedPositionPage_result result = new queryCurrentDayStatClosedPositionPage_result();
        try {
          result.Success = iface_.queryCurrentDayStatClosedPositionPage(args.PlatformArgs, args.SubAccountId, args.TargetKey, args.TargetType);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryCurrentDayStatClosedPositionPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryStatClosedPositionDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryStatClosedPositionDetail_args args = new queryStatClosedPositionDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryStatClosedPositionDetail_result result = new queryStatClosedPositionDetail_result();
        try {
          result.Success = iface_.queryStatClosedPositionDetail(args.PlatformArgs, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryStatClosedPositionDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryArchivedClosedPositionPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryArchivedClosedPositionPage_args args = new queryArchivedClosedPositionPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryArchivedClosedPositionPage_result result = new queryArchivedClosedPositionPage_result();
        try {
          result.Success = iface_.queryArchivedClosedPositionPage(args.PlatformArgs, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryArchivedClosedPositionPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryArchivedClosedPositionDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryArchivedClosedPositionDetail_args args = new queryArchivedClosedPositionDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryArchivedClosedPositionDetail_result result = new queryArchivedClosedPositionDetail_result();
        try {
          result.Success = iface_.queryArchivedClosedPositionDetail(args.PlatformArgs, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryArchivedClosedPositionDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryStatPositionSummaryExPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryStatPositionSummaryExPage_args args = new queryStatPositionSummaryExPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryStatPositionSummaryExPage_result result = new queryStatPositionSummaryExPage_result();
        try {
          result.Success = iface_.queryStatPositionSummaryExPage(args.PlatformArgs, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryStatPositionSummaryExPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryStatPositionUnitPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryStatPositionUnitPage_args args = new queryStatPositionUnitPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryStatPositionUnitPage_result result = new queryStatPositionUnitPage_result();
        try {
          result.Success = iface_.queryStatPositionUnitPage(args.PlatformArgs, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryStatPositionUnitPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryHistoryClosedPositionPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryHistoryClosedPositionPage_args args = new queryHistoryClosedPositionPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryHistoryClosedPositionPage_result result = new queryHistoryClosedPositionPage_result();
        try {
          result.Success = iface_.queryHistoryClosedPositionPage(args.PlatformArgs, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryHistoryClosedPositionPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryHistoryClosedPositionDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryHistoryClosedPositionDetail_args args = new queryHistoryClosedPositionDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryHistoryClosedPositionDetail_result result = new queryHistoryClosedPositionDetail_result();
        try {
          result.Success = iface_.queryHistoryClosedPositionDetail(args.PlatformArgs, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryHistoryClosedPositionDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearAll_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
      }

      public clearAll_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearAll_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearAll_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearAll_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public clearAll_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearAll_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearAll_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class contructCompose_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private StatContructComposeReq _contructComposeReq;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public StatContructComposeReq ContructComposeReq
      {
        get
        {
          return _contructComposeReq;
        }
        set
        {
          __isset.contructComposeReq = true;
          SetProperty(ref _contructComposeReq, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool contructComposeReq;
      }

      public contructCompose_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                ContructComposeReq = new StatContructComposeReq();
                ContructComposeReq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("contructCompose_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ContructComposeReq != null && __isset.contructComposeReq) {
          field.Name = "contructComposeReq";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          ContructComposeReq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("contructCompose_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",ContructComposeReq: ");
        sb.Append(ContructComposeReq== null ? "<null>" : ContructComposeReq.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class contructCompose_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public contructCompose_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("contructCompose_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("contructCompose_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class disassembleCompose_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private DisassembleComposePositionReq _disassembleComposePositionReq;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public DisassembleComposePositionReq DisassembleComposePositionReq
      {
        get
        {
          return _disassembleComposePositionReq;
        }
        set
        {
          __isset.disassembleComposePositionReq = true;
          SetProperty(ref _disassembleComposePositionReq, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool disassembleComposePositionReq;
      }

      public disassembleCompose_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                DisassembleComposePositionReq = new DisassembleComposePositionReq();
                DisassembleComposePositionReq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("disassembleCompose_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DisassembleComposePositionReq != null && __isset.disassembleComposePositionReq) {
          field.Name = "disassembleComposePositionReq";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          DisassembleComposePositionReq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("disassembleCompose_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",DisassembleComposePositionReq: ");
        sb.Append(DisassembleComposePositionReq== null ? "<null>" : DisassembleComposePositionReq.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class disassembleCompose_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public disassembleCompose_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("disassembleCompose_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("disassembleCompose_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchClosePosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private BatchClosedPositionReq _batchClosedPositionReq;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public BatchClosedPositionReq BatchClosedPositionReq
      {
        get
        {
          return _batchClosedPositionReq;
        }
        set
        {
          __isset.batchClosedPositionReq = true;
          SetProperty(ref _batchClosedPositionReq, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool batchClosedPositionReq;
      }

      public batchClosePosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                BatchClosedPositionReq = new BatchClosedPositionReq();
                BatchClosedPositionReq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchClosePosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (BatchClosedPositionReq != null && __isset.batchClosedPositionReq) {
          field.Name = "batchClosedPositionReq";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          BatchClosedPositionReq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchClosePosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",BatchClosedPositionReq: ");
        sb.Append(BatchClosedPositionReq== null ? "<null>" : BatchClosedPositionReq.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchClosePosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public batchClosePosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchClosePosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchClosePosition_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class recoverClosedPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;
      private string _targetKey;
      private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType _targetType;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public string TargetKey
      {
        get
        {
          return _targetKey;
        }
        set
        {
          __isset.targetKey = true;
          SetProperty(ref _targetKey, value);
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType"/>
      /// </summary>
      public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType TargetType
      {
        get
        {
          return _targetType;
        }
        set
        {
          __isset.targetType = true;
          SetProperty(ref _targetType, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
        public bool targetKey;
        public bool targetType;
      }

      public recoverClosedPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TargetKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                TargetType = (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("recoverClosedPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (TargetKey != null && __isset.targetKey) {
          field.Name = "targetKey";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TargetKey);
          oprot.WriteFieldEnd();
        }
        if (__isset.targetType) {
          field.Name = "targetType";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)TargetType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("recoverClosedPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",TargetKey: ");
        sb.Append(TargetKey);
        sb.Append(",TargetType: ");
        sb.Append(TargetType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class recoverClosedPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public recoverClosedPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("recoverClosedPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("recoverClosedPosition_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class assignPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned _positionAssigned;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned PositionAssigned
      {
        get
        {
          return _positionAssigned;
        }
        set
        {
          __isset.positionAssigned = true;
          SetProperty(ref _positionAssigned, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool positionAssigned;
      }

      public assignPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                PositionAssigned = new xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned();
                PositionAssigned.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("assignPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PositionAssigned != null && __isset.positionAssigned) {
          field.Name = "positionAssigned";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          PositionAssigned.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("assignPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",PositionAssigned: ");
        sb.Append(PositionAssigned== null ? "<null>" : PositionAssigned.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class assignPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public assignPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("assignPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("assignPosition_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mergeToCompose_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private StatMergeToComposeReq _mergeToComposeReq;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public StatMergeToComposeReq MergeToComposeReq
      {
        get
        {
          return _mergeToComposeReq;
        }
        set
        {
          __isset.mergeToComposeReq = true;
          SetProperty(ref _mergeToComposeReq, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool mergeToComposeReq;
      }

      public mergeToCompose_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                MergeToComposeReq = new StatMergeToComposeReq();
                MergeToComposeReq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mergeToCompose_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MergeToComposeReq != null && __isset.mergeToComposeReq) {
          field.Name = "mergeToComposeReq";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          MergeToComposeReq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mergeToCompose_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",MergeToComposeReq: ");
        sb.Append(MergeToComposeReq== null ? "<null>" : MergeToComposeReq.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mergeToCompose_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public mergeToCompose_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mergeToCompose_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mergeToCompose_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteExpiredStatContractPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;
      private long _sledContractId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public long SledContractId
      {
        get
        {
          return _sledContractId;
        }
        set
        {
          __isset.sledContractId = true;
          SetProperty(ref _sledContractId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
        public bool sledContractId;
      }

      public deleteExpiredStatContractPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SledContractId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteExpiredStatContractPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.sledContractId) {
          field.Name = "sledContractId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SledContractId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteExpiredStatContractPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",SledContractId: ");
        sb.Append(SledContractId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteExpiredStatContractPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public deleteExpiredStatContractPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteExpiredStatContractPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteExpiredStatContractPosition_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionSummaryPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryStatPositionSummaryOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryStatPositionSummaryOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOption;
        public bool pageOption;
      }

      public queryStatPositionSummaryPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOption = new QueryStatPositionSummaryOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionSummaryPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionSummaryPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionSummaryPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private StatPositionSummaryPage _success;
      private ErrorInfo _err;

      public StatPositionSummaryPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryStatPositionSummaryPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StatPositionSummaryPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionSummaryPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionSummaryPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionItemPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryStatPositionItemOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryStatPositionItemOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOption;
        public bool pageOption;
      }

      public queryStatPositionItemPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOption = new QueryStatPositionItemOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionItemPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionItemPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionItemPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private StatPositionItemPage _success;
      private ErrorInfo _err;

      public StatPositionItemPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryStatPositionItemPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StatPositionItemPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionItemPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionItemPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryCurrentDayStatClosedPositionPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;
      private string _targetKey;
      private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType _targetType;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public string TargetKey
      {
        get
        {
          return _targetKey;
        }
        set
        {
          __isset.targetKey = true;
          SetProperty(ref _targetKey, value);
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType"/>
      /// </summary>
      public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType TargetType
      {
        get
        {
          return _targetType;
        }
        set
        {
          __isset.targetType = true;
          SetProperty(ref _targetType, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
        public bool targetKey;
        public bool targetType;
      }

      public queryCurrentDayStatClosedPositionPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TargetKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                TargetType = (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryCurrentDayStatClosedPositionPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (TargetKey != null && __isset.targetKey) {
          field.Name = "targetKey";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TargetKey);
          oprot.WriteFieldEnd();
        }
        if (__isset.targetType) {
          field.Name = "targetType";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)TargetType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryCurrentDayStatClosedPositionPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",TargetKey: ");
        sb.Append(TargetKey);
        sb.Append(",TargetType: ");
        sb.Append(TargetType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryCurrentDayStatClosedPositionPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private StatClosedPositionDateSummaryPage _success;
      private ErrorInfo _err;

      public StatClosedPositionDateSummaryPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryCurrentDayStatClosedPositionPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StatClosedPositionDateSummaryPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryCurrentDayStatClosedPositionPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryCurrentDayStatClosedPositionPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatClosedPositionDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryStatClosedPositionItemOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryStatClosedPositionItemOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOption;
        public bool pageOption;
      }

      public queryStatClosedPositionDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOption = new QueryStatClosedPositionItemOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatClosedPositionDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatClosedPositionDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatClosedPositionDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private StatClosedPositionDetail _success;
      private ErrorInfo _err;

      public StatClosedPositionDetail Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryStatClosedPositionDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StatClosedPositionDetail();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatClosedPositionDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatClosedPositionDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryArchivedClosedPositionPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryStatClosedPositionDateSummaryOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryStatClosedPositionDateSummaryOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOption;
        public bool pageOption;
      }

      public queryArchivedClosedPositionPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOption = new QueryStatClosedPositionDateSummaryOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryArchivedClosedPositionPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryArchivedClosedPositionPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryArchivedClosedPositionPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private StatClosedPositionDateSummaryPage _success;
      private ErrorInfo _err;

      public StatClosedPositionDateSummaryPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryArchivedClosedPositionPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StatClosedPositionDateSummaryPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryArchivedClosedPositionPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryArchivedClosedPositionPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryArchivedClosedPositionDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryStatArchiveItemOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryStatArchiveItemOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOption;
        public bool pageOption;
      }

      public queryArchivedClosedPositionDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOption = new QueryStatArchiveItemOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryArchivedClosedPositionDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryArchivedClosedPositionDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryArchivedClosedPositionDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private StatClosedPositionDetail _success;
      private ErrorInfo _err;

      public StatClosedPositionDetail Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryArchivedClosedPositionDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StatClosedPositionDetail();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryArchivedClosedPositionDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryArchivedClosedPositionDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionSummaryExPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryStatPositionSummaryOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryStatPositionSummaryOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOption;
        public bool pageOption;
      }

      public queryStatPositionSummaryExPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOption = new QueryStatPositionSummaryOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionSummaryExPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionSummaryExPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionSummaryExPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private StatPositionSummaryExPage _success;
      private ErrorInfo _err;

      public StatPositionSummaryExPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryStatPositionSummaryExPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StatPositionSummaryExPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionSummaryExPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionSummaryExPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionUnitPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryStatPositionUnitOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryStatPositionUnitOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOption;
        public bool pageOption;
      }

      public queryStatPositionUnitPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOption = new QueryStatPositionUnitOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionUnitPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionUnitPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionUnitPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private StatPositionUnitPage _success;
      private ErrorInfo _err;

      public StatPositionUnitPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryStatPositionUnitPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StatPositionUnitPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionUnitPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionUnitPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryHistoryClosedPositionPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryHistoryClosedPositionOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryHistoryClosedPositionOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOption;
        public bool pageOption;
      }

      public queryHistoryClosedPositionPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOption = new QueryHistoryClosedPositionOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryHistoryClosedPositionPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryHistoryClosedPositionPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryHistoryClosedPositionPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private StatClosedPositionDateSummaryPage _success;
      private ErrorInfo _err;

      public StatClosedPositionDateSummaryPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryHistoryClosedPositionPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StatClosedPositionDateSummaryPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryHistoryClosedPositionPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryHistoryClosedPositionPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryHistoryClosedPositionDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryHistoryClosedPositionOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryHistoryClosedPositionOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOption;
        public bool pageOption;
      }

      public queryHistoryClosedPositionDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOption = new QueryHistoryClosedPositionOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryHistoryClosedPositionDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryHistoryClosedPositionDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryHistoryClosedPositionDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private StatClosedPositionDetail _success;
      private ErrorInfo _err;

      public StatClosedPositionDetail Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryHistoryClosedPositionDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StatClosedPositionDetail();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryHistoryClosedPositionDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryHistoryClosedPositionDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
