/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.statis
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class StatClosedPositionItem : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _closedItemId;
    private long _closedId;
    private long _positionItemId;
    private long _subAccountId;
    private string _targetKey;
    private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType _targetType;
    private double _price;
    private int _closedQuantity;
    private StatDirection _direction;
    private StatDataSource _source;
    private long _positionCreateTimestampMs;
    private long _closedTimestampMs;
    private long _archivedDateTimestampMs;

    public long ClosedItemId
    {
      get
      {
        return _closedItemId;
      }
      set
      {
        __isset.closedItemId = true;
        SetProperty(ref _closedItemId, value);
      }
    }

    public long ClosedId
    {
      get
      {
        return _closedId;
      }
      set
      {
        __isset.closedId = true;
        SetProperty(ref _closedId, value);
      }
    }

    public long PositionItemId
    {
      get
      {
        return _positionItemId;
      }
      set
      {
        __isset.positionItemId = true;
        SetProperty(ref _positionItemId, value);
      }
    }

    public long SubAccountId
    {
      get
      {
        return _subAccountId;
      }
      set
      {
        __isset.subAccountId = true;
        SetProperty(ref _subAccountId, value);
      }
    }

    public string TargetKey
    {
      get
      {
        return _targetKey;
      }
      set
      {
        __isset.targetKey = true;
        SetProperty(ref _targetKey, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType"/>
    /// </summary>
    public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType TargetType
    {
      get
      {
        return _targetType;
      }
      set
      {
        __isset.targetType = true;
        SetProperty(ref _targetType, value);
      }
    }

    public double Price
    {
      get
      {
        return _price;
      }
      set
      {
        __isset.price = true;
        SetProperty(ref _price, value);
      }
    }

    public int ClosedQuantity
    {
      get
      {
        return _closedQuantity;
      }
      set
      {
        __isset.closedQuantity = true;
        SetProperty(ref _closedQuantity, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="StatDirection"/>
    /// </summary>
    public StatDirection Direction
    {
      get
      {
        return _direction;
      }
      set
      {
        __isset.direction = true;
        SetProperty(ref _direction, value);
      }
    }

    public StatDataSource Source
    {
      get
      {
        return _source;
      }
      set
      {
        __isset.source = true;
        SetProperty(ref _source, value);
      }
    }

    public long PositionCreateTimestampMs
    {
      get
      {
        return _positionCreateTimestampMs;
      }
      set
      {
        __isset.positionCreateTimestampMs = true;
        SetProperty(ref _positionCreateTimestampMs, value);
      }
    }

    public long ClosedTimestampMs
    {
      get
      {
        return _closedTimestampMs;
      }
      set
      {
        __isset.closedTimestampMs = true;
        SetProperty(ref _closedTimestampMs, value);
      }
    }

    public long ArchivedDateTimestampMs
    {
      get
      {
        return _archivedDateTimestampMs;
      }
      set
      {
        __isset.archivedDateTimestampMs = true;
        SetProperty(ref _archivedDateTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool closedItemId;
      public bool closedId;
      public bool positionItemId;
      public bool subAccountId;
      public bool targetKey;
      public bool targetType;
      public bool price;
      public bool closedQuantity;
      public bool direction;
      public bool source;
      public bool positionCreateTimestampMs;
      public bool closedTimestampMs;
      public bool archivedDateTimestampMs;
    }

    public StatClosedPositionItem() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              ClosedItemId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              ClosedId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              PositionItemId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              SubAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              TargetKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              TargetType = (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Double) {
              Price = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              ClosedQuantity = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Direction = (StatDirection)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Struct) {
              Source = new StatDataSource();
              Source.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              PositionCreateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I64) {
              ClosedTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I64) {
              ArchivedDateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StatClosedPositionItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.closedItemId) {
        field.Name = "closedItemId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ClosedItemId);
        oprot.WriteFieldEnd();
      }
      if (__isset.closedId) {
        field.Name = "closedId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ClosedId);
        oprot.WriteFieldEnd();
      }
      if (__isset.positionItemId) {
        field.Name = "positionItemId";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PositionItemId);
        oprot.WriteFieldEnd();
      }
      if (__isset.subAccountId) {
        field.Name = "subAccountId";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SubAccountId);
        oprot.WriteFieldEnd();
      }
      if (TargetKey != null && __isset.targetKey) {
        field.Name = "targetKey";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TargetKey);
        oprot.WriteFieldEnd();
      }
      if (__isset.targetType) {
        field.Name = "targetType";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TargetType);
        oprot.WriteFieldEnd();
      }
      if (__isset.price) {
        field.Name = "price";
        field.Type = TType.Double;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Price);
        oprot.WriteFieldEnd();
      }
      if (__isset.closedQuantity) {
        field.Name = "closedQuantity";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ClosedQuantity);
        oprot.WriteFieldEnd();
      }
      if (__isset.direction) {
        field.Name = "direction";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Direction);
        oprot.WriteFieldEnd();
      }
      if (Source != null && __isset.source) {
        field.Name = "source";
        field.Type = TType.Struct;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        Source.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.positionCreateTimestampMs) {
        field.Name = "positionCreateTimestampMs";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PositionCreateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.closedTimestampMs) {
        field.Name = "closedTimestampMs";
        field.Type = TType.I64;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ClosedTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.archivedDateTimestampMs) {
        field.Name = "archivedDateTimestampMs";
        field.Type = TType.I64;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ArchivedDateTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StatClosedPositionItem(");
      sb.Append("ClosedItemId: ");
      sb.Append(ClosedItemId);
      sb.Append(",ClosedId: ");
      sb.Append(ClosedId);
      sb.Append(",PositionItemId: ");
      sb.Append(PositionItemId);
      sb.Append(",SubAccountId: ");
      sb.Append(SubAccountId);
      sb.Append(",TargetKey: ");
      sb.Append(TargetKey);
      sb.Append(",TargetType: ");
      sb.Append(TargetType);
      sb.Append(",Price: ");
      sb.Append(Price);
      sb.Append(",ClosedQuantity: ");
      sb.Append(ClosedQuantity);
      sb.Append(",Direction: ");
      sb.Append(Direction);
      sb.Append(",Source: ");
      sb.Append(Source== null ? "<null>" : Source.ToString());
      sb.Append(",PositionCreateTimestampMs: ");
      sb.Append(PositionCreateTimestampMs);
      sb.Append(",ClosedTimestampMs: ");
      sb.Append(ClosedTimestampMs);
      sb.Append(",ArchivedDateTimestampMs: ");
      sb.Append(ArchivedDateTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
