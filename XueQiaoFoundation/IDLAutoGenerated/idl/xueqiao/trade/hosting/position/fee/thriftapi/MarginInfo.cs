/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.fee.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MarginInfo : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private double _longMarginRatioByMoney;
    private double _longMarginRatioByVolume;
    private double _shortMarginRatioByMoney;
    private double _shortMarginRatioByVolume;
    private string _currency;
    private string _currencyGroup;

    public double LongMarginRatioByMoney
    {
      get
      {
        return _longMarginRatioByMoney;
      }
      set
      {
        __isset.longMarginRatioByMoney = true;
        SetProperty(ref _longMarginRatioByMoney, value);
      }
    }

    public double LongMarginRatioByVolume
    {
      get
      {
        return _longMarginRatioByVolume;
      }
      set
      {
        __isset.longMarginRatioByVolume = true;
        SetProperty(ref _longMarginRatioByVolume, value);
      }
    }

    public double ShortMarginRatioByMoney
    {
      get
      {
        return _shortMarginRatioByMoney;
      }
      set
      {
        __isset.shortMarginRatioByMoney = true;
        SetProperty(ref _shortMarginRatioByMoney, value);
      }
    }

    public double ShortMarginRatioByVolume
    {
      get
      {
        return _shortMarginRatioByVolume;
      }
      set
      {
        __isset.shortMarginRatioByVolume = true;
        SetProperty(ref _shortMarginRatioByVolume, value);
      }
    }

    public string Currency
    {
      get
      {
        return _currency;
      }
      set
      {
        __isset.currency = true;
        SetProperty(ref _currency, value);
      }
    }

    public string CurrencyGroup
    {
      get
      {
        return _currencyGroup;
      }
      set
      {
        __isset.currencyGroup = true;
        SetProperty(ref _currencyGroup, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool longMarginRatioByMoney;
      public bool longMarginRatioByVolume;
      public bool shortMarginRatioByMoney;
      public bool shortMarginRatioByVolume;
      public bool currency;
      public bool currencyGroup;
    }

    public MarginInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Double) {
              LongMarginRatioByMoney = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              LongMarginRatioByVolume = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              ShortMarginRatioByMoney = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              ShortMarginRatioByVolume = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Currency = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              CurrencyGroup = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MarginInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.longMarginRatioByMoney) {
        field.Name = "longMarginRatioByMoney";
        field.Type = TType.Double;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LongMarginRatioByMoney);
        oprot.WriteFieldEnd();
      }
      if (__isset.longMarginRatioByVolume) {
        field.Name = "longMarginRatioByVolume";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LongMarginRatioByVolume);
        oprot.WriteFieldEnd();
      }
      if (__isset.shortMarginRatioByMoney) {
        field.Name = "shortMarginRatioByMoney";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ShortMarginRatioByMoney);
        oprot.WriteFieldEnd();
      }
      if (__isset.shortMarginRatioByVolume) {
        field.Name = "shortMarginRatioByVolume";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ShortMarginRatioByVolume);
        oprot.WriteFieldEnd();
      }
      if (Currency != null && __isset.currency) {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Currency);
        oprot.WriteFieldEnd();
      }
      if (CurrencyGroup != null && __isset.currencyGroup) {
        field.Name = "currencyGroup";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CurrencyGroup);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MarginInfo(");
      sb.Append("LongMarginRatioByMoney: ");
      sb.Append(LongMarginRatioByMoney);
      sb.Append(",LongMarginRatioByVolume: ");
      sb.Append(LongMarginRatioByVolume);
      sb.Append(",ShortMarginRatioByMoney: ");
      sb.Append(ShortMarginRatioByMoney);
      sb.Append(",ShortMarginRatioByVolume: ");
      sb.Append(ShortMarginRatioByVolume);
      sb.Append(",Currency: ");
      sb.Append(Currency);
      sb.Append(",CurrencyGroup: ");
      sb.Append(CurrencyGroup);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
