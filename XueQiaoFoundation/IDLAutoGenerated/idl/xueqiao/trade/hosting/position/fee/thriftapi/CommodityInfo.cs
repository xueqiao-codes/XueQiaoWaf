/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.fee.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CommodityInfo : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private string _exchangeMic;
    private string _commodityEngAcronym;
    private string _commodityCnAcronym;
    private string _exchangeAcronym;
    private string _exchangeCnAcronym;

    public string ExchangeMic
    {
      get
      {
        return _exchangeMic;
      }
      set
      {
        __isset.exchangeMic = true;
        SetProperty(ref _exchangeMic, value);
      }
    }

    public string CommodityEngAcronym
    {
      get
      {
        return _commodityEngAcronym;
      }
      set
      {
        __isset.commodityEngAcronym = true;
        SetProperty(ref _commodityEngAcronym, value);
      }
    }

    public string CommodityCnAcronym
    {
      get
      {
        return _commodityCnAcronym;
      }
      set
      {
        __isset.commodityCnAcronym = true;
        SetProperty(ref _commodityCnAcronym, value);
      }
    }

    public string ExchangeAcronym
    {
      get
      {
        return _exchangeAcronym;
      }
      set
      {
        __isset.exchangeAcronym = true;
        SetProperty(ref _exchangeAcronym, value);
      }
    }

    public string ExchangeCnAcronym
    {
      get
      {
        return _exchangeCnAcronym;
      }
      set
      {
        __isset.exchangeCnAcronym = true;
        SetProperty(ref _exchangeCnAcronym, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool exchangeMic;
      public bool commodityEngAcronym;
      public bool commodityCnAcronym;
      public bool exchangeAcronym;
      public bool exchangeCnAcronym;
    }

    public CommodityInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ExchangeMic = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              CommodityEngAcronym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              CommodityCnAcronym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              ExchangeAcronym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              ExchangeCnAcronym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CommodityInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ExchangeMic != null && __isset.exchangeMic) {
        field.Name = "exchangeMic";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExchangeMic);
        oprot.WriteFieldEnd();
      }
      if (CommodityEngAcronym != null && __isset.commodityEngAcronym) {
        field.Name = "commodityEngAcronym";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CommodityEngAcronym);
        oprot.WriteFieldEnd();
      }
      if (CommodityCnAcronym != null && __isset.commodityCnAcronym) {
        field.Name = "commodityCnAcronym";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CommodityCnAcronym);
        oprot.WriteFieldEnd();
      }
      if (ExchangeAcronym != null && __isset.exchangeAcronym) {
        field.Name = "exchangeAcronym";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExchangeAcronym);
        oprot.WriteFieldEnd();
      }
      if (ExchangeCnAcronym != null && __isset.exchangeCnAcronym) {
        field.Name = "exchangeCnAcronym";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExchangeCnAcronym);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CommodityInfo(");
      sb.Append("ExchangeMic: ");
      sb.Append(ExchangeMic);
      sb.Append(",CommodityEngAcronym: ");
      sb.Append(CommodityEngAcronym);
      sb.Append(",CommodityCnAcronym: ");
      sb.Append(CommodityCnAcronym);
      sb.Append(",ExchangeAcronym: ");
      sb.Append(ExchangeAcronym);
      sb.Append(",ExchangeCnAcronym: ");
      sb.Append(ExchangeCnAcronym);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
