/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.fee.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ContractInfo : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _tradeAccountId;
    private long _commodityId;
    private string _contractCode;
    private long _contractId;
    private string _exchangeMic;
    private string _contractEngName;
    private string _contractCnName;
    private string _commodityEngAcronym;
    private string _commodityCnAcronym;
    private string _exchangeAcronym;
    private string _exchangeCnAcronym;

    public long TradeAccountId
    {
      get
      {
        return _tradeAccountId;
      }
      set
      {
        __isset.tradeAccountId = true;
        SetProperty(ref _tradeAccountId, value);
      }
    }

    public long CommodityId
    {
      get
      {
        return _commodityId;
      }
      set
      {
        __isset.commodityId = true;
        SetProperty(ref _commodityId, value);
      }
    }

    public string ContractCode
    {
      get
      {
        return _contractCode;
      }
      set
      {
        __isset.contractCode = true;
        SetProperty(ref _contractCode, value);
      }
    }

    public long ContractId
    {
      get
      {
        return _contractId;
      }
      set
      {
        __isset.contractId = true;
        SetProperty(ref _contractId, value);
      }
    }

    public string ExchangeMic
    {
      get
      {
        return _exchangeMic;
      }
      set
      {
        __isset.exchangeMic = true;
        SetProperty(ref _exchangeMic, value);
      }
    }

    public string ContractEngName
    {
      get
      {
        return _contractEngName;
      }
      set
      {
        __isset.contractEngName = true;
        SetProperty(ref _contractEngName, value);
      }
    }

    public string ContractCnName
    {
      get
      {
        return _contractCnName;
      }
      set
      {
        __isset.contractCnName = true;
        SetProperty(ref _contractCnName, value);
      }
    }

    public string CommodityEngAcronym
    {
      get
      {
        return _commodityEngAcronym;
      }
      set
      {
        __isset.commodityEngAcronym = true;
        SetProperty(ref _commodityEngAcronym, value);
      }
    }

    public string CommodityCnAcronym
    {
      get
      {
        return _commodityCnAcronym;
      }
      set
      {
        __isset.commodityCnAcronym = true;
        SetProperty(ref _commodityCnAcronym, value);
      }
    }

    public string ExchangeAcronym
    {
      get
      {
        return _exchangeAcronym;
      }
      set
      {
        __isset.exchangeAcronym = true;
        SetProperty(ref _exchangeAcronym, value);
      }
    }

    public string ExchangeCnAcronym
    {
      get
      {
        return _exchangeCnAcronym;
      }
      set
      {
        __isset.exchangeCnAcronym = true;
        SetProperty(ref _exchangeCnAcronym, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tradeAccountId;
      public bool commodityId;
      public bool contractCode;
      public bool contractId;
      public bool exchangeMic;
      public bool contractEngName;
      public bool contractCnName;
      public bool commodityEngAcronym;
      public bool commodityCnAcronym;
      public bool exchangeAcronym;
      public bool exchangeCnAcronym;
    }

    public ContractInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              TradeAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              CommodityId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              ContractCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              ContractId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              ExchangeMic = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              ContractEngName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              ContractCnName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              CommodityEngAcronym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              CommodityCnAcronym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              ExchangeAcronym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              ExchangeCnAcronym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ContractInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.tradeAccountId) {
        field.Name = "tradeAccountId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TradeAccountId);
        oprot.WriteFieldEnd();
      }
      if (__isset.commodityId) {
        field.Name = "commodityId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CommodityId);
        oprot.WriteFieldEnd();
      }
      if (ContractCode != null && __isset.contractCode) {
        field.Name = "contractCode";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContractCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.contractId) {
        field.Name = "contractId";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ContractId);
        oprot.WriteFieldEnd();
      }
      if (ExchangeMic != null && __isset.exchangeMic) {
        field.Name = "exchangeMic";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExchangeMic);
        oprot.WriteFieldEnd();
      }
      if (ContractEngName != null && __isset.contractEngName) {
        field.Name = "contractEngName";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContractEngName);
        oprot.WriteFieldEnd();
      }
      if (ContractCnName != null && __isset.contractCnName) {
        field.Name = "contractCnName";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContractCnName);
        oprot.WriteFieldEnd();
      }
      if (CommodityEngAcronym != null && __isset.commodityEngAcronym) {
        field.Name = "commodityEngAcronym";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CommodityEngAcronym);
        oprot.WriteFieldEnd();
      }
      if (CommodityCnAcronym != null && __isset.commodityCnAcronym) {
        field.Name = "commodityCnAcronym";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CommodityCnAcronym);
        oprot.WriteFieldEnd();
      }
      if (ExchangeAcronym != null && __isset.exchangeAcronym) {
        field.Name = "exchangeAcronym";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExchangeAcronym);
        oprot.WriteFieldEnd();
      }
      if (ExchangeCnAcronym != null && __isset.exchangeCnAcronym) {
        field.Name = "exchangeCnAcronym";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExchangeCnAcronym);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ContractInfo(");
      sb.Append("TradeAccountId: ");
      sb.Append(TradeAccountId);
      sb.Append(",CommodityId: ");
      sb.Append(CommodityId);
      sb.Append(",ContractCode: ");
      sb.Append(ContractCode);
      sb.Append(",ContractId: ");
      sb.Append(ContractId);
      sb.Append(",ExchangeMic: ");
      sb.Append(ExchangeMic);
      sb.Append(",ContractEngName: ");
      sb.Append(ContractEngName);
      sb.Append(",ContractCnName: ");
      sb.Append(ContractCnName);
      sb.Append(",CommodityEngAcronym: ");
      sb.Append(CommodityEngAcronym);
      sb.Append(",CommodityCnAcronym: ");
      sb.Append(CommodityCnAcronym);
      sb.Append(",ExchangeAcronym: ");
      sb.Append(ExchangeAcronym);
      sb.Append(",ExchangeCnAcronym: ");
      sb.Append(ExchangeCnAcronym);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
