/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.fee.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CommissionInfo : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private double _openRatioByMoney;
    private double _openRatioByVolume;
    private double _closeRatioByMoney;
    private double _closeRatioByVolume;
    private double _closeTodayRatioByMoney;
    private double _closeTodayRatioByVolume;
    private string _currency;
    private string _currencyGroup;

    public double OpenRatioByMoney
    {
      get
      {
        return _openRatioByMoney;
      }
      set
      {
        __isset.openRatioByMoney = true;
        SetProperty(ref _openRatioByMoney, value);
      }
    }

    public double OpenRatioByVolume
    {
      get
      {
        return _openRatioByVolume;
      }
      set
      {
        __isset.openRatioByVolume = true;
        SetProperty(ref _openRatioByVolume, value);
      }
    }

    public double CloseRatioByMoney
    {
      get
      {
        return _closeRatioByMoney;
      }
      set
      {
        __isset.closeRatioByMoney = true;
        SetProperty(ref _closeRatioByMoney, value);
      }
    }

    public double CloseRatioByVolume
    {
      get
      {
        return _closeRatioByVolume;
      }
      set
      {
        __isset.closeRatioByVolume = true;
        SetProperty(ref _closeRatioByVolume, value);
      }
    }

    public double CloseTodayRatioByMoney
    {
      get
      {
        return _closeTodayRatioByMoney;
      }
      set
      {
        __isset.closeTodayRatioByMoney = true;
        SetProperty(ref _closeTodayRatioByMoney, value);
      }
    }

    public double CloseTodayRatioByVolume
    {
      get
      {
        return _closeTodayRatioByVolume;
      }
      set
      {
        __isset.closeTodayRatioByVolume = true;
        SetProperty(ref _closeTodayRatioByVolume, value);
      }
    }

    public string Currency
    {
      get
      {
        return _currency;
      }
      set
      {
        __isset.currency = true;
        SetProperty(ref _currency, value);
      }
    }

    public string CurrencyGroup
    {
      get
      {
        return _currencyGroup;
      }
      set
      {
        __isset.currencyGroup = true;
        SetProperty(ref _currencyGroup, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool openRatioByMoney;
      public bool openRatioByVolume;
      public bool closeRatioByMoney;
      public bool closeRatioByVolume;
      public bool closeTodayRatioByMoney;
      public bool closeTodayRatioByVolume;
      public bool currency;
      public bool currencyGroup;
    }

    public CommissionInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Double) {
              OpenRatioByMoney = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              OpenRatioByVolume = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              CloseRatioByMoney = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              CloseRatioByVolume = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              CloseTodayRatioByMoney = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              CloseTodayRatioByVolume = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Currency = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              CurrencyGroup = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CommissionInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.openRatioByMoney) {
        field.Name = "openRatioByMoney";
        field.Type = TType.Double;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(OpenRatioByMoney);
        oprot.WriteFieldEnd();
      }
      if (__isset.openRatioByVolume) {
        field.Name = "openRatioByVolume";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(OpenRatioByVolume);
        oprot.WriteFieldEnd();
      }
      if (__isset.closeRatioByMoney) {
        field.Name = "closeRatioByMoney";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(CloseRatioByMoney);
        oprot.WriteFieldEnd();
      }
      if (__isset.closeRatioByVolume) {
        field.Name = "closeRatioByVolume";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(CloseRatioByVolume);
        oprot.WriteFieldEnd();
      }
      if (__isset.closeTodayRatioByMoney) {
        field.Name = "closeTodayRatioByMoney";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(CloseTodayRatioByMoney);
        oprot.WriteFieldEnd();
      }
      if (__isset.closeTodayRatioByVolume) {
        field.Name = "closeTodayRatioByVolume";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(CloseTodayRatioByVolume);
        oprot.WriteFieldEnd();
      }
      if (Currency != null && __isset.currency) {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Currency);
        oprot.WriteFieldEnd();
      }
      if (CurrencyGroup != null && __isset.currencyGroup) {
        field.Name = "currencyGroup";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CurrencyGroup);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CommissionInfo(");
      sb.Append("OpenRatioByMoney: ");
      sb.Append(OpenRatioByMoney);
      sb.Append(",OpenRatioByVolume: ");
      sb.Append(OpenRatioByVolume);
      sb.Append(",CloseRatioByMoney: ");
      sb.Append(CloseRatioByMoney);
      sb.Append(",CloseRatioByVolume: ");
      sb.Append(CloseRatioByVolume);
      sb.Append(",CloseTodayRatioByMoney: ");
      sb.Append(CloseTodayRatioByMoney);
      sb.Append(",CloseTodayRatioByVolume: ");
      sb.Append(CloseTodayRatioByVolume);
      sb.Append(",Currency: ");
      sb.Append(Currency);
      sb.Append(",CurrencyGroup: ");
      sb.Append(CurrencyGroup);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
