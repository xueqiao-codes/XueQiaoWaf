/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.fee.thriftapi
{
  public partial class TradeHostingPositionFee {
    public interface Iface {
      void clearAll(PlatformArgs platformArgs);
      #if SILVERLIGHT
      IAsyncResult Begin_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs);
      void End_clearAll(IAsyncResult asyncResult);
      #endif
      void setGeneralMarginSetting(PlatformArgs platformArgs, XQGeneralMarginSettings marginSettings);
      #if SILVERLIGHT
      IAsyncResult Begin_setGeneralMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQGeneralMarginSettings marginSettings);
      void End_setGeneralMarginSetting(IAsyncResult asyncResult);
      #endif
      void setGeneralCommissionSetting(PlatformArgs platformArgs, XQGeneralCommissionSettings commissionSettings);
      #if SILVERLIGHT
      IAsyncResult Begin_setGeneralCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQGeneralCommissionSettings commissionSettings);
      void End_setGeneralCommissionSetting(IAsyncResult asyncResult);
      #endif
      void addSpecMarginSetting(PlatformArgs platformArgs, XQSpecMarginSettings marginSettings);
      #if SILVERLIGHT
      IAsyncResult Begin_addSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQSpecMarginSettings marginSettings);
      void End_addSpecMarginSetting(IAsyncResult asyncResult);
      #endif
      void addSpecCommissionSetting(PlatformArgs platformArgs, XQSpecCommissionSettings commissionSettings);
      #if SILVERLIGHT
      IAsyncResult Begin_addSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQSpecCommissionSettings commissionSettings);
      void End_addSpecCommissionSetting(IAsyncResult asyncResult);
      #endif
      void updateSpecMarginSetting(PlatformArgs platformArgs, XQSpecMarginSettings marginSettings);
      #if SILVERLIGHT
      IAsyncResult Begin_updateSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQSpecMarginSettings marginSettings);
      void End_updateSpecMarginSetting(IAsyncResult asyncResult);
      #endif
      void updateSpecCommissionSetting(PlatformArgs platformArgs, XQSpecCommissionSettings commissionSettings);
      #if SILVERLIGHT
      IAsyncResult Begin_updateSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQSpecCommissionSettings commissionSettings);
      void End_updateSpecCommissionSetting(IAsyncResult asyncResult);
      #endif
      void deleteSpecMarginSetting(PlatformArgs platformArgs, long subAccountId, long commodityId);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long commodityId);
      void End_deleteSpecMarginSetting(IAsyncResult asyncResult);
      #endif
      void deleteSpecCommissionSetting(PlatformArgs platformArgs, long subAccountId, long commodityId);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long commodityId);
      void End_deleteSpecCommissionSetting(IAsyncResult asyncResult);
      #endif
      XQGeneralMarginSettings queryXQGeneralMarginSettings(PlatformArgs platformArgs, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_queryXQGeneralMarginSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId);
      XQGeneralMarginSettings End_queryXQGeneralMarginSettings(IAsyncResult asyncResult);
      #endif
      XQGeneralCommissionSettings queryXQGeneralCommissionSettings(PlatformArgs platformArgs, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_queryXQGeneralCommissionSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId);
      XQGeneralCommissionSettings End_queryXQGeneralCommissionSettings(IAsyncResult asyncResult);
      #endif
      XQSpecMarginSettingPage queryXQSpecMarginSettingPage(PlatformArgs platformArgs, QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryXQSpecMarginSettingPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption);
      XQSpecMarginSettingPage End_queryXQSpecMarginSettingPage(IAsyncResult asyncResult);
      #endif
      XQSpecCommissionSettingPage queryXQSpecCommissionSettingPage(PlatformArgs platformArgs, QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryXQSpecCommissionSettingPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption);
      XQSpecCommissionSettingPage End_queryXQSpecCommissionSettingPage(IAsyncResult asyncResult);
      #endif
      UpsideContractMarginPage queryUpsideContractMarginPage(PlatformArgs platformArgs, QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryUpsideContractMarginPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption);
      UpsideContractMarginPage End_queryUpsideContractMarginPage(IAsyncResult asyncResult);
      #endif
      UpsideContractCommissionPage queryUpsideContractCommissionPage(PlatformArgs platformArgs, QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryUpsideContractCommissionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption);
      UpsideContractCommissionPage End_queryUpsideContractCommissionPage(IAsyncResult asyncResult);
      #endif
      XQContractMarginPage queryXQContractMarginPage(PlatformArgs platformArgs, QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryXQContractMarginPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption);
      XQContractMarginPage End_queryXQContractMarginPage(IAsyncResult asyncResult);
      #endif
      XQContractCommissionPage queryXQContractCommissionPage(PlatformArgs platformArgs, QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryXQContractCommissionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption);
      XQContractCommissionPage End_queryXQContractCommissionPage(IAsyncResult asyncResult);
      #endif
      PositionFee queryPositionFee(PlatformArgs platformArgs, long subAccountId, long contractId);
      #if SILVERLIGHT
      IAsyncResult Begin_queryPositionFee(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long contractId);
      PositionFee End_queryPositionFee(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs)
      {
        return send_clearAll(callback, state, platformArgs);
      }

      public void End_clearAll(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_clearAll();
      }

      #endif

      public void clearAll(PlatformArgs platformArgs)
      {
        #if !SILVERLIGHT
        send_clearAll(platformArgs);
        recv_clearAll();

        #else
        var asyncResult = Begin_clearAll(null, null, platformArgs);
        End_clearAll(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs)
      #else
      public void send_clearAll(PlatformArgs platformArgs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("clearAll", TMessageType.Call, seqid_));
        clearAll_args args = new clearAll_args();
        args.PlatformArgs = platformArgs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_clearAll()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        clearAll_result result = new clearAll_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setGeneralMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQGeneralMarginSettings marginSettings)
      {
        return send_setGeneralMarginSetting(callback, state, platformArgs, marginSettings);
      }

      public void End_setGeneralMarginSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setGeneralMarginSetting();
      }

      #endif

      public void setGeneralMarginSetting(PlatformArgs platformArgs, XQGeneralMarginSettings marginSettings)
      {
        #if !SILVERLIGHT
        send_setGeneralMarginSetting(platformArgs, marginSettings);
        recv_setGeneralMarginSetting();

        #else
        var asyncResult = Begin_setGeneralMarginSetting(null, null, platformArgs, marginSettings);
        End_setGeneralMarginSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setGeneralMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQGeneralMarginSettings marginSettings)
      #else
      public void send_setGeneralMarginSetting(PlatformArgs platformArgs, XQGeneralMarginSettings marginSettings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setGeneralMarginSetting", TMessageType.Call, seqid_));
        setGeneralMarginSetting_args args = new setGeneralMarginSetting_args();
        args.PlatformArgs = platformArgs;
        args.MarginSettings = marginSettings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setGeneralMarginSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setGeneralMarginSetting_result result = new setGeneralMarginSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setGeneralCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQGeneralCommissionSettings commissionSettings)
      {
        return send_setGeneralCommissionSetting(callback, state, platformArgs, commissionSettings);
      }

      public void End_setGeneralCommissionSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setGeneralCommissionSetting();
      }

      #endif

      public void setGeneralCommissionSetting(PlatformArgs platformArgs, XQGeneralCommissionSettings commissionSettings)
      {
        #if !SILVERLIGHT
        send_setGeneralCommissionSetting(platformArgs, commissionSettings);
        recv_setGeneralCommissionSetting();

        #else
        var asyncResult = Begin_setGeneralCommissionSetting(null, null, platformArgs, commissionSettings);
        End_setGeneralCommissionSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setGeneralCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQGeneralCommissionSettings commissionSettings)
      #else
      public void send_setGeneralCommissionSetting(PlatformArgs platformArgs, XQGeneralCommissionSettings commissionSettings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setGeneralCommissionSetting", TMessageType.Call, seqid_));
        setGeneralCommissionSetting_args args = new setGeneralCommissionSetting_args();
        args.PlatformArgs = platformArgs;
        args.CommissionSettings = commissionSettings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setGeneralCommissionSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setGeneralCommissionSetting_result result = new setGeneralCommissionSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQSpecMarginSettings marginSettings)
      {
        return send_addSpecMarginSetting(callback, state, platformArgs, marginSettings);
      }

      public void End_addSpecMarginSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addSpecMarginSetting();
      }

      #endif

      public void addSpecMarginSetting(PlatformArgs platformArgs, XQSpecMarginSettings marginSettings)
      {
        #if !SILVERLIGHT
        send_addSpecMarginSetting(platformArgs, marginSettings);
        recv_addSpecMarginSetting();

        #else
        var asyncResult = Begin_addSpecMarginSetting(null, null, platformArgs, marginSettings);
        End_addSpecMarginSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQSpecMarginSettings marginSettings)
      #else
      public void send_addSpecMarginSetting(PlatformArgs platformArgs, XQSpecMarginSettings marginSettings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addSpecMarginSetting", TMessageType.Call, seqid_));
        addSpecMarginSetting_args args = new addSpecMarginSetting_args();
        args.PlatformArgs = platformArgs;
        args.MarginSettings = marginSettings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addSpecMarginSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addSpecMarginSetting_result result = new addSpecMarginSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQSpecCommissionSettings commissionSettings)
      {
        return send_addSpecCommissionSetting(callback, state, platformArgs, commissionSettings);
      }

      public void End_addSpecCommissionSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addSpecCommissionSetting();
      }

      #endif

      public void addSpecCommissionSetting(PlatformArgs platformArgs, XQSpecCommissionSettings commissionSettings)
      {
        #if !SILVERLIGHT
        send_addSpecCommissionSetting(platformArgs, commissionSettings);
        recv_addSpecCommissionSetting();

        #else
        var asyncResult = Begin_addSpecCommissionSetting(null, null, platformArgs, commissionSettings);
        End_addSpecCommissionSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQSpecCommissionSettings commissionSettings)
      #else
      public void send_addSpecCommissionSetting(PlatformArgs platformArgs, XQSpecCommissionSettings commissionSettings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addSpecCommissionSetting", TMessageType.Call, seqid_));
        addSpecCommissionSetting_args args = new addSpecCommissionSetting_args();
        args.PlatformArgs = platformArgs;
        args.CommissionSettings = commissionSettings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addSpecCommissionSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addSpecCommissionSetting_result result = new addSpecCommissionSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQSpecMarginSettings marginSettings)
      {
        return send_updateSpecMarginSetting(callback, state, platformArgs, marginSettings);
      }

      public void End_updateSpecMarginSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateSpecMarginSetting();
      }

      #endif

      public void updateSpecMarginSetting(PlatformArgs platformArgs, XQSpecMarginSettings marginSettings)
      {
        #if !SILVERLIGHT
        send_updateSpecMarginSetting(platformArgs, marginSettings);
        recv_updateSpecMarginSetting();

        #else
        var asyncResult = Begin_updateSpecMarginSetting(null, null, platformArgs, marginSettings);
        End_updateSpecMarginSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQSpecMarginSettings marginSettings)
      #else
      public void send_updateSpecMarginSetting(PlatformArgs platformArgs, XQSpecMarginSettings marginSettings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateSpecMarginSetting", TMessageType.Call, seqid_));
        updateSpecMarginSetting_args args = new updateSpecMarginSetting_args();
        args.PlatformArgs = platformArgs;
        args.MarginSettings = marginSettings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateSpecMarginSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateSpecMarginSetting_result result = new updateSpecMarginSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQSpecCommissionSettings commissionSettings)
      {
        return send_updateSpecCommissionSetting(callback, state, platformArgs, commissionSettings);
      }

      public void End_updateSpecCommissionSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateSpecCommissionSetting();
      }

      #endif

      public void updateSpecCommissionSetting(PlatformArgs platformArgs, XQSpecCommissionSettings commissionSettings)
      {
        #if !SILVERLIGHT
        send_updateSpecCommissionSetting(platformArgs, commissionSettings);
        recv_updateSpecCommissionSetting();

        #else
        var asyncResult = Begin_updateSpecCommissionSetting(null, null, platformArgs, commissionSettings);
        End_updateSpecCommissionSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, XQSpecCommissionSettings commissionSettings)
      #else
      public void send_updateSpecCommissionSetting(PlatformArgs platformArgs, XQSpecCommissionSettings commissionSettings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateSpecCommissionSetting", TMessageType.Call, seqid_));
        updateSpecCommissionSetting_args args = new updateSpecCommissionSetting_args();
        args.PlatformArgs = platformArgs;
        args.CommissionSettings = commissionSettings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateSpecCommissionSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateSpecCommissionSetting_result result = new updateSpecCommissionSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long commodityId)
      {
        return send_deleteSpecMarginSetting(callback, state, platformArgs, subAccountId, commodityId);
      }

      public void End_deleteSpecMarginSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deleteSpecMarginSetting();
      }

      #endif

      public void deleteSpecMarginSetting(PlatformArgs platformArgs, long subAccountId, long commodityId)
      {
        #if !SILVERLIGHT
        send_deleteSpecMarginSetting(platformArgs, subAccountId, commodityId);
        recv_deleteSpecMarginSetting();

        #else
        var asyncResult = Begin_deleteSpecMarginSetting(null, null, platformArgs, subAccountId, commodityId);
        End_deleteSpecMarginSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long commodityId)
      #else
      public void send_deleteSpecMarginSetting(PlatformArgs platformArgs, long subAccountId, long commodityId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteSpecMarginSetting", TMessageType.Call, seqid_));
        deleteSpecMarginSetting_args args = new deleteSpecMarginSetting_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.CommodityId = commodityId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deleteSpecMarginSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteSpecMarginSetting_result result = new deleteSpecMarginSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long commodityId)
      {
        return send_deleteSpecCommissionSetting(callback, state, platformArgs, subAccountId, commodityId);
      }

      public void End_deleteSpecCommissionSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deleteSpecCommissionSetting();
      }

      #endif

      public void deleteSpecCommissionSetting(PlatformArgs platformArgs, long subAccountId, long commodityId)
      {
        #if !SILVERLIGHT
        send_deleteSpecCommissionSetting(platformArgs, subAccountId, commodityId);
        recv_deleteSpecCommissionSetting();

        #else
        var asyncResult = Begin_deleteSpecCommissionSetting(null, null, platformArgs, subAccountId, commodityId);
        End_deleteSpecCommissionSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long commodityId)
      #else
      public void send_deleteSpecCommissionSetting(PlatformArgs platformArgs, long subAccountId, long commodityId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteSpecCommissionSetting", TMessageType.Call, seqid_));
        deleteSpecCommissionSetting_args args = new deleteSpecCommissionSetting_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.CommodityId = commodityId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deleteSpecCommissionSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteSpecCommissionSetting_result result = new deleteSpecCommissionSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryXQGeneralMarginSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId)
      {
        return send_queryXQGeneralMarginSettings(callback, state, platformArgs, subAccountId);
      }

      public XQGeneralMarginSettings End_queryXQGeneralMarginSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryXQGeneralMarginSettings();
      }

      #endif

      public XQGeneralMarginSettings queryXQGeneralMarginSettings(PlatformArgs platformArgs, long subAccountId)
      {
        #if !SILVERLIGHT
        send_queryXQGeneralMarginSettings(platformArgs, subAccountId);
        return recv_queryXQGeneralMarginSettings();

        #else
        var asyncResult = Begin_queryXQGeneralMarginSettings(null, null, platformArgs, subAccountId);
        return End_queryXQGeneralMarginSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryXQGeneralMarginSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId)
      #else
      public void send_queryXQGeneralMarginSettings(PlatformArgs platformArgs, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryXQGeneralMarginSettings", TMessageType.Call, seqid_));
        queryXQGeneralMarginSettings_args args = new queryXQGeneralMarginSettings_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public XQGeneralMarginSettings recv_queryXQGeneralMarginSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryXQGeneralMarginSettings_result result = new queryXQGeneralMarginSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryXQGeneralMarginSettings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryXQGeneralCommissionSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId)
      {
        return send_queryXQGeneralCommissionSettings(callback, state, platformArgs, subAccountId);
      }

      public XQGeneralCommissionSettings End_queryXQGeneralCommissionSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryXQGeneralCommissionSettings();
      }

      #endif

      public XQGeneralCommissionSettings queryXQGeneralCommissionSettings(PlatformArgs platformArgs, long subAccountId)
      {
        #if !SILVERLIGHT
        send_queryXQGeneralCommissionSettings(platformArgs, subAccountId);
        return recv_queryXQGeneralCommissionSettings();

        #else
        var asyncResult = Begin_queryXQGeneralCommissionSettings(null, null, platformArgs, subAccountId);
        return End_queryXQGeneralCommissionSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryXQGeneralCommissionSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId)
      #else
      public void send_queryXQGeneralCommissionSettings(PlatformArgs platformArgs, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryXQGeneralCommissionSettings", TMessageType.Call, seqid_));
        queryXQGeneralCommissionSettings_args args = new queryXQGeneralCommissionSettings_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public XQGeneralCommissionSettings recv_queryXQGeneralCommissionSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryXQGeneralCommissionSettings_result result = new queryXQGeneralCommissionSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryXQGeneralCommissionSettings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryXQSpecMarginSettingPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      {
        return send_queryXQSpecMarginSettingPage(callback, state, platformArgs, queryOptions, pageOption);
      }

      public XQSpecMarginSettingPage End_queryXQSpecMarginSettingPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryXQSpecMarginSettingPage();
      }

      #endif

      public XQSpecMarginSettingPage queryXQSpecMarginSettingPage(PlatformArgs platformArgs, QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryXQSpecMarginSettingPage(platformArgs, queryOptions, pageOption);
        return recv_queryXQSpecMarginSettingPage();

        #else
        var asyncResult = Begin_queryXQSpecMarginSettingPage(null, null, platformArgs, queryOptions, pageOption);
        return End_queryXQSpecMarginSettingPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryXQSpecMarginSettingPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      #else
      public void send_queryXQSpecMarginSettingPage(PlatformArgs platformArgs, QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryXQSpecMarginSettingPage", TMessageType.Call, seqid_));
        queryXQSpecMarginSettingPage_args args = new queryXQSpecMarginSettingPage_args();
        args.PlatformArgs = platformArgs;
        args.QueryOptions = queryOptions;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public XQSpecMarginSettingPage recv_queryXQSpecMarginSettingPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryXQSpecMarginSettingPage_result result = new queryXQSpecMarginSettingPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryXQSpecMarginSettingPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryXQSpecCommissionSettingPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      {
        return send_queryXQSpecCommissionSettingPage(callback, state, platformArgs, queryOptions, pageOption);
      }

      public XQSpecCommissionSettingPage End_queryXQSpecCommissionSettingPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryXQSpecCommissionSettingPage();
      }

      #endif

      public XQSpecCommissionSettingPage queryXQSpecCommissionSettingPage(PlatformArgs platformArgs, QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryXQSpecCommissionSettingPage(platformArgs, queryOptions, pageOption);
        return recv_queryXQSpecCommissionSettingPage();

        #else
        var asyncResult = Begin_queryXQSpecCommissionSettingPage(null, null, platformArgs, queryOptions, pageOption);
        return End_queryXQSpecCommissionSettingPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryXQSpecCommissionSettingPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      #else
      public void send_queryXQSpecCommissionSettingPage(PlatformArgs platformArgs, QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryXQSpecCommissionSettingPage", TMessageType.Call, seqid_));
        queryXQSpecCommissionSettingPage_args args = new queryXQSpecCommissionSettingPage_args();
        args.PlatformArgs = platformArgs;
        args.QueryOptions = queryOptions;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public XQSpecCommissionSettingPage recv_queryXQSpecCommissionSettingPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryXQSpecCommissionSettingPage_result result = new queryXQSpecCommissionSettingPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryXQSpecCommissionSettingPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryUpsideContractMarginPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        return send_queryUpsideContractMarginPage(callback, state, platformArgs, queryOptions, pageOption);
      }

      public UpsideContractMarginPage End_queryUpsideContractMarginPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryUpsideContractMarginPage();
      }

      #endif

      public UpsideContractMarginPage queryUpsideContractMarginPage(PlatformArgs platformArgs, QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryUpsideContractMarginPage(platformArgs, queryOptions, pageOption);
        return recv_queryUpsideContractMarginPage();

        #else
        var asyncResult = Begin_queryUpsideContractMarginPage(null, null, platformArgs, queryOptions, pageOption);
        return End_queryUpsideContractMarginPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryUpsideContractMarginPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      #else
      public void send_queryUpsideContractMarginPage(PlatformArgs platformArgs, QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryUpsideContractMarginPage", TMessageType.Call, seqid_));
        queryUpsideContractMarginPage_args args = new queryUpsideContractMarginPage_args();
        args.PlatformArgs = platformArgs;
        args.QueryOptions = queryOptions;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UpsideContractMarginPage recv_queryUpsideContractMarginPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryUpsideContractMarginPage_result result = new queryUpsideContractMarginPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryUpsideContractMarginPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryUpsideContractCommissionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        return send_queryUpsideContractCommissionPage(callback, state, platformArgs, queryOptions, pageOption);
      }

      public UpsideContractCommissionPage End_queryUpsideContractCommissionPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryUpsideContractCommissionPage();
      }

      #endif

      public UpsideContractCommissionPage queryUpsideContractCommissionPage(PlatformArgs platformArgs, QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryUpsideContractCommissionPage(platformArgs, queryOptions, pageOption);
        return recv_queryUpsideContractCommissionPage();

        #else
        var asyncResult = Begin_queryUpsideContractCommissionPage(null, null, platformArgs, queryOptions, pageOption);
        return End_queryUpsideContractCommissionPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryUpsideContractCommissionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      #else
      public void send_queryUpsideContractCommissionPage(PlatformArgs platformArgs, QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryUpsideContractCommissionPage", TMessageType.Call, seqid_));
        queryUpsideContractCommissionPage_args args = new queryUpsideContractCommissionPage_args();
        args.PlatformArgs = platformArgs;
        args.QueryOptions = queryOptions;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UpsideContractCommissionPage recv_queryUpsideContractCommissionPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryUpsideContractCommissionPage_result result = new queryUpsideContractCommissionPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryUpsideContractCommissionPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryXQContractMarginPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        return send_queryXQContractMarginPage(callback, state, platformArgs, queryOptions, pageOption);
      }

      public XQContractMarginPage End_queryXQContractMarginPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryXQContractMarginPage();
      }

      #endif

      public XQContractMarginPage queryXQContractMarginPage(PlatformArgs platformArgs, QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryXQContractMarginPage(platformArgs, queryOptions, pageOption);
        return recv_queryXQContractMarginPage();

        #else
        var asyncResult = Begin_queryXQContractMarginPage(null, null, platformArgs, queryOptions, pageOption);
        return End_queryXQContractMarginPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryXQContractMarginPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      #else
      public void send_queryXQContractMarginPage(PlatformArgs platformArgs, QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryXQContractMarginPage", TMessageType.Call, seqid_));
        queryXQContractMarginPage_args args = new queryXQContractMarginPage_args();
        args.PlatformArgs = platformArgs;
        args.QueryOptions = queryOptions;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public XQContractMarginPage recv_queryXQContractMarginPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryXQContractMarginPage_result result = new queryXQContractMarginPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryXQContractMarginPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryXQContractCommissionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        return send_queryXQContractCommissionPage(callback, state, platformArgs, queryOptions, pageOption);
      }

      public XQContractCommissionPage End_queryXQContractCommissionPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryXQContractCommissionPage();
      }

      #endif

      public XQContractCommissionPage queryXQContractCommissionPage(PlatformArgs platformArgs, QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryXQContractCommissionPage(platformArgs, queryOptions, pageOption);
        return recv_queryXQContractCommissionPage();

        #else
        var asyncResult = Begin_queryXQContractCommissionPage(null, null, platformArgs, queryOptions, pageOption);
        return End_queryXQContractCommissionPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryXQContractCommissionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      #else
      public void send_queryXQContractCommissionPage(PlatformArgs platformArgs, QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryXQContractCommissionPage", TMessageType.Call, seqid_));
        queryXQContractCommissionPage_args args = new queryXQContractCommissionPage_args();
        args.PlatformArgs = platformArgs;
        args.QueryOptions = queryOptions;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public XQContractCommissionPage recv_queryXQContractCommissionPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryXQContractCommissionPage_result result = new queryXQContractCommissionPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryXQContractCommissionPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryPositionFee(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long contractId)
      {
        return send_queryPositionFee(callback, state, platformArgs, subAccountId, contractId);
      }

      public PositionFee End_queryPositionFee(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryPositionFee();
      }

      #endif

      public PositionFee queryPositionFee(PlatformArgs platformArgs, long subAccountId, long contractId)
      {
        #if !SILVERLIGHT
        send_queryPositionFee(platformArgs, subAccountId, contractId);
        return recv_queryPositionFee();

        #else
        var asyncResult = Begin_queryPositionFee(null, null, platformArgs, subAccountId, contractId);
        return End_queryPositionFee(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryPositionFee(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long contractId)
      #else
      public void send_queryPositionFee(PlatformArgs platformArgs, long subAccountId, long contractId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryPositionFee", TMessageType.Call, seqid_));
        queryPositionFee_args args = new queryPositionFee_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.ContractId = contractId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PositionFee recv_queryPositionFee()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryPositionFee_result result = new queryPositionFee_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryPositionFee failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["clearAll"] = clearAll_Process;
        processMap_["setGeneralMarginSetting"] = setGeneralMarginSetting_Process;
        processMap_["setGeneralCommissionSetting"] = setGeneralCommissionSetting_Process;
        processMap_["addSpecMarginSetting"] = addSpecMarginSetting_Process;
        processMap_["addSpecCommissionSetting"] = addSpecCommissionSetting_Process;
        processMap_["updateSpecMarginSetting"] = updateSpecMarginSetting_Process;
        processMap_["updateSpecCommissionSetting"] = updateSpecCommissionSetting_Process;
        processMap_["deleteSpecMarginSetting"] = deleteSpecMarginSetting_Process;
        processMap_["deleteSpecCommissionSetting"] = deleteSpecCommissionSetting_Process;
        processMap_["queryXQGeneralMarginSettings"] = queryXQGeneralMarginSettings_Process;
        processMap_["queryXQGeneralCommissionSettings"] = queryXQGeneralCommissionSettings_Process;
        processMap_["queryXQSpecMarginSettingPage"] = queryXQSpecMarginSettingPage_Process;
        processMap_["queryXQSpecCommissionSettingPage"] = queryXQSpecCommissionSettingPage_Process;
        processMap_["queryUpsideContractMarginPage"] = queryUpsideContractMarginPage_Process;
        processMap_["queryUpsideContractCommissionPage"] = queryUpsideContractCommissionPage_Process;
        processMap_["queryXQContractMarginPage"] = queryXQContractMarginPage_Process;
        processMap_["queryXQContractCommissionPage"] = queryXQContractCommissionPage_Process;
        processMap_["queryPositionFee"] = queryPositionFee_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void clearAll_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        clearAll_args args = new clearAll_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        clearAll_result result = new clearAll_result();
        try {
          iface_.clearAll(args.PlatformArgs);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("clearAll", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setGeneralMarginSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setGeneralMarginSetting_args args = new setGeneralMarginSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setGeneralMarginSetting_result result = new setGeneralMarginSetting_result();
        try {
          iface_.setGeneralMarginSetting(args.PlatformArgs, args.MarginSettings);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setGeneralMarginSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setGeneralCommissionSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setGeneralCommissionSetting_args args = new setGeneralCommissionSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setGeneralCommissionSetting_result result = new setGeneralCommissionSetting_result();
        try {
          iface_.setGeneralCommissionSetting(args.PlatformArgs, args.CommissionSettings);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setGeneralCommissionSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addSpecMarginSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addSpecMarginSetting_args args = new addSpecMarginSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addSpecMarginSetting_result result = new addSpecMarginSetting_result();
        try {
          iface_.addSpecMarginSetting(args.PlatformArgs, args.MarginSettings);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addSpecMarginSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addSpecCommissionSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addSpecCommissionSetting_args args = new addSpecCommissionSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addSpecCommissionSetting_result result = new addSpecCommissionSetting_result();
        try {
          iface_.addSpecCommissionSetting(args.PlatformArgs, args.CommissionSettings);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addSpecCommissionSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateSpecMarginSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateSpecMarginSetting_args args = new updateSpecMarginSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateSpecMarginSetting_result result = new updateSpecMarginSetting_result();
        try {
          iface_.updateSpecMarginSetting(args.PlatformArgs, args.MarginSettings);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("updateSpecMarginSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateSpecCommissionSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateSpecCommissionSetting_args args = new updateSpecCommissionSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateSpecCommissionSetting_result result = new updateSpecCommissionSetting_result();
        try {
          iface_.updateSpecCommissionSetting(args.PlatformArgs, args.CommissionSettings);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("updateSpecCommissionSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteSpecMarginSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteSpecMarginSetting_args args = new deleteSpecMarginSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteSpecMarginSetting_result result = new deleteSpecMarginSetting_result();
        try {
          iface_.deleteSpecMarginSetting(args.PlatformArgs, args.SubAccountId, args.CommodityId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("deleteSpecMarginSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteSpecCommissionSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteSpecCommissionSetting_args args = new deleteSpecCommissionSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteSpecCommissionSetting_result result = new deleteSpecCommissionSetting_result();
        try {
          iface_.deleteSpecCommissionSetting(args.PlatformArgs, args.SubAccountId, args.CommodityId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("deleteSpecCommissionSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryXQGeneralMarginSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryXQGeneralMarginSettings_args args = new queryXQGeneralMarginSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryXQGeneralMarginSettings_result result = new queryXQGeneralMarginSettings_result();
        try {
          result.Success = iface_.queryXQGeneralMarginSettings(args.PlatformArgs, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryXQGeneralMarginSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryXQGeneralCommissionSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryXQGeneralCommissionSettings_args args = new queryXQGeneralCommissionSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryXQGeneralCommissionSettings_result result = new queryXQGeneralCommissionSettings_result();
        try {
          result.Success = iface_.queryXQGeneralCommissionSettings(args.PlatformArgs, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryXQGeneralCommissionSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryXQSpecMarginSettingPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryXQSpecMarginSettingPage_args args = new queryXQSpecMarginSettingPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryXQSpecMarginSettingPage_result result = new queryXQSpecMarginSettingPage_result();
        try {
          result.Success = iface_.queryXQSpecMarginSettingPage(args.PlatformArgs, args.QueryOptions, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryXQSpecMarginSettingPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryXQSpecCommissionSettingPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryXQSpecCommissionSettingPage_args args = new queryXQSpecCommissionSettingPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryXQSpecCommissionSettingPage_result result = new queryXQSpecCommissionSettingPage_result();
        try {
          result.Success = iface_.queryXQSpecCommissionSettingPage(args.PlatformArgs, args.QueryOptions, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryXQSpecCommissionSettingPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryUpsideContractMarginPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryUpsideContractMarginPage_args args = new queryUpsideContractMarginPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryUpsideContractMarginPage_result result = new queryUpsideContractMarginPage_result();
        try {
          result.Success = iface_.queryUpsideContractMarginPage(args.PlatformArgs, args.QueryOptions, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryUpsideContractMarginPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryUpsideContractCommissionPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryUpsideContractCommissionPage_args args = new queryUpsideContractCommissionPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryUpsideContractCommissionPage_result result = new queryUpsideContractCommissionPage_result();
        try {
          result.Success = iface_.queryUpsideContractCommissionPage(args.PlatformArgs, args.QueryOptions, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryUpsideContractCommissionPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryXQContractMarginPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryXQContractMarginPage_args args = new queryXQContractMarginPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryXQContractMarginPage_result result = new queryXQContractMarginPage_result();
        try {
          result.Success = iface_.queryXQContractMarginPage(args.PlatformArgs, args.QueryOptions, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryXQContractMarginPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryXQContractCommissionPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryXQContractCommissionPage_args args = new queryXQContractCommissionPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryXQContractCommissionPage_result result = new queryXQContractCommissionPage_result();
        try {
          result.Success = iface_.queryXQContractCommissionPage(args.PlatformArgs, args.QueryOptions, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryXQContractCommissionPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryPositionFee_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryPositionFee_args args = new queryPositionFee_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryPositionFee_result result = new queryPositionFee_result();
        try {
          result.Success = iface_.queryPositionFee(args.PlatformArgs, args.SubAccountId, args.ContractId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryPositionFee", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearAll_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
      }

      public clearAll_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearAll_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearAll_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearAll_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public clearAll_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearAll_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearAll_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setGeneralMarginSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XQGeneralMarginSettings _marginSettings;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XQGeneralMarginSettings MarginSettings
      {
        get
        {
          return _marginSettings;
        }
        set
        {
          __isset.marginSettings = true;
          SetProperty(ref _marginSettings, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool marginSettings;
      }

      public setGeneralMarginSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                MarginSettings = new XQGeneralMarginSettings();
                MarginSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setGeneralMarginSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MarginSettings != null && __isset.marginSettings) {
          field.Name = "marginSettings";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          MarginSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setGeneralMarginSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",MarginSettings: ");
        sb.Append(MarginSettings== null ? "<null>" : MarginSettings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setGeneralMarginSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public setGeneralMarginSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setGeneralMarginSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setGeneralMarginSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setGeneralCommissionSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XQGeneralCommissionSettings _commissionSettings;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XQGeneralCommissionSettings CommissionSettings
      {
        get
        {
          return _commissionSettings;
        }
        set
        {
          __isset.commissionSettings = true;
          SetProperty(ref _commissionSettings, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool commissionSettings;
      }

      public setGeneralCommissionSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                CommissionSettings = new XQGeneralCommissionSettings();
                CommissionSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setGeneralCommissionSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (CommissionSettings != null && __isset.commissionSettings) {
          field.Name = "commissionSettings";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          CommissionSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setGeneralCommissionSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",CommissionSettings: ");
        sb.Append(CommissionSettings== null ? "<null>" : CommissionSettings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setGeneralCommissionSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public setGeneralCommissionSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setGeneralCommissionSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setGeneralCommissionSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addSpecMarginSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XQSpecMarginSettings _marginSettings;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XQSpecMarginSettings MarginSettings
      {
        get
        {
          return _marginSettings;
        }
        set
        {
          __isset.marginSettings = true;
          SetProperty(ref _marginSettings, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool marginSettings;
      }

      public addSpecMarginSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                MarginSettings = new XQSpecMarginSettings();
                MarginSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addSpecMarginSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MarginSettings != null && __isset.marginSettings) {
          field.Name = "marginSettings";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          MarginSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addSpecMarginSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",MarginSettings: ");
        sb.Append(MarginSettings== null ? "<null>" : MarginSettings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addSpecMarginSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public addSpecMarginSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addSpecMarginSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addSpecMarginSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addSpecCommissionSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XQSpecCommissionSettings _commissionSettings;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XQSpecCommissionSettings CommissionSettings
      {
        get
        {
          return _commissionSettings;
        }
        set
        {
          __isset.commissionSettings = true;
          SetProperty(ref _commissionSettings, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool commissionSettings;
      }

      public addSpecCommissionSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                CommissionSettings = new XQSpecCommissionSettings();
                CommissionSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addSpecCommissionSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (CommissionSettings != null && __isset.commissionSettings) {
          field.Name = "commissionSettings";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          CommissionSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addSpecCommissionSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",CommissionSettings: ");
        sb.Append(CommissionSettings== null ? "<null>" : CommissionSettings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addSpecCommissionSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public addSpecCommissionSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addSpecCommissionSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addSpecCommissionSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSpecMarginSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XQSpecMarginSettings _marginSettings;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XQSpecMarginSettings MarginSettings
      {
        get
        {
          return _marginSettings;
        }
        set
        {
          __isset.marginSettings = true;
          SetProperty(ref _marginSettings, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool marginSettings;
      }

      public updateSpecMarginSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                MarginSettings = new XQSpecMarginSettings();
                MarginSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSpecMarginSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MarginSettings != null && __isset.marginSettings) {
          field.Name = "marginSettings";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          MarginSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSpecMarginSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",MarginSettings: ");
        sb.Append(MarginSettings== null ? "<null>" : MarginSettings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSpecMarginSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public updateSpecMarginSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSpecMarginSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSpecMarginSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSpecCommissionSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XQSpecCommissionSettings _commissionSettings;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XQSpecCommissionSettings CommissionSettings
      {
        get
        {
          return _commissionSettings;
        }
        set
        {
          __isset.commissionSettings = true;
          SetProperty(ref _commissionSettings, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool commissionSettings;
      }

      public updateSpecCommissionSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                CommissionSettings = new XQSpecCommissionSettings();
                CommissionSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSpecCommissionSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (CommissionSettings != null && __isset.commissionSettings) {
          field.Name = "commissionSettings";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          CommissionSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSpecCommissionSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",CommissionSettings: ");
        sb.Append(CommissionSettings== null ? "<null>" : CommissionSettings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSpecCommissionSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public updateSpecCommissionSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSpecCommissionSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSpecCommissionSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteSpecMarginSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;
      private long _commodityId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public long CommodityId
      {
        get
        {
          return _commodityId;
        }
        set
        {
          __isset.commodityId = true;
          SetProperty(ref _commodityId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
        public bool commodityId;
      }

      public deleteSpecMarginSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                CommodityId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteSpecMarginSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.commodityId) {
          field.Name = "commodityId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(CommodityId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteSpecMarginSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",CommodityId: ");
        sb.Append(CommodityId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteSpecMarginSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public deleteSpecMarginSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteSpecMarginSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteSpecMarginSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteSpecCommissionSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;
      private long _commodityId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public long CommodityId
      {
        get
        {
          return _commodityId;
        }
        set
        {
          __isset.commodityId = true;
          SetProperty(ref _commodityId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
        public bool commodityId;
      }

      public deleteSpecCommissionSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                CommodityId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteSpecCommissionSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.commodityId) {
          field.Name = "commodityId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(CommodityId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteSpecCommissionSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",CommodityId: ");
        sb.Append(CommodityId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteSpecCommissionSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public deleteSpecCommissionSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteSpecCommissionSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteSpecCommissionSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQGeneralMarginSettings_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
      }

      public queryXQGeneralMarginSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQGeneralMarginSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQGeneralMarginSettings_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQGeneralMarginSettings_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private XQGeneralMarginSettings _success;
      private ErrorInfo _err;

      public XQGeneralMarginSettings Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryXQGeneralMarginSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new XQGeneralMarginSettings();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQGeneralMarginSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQGeneralMarginSettings_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQGeneralCommissionSettings_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
      }

      public queryXQGeneralCommissionSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQGeneralCommissionSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQGeneralCommissionSettings_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQGeneralCommissionSettings_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private XQGeneralCommissionSettings _success;
      private ErrorInfo _err;

      public XQGeneralCommissionSettings Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryXQGeneralCommissionSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new XQGeneralCommissionSettings();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQGeneralCommissionSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQGeneralCommissionSettings_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQSpecMarginSettingPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryXQSpecSettingOptions _queryOptions;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryXQSpecSettingOptions QueryOptions
      {
        get
        {
          return _queryOptions;
        }
        set
        {
          __isset.queryOptions = true;
          SetProperty(ref _queryOptions, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOptions;
        public bool pageOption;
      }

      public queryXQSpecMarginSettingPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOptions = new QueryXQSpecSettingOptions();
                QueryOptions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQSpecMarginSettingPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOptions != null && __isset.queryOptions) {
          field.Name = "queryOptions";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOptions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQSpecMarginSettingPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOptions: ");
        sb.Append(QueryOptions== null ? "<null>" : QueryOptions.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQSpecMarginSettingPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private XQSpecMarginSettingPage _success;
      private ErrorInfo _err;

      public XQSpecMarginSettingPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryXQSpecMarginSettingPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new XQSpecMarginSettingPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQSpecMarginSettingPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQSpecMarginSettingPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQSpecCommissionSettingPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryXQSpecSettingOptions _queryOptions;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryXQSpecSettingOptions QueryOptions
      {
        get
        {
          return _queryOptions;
        }
        set
        {
          __isset.queryOptions = true;
          SetProperty(ref _queryOptions, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOptions;
        public bool pageOption;
      }

      public queryXQSpecCommissionSettingPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOptions = new QueryXQSpecSettingOptions();
                QueryOptions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQSpecCommissionSettingPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOptions != null && __isset.queryOptions) {
          field.Name = "queryOptions";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOptions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQSpecCommissionSettingPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOptions: ");
        sb.Append(QueryOptions== null ? "<null>" : QueryOptions.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQSpecCommissionSettingPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private XQSpecCommissionSettingPage _success;
      private ErrorInfo _err;

      public XQSpecCommissionSettingPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryXQSpecCommissionSettingPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new XQSpecCommissionSettingPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQSpecCommissionSettingPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQSpecCommissionSettingPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryUpsideContractMarginPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryUpsidePFeeOptions _queryOptions;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryUpsidePFeeOptions QueryOptions
      {
        get
        {
          return _queryOptions;
        }
        set
        {
          __isset.queryOptions = true;
          SetProperty(ref _queryOptions, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOptions;
        public bool pageOption;
      }

      public queryUpsideContractMarginPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOptions = new QueryUpsidePFeeOptions();
                QueryOptions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryUpsideContractMarginPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOptions != null && __isset.queryOptions) {
          field.Name = "queryOptions";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOptions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryUpsideContractMarginPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOptions: ");
        sb.Append(QueryOptions== null ? "<null>" : QueryOptions.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryUpsideContractMarginPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private UpsideContractMarginPage _success;
      private ErrorInfo _err;

      public UpsideContractMarginPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryUpsideContractMarginPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UpsideContractMarginPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryUpsideContractMarginPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryUpsideContractMarginPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryUpsideContractCommissionPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryUpsidePFeeOptions _queryOptions;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryUpsidePFeeOptions QueryOptions
      {
        get
        {
          return _queryOptions;
        }
        set
        {
          __isset.queryOptions = true;
          SetProperty(ref _queryOptions, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOptions;
        public bool pageOption;
      }

      public queryUpsideContractCommissionPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOptions = new QueryUpsidePFeeOptions();
                QueryOptions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryUpsideContractCommissionPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOptions != null && __isset.queryOptions) {
          field.Name = "queryOptions";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOptions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryUpsideContractCommissionPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOptions: ");
        sb.Append(QueryOptions== null ? "<null>" : QueryOptions.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryUpsideContractCommissionPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private UpsideContractCommissionPage _success;
      private ErrorInfo _err;

      public UpsideContractCommissionPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryUpsideContractCommissionPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UpsideContractCommissionPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryUpsideContractCommissionPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryUpsideContractCommissionPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQContractMarginPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryXQPFeeOptions _queryOptions;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryXQPFeeOptions QueryOptions
      {
        get
        {
          return _queryOptions;
        }
        set
        {
          __isset.queryOptions = true;
          SetProperty(ref _queryOptions, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOptions;
        public bool pageOption;
      }

      public queryXQContractMarginPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOptions = new QueryXQPFeeOptions();
                QueryOptions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQContractMarginPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOptions != null && __isset.queryOptions) {
          field.Name = "queryOptions";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOptions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQContractMarginPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOptions: ");
        sb.Append(QueryOptions== null ? "<null>" : QueryOptions.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQContractMarginPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private XQContractMarginPage _success;
      private ErrorInfo _err;

      public XQContractMarginPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryXQContractMarginPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new XQContractMarginPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQContractMarginPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQContractMarginPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQContractCommissionPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryXQPFeeOptions _queryOptions;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryXQPFeeOptions QueryOptions
      {
        get
        {
          return _queryOptions;
        }
        set
        {
          __isset.queryOptions = true;
          SetProperty(ref _queryOptions, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool queryOptions;
        public bool pageOption;
      }

      public queryXQContractCommissionPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QueryOptions = new QueryXQPFeeOptions();
                QueryOptions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQContractCommissionPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOptions != null && __isset.queryOptions) {
          field.Name = "queryOptions";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QueryOptions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQContractCommissionPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QueryOptions: ");
        sb.Append(QueryOptions== null ? "<null>" : QueryOptions.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQContractCommissionPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private XQContractCommissionPage _success;
      private ErrorInfo _err;

      public XQContractCommissionPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryXQContractCommissionPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new XQContractCommissionPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQContractCommissionPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQContractCommissionPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryPositionFee_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;
      private long _contractId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public long ContractId
      {
        get
        {
          return _contractId;
        }
        set
        {
          __isset.contractId = true;
          SetProperty(ref _contractId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
        public bool contractId;
      }

      public queryPositionFee_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                ContractId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryPositionFee_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.contractId) {
          field.Name = "contractId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ContractId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryPositionFee_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",ContractId: ");
        sb.Append(ContractId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryPositionFee_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PositionFee _success;
      private ErrorInfo _err;

      public PositionFee Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryPositionFee_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PositionFee();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryPositionFee_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryPositionFee_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
