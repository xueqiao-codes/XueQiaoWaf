/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.position.fee.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class XQContractCommission : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _subAccountId;
    private ContractInfo _contractInfo;
    private CommissionInfo _commission;
    private UpsideDataType _dataType;
    private XQSettingsDataType _settingsDataType;
    private long _createTimestampMs;
    private long _lastmodifyTimestampMs;

    public long SubAccountId
    {
      get
      {
        return _subAccountId;
      }
      set
      {
        __isset.subAccountId = true;
        SetProperty(ref _subAccountId, value);
      }
    }

    public ContractInfo ContractInfo
    {
      get
      {
        return _contractInfo;
      }
      set
      {
        __isset.contractInfo = true;
        SetProperty(ref _contractInfo, value);
      }
    }

    public CommissionInfo Commission
    {
      get
      {
        return _commission;
      }
      set
      {
        __isset.commission = true;
        SetProperty(ref _commission, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="UpsideDataType"/>
    /// </summary>
    public UpsideDataType DataType
    {
      get
      {
        return _dataType;
      }
      set
      {
        __isset.dataType = true;
        SetProperty(ref _dataType, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="XQSettingsDataType"/>
    /// </summary>
    public XQSettingsDataType SettingsDataType
    {
      get
      {
        return _settingsDataType;
      }
      set
      {
        __isset.settingsDataType = true;
        SetProperty(ref _settingsDataType, value);
      }
    }

    public long CreateTimestampMs
    {
      get
      {
        return _createTimestampMs;
      }
      set
      {
        __isset.createTimestampMs = true;
        SetProperty(ref _createTimestampMs, value);
      }
    }

    public long LastmodifyTimestampMs
    {
      get
      {
        return _lastmodifyTimestampMs;
      }
      set
      {
        __isset.lastmodifyTimestampMs = true;
        SetProperty(ref _lastmodifyTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool subAccountId;
      public bool contractInfo;
      public bool commission;
      public bool dataType;
      public bool settingsDataType;
      public bool createTimestampMs;
      public bool lastmodifyTimestampMs;
    }

    public XQContractCommission() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              SubAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              ContractInfo = new ContractInfo();
              ContractInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              Commission = new CommissionInfo();
              Commission.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              DataType = (UpsideDataType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              SettingsDataType = (XQSettingsDataType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I64) {
              CreateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I64) {
              LastmodifyTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("XQContractCommission");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.subAccountId) {
        field.Name = "subAccountId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SubAccountId);
        oprot.WriteFieldEnd();
      }
      if (ContractInfo != null && __isset.contractInfo) {
        field.Name = "contractInfo";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        ContractInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Commission != null && __isset.commission) {
        field.Name = "commission";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        Commission.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.dataType) {
        field.Name = "dataType";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)DataType);
        oprot.WriteFieldEnd();
      }
      if (__isset.settingsDataType) {
        field.Name = "settingsDataType";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)SettingsDataType);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestampMs) {
        field.Name = "createTimestampMs";
        field.Type = TType.I64;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastmodifyTimestampMs) {
        field.Name = "lastmodifyTimestampMs";
        field.Type = TType.I64;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastmodifyTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("XQContractCommission(");
      sb.Append("SubAccountId: ");
      sb.Append(SubAccountId);
      sb.Append(",ContractInfo: ");
      sb.Append(ContractInfo== null ? "<null>" : ContractInfo.ToString());
      sb.Append(",Commission: ");
      sb.Append(Commission== null ? "<null>" : Commission.ToString());
      sb.Append(",DataType: ");
      sb.Append(DataType);
      sb.Append(",SettingsDataType: ");
      sb.Append(SettingsDataType);
      sb.Append(",CreateTimestampMs: ");
      sb.Append(CreateTimestampMs);
      sb.Append(",LastmodifyTimestampMs: ");
      sb.Append(LastmodifyTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
