/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting
{

  /// <summary>
  /// 托管机用户
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingUser : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _subUserId;
    private string _loginName;
    private string _loginPasswd;
    private string _phone;
    private string _nickName;
    private short _userRoleValue;
    private string _email;
    private HostingUserState _userState;
    private int _createTimestamp;
    private int _lastmodifyTimestamp;

    public int SubUserId
    {
      get
      {
        return _subUserId;
      }
      set
      {
        __isset.subUserId = true;
        SetProperty(ref _subUserId, value);
      }
    }

    public string LoginName
    {
      get
      {
        return _loginName;
      }
      set
      {
        __isset.loginName = true;
        SetProperty(ref _loginName, value);
      }
    }

    public string LoginPasswd
    {
      get
      {
        return _loginPasswd;
      }
      set
      {
        __isset.loginPasswd = true;
        SetProperty(ref _loginPasswd, value);
      }
    }

    public string Phone
    {
      get
      {
        return _phone;
      }
      set
      {
        __isset.phone = true;
        SetProperty(ref _phone, value);
      }
    }

    public string NickName
    {
      get
      {
        return _nickName;
      }
      set
      {
        __isset.nickName = true;
        SetProperty(ref _nickName, value);
      }
    }

    public short UserRoleValue
    {
      get
      {
        return _userRoleValue;
      }
      set
      {
        __isset.userRoleValue = true;
        SetProperty(ref _userRoleValue, value);
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        SetProperty(ref _email, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="HostingUserState"/>
    /// </summary>
    public HostingUserState UserState
    {
      get
      {
        return _userState;
      }
      set
      {
        __isset.userState = true;
        SetProperty(ref _userState, value);
      }
    }

    public int CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public int LastmodifyTimestamp
    {
      get
      {
        return _lastmodifyTimestamp;
      }
      set
      {
        __isset.lastmodifyTimestamp = true;
        SetProperty(ref _lastmodifyTimestamp, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool subUserId;
      public bool loginName;
      public bool loginPasswd;
      public bool phone;
      public bool nickName;
      public bool userRoleValue;
      public bool email;
      public bool userState;
      public bool createTimestamp;
      public bool lastmodifyTimestamp;
    }

    public HostingUser() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 2:
            if (field.Type == TType.I32) {
              SubUserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              LoginName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              LoginPasswd = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Phone = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              NickName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I16) {
              UserRoleValue = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Email = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              UserState = (HostingUserState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              CreateTimestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              LastmodifyTimestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingUser");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.subUserId) {
        field.Name = "subUserId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SubUserId);
        oprot.WriteFieldEnd();
      }
      if (LoginName != null && __isset.loginName) {
        field.Name = "loginName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoginName);
        oprot.WriteFieldEnd();
      }
      if (LoginPasswd != null && __isset.loginPasswd) {
        field.Name = "loginPasswd";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoginPasswd);
        oprot.WriteFieldEnd();
      }
      if (Phone != null && __isset.phone) {
        field.Name = "phone";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Phone);
        oprot.WriteFieldEnd();
      }
      if (NickName != null && __isset.nickName) {
        field.Name = "nickName";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NickName);
        oprot.WriteFieldEnd();
      }
      if (__isset.userRoleValue) {
        field.Name = "userRoleValue";
        field.Type = TType.I16;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(UserRoleValue);
        oprot.WriteFieldEnd();
      }
      if (Email != null && __isset.email) {
        field.Name = "email";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Email);
        oprot.WriteFieldEnd();
      }
      if (__isset.userState) {
        field.Name = "userState";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)UserState);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastmodifyTimestamp) {
        field.Name = "lastmodifyTimestamp";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LastmodifyTimestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingUser(");
      sb.Append("SubUserId: ");
      sb.Append(SubUserId);
      sb.Append(",LoginName: ");
      sb.Append(LoginName);
      sb.Append(",LoginPasswd: ");
      sb.Append(LoginPasswd);
      sb.Append(",Phone: ");
      sb.Append(Phone);
      sb.Append(",NickName: ");
      sb.Append(NickName);
      sb.Append(",UserRoleValue: ");
      sb.Append(UserRoleValue);
      sb.Append(",Email: ");
      sb.Append(Email);
      sb.Append(",UserState: ");
      sb.Append(UserState);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastmodifyTimestamp: ");
      sb.Append(LastmodifyTimestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
