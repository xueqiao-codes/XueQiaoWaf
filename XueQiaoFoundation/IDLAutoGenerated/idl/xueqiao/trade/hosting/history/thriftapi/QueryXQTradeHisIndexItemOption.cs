/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.history.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryXQTradeHisIndexItemOption : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private QueryTimePeriod _tradeCreateTimePeriod;
    private THashSet<long> _subAccountIds;
    private THashSet<xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget> _tradeTargets;
    private QueryXQTradeHisIndexItemOrderType _itemOrderType;

    public QueryTimePeriod TradeCreateTimePeriod
    {
      get
      {
        return _tradeCreateTimePeriod;
      }
      set
      {
        __isset.tradeCreateTimePeriod = true;
        SetProperty(ref _tradeCreateTimePeriod, value);
      }
    }

    public THashSet<long> SubAccountIds
    {
      get
      {
        return _subAccountIds;
      }
      set
      {
        __isset.subAccountIds = true;
        SetProperty(ref _subAccountIds, value);
      }
    }

    public THashSet<xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget> TradeTargets
    {
      get
      {
        return _tradeTargets;
      }
      set
      {
        __isset.tradeTargets = true;
        SetProperty(ref _tradeTargets, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="QueryXQTradeHisIndexItemOrderType"/>
    /// </summary>
    public QueryXQTradeHisIndexItemOrderType ItemOrderType
    {
      get
      {
        return _itemOrderType;
      }
      set
      {
        __isset.itemOrderType = true;
        SetProperty(ref _itemOrderType, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tradeCreateTimePeriod;
      public bool subAccountIds;
      public bool tradeTargets;
      public bool itemOrderType;
    }

    public QueryXQTradeHisIndexItemOption() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              TradeCreateTimePeriod = new QueryTimePeriod();
              TradeCreateTimePeriod.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Set) {
              {
                SubAccountIds = new THashSet<long>();
                TSet _set15 = iprot.ReadSetBegin();
                for( int _i16 = 0; _i16 < _set15.Count; ++_i16)
                {
                  long _elem17 = 0;
                  _elem17 = iprot.ReadI64();
                  SubAccountIds.Add(_elem17);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Set) {
              {
                TradeTargets = new THashSet<xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget>();
                TSet _set18 = iprot.ReadSetBegin();
                for( int _i19 = 0; _i19 < _set18.Count; ++_i19)
                {
                  xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget _elem20 = new xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget();
                  _elem20 = new xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget();
                  _elem20.Read(iprot);
                  TradeTargets.Add(_elem20);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              ItemOrderType = (QueryXQTradeHisIndexItemOrderType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryXQTradeHisIndexItemOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TradeCreateTimePeriod != null && __isset.tradeCreateTimePeriod) {
        field.Name = "tradeCreateTimePeriod";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        TradeCreateTimePeriod.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (SubAccountIds != null && __isset.subAccountIds) {
        field.Name = "subAccountIds";
        field.Type = TType.Set;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.I64, SubAccountIds.Count));
          foreach (long _iter21 in SubAccountIds)
          {
            oprot.WriteI64(_iter21);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (TradeTargets != null && __isset.tradeTargets) {
        field.Name = "tradeTargets";
        field.Type = TType.Set;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, TradeTargets.Count));
          foreach (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget _iter22 in TradeTargets)
          {
            _iter22.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.itemOrderType) {
        field.Name = "itemOrderType";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ItemOrderType);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QueryXQTradeHisIndexItemOption(");
      sb.Append("TradeCreateTimePeriod: ");
      sb.Append(TradeCreateTimePeriod== null ? "<null>" : TradeCreateTimePeriod.ToString());
      sb.Append(",SubAccountIds: ");
      if (SubAccountIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (long _iter23 in SubAccountIds)
        {
          sb.Append(_iter23.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",TradeTargets: ");
      if (TradeTargets == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget _iter24 in TradeTargets)
        {
          sb.Append(_iter24.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",ItemOrderType: ");
      sb.Append(ItemOrderType);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
