/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.history.thriftapi
{
  public partial class TradeHostingHistory {
    public interface Iface {
      void clearAll(PlatformArgs platformArgs);
      #if SILVERLIGHT
      IAsyncResult Begin_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs);
      void End_clearAll(IAsyncResult asyncResult);
      #endif
      HostingXQOrderHisIndexPage getXQOrderHisIndexPage(PlatformArgs platformArgs, QueryXQOrderHisIndexItemOption qryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getXQOrderHisIndexPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQOrderHisIndexItemOption qryOption, IndexedPageOption pageOption);
      HostingXQOrderHisIndexPage End_getXQOrderHisIndexPage(IAsyncResult asyncResult);
      #endif
      HostingXQTradeHisIndexPage getXQTradeHisIndexPage(PlatformArgs platformArgs, QueryXQTradeHisIndexItemOption qryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getXQTradeHisIndexPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQTradeHisIndexItemOption qryOption, IndexedPageOption pageOption);
      HostingXQTradeHisIndexPage End_getXQTradeHisIndexPage(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs)
      {
        return send_clearAll(callback, state, platformArgs);
      }

      public void End_clearAll(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_clearAll();
      }

      #endif

      public void clearAll(PlatformArgs platformArgs)
      {
        #if !SILVERLIGHT
        send_clearAll(platformArgs);
        recv_clearAll();

        #else
        var asyncResult = Begin_clearAll(null, null, platformArgs);
        End_clearAll(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs)
      #else
      public void send_clearAll(PlatformArgs platformArgs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("clearAll", TMessageType.Call, seqid_));
        clearAll_args args = new clearAll_args();
        args.PlatformArgs = platformArgs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_clearAll()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        clearAll_result result = new clearAll_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getXQOrderHisIndexPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQOrderHisIndexItemOption qryOption, IndexedPageOption pageOption)
      {
        return send_getXQOrderHisIndexPage(callback, state, platformArgs, qryOption, pageOption);
      }

      public HostingXQOrderHisIndexPage End_getXQOrderHisIndexPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getXQOrderHisIndexPage();
      }

      #endif

      public HostingXQOrderHisIndexPage getXQOrderHisIndexPage(PlatformArgs platformArgs, QueryXQOrderHisIndexItemOption qryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getXQOrderHisIndexPage(platformArgs, qryOption, pageOption);
        return recv_getXQOrderHisIndexPage();

        #else
        var asyncResult = Begin_getXQOrderHisIndexPage(null, null, platformArgs, qryOption, pageOption);
        return End_getXQOrderHisIndexPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getXQOrderHisIndexPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQOrderHisIndexItemOption qryOption, IndexedPageOption pageOption)
      #else
      public void send_getXQOrderHisIndexPage(PlatformArgs platformArgs, QueryXQOrderHisIndexItemOption qryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getXQOrderHisIndexPage", TMessageType.Call, seqid_));
        getXQOrderHisIndexPage_args args = new getXQOrderHisIndexPage_args();
        args.PlatformArgs = platformArgs;
        args.QryOption = qryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingXQOrderHisIndexPage recv_getXQOrderHisIndexPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getXQOrderHisIndexPage_result result = new getXQOrderHisIndexPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getXQOrderHisIndexPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getXQTradeHisIndexPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQTradeHisIndexItemOption qryOption, IndexedPageOption pageOption)
      {
        return send_getXQTradeHisIndexPage(callback, state, platformArgs, qryOption, pageOption);
      }

      public HostingXQTradeHisIndexPage End_getXQTradeHisIndexPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getXQTradeHisIndexPage();
      }

      #endif

      public HostingXQTradeHisIndexPage getXQTradeHisIndexPage(PlatformArgs platformArgs, QueryXQTradeHisIndexItemOption qryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getXQTradeHisIndexPage(platformArgs, qryOption, pageOption);
        return recv_getXQTradeHisIndexPage();

        #else
        var asyncResult = Begin_getXQTradeHisIndexPage(null, null, platformArgs, qryOption, pageOption);
        return End_getXQTradeHisIndexPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getXQTradeHisIndexPage(AsyncCallback callback, object state, PlatformArgs platformArgs, QueryXQTradeHisIndexItemOption qryOption, IndexedPageOption pageOption)
      #else
      public void send_getXQTradeHisIndexPage(PlatformArgs platformArgs, QueryXQTradeHisIndexItemOption qryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getXQTradeHisIndexPage", TMessageType.Call, seqid_));
        getXQTradeHisIndexPage_args args = new getXQTradeHisIndexPage_args();
        args.PlatformArgs = platformArgs;
        args.QryOption = qryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingXQTradeHisIndexPage recv_getXQTradeHisIndexPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getXQTradeHisIndexPage_result result = new getXQTradeHisIndexPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getXQTradeHisIndexPage failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["clearAll"] = clearAll_Process;
        processMap_["getXQOrderHisIndexPage"] = getXQOrderHisIndexPage_Process;
        processMap_["getXQTradeHisIndexPage"] = getXQTradeHisIndexPage_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void clearAll_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        clearAll_args args = new clearAll_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        clearAll_result result = new clearAll_result();
        try {
          iface_.clearAll(args.PlatformArgs);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("clearAll", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getXQOrderHisIndexPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getXQOrderHisIndexPage_args args = new getXQOrderHisIndexPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getXQOrderHisIndexPage_result result = new getXQOrderHisIndexPage_result();
        try {
          result.Success = iface_.getXQOrderHisIndexPage(args.PlatformArgs, args.QryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getXQOrderHisIndexPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getXQTradeHisIndexPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getXQTradeHisIndexPage_args args = new getXQTradeHisIndexPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getXQTradeHisIndexPage_result result = new getXQTradeHisIndexPage_result();
        try {
          result.Success = iface_.getXQTradeHisIndexPage(args.PlatformArgs, args.QryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getXQTradeHisIndexPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearAll_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
      }

      public clearAll_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearAll_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearAll_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearAll_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public clearAll_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearAll_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearAll_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrderHisIndexPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryXQOrderHisIndexItemOption _qryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryXQOrderHisIndexItemOption QryOption
      {
        get
        {
          return _qryOption;
        }
        set
        {
          __isset.qryOption = true;
          SetProperty(ref _qryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool qryOption;
        public bool pageOption;
      }

      public getXQOrderHisIndexPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QryOption = new QueryXQOrderHisIndexItemOption();
                QryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrderHisIndexPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QryOption != null && __isset.qryOption) {
          field.Name = "qryOption";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrderHisIndexPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QryOption: ");
        sb.Append(QryOption== null ? "<null>" : QryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrderHisIndexPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingXQOrderHisIndexPage _success;
      private ErrorInfo _err;

      public HostingXQOrderHisIndexPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getXQOrderHisIndexPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingXQOrderHisIndexPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrderHisIndexPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrderHisIndexPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQTradeHisIndexPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private QueryXQTradeHisIndexItemOption _qryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public QueryXQTradeHisIndexItemOption QryOption
      {
        get
        {
          return _qryOption;
        }
        set
        {
          __isset.qryOption = true;
          SetProperty(ref _qryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool qryOption;
        public bool pageOption;
      }

      public getXQTradeHisIndexPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                QryOption = new QueryXQTradeHisIndexItemOption();
                QryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQTradeHisIndexPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QryOption != null && __isset.qryOption) {
          field.Name = "qryOption";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          QryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQTradeHisIndexPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",QryOption: ");
        sb.Append(QryOption== null ? "<null>" : QryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQTradeHisIndexPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingXQTradeHisIndexPage _success;
      private ErrorInfo _err;

      public HostingXQTradeHisIndexPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getXQTradeHisIndexPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingXQTradeHisIndexPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQTradeHisIndexPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQTradeHisIndexPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
