/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.history.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryXQOrderHisIndexItemOption : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private QueryTimePeriod _orderCreateTimePeriod;
    private QueryTimePeriod _orderEndTimePeriod;
    private THashSet<long> _subAccountIds;
    private THashSet<xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget> _orderTargets;
    private QueryXQOrderHisIndexItemOrderType _itemOrderType;

    public QueryTimePeriod OrderCreateTimePeriod
    {
      get
      {
        return _orderCreateTimePeriod;
      }
      set
      {
        __isset.orderCreateTimePeriod = true;
        SetProperty(ref _orderCreateTimePeriod, value);
      }
    }

    public QueryTimePeriod OrderEndTimePeriod
    {
      get
      {
        return _orderEndTimePeriod;
      }
      set
      {
        __isset.orderEndTimePeriod = true;
        SetProperty(ref _orderEndTimePeriod, value);
      }
    }

    public THashSet<long> SubAccountIds
    {
      get
      {
        return _subAccountIds;
      }
      set
      {
        __isset.subAccountIds = true;
        SetProperty(ref _subAccountIds, value);
      }
    }

    public THashSet<xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget> OrderTargets
    {
      get
      {
        return _orderTargets;
      }
      set
      {
        __isset.orderTargets = true;
        SetProperty(ref _orderTargets, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="QueryXQOrderHisIndexItemOrderType"/>
    /// </summary>
    public QueryXQOrderHisIndexItemOrderType ItemOrderType
    {
      get
      {
        return _itemOrderType;
      }
      set
      {
        __isset.itemOrderType = true;
        SetProperty(ref _itemOrderType, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool orderCreateTimePeriod;
      public bool orderEndTimePeriod;
      public bool subAccountIds;
      public bool orderTargets;
      public bool itemOrderType;
    }

    public QueryXQOrderHisIndexItemOption() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              OrderCreateTimePeriod = new QueryTimePeriod();
              OrderCreateTimePeriod.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              OrderEndTimePeriod = new QueryTimePeriod();
              OrderEndTimePeriod.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Set) {
              {
                SubAccountIds = new THashSet<long>();
                TSet _set0 = iprot.ReadSetBegin();
                for( int _i1 = 0; _i1 < _set0.Count; ++_i1)
                {
                  long _elem2 = 0;
                  _elem2 = iprot.ReadI64();
                  SubAccountIds.Add(_elem2);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Set) {
              {
                OrderTargets = new THashSet<xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget>();
                TSet _set3 = iprot.ReadSetBegin();
                for( int _i4 = 0; _i4 < _set3.Count; ++_i4)
                {
                  xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget _elem5 = new xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget();
                  _elem5 = new xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget();
                  _elem5.Read(iprot);
                  OrderTargets.Add(_elem5);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              ItemOrderType = (QueryXQOrderHisIndexItemOrderType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryXQOrderHisIndexItemOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (OrderCreateTimePeriod != null && __isset.orderCreateTimePeriod) {
        field.Name = "orderCreateTimePeriod";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        OrderCreateTimePeriod.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (OrderEndTimePeriod != null && __isset.orderEndTimePeriod) {
        field.Name = "orderEndTimePeriod";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        OrderEndTimePeriod.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (SubAccountIds != null && __isset.subAccountIds) {
        field.Name = "subAccountIds";
        field.Type = TType.Set;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.I64, SubAccountIds.Count));
          foreach (long _iter6 in SubAccountIds)
          {
            oprot.WriteI64(_iter6);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (OrderTargets != null && __isset.orderTargets) {
        field.Name = "orderTargets";
        field.Type = TType.Set;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, OrderTargets.Count));
          foreach (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget _iter7 in OrderTargets)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.itemOrderType) {
        field.Name = "itemOrderType";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ItemOrderType);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QueryXQOrderHisIndexItemOption(");
      sb.Append("OrderCreateTimePeriod: ");
      sb.Append(OrderCreateTimePeriod== null ? "<null>" : OrderCreateTimePeriod.ToString());
      sb.Append(",OrderEndTimePeriod: ");
      sb.Append(OrderEndTimePeriod== null ? "<null>" : OrderEndTimePeriod.ToString());
      sb.Append(",SubAccountIds: ");
      if (SubAccountIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (long _iter8 in SubAccountIds)
        {
          sb.Append(_iter8.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",OrderTargets: ");
      if (OrderTargets == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget _iter9 in OrderTargets)
        {
          sb.Append(_iter9.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",ItemOrderType: ");
      sb.Append(ItemOrderType);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
