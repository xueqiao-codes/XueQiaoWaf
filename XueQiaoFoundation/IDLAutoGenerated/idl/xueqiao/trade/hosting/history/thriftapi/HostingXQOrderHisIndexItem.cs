/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.history.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingXQOrderHisIndexItem : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _subAccountId;
    private int _subUserId;
    private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType _orderType;
    private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget _orderTarget;
    private long _orderCreateTimestampMs;
    private long _orderEndTimestampMs;
    private string _orderId;
    private long _createTimestampMs;
    private long _lastmodifyTimestampMs;

    public long SubAccountId
    {
      get
      {
        return _subAccountId;
      }
      set
      {
        __isset.subAccountId = true;
        SetProperty(ref _subAccountId, value);
      }
    }

    public int SubUserId
    {
      get
      {
        return _subUserId;
      }
      set
      {
        __isset.subUserId = true;
        SetProperty(ref _subUserId, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType"/>
    /// </summary>
    public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType OrderType
    {
      get
      {
        return _orderType;
      }
      set
      {
        __isset.orderType = true;
        SetProperty(ref _orderType, value);
      }
    }

    public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget OrderTarget
    {
      get
      {
        return _orderTarget;
      }
      set
      {
        __isset.orderTarget = true;
        SetProperty(ref _orderTarget, value);
      }
    }

    public long OrderCreateTimestampMs
    {
      get
      {
        return _orderCreateTimestampMs;
      }
      set
      {
        __isset.orderCreateTimestampMs = true;
        SetProperty(ref _orderCreateTimestampMs, value);
      }
    }

    public long OrderEndTimestampMs
    {
      get
      {
        return _orderEndTimestampMs;
      }
      set
      {
        __isset.orderEndTimestampMs = true;
        SetProperty(ref _orderEndTimestampMs, value);
      }
    }

    public string OrderId
    {
      get
      {
        return _orderId;
      }
      set
      {
        __isset.orderId = true;
        SetProperty(ref _orderId, value);
      }
    }

    public long CreateTimestampMs
    {
      get
      {
        return _createTimestampMs;
      }
      set
      {
        __isset.createTimestampMs = true;
        SetProperty(ref _createTimestampMs, value);
      }
    }

    public long LastmodifyTimestampMs
    {
      get
      {
        return _lastmodifyTimestampMs;
      }
      set
      {
        __isset.lastmodifyTimestampMs = true;
        SetProperty(ref _lastmodifyTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool subAccountId;
      public bool subUserId;
      public bool orderType;
      public bool orderTarget;
      public bool orderCreateTimestampMs;
      public bool orderEndTimestampMs;
      public bool orderId;
      public bool createTimestampMs;
      public bool lastmodifyTimestampMs;
    }

    public HostingXQOrderHisIndexItem() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              SubAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              SubUserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              OrderType = (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              OrderTarget = new xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget();
              OrderTarget.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              OrderCreateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              OrderEndTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              OrderId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              CreateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              LastmodifyTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingXQOrderHisIndexItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.subAccountId) {
        field.Name = "subAccountId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SubAccountId);
        oprot.WriteFieldEnd();
      }
      if (__isset.subUserId) {
        field.Name = "subUserId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SubUserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.orderType) {
        field.Name = "orderType";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)OrderType);
        oprot.WriteFieldEnd();
      }
      if (OrderTarget != null && __isset.orderTarget) {
        field.Name = "orderTarget";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        OrderTarget.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.orderCreateTimestampMs) {
        field.Name = "orderCreateTimestampMs";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(OrderCreateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.orderEndTimestampMs) {
        field.Name = "orderEndTimestampMs";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(OrderEndTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (OrderId != null && __isset.orderId) {
        field.Name = "orderId";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderId);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestampMs) {
        field.Name = "createTimestampMs";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastmodifyTimestampMs) {
        field.Name = "lastmodifyTimestampMs";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastmodifyTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingXQOrderHisIndexItem(");
      sb.Append("SubAccountId: ");
      sb.Append(SubAccountId);
      sb.Append(",SubUserId: ");
      sb.Append(SubUserId);
      sb.Append(",OrderType: ");
      sb.Append(OrderType);
      sb.Append(",OrderTarget: ");
      sb.Append(OrderTarget== null ? "<null>" : OrderTarget.ToString());
      sb.Append(",OrderCreateTimestampMs: ");
      sb.Append(OrderCreateTimestampMs);
      sb.Append(",OrderEndTimestampMs: ");
      sb.Append(OrderEndTimestampMs);
      sb.Append(",OrderId: ");
      sb.Append(OrderId);
      sb.Append(",CreateTimestampMs: ");
      sb.Append(CreateTimestampMs);
      sb.Append(",LastmodifyTimestampMs: ");
      sb.Append(LastmodifyTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
