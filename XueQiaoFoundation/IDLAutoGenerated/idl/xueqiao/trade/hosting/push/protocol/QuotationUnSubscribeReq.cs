/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.push.protocol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QuotationUnSubscribeReq : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public List<QuotationTopic> Topics { get; set; }

    public QuotationUnSubscribeReq() {
    }

    public QuotationUnSubscribeReq(List<QuotationTopic> topics) : this() {
      this.Topics = topics;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_topics = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Topics = new List<QuotationTopic>();
                TList _list5 = iprot.ReadListBegin();
                for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                {
                  QuotationTopic _elem7 = new QuotationTopic();
                  _elem7 = new QuotationTopic();
                  _elem7.Read(iprot);
                  Topics.Add(_elem7);
                }
                iprot.ReadListEnd();
              }
              isset_topics = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_topics)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QuotationUnSubscribeReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "topics";
      field.Type = TType.List;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Topics.Count));
        foreach (QuotationTopic _iter8 in Topics)
        {
          _iter8.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QuotationUnSubscribeReq(");
      sb.Append("Topics: ");
      if (Topics == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (QuotationTopic _iter9 in Topics)
        {
          sb.Append(_iter9.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(")");
      return sb.ToString();
    }

  }

}
