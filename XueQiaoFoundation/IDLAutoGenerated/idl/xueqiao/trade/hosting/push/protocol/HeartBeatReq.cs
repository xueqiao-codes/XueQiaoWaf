/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.push.protocol
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HeartBeatReq : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public long MachineId { get; set; }

    public int SubUserId { get; set; }

    public string Token { get; set; }

    public HeartBeatReq() {
    }

    public HeartBeatReq(long machineId, int subUserId, string token) : this() {
      this.MachineId = machineId;
      this.SubUserId = subUserId;
      this.Token = token;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_machineId = false;
      bool isset_subUserId = false;
      bool isset_token = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              MachineId = iprot.ReadI64();
              isset_machineId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              SubUserId = iprot.ReadI32();
              isset_subUserId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Token = iprot.ReadString();
              isset_token = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_machineId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_subUserId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_token)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HeartBeatReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "machineId";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(MachineId);
      oprot.WriteFieldEnd();
      field.Name = "subUserId";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(SubUserId);
      oprot.WriteFieldEnd();
      field.Name = "token";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Token);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HeartBeatReq(");
      sb.Append("MachineId: ");
      sb.Append(MachineId);
      sb.Append(",SubUserId: ");
      sb.Append(SubUserId);
      sb.Append(",Token: ");
      sb.Append(Token);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
