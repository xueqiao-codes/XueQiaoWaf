/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingExecTradeLeg : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _execTradeLegId;
    private long _execOrderId;
    private long _relatedExecTradeId;
    private short _legIndex;
    private HostingExecOrderLegContractSummary _legContractSummary;
    private HostingExecTradeLegInfo _tradeLegInfo;
    private HostingExecOrderTradeAccountSummary _accountSummary;
    private int _subUserId;
    private long _createTimestampMs;
    private long _lastmodifyTimestampMs;
    private long _subAccountId;

    public long ExecTradeLegId
    {
      get
      {
        return _execTradeLegId;
      }
      set
      {
        __isset.execTradeLegId = true;
        SetProperty(ref _execTradeLegId, value);
      }
    }

    public long ExecOrderId
    {
      get
      {
        return _execOrderId;
      }
      set
      {
        __isset.execOrderId = true;
        SetProperty(ref _execOrderId, value);
      }
    }

    public long RelatedExecTradeId
    {
      get
      {
        return _relatedExecTradeId;
      }
      set
      {
        __isset.relatedExecTradeId = true;
        SetProperty(ref _relatedExecTradeId, value);
      }
    }

    public short LegIndex
    {
      get
      {
        return _legIndex;
      }
      set
      {
        __isset.legIndex = true;
        SetProperty(ref _legIndex, value);
      }
    }

    public HostingExecOrderLegContractSummary LegContractSummary
    {
      get
      {
        return _legContractSummary;
      }
      set
      {
        __isset.legContractSummary = true;
        SetProperty(ref _legContractSummary, value);
      }
    }

    public HostingExecTradeLegInfo TradeLegInfo
    {
      get
      {
        return _tradeLegInfo;
      }
      set
      {
        __isset.tradeLegInfo = true;
        SetProperty(ref _tradeLegInfo, value);
      }
    }

    public HostingExecOrderTradeAccountSummary AccountSummary
    {
      get
      {
        return _accountSummary;
      }
      set
      {
        __isset.accountSummary = true;
        SetProperty(ref _accountSummary, value);
      }
    }

    public int SubUserId
    {
      get
      {
        return _subUserId;
      }
      set
      {
        __isset.subUserId = true;
        SetProperty(ref _subUserId, value);
      }
    }

    public long CreateTimestampMs
    {
      get
      {
        return _createTimestampMs;
      }
      set
      {
        __isset.createTimestampMs = true;
        SetProperty(ref _createTimestampMs, value);
      }
    }

    public long LastmodifyTimestampMs
    {
      get
      {
        return _lastmodifyTimestampMs;
      }
      set
      {
        __isset.lastmodifyTimestampMs = true;
        SetProperty(ref _lastmodifyTimestampMs, value);
      }
    }

    public long SubAccountId
    {
      get
      {
        return _subAccountId;
      }
      set
      {
        __isset.subAccountId = true;
        SetProperty(ref _subAccountId, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool execTradeLegId;
      public bool execOrderId;
      public bool relatedExecTradeId;
      public bool legIndex;
      public bool legContractSummary;
      public bool tradeLegInfo;
      public bool accountSummary;
      public bool subUserId;
      public bool createTimestampMs;
      public bool lastmodifyTimestampMs;
      public bool subAccountId;
    }

    public HostingExecTradeLeg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              ExecTradeLegId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              ExecOrderId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              RelatedExecTradeId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              LegIndex = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              LegContractSummary = new HostingExecOrderLegContractSummary();
              LegContractSummary.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              TradeLegInfo = new HostingExecTradeLegInfo();
              TradeLegInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              AccountSummary = new HostingExecOrderTradeAccountSummary();
              AccountSummary.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              SubUserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              CreateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              LastmodifyTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              SubAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingExecTradeLeg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.execTradeLegId) {
        field.Name = "execTradeLegId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ExecTradeLegId);
        oprot.WriteFieldEnd();
      }
      if (__isset.execOrderId) {
        field.Name = "execOrderId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ExecOrderId);
        oprot.WriteFieldEnd();
      }
      if (__isset.relatedExecTradeId) {
        field.Name = "relatedExecTradeId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RelatedExecTradeId);
        oprot.WriteFieldEnd();
      }
      if (__isset.legIndex) {
        field.Name = "legIndex";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(LegIndex);
        oprot.WriteFieldEnd();
      }
      if (LegContractSummary != null && __isset.legContractSummary) {
        field.Name = "legContractSummary";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        LegContractSummary.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (TradeLegInfo != null && __isset.tradeLegInfo) {
        field.Name = "tradeLegInfo";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        TradeLegInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (AccountSummary != null && __isset.accountSummary) {
        field.Name = "accountSummary";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        AccountSummary.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.subUserId) {
        field.Name = "subUserId";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SubUserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestampMs) {
        field.Name = "createTimestampMs";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastmodifyTimestampMs) {
        field.Name = "lastmodifyTimestampMs";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastmodifyTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.subAccountId) {
        field.Name = "subAccountId";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SubAccountId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingExecTradeLeg(");
      sb.Append("ExecTradeLegId: ");
      sb.Append(ExecTradeLegId);
      sb.Append(",ExecOrderId: ");
      sb.Append(ExecOrderId);
      sb.Append(",RelatedExecTradeId: ");
      sb.Append(RelatedExecTradeId);
      sb.Append(",LegIndex: ");
      sb.Append(LegIndex);
      sb.Append(",LegContractSummary: ");
      sb.Append(LegContractSummary== null ? "<null>" : LegContractSummary.ToString());
      sb.Append(",TradeLegInfo: ");
      sb.Append(TradeLegInfo== null ? "<null>" : TradeLegInfo.ToString());
      sb.Append(",AccountSummary: ");
      sb.Append(AccountSummary== null ? "<null>" : AccountSummary.ToString());
      sb.Append(",SubUserId: ");
      sb.Append(SubUserId);
      sb.Append(",CreateTimestampMs: ");
      sb.Append(CreateTimestampMs);
      sb.Append(",LastmodifyTimestampMs: ");
      sb.Append(LastmodifyTimestampMs);
      sb.Append(",SubAccountId: ");
      sb.Append(SubAccountId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
