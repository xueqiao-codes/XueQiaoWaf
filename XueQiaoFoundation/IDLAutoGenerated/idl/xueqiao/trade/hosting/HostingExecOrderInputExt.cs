/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingExecOrderInputExt : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private CTPOrderInputExt _ctpInputExt;
    private ESunny3OrderInputExt _esunny3InputExt;
    private ESunny9OrderInputExt _esunny9InputExt;

    public CTPOrderInputExt CtpInputExt
    {
      get
      {
        return _ctpInputExt;
      }
      set
      {
        __isset.ctpInputExt = true;
        SetProperty(ref _ctpInputExt, value);
      }
    }

    public ESunny3OrderInputExt Esunny3InputExt
    {
      get
      {
        return _esunny3InputExt;
      }
      set
      {
        __isset.esunny3InputExt = true;
        SetProperty(ref _esunny3InputExt, value);
      }
    }

    public ESunny9OrderInputExt Esunny9InputExt
    {
      get
      {
        return _esunny9InputExt;
      }
      set
      {
        __isset.esunny9InputExt = true;
        SetProperty(ref _esunny9InputExt, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ctpInputExt;
      public bool esunny3InputExt;
      public bool esunny9InputExt;
    }

    public HostingExecOrderInputExt() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              CtpInputExt = new CTPOrderInputExt();
              CtpInputExt.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Esunny3InputExt = new ESunny3OrderInputExt();
              Esunny3InputExt.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Esunny9InputExt = new ESunny9OrderInputExt();
              Esunny9InputExt.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingExecOrderInputExt");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (CtpInputExt != null && __isset.ctpInputExt) {
        field.Name = "ctpInputExt";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        CtpInputExt.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Esunny3InputExt != null && __isset.esunny3InputExt) {
        field.Name = "esunny3InputExt";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Esunny3InputExt.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Esunny9InputExt != null && __isset.esunny9InputExt) {
        field.Name = "esunny9InputExt";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Esunny9InputExt.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingExecOrderInputExt(");
      sb.Append("CtpInputExt: ");
      sb.Append(CtpInputExt== null ? "<null>" : CtpInputExt.ToString());
      sb.Append(",Esunny3InputExt: ");
      sb.Append(Esunny3InputExt== null ? "<null>" : Esunny3InputExt.ToString());
      sb.Append(",Esunny9InputExt: ");
      sb.Append(Esunny9InputExt== null ? "<null>" : Esunny9InputExt.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
