/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.tradeaccount.data
{
  public partial class TradeHostingTradeAccountData {
    public interface Iface {
      /// <summary>
      /// 清空全部数据
      /// </summary>
      /// <param name="platformArgs"></param>
      void clearAll(PlatformArgs platformArgs);
      #if SILVERLIGHT
      IAsyncResult Begin_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs);
      void End_clearAll(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取当前资金信息, 无资金信息时为空
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="tradeAccountId"></param>
      List<TradeAccountFund> getNowFund(PlatformArgs platformArgs, long tradeAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_getNowFund(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId);
      List<TradeAccountFund> End_getNowFund(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取历史资金信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="tradeAccountId"></param>
      /// <param name="fundDateBegin"></param>
      /// <param name="fundDateEnd"></param>
      List<TradeAccountFundHisItem> getHisFunds(PlatformArgs platformArgs, long tradeAccountId, string fundDateBegin, string fundDateEnd);
      #if SILVERLIGHT
      IAsyncResult Begin_getHisFunds(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId, string fundDateBegin, string fundDateEnd);
      List<TradeAccountFundHisItem> End_getHisFunds(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取一段时间内的结算报告
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="tradeAccountId"></param>
      /// <param name="settlementDateBegin"></param>
      /// <param name="settlementDateEnd"></param>
      List<TradeAccountSettlementInfo> getSettlementInfos(PlatformArgs platformArgs, long tradeAccountId, string settlementDateBegin, string settlementDateEnd);
      #if SILVERLIGHT
      IAsyncResult Begin_getSettlementInfos(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId, string settlementDateBegin, string settlementDateEnd);
      List<TradeAccountSettlementInfo> End_getSettlementInfos(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取某个交易账号的所有净仓信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="tradeAccountId"></param>
      List<TradeAccountNetPositionSummary> getNetPositionSummaries(PlatformArgs platformArgs, long tradeAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_getNetPositionSummaries(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId);
      List<TradeAccountNetPositionSummary> End_getNetPositionSummaries(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs)
      {
        return send_clearAll(callback, state, platformArgs);
      }

      public void End_clearAll(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_clearAll();
      }

      #endif

      /// <summary>
      /// 清空全部数据
      /// </summary>
      /// <param name="platformArgs"></param>
      public void clearAll(PlatformArgs platformArgs)
      {
        #if !SILVERLIGHT
        send_clearAll(platformArgs);
        recv_clearAll();

        #else
        var asyncResult = Begin_clearAll(null, null, platformArgs);
        End_clearAll(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_clearAll(AsyncCallback callback, object state, PlatformArgs platformArgs)
      #else
      public void send_clearAll(PlatformArgs platformArgs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("clearAll", TMessageType.Call, seqid_));
        clearAll_args args = new clearAll_args();
        args.PlatformArgs = platformArgs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_clearAll()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        clearAll_result result = new clearAll_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getNowFund(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId)
      {
        return send_getNowFund(callback, state, platformArgs, tradeAccountId);
      }

      public List<TradeAccountFund> End_getNowFund(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getNowFund();
      }

      #endif

      /// <summary>
      /// 获取当前资金信息, 无资金信息时为空
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="tradeAccountId"></param>
      public List<TradeAccountFund> getNowFund(PlatformArgs platformArgs, long tradeAccountId)
      {
        #if !SILVERLIGHT
        send_getNowFund(platformArgs, tradeAccountId);
        return recv_getNowFund();

        #else
        var asyncResult = Begin_getNowFund(null, null, platformArgs, tradeAccountId);
        return End_getNowFund(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getNowFund(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId)
      #else
      public void send_getNowFund(PlatformArgs platformArgs, long tradeAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getNowFund", TMessageType.Call, seqid_));
        getNowFund_args args = new getNowFund_args();
        args.PlatformArgs = platformArgs;
        args.TradeAccountId = tradeAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TradeAccountFund> recv_getNowFund()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNowFund_result result = new getNowFund_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNowFund failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHisFunds(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId, string fundDateBegin, string fundDateEnd)
      {
        return send_getHisFunds(callback, state, platformArgs, tradeAccountId, fundDateBegin, fundDateEnd);
      }

      public List<TradeAccountFundHisItem> End_getHisFunds(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHisFunds();
      }

      #endif

      /// <summary>
      /// 获取历史资金信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="tradeAccountId"></param>
      /// <param name="fundDateBegin"></param>
      /// <param name="fundDateEnd"></param>
      public List<TradeAccountFundHisItem> getHisFunds(PlatformArgs platformArgs, long tradeAccountId, string fundDateBegin, string fundDateEnd)
      {
        #if !SILVERLIGHT
        send_getHisFunds(platformArgs, tradeAccountId, fundDateBegin, fundDateEnd);
        return recv_getHisFunds();

        #else
        var asyncResult = Begin_getHisFunds(null, null, platformArgs, tradeAccountId, fundDateBegin, fundDateEnd);
        return End_getHisFunds(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHisFunds(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId, string fundDateBegin, string fundDateEnd)
      #else
      public void send_getHisFunds(PlatformArgs platformArgs, long tradeAccountId, string fundDateBegin, string fundDateEnd)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHisFunds", TMessageType.Call, seqid_));
        getHisFunds_args args = new getHisFunds_args();
        args.PlatformArgs = platformArgs;
        args.TradeAccountId = tradeAccountId;
        args.FundDateBegin = fundDateBegin;
        args.FundDateEnd = fundDateEnd;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TradeAccountFundHisItem> recv_getHisFunds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHisFunds_result result = new getHisFunds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHisFunds failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSettlementInfos(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId, string settlementDateBegin, string settlementDateEnd)
      {
        return send_getSettlementInfos(callback, state, platformArgs, tradeAccountId, settlementDateBegin, settlementDateEnd);
      }

      public List<TradeAccountSettlementInfo> End_getSettlementInfos(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSettlementInfos();
      }

      #endif

      /// <summary>
      /// 获取一段时间内的结算报告
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="tradeAccountId"></param>
      /// <param name="settlementDateBegin"></param>
      /// <param name="settlementDateEnd"></param>
      public List<TradeAccountSettlementInfo> getSettlementInfos(PlatformArgs platformArgs, long tradeAccountId, string settlementDateBegin, string settlementDateEnd)
      {
        #if !SILVERLIGHT
        send_getSettlementInfos(platformArgs, tradeAccountId, settlementDateBegin, settlementDateEnd);
        return recv_getSettlementInfos();

        #else
        var asyncResult = Begin_getSettlementInfos(null, null, platformArgs, tradeAccountId, settlementDateBegin, settlementDateEnd);
        return End_getSettlementInfos(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSettlementInfos(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId, string settlementDateBegin, string settlementDateEnd)
      #else
      public void send_getSettlementInfos(PlatformArgs platformArgs, long tradeAccountId, string settlementDateBegin, string settlementDateEnd)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSettlementInfos", TMessageType.Call, seqid_));
        getSettlementInfos_args args = new getSettlementInfos_args();
        args.PlatformArgs = platformArgs;
        args.TradeAccountId = tradeAccountId;
        args.SettlementDateBegin = settlementDateBegin;
        args.SettlementDateEnd = settlementDateEnd;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TradeAccountSettlementInfo> recv_getSettlementInfos()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSettlementInfos_result result = new getSettlementInfos_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSettlementInfos failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getNetPositionSummaries(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId)
      {
        return send_getNetPositionSummaries(callback, state, platformArgs, tradeAccountId);
      }

      public List<TradeAccountNetPositionSummary> End_getNetPositionSummaries(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getNetPositionSummaries();
      }

      #endif

      /// <summary>
      /// 获取某个交易账号的所有净仓信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="tradeAccountId"></param>
      public List<TradeAccountNetPositionSummary> getNetPositionSummaries(PlatformArgs platformArgs, long tradeAccountId)
      {
        #if !SILVERLIGHT
        send_getNetPositionSummaries(platformArgs, tradeAccountId);
        return recv_getNetPositionSummaries();

        #else
        var asyncResult = Begin_getNetPositionSummaries(null, null, platformArgs, tradeAccountId);
        return End_getNetPositionSummaries(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getNetPositionSummaries(AsyncCallback callback, object state, PlatformArgs platformArgs, long tradeAccountId)
      #else
      public void send_getNetPositionSummaries(PlatformArgs platformArgs, long tradeAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getNetPositionSummaries", TMessageType.Call, seqid_));
        getNetPositionSummaries_args args = new getNetPositionSummaries_args();
        args.PlatformArgs = platformArgs;
        args.TradeAccountId = tradeAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TradeAccountNetPositionSummary> recv_getNetPositionSummaries()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNetPositionSummaries_result result = new getNetPositionSummaries_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNetPositionSummaries failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["clearAll"] = clearAll_Process;
        processMap_["getNowFund"] = getNowFund_Process;
        processMap_["getHisFunds"] = getHisFunds_Process;
        processMap_["getSettlementInfos"] = getSettlementInfos_Process;
        processMap_["getNetPositionSummaries"] = getNetPositionSummaries_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void clearAll_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        clearAll_args args = new clearAll_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        clearAll_result result = new clearAll_result();
        try {
          iface_.clearAll(args.PlatformArgs);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("clearAll", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNowFund_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNowFund_args args = new getNowFund_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNowFund_result result = new getNowFund_result();
        try {
          result.Success = iface_.getNowFund(args.PlatformArgs, args.TradeAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getNowFund", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getHisFunds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHisFunds_args args = new getHisFunds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHisFunds_result result = new getHisFunds_result();
        try {
          result.Success = iface_.getHisFunds(args.PlatformArgs, args.TradeAccountId, args.FundDateBegin, args.FundDateEnd);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getHisFunds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSettlementInfos_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSettlementInfos_args args = new getSettlementInfos_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSettlementInfos_result result = new getSettlementInfos_result();
        try {
          result.Success = iface_.getSettlementInfos(args.PlatformArgs, args.TradeAccountId, args.SettlementDateBegin, args.SettlementDateEnd);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getSettlementInfos", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNetPositionSummaries_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNetPositionSummaries_args args = new getNetPositionSummaries_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNetPositionSummaries_result result = new getNetPositionSummaries_result();
        try {
          result.Success = iface_.getNetPositionSummaries(args.PlatformArgs, args.TradeAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getNetPositionSummaries", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearAll_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
      }

      public clearAll_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearAll_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearAll_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearAll_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public clearAll_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearAll_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearAll_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNowFund_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _tradeAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long TradeAccountId
      {
        get
        {
          return _tradeAccountId;
        }
        set
        {
          __isset.tradeAccountId = true;
          SetProperty(ref _tradeAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool tradeAccountId;
      }

      public getNowFund_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                TradeAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNowFund_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.tradeAccountId) {
          field.Name = "tradeAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TradeAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNowFund_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",TradeAccountId: ");
        sb.Append(TradeAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNowFund_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<TradeAccountFund> _success;
      private ErrorInfo _err;

      public List<TradeAccountFund> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getNowFund_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TradeAccountFund>();
                  TList _list5 = iprot.ReadListBegin();
                  for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                  {
                    TradeAccountFund _elem7 = new TradeAccountFund();
                    _elem7 = new TradeAccountFund();
                    _elem7.Read(iprot);
                    Success.Add(_elem7);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNowFund_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TradeAccountFund _iter8 in Success)
              {
                _iter8.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNowFund_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (TradeAccountFund _iter9 in Success)
          {
            sb.Append(_iter9.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHisFunds_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _tradeAccountId;
      private string _fundDateBegin;
      private string _fundDateEnd;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long TradeAccountId
      {
        get
        {
          return _tradeAccountId;
        }
        set
        {
          __isset.tradeAccountId = true;
          SetProperty(ref _tradeAccountId, value);
        }
      }

      public string FundDateBegin
      {
        get
        {
          return _fundDateBegin;
        }
        set
        {
          __isset.fundDateBegin = true;
          SetProperty(ref _fundDateBegin, value);
        }
      }

      public string FundDateEnd
      {
        get
        {
          return _fundDateEnd;
        }
        set
        {
          __isset.fundDateEnd = true;
          SetProperty(ref _fundDateEnd, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool tradeAccountId;
        public bool fundDateBegin;
        public bool fundDateEnd;
      }

      public getHisFunds_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                TradeAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                FundDateBegin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                FundDateEnd = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHisFunds_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.tradeAccountId) {
          field.Name = "tradeAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TradeAccountId);
          oprot.WriteFieldEnd();
        }
        if (FundDateBegin != null && __isset.fundDateBegin) {
          field.Name = "fundDateBegin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FundDateBegin);
          oprot.WriteFieldEnd();
        }
        if (FundDateEnd != null && __isset.fundDateEnd) {
          field.Name = "fundDateEnd";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FundDateEnd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHisFunds_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",TradeAccountId: ");
        sb.Append(TradeAccountId);
        sb.Append(",FundDateBegin: ");
        sb.Append(FundDateBegin);
        sb.Append(",FundDateEnd: ");
        sb.Append(FundDateEnd);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHisFunds_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<TradeAccountFundHisItem> _success;
      private ErrorInfo _err;

      public List<TradeAccountFundHisItem> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getHisFunds_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TradeAccountFundHisItem>();
                  TList _list10 = iprot.ReadListBegin();
                  for( int _i11 = 0; _i11 < _list10.Count; ++_i11)
                  {
                    TradeAccountFundHisItem _elem12 = new TradeAccountFundHisItem();
                    _elem12 = new TradeAccountFundHisItem();
                    _elem12.Read(iprot);
                    Success.Add(_elem12);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHisFunds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TradeAccountFundHisItem _iter13 in Success)
              {
                _iter13.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHisFunds_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (TradeAccountFundHisItem _iter14 in Success)
          {
            sb.Append(_iter14.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettlementInfos_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _tradeAccountId;
      private string _settlementDateBegin;
      private string _settlementDateEnd;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long TradeAccountId
      {
        get
        {
          return _tradeAccountId;
        }
        set
        {
          __isset.tradeAccountId = true;
          SetProperty(ref _tradeAccountId, value);
        }
      }

      public string SettlementDateBegin
      {
        get
        {
          return _settlementDateBegin;
        }
        set
        {
          __isset.settlementDateBegin = true;
          SetProperty(ref _settlementDateBegin, value);
        }
      }

      public string SettlementDateEnd
      {
        get
        {
          return _settlementDateEnd;
        }
        set
        {
          __isset.settlementDateEnd = true;
          SetProperty(ref _settlementDateEnd, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool tradeAccountId;
        public bool settlementDateBegin;
        public bool settlementDateEnd;
      }

      public getSettlementInfos_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                TradeAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SettlementDateBegin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                SettlementDateEnd = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettlementInfos_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.tradeAccountId) {
          field.Name = "tradeAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TradeAccountId);
          oprot.WriteFieldEnd();
        }
        if (SettlementDateBegin != null && __isset.settlementDateBegin) {
          field.Name = "settlementDateBegin";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SettlementDateBegin);
          oprot.WriteFieldEnd();
        }
        if (SettlementDateEnd != null && __isset.settlementDateEnd) {
          field.Name = "settlementDateEnd";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SettlementDateEnd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSettlementInfos_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",TradeAccountId: ");
        sb.Append(TradeAccountId);
        sb.Append(",SettlementDateBegin: ");
        sb.Append(SettlementDateBegin);
        sb.Append(",SettlementDateEnd: ");
        sb.Append(SettlementDateEnd);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettlementInfos_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<TradeAccountSettlementInfo> _success;
      private ErrorInfo _err;

      public List<TradeAccountSettlementInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getSettlementInfos_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TradeAccountSettlementInfo>();
                  TList _list15 = iprot.ReadListBegin();
                  for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                  {
                    TradeAccountSettlementInfo _elem17 = new TradeAccountSettlementInfo();
                    _elem17 = new TradeAccountSettlementInfo();
                    _elem17.Read(iprot);
                    Success.Add(_elem17);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettlementInfos_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TradeAccountSettlementInfo _iter18 in Success)
              {
                _iter18.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSettlementInfos_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (TradeAccountSettlementInfo _iter19 in Success)
          {
            sb.Append(_iter19.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNetPositionSummaries_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _tradeAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long TradeAccountId
      {
        get
        {
          return _tradeAccountId;
        }
        set
        {
          __isset.tradeAccountId = true;
          SetProperty(ref _tradeAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool tradeAccountId;
      }

      public getNetPositionSummaries_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                TradeAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNetPositionSummaries_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.tradeAccountId) {
          field.Name = "tradeAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TradeAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNetPositionSummaries_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",TradeAccountId: ");
        sb.Append(TradeAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNetPositionSummaries_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<TradeAccountNetPositionSummary> _success;
      private ErrorInfo _err;

      public List<TradeAccountNetPositionSummary> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getNetPositionSummaries_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TradeAccountNetPositionSummary>();
                  TList _list20 = iprot.ReadListBegin();
                  for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                  {
                    TradeAccountNetPositionSummary _elem22 = new TradeAccountNetPositionSummary();
                    _elem22 = new TradeAccountNetPositionSummary();
                    _elem22.Read(iprot);
                    Success.Add(_elem22);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNetPositionSummaries_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TradeAccountNetPositionSummary _iter23 in Success)
              {
                _iter23.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNetPositionSummaries_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (TradeAccountNetPositionSummary _iter24 in Success)
          {
            sb.Append(_iter24.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
