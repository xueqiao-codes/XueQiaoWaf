/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.tradeaccount.data
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TradeAccountFund : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _tradeAccountId;
    private string _currencyNo;
    private string _currencyChannel;
    private double _credit;
    private double _preBalance;
    private double _deposit;
    private double _withdraw;
    private double _frozenMargin;
    private double _frozenCash;
    private double _currMargin;
    private double _commission;
    private double _closeProfit;
    private double _positionProfit;
    private double _available;
    private double _dynamicBenefit;
    private double _riskRate;
    private long _updateTimestampMs;

    public long TradeAccountId
    {
      get
      {
        return _tradeAccountId;
      }
      set
      {
        __isset.tradeAccountId = true;
        SetProperty(ref _tradeAccountId, value);
      }
    }

    public string CurrencyNo
    {
      get
      {
        return _currencyNo;
      }
      set
      {
        __isset.currencyNo = true;
        SetProperty(ref _currencyNo, value);
      }
    }

    public string CurrencyChannel
    {
      get
      {
        return _currencyChannel;
      }
      set
      {
        __isset.currencyChannel = true;
        SetProperty(ref _currencyChannel, value);
      }
    }

    public double Credit
    {
      get
      {
        return _credit;
      }
      set
      {
        __isset.credit = true;
        SetProperty(ref _credit, value);
      }
    }

    public double PreBalance
    {
      get
      {
        return _preBalance;
      }
      set
      {
        __isset.preBalance = true;
        SetProperty(ref _preBalance, value);
      }
    }

    public double Deposit
    {
      get
      {
        return _deposit;
      }
      set
      {
        __isset.deposit = true;
        SetProperty(ref _deposit, value);
      }
    }

    public double Withdraw
    {
      get
      {
        return _withdraw;
      }
      set
      {
        __isset.withdraw = true;
        SetProperty(ref _withdraw, value);
      }
    }

    public double FrozenMargin
    {
      get
      {
        return _frozenMargin;
      }
      set
      {
        __isset.frozenMargin = true;
        SetProperty(ref _frozenMargin, value);
      }
    }

    public double FrozenCash
    {
      get
      {
        return _frozenCash;
      }
      set
      {
        __isset.frozenCash = true;
        SetProperty(ref _frozenCash, value);
      }
    }

    public double CurrMargin
    {
      get
      {
        return _currMargin;
      }
      set
      {
        __isset.currMargin = true;
        SetProperty(ref _currMargin, value);
      }
    }

    public double Commission
    {
      get
      {
        return _commission;
      }
      set
      {
        __isset.commission = true;
        SetProperty(ref _commission, value);
      }
    }

    public double CloseProfit
    {
      get
      {
        return _closeProfit;
      }
      set
      {
        __isset.closeProfit = true;
        SetProperty(ref _closeProfit, value);
      }
    }

    public double PositionProfit
    {
      get
      {
        return _positionProfit;
      }
      set
      {
        __isset.positionProfit = true;
        SetProperty(ref _positionProfit, value);
      }
    }

    public double Available
    {
      get
      {
        return _available;
      }
      set
      {
        __isset.available = true;
        SetProperty(ref _available, value);
      }
    }

    public double DynamicBenefit
    {
      get
      {
        return _dynamicBenefit;
      }
      set
      {
        __isset.dynamicBenefit = true;
        SetProperty(ref _dynamicBenefit, value);
      }
    }

    public double RiskRate
    {
      get
      {
        return _riskRate;
      }
      set
      {
        __isset.riskRate = true;
        SetProperty(ref _riskRate, value);
      }
    }

    public long UpdateTimestampMs
    {
      get
      {
        return _updateTimestampMs;
      }
      set
      {
        __isset.updateTimestampMs = true;
        SetProperty(ref _updateTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tradeAccountId;
      public bool currencyNo;
      public bool currencyChannel;
      public bool credit;
      public bool preBalance;
      public bool deposit;
      public bool withdraw;
      public bool frozenMargin;
      public bool frozenCash;
      public bool currMargin;
      public bool commission;
      public bool closeProfit;
      public bool positionProfit;
      public bool available;
      public bool dynamicBenefit;
      public bool riskRate;
      public bool updateTimestampMs;
    }

    public TradeAccountFund() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              TradeAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              CurrencyNo = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              CurrencyChannel = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Credit = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              PreBalance = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              Deposit = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              Withdraw = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              FrozenMargin = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Double) {
              FrozenCash = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Double) {
              CurrMargin = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Double) {
              Commission = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Double) {
              CloseProfit = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Double) {
              PositionProfit = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Double) {
              Available = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Double) {
              DynamicBenefit = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.Double) {
              RiskRate = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I64) {
              UpdateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TradeAccountFund");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.tradeAccountId) {
        field.Name = "tradeAccountId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TradeAccountId);
        oprot.WriteFieldEnd();
      }
      if (CurrencyNo != null && __isset.currencyNo) {
        field.Name = "currencyNo";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CurrencyNo);
        oprot.WriteFieldEnd();
      }
      if (CurrencyChannel != null && __isset.currencyChannel) {
        field.Name = "currencyChannel";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CurrencyChannel);
        oprot.WriteFieldEnd();
      }
      if (__isset.credit) {
        field.Name = "credit";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Credit);
        oprot.WriteFieldEnd();
      }
      if (__isset.preBalance) {
        field.Name = "preBalance";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PreBalance);
        oprot.WriteFieldEnd();
      }
      if (__isset.deposit) {
        field.Name = "deposit";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Deposit);
        oprot.WriteFieldEnd();
      }
      if (__isset.withdraw) {
        field.Name = "withdraw";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Withdraw);
        oprot.WriteFieldEnd();
      }
      if (__isset.frozenMargin) {
        field.Name = "frozenMargin";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(FrozenMargin);
        oprot.WriteFieldEnd();
      }
      if (__isset.frozenCash) {
        field.Name = "frozenCash";
        field.Type = TType.Double;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(FrozenCash);
        oprot.WriteFieldEnd();
      }
      if (__isset.currMargin) {
        field.Name = "currMargin";
        field.Type = TType.Double;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(CurrMargin);
        oprot.WriteFieldEnd();
      }
      if (__isset.commission) {
        field.Name = "commission";
        field.Type = TType.Double;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Commission);
        oprot.WriteFieldEnd();
      }
      if (__isset.closeProfit) {
        field.Name = "closeProfit";
        field.Type = TType.Double;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(CloseProfit);
        oprot.WriteFieldEnd();
      }
      if (__isset.positionProfit) {
        field.Name = "positionProfit";
        field.Type = TType.Double;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PositionProfit);
        oprot.WriteFieldEnd();
      }
      if (__isset.available) {
        field.Name = "available";
        field.Type = TType.Double;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Available);
        oprot.WriteFieldEnd();
      }
      if (__isset.dynamicBenefit) {
        field.Name = "dynamicBenefit";
        field.Type = TType.Double;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(DynamicBenefit);
        oprot.WriteFieldEnd();
      }
      if (__isset.riskRate) {
        field.Name = "riskRate";
        field.Type = TType.Double;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(RiskRate);
        oprot.WriteFieldEnd();
      }
      if (__isset.updateTimestampMs) {
        field.Name = "updateTimestampMs";
        field.Type = TType.I64;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UpdateTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TradeAccountFund(");
      sb.Append("TradeAccountId: ");
      sb.Append(TradeAccountId);
      sb.Append(",CurrencyNo: ");
      sb.Append(CurrencyNo);
      sb.Append(",CurrencyChannel: ");
      sb.Append(CurrencyChannel);
      sb.Append(",Credit: ");
      sb.Append(Credit);
      sb.Append(",PreBalance: ");
      sb.Append(PreBalance);
      sb.Append(",Deposit: ");
      sb.Append(Deposit);
      sb.Append(",Withdraw: ");
      sb.Append(Withdraw);
      sb.Append(",FrozenMargin: ");
      sb.Append(FrozenMargin);
      sb.Append(",FrozenCash: ");
      sb.Append(FrozenCash);
      sb.Append(",CurrMargin: ");
      sb.Append(CurrMargin);
      sb.Append(",Commission: ");
      sb.Append(Commission);
      sb.Append(",CloseProfit: ");
      sb.Append(CloseProfit);
      sb.Append(",PositionProfit: ");
      sb.Append(PositionProfit);
      sb.Append(",Available: ");
      sb.Append(Available);
      sb.Append(",DynamicBenefit: ");
      sb.Append(DynamicBenefit);
      sb.Append(",RiskRate: ");
      sb.Append(RiskRate);
      sb.Append(",UpdateTimestampMs: ");
      sb.Append(UpdateTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
