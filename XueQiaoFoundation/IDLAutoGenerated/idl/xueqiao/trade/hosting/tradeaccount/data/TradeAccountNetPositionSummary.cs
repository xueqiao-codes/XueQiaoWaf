/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.tradeaccount.data
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TradeAccountNetPositionSummary : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _tradeAccountId;
    private string _sledExchangeCode;
    private short _sledCommodityType;
    private string _sledCommodityCode;
    private long _sledCommodityId;
    private string _sledContractCode;
    private long _netVolume;
    private double _averagePrice;
    private long _updateTimestampMs;

    public long TradeAccountId
    {
      get
      {
        return _tradeAccountId;
      }
      set
      {
        __isset.tradeAccountId = true;
        SetProperty(ref _tradeAccountId, value);
      }
    }

    public string SledExchangeCode
    {
      get
      {
        return _sledExchangeCode;
      }
      set
      {
        __isset.sledExchangeCode = true;
        SetProperty(ref _sledExchangeCode, value);
      }
    }

    public short SledCommodityType
    {
      get
      {
        return _sledCommodityType;
      }
      set
      {
        __isset.sledCommodityType = true;
        SetProperty(ref _sledCommodityType, value);
      }
    }

    public string SledCommodityCode
    {
      get
      {
        return _sledCommodityCode;
      }
      set
      {
        __isset.sledCommodityCode = true;
        SetProperty(ref _sledCommodityCode, value);
      }
    }

    public long SledCommodityId
    {
      get
      {
        return _sledCommodityId;
      }
      set
      {
        __isset.sledCommodityId = true;
        SetProperty(ref _sledCommodityId, value);
      }
    }

    public string SledContractCode
    {
      get
      {
        return _sledContractCode;
      }
      set
      {
        __isset.sledContractCode = true;
        SetProperty(ref _sledContractCode, value);
      }
    }

    public long NetVolume
    {
      get
      {
        return _netVolume;
      }
      set
      {
        __isset.netVolume = true;
        SetProperty(ref _netVolume, value);
      }
    }

    public double AveragePrice
    {
      get
      {
        return _averagePrice;
      }
      set
      {
        __isset.averagePrice = true;
        SetProperty(ref _averagePrice, value);
      }
    }

    public long UpdateTimestampMs
    {
      get
      {
        return _updateTimestampMs;
      }
      set
      {
        __isset.updateTimestampMs = true;
        SetProperty(ref _updateTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tradeAccountId;
      public bool sledExchangeCode;
      public bool sledCommodityType;
      public bool sledCommodityCode;
      public bool sledCommodityId;
      public bool sledContractCode;
      public bool netVolume;
      public bool averagePrice;
      public bool updateTimestampMs;
    }

    public TradeAccountNetPositionSummary() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              TradeAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              SledExchangeCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              SledCommodityType = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              SledCommodityCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              SledCommodityId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              SledContractCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              NetVolume = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              AveragePrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              UpdateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TradeAccountNetPositionSummary");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.tradeAccountId) {
        field.Name = "tradeAccountId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TradeAccountId);
        oprot.WriteFieldEnd();
      }
      if (SledExchangeCode != null && __isset.sledExchangeCode) {
        field.Name = "sledExchangeCode";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SledExchangeCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.sledCommodityType) {
        field.Name = "sledCommodityType";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(SledCommodityType);
        oprot.WriteFieldEnd();
      }
      if (SledCommodityCode != null && __isset.sledCommodityCode) {
        field.Name = "sledCommodityCode";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SledCommodityCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.sledCommodityId) {
        field.Name = "sledCommodityId";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SledCommodityId);
        oprot.WriteFieldEnd();
      }
      if (SledContractCode != null && __isset.sledContractCode) {
        field.Name = "sledContractCode";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SledContractCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.netVolume) {
        field.Name = "netVolume";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NetVolume);
        oprot.WriteFieldEnd();
      }
      if (__isset.averagePrice) {
        field.Name = "averagePrice";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(AveragePrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.updateTimestampMs) {
        field.Name = "updateTimestampMs";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UpdateTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TradeAccountNetPositionSummary(");
      sb.Append("TradeAccountId: ");
      sb.Append(TradeAccountId);
      sb.Append(",SledExchangeCode: ");
      sb.Append(SledExchangeCode);
      sb.Append(",SledCommodityType: ");
      sb.Append(SledCommodityType);
      sb.Append(",SledCommodityCode: ");
      sb.Append(SledCommodityCode);
      sb.Append(",SledCommodityId: ");
      sb.Append(SledCommodityId);
      sb.Append(",SledContractCode: ");
      sb.Append(SledContractCode);
      sb.Append(",NetVolume: ");
      sb.Append(NetVolume);
      sb.Append(",AveragePrice: ");
      sb.Append(AveragePrice);
      sb.Append(",UpdateTimestampMs: ");
      sb.Append(UpdateTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
