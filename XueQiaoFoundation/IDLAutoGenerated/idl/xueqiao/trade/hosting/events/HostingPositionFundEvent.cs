/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.events
{

  /// <summary>
  /// 实时持仓的资金变化信息事件，使用 PushApi 推送
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingPositionFundEvent : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private xueqiao.trade.hosting.asset.thriftapi.HostingPositionFund _positionFund;
    private long _eventCreateTimestampMs;

    public xueqiao.trade.hosting.asset.thriftapi.HostingPositionFund PositionFund
    {
      get
      {
        return _positionFund;
      }
      set
      {
        __isset.positionFund = true;
        SetProperty(ref _positionFund, value);
      }
    }

    public long EventCreateTimestampMs
    {
      get
      {
        return _eventCreateTimestampMs;
      }
      set
      {
        __isset.eventCreateTimestampMs = true;
        SetProperty(ref _eventCreateTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool positionFund;
      public bool eventCreateTimestampMs;
    }

    public HostingPositionFundEvent() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              PositionFund = new xueqiao.trade.hosting.asset.thriftapi.HostingPositionFund();
              PositionFund.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              EventCreateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingPositionFundEvent");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (PositionFund != null && __isset.positionFund) {
        field.Name = "positionFund";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        PositionFund.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.eventCreateTimestampMs) {
        field.Name = "eventCreateTimestampMs";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EventCreateTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingPositionFundEvent(");
      sb.Append("PositionFund: ");
      sb.Append(PositionFund== null ? "<null>" : PositionFund.ToString());
      sb.Append(",EventCreateTimestampMs: ");
      sb.Append(EventCreateTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
