/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.asset.thriftapi
{

  /// <summary>
  /// 托管机子账户资金信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingSubAccountFund : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _subAccountId;
    private string _currency;
    private double _balance;
    private double _depositAmount;
    private double _withdrawAmount;
    private double _creditAmount;
    private long _createTimestampMs;
    private long _lastModifyTimestampMs;

    public long SubAccountId
    {
      get
      {
        return _subAccountId;
      }
      set
      {
        __isset.subAccountId = true;
        SetProperty(ref _subAccountId, value);
      }
    }

    public string Currency
    {
      get
      {
        return _currency;
      }
      set
      {
        __isset.currency = true;
        SetProperty(ref _currency, value);
      }
    }

    public double Balance
    {
      get
      {
        return _balance;
      }
      set
      {
        __isset.balance = true;
        SetProperty(ref _balance, value);
      }
    }

    public double DepositAmount
    {
      get
      {
        return _depositAmount;
      }
      set
      {
        __isset.depositAmount = true;
        SetProperty(ref _depositAmount, value);
      }
    }

    public double WithdrawAmount
    {
      get
      {
        return _withdrawAmount;
      }
      set
      {
        __isset.withdrawAmount = true;
        SetProperty(ref _withdrawAmount, value);
      }
    }

    public double CreditAmount
    {
      get
      {
        return _creditAmount;
      }
      set
      {
        __isset.creditAmount = true;
        SetProperty(ref _creditAmount, value);
      }
    }

    public long CreateTimestampMs
    {
      get
      {
        return _createTimestampMs;
      }
      set
      {
        __isset.createTimestampMs = true;
        SetProperty(ref _createTimestampMs, value);
      }
    }

    public long LastModifyTimestampMs
    {
      get
      {
        return _lastModifyTimestampMs;
      }
      set
      {
        __isset.lastModifyTimestampMs = true;
        SetProperty(ref _lastModifyTimestampMs, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool subAccountId;
      public bool currency;
      public bool balance;
      public bool depositAmount;
      public bool withdrawAmount;
      public bool creditAmount;
      public bool createTimestampMs;
      public bool lastModifyTimestampMs;
    }

    public HostingSubAccountFund() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              SubAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Currency = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              Balance = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              DepositAmount = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              WithdrawAmount = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              CreditAmount = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              CreateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              LastModifyTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingSubAccountFund");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.subAccountId) {
        field.Name = "subAccountId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SubAccountId);
        oprot.WriteFieldEnd();
      }
      if (Currency != null && __isset.currency) {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Currency);
        oprot.WriteFieldEnd();
      }
      if (__isset.balance) {
        field.Name = "balance";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Balance);
        oprot.WriteFieldEnd();
      }
      if (__isset.depositAmount) {
        field.Name = "depositAmount";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(DepositAmount);
        oprot.WriteFieldEnd();
      }
      if (__isset.withdrawAmount) {
        field.Name = "withdrawAmount";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(WithdrawAmount);
        oprot.WriteFieldEnd();
      }
      if (__isset.creditAmount) {
        field.Name = "creditAmount";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(CreditAmount);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestampMs) {
        field.Name = "createTimestampMs";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModifyTimestampMs) {
        field.Name = "lastModifyTimestampMs";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModifyTimestampMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingSubAccountFund(");
      sb.Append("SubAccountId: ");
      sb.Append(SubAccountId);
      sb.Append(",Currency: ");
      sb.Append(Currency);
      sb.Append(",Balance: ");
      sb.Append(Balance);
      sb.Append(",DepositAmount: ");
      sb.Append(DepositAmount);
      sb.Append(",WithdrawAmount: ");
      sb.Append(WithdrawAmount);
      sb.Append(",CreditAmount: ");
      sb.Append(CreditAmount);
      sb.Append(",CreateTimestampMs: ");
      sb.Append(CreateTimestampMs);
      sb.Append(",LastModifyTimestampMs: ");
      sb.Append(LastModifyTimestampMs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
