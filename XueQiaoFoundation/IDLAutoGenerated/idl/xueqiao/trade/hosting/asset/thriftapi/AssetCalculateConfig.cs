/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.asset.thriftapi
{

  /// <summary>
  /// 计算参数
  /// 成交时的商品设置信息, 做存档排查(来源: 商品信息或者用户设置)
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AssetCalculateConfig : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _sledCommodityId;
    private string _currency;
    private double _contractSize;
    private double _chargeUnit;
    private CommissionFee _commissionFee;
    private Margin _margin;
    private long _sledContractId;
    private double _openCloseFee;
    private double _initialMargin;
    private double _sellInitialMargin;
    private CalculateMode _commissionCalculateMode;
    private CalculateMode _marginCalculateMode;

    public long SledCommodityId
    {
      get
      {
        return _sledCommodityId;
      }
      set
      {
        __isset.sledCommodityId = true;
        SetProperty(ref _sledCommodityId, value);
      }
    }

    public string Currency
    {
      get
      {
        return _currency;
      }
      set
      {
        __isset.currency = true;
        SetProperty(ref _currency, value);
      }
    }

    public double ContractSize
    {
      get
      {
        return _contractSize;
      }
      set
      {
        __isset.contractSize = true;
        SetProperty(ref _contractSize, value);
      }
    }

    public double ChargeUnit
    {
      get
      {
        return _chargeUnit;
      }
      set
      {
        __isset.chargeUnit = true;
        SetProperty(ref _chargeUnit, value);
      }
    }

    public CommissionFee CommissionFee
    {
      get
      {
        return _commissionFee;
      }
      set
      {
        __isset.commissionFee = true;
        SetProperty(ref _commissionFee, value);
      }
    }

    public Margin Margin
    {
      get
      {
        return _margin;
      }
      set
      {
        __isset.margin = true;
        SetProperty(ref _margin, value);
      }
    }

    public long SledContractId
    {
      get
      {
        return _sledContractId;
      }
      set
      {
        __isset.sledContractId = true;
        SetProperty(ref _sledContractId, value);
      }
    }

    public double OpenCloseFee
    {
      get
      {
        return _openCloseFee;
      }
      set
      {
        __isset.openCloseFee = true;
        SetProperty(ref _openCloseFee, value);
      }
    }

    public double InitialMargin
    {
      get
      {
        return _initialMargin;
      }
      set
      {
        __isset.initialMargin = true;
        SetProperty(ref _initialMargin, value);
      }
    }

    public double SellInitialMargin
    {
      get
      {
        return _sellInitialMargin;
      }
      set
      {
        __isset.sellInitialMargin = true;
        SetProperty(ref _sellInitialMargin, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="CalculateMode"/>
    /// </summary>
    public CalculateMode CommissionCalculateMode
    {
      get
      {
        return _commissionCalculateMode;
      }
      set
      {
        __isset.commissionCalculateMode = true;
        SetProperty(ref _commissionCalculateMode, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="CalculateMode"/>
    /// </summary>
    public CalculateMode MarginCalculateMode
    {
      get
      {
        return _marginCalculateMode;
      }
      set
      {
        __isset.marginCalculateMode = true;
        SetProperty(ref _marginCalculateMode, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sledCommodityId;
      public bool currency;
      public bool contractSize;
      public bool chargeUnit;
      public bool commissionFee;
      public bool margin;
      public bool sledContractId;
      public bool openCloseFee;
      public bool initialMargin;
      public bool sellInitialMargin;
      public bool commissionCalculateMode;
      public bool marginCalculateMode;
    }

    public AssetCalculateConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              SledCommodityId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Currency = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              ContractSize = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              ChargeUnit = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              CommissionFee = new CommissionFee();
              CommissionFee.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              Margin = new Margin();
              Margin.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I64) {
              SledContractId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              OpenCloseFee = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              InitialMargin = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              SellInitialMargin = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              CommissionCalculateMode = (CalculateMode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              MarginCalculateMode = (CalculateMode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AssetCalculateConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.sledCommodityId) {
        field.Name = "sledCommodityId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SledCommodityId);
        oprot.WriteFieldEnd();
      }
      if (Currency != null && __isset.currency) {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Currency);
        oprot.WriteFieldEnd();
      }
      if (__isset.contractSize) {
        field.Name = "contractSize";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ContractSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.chargeUnit) {
        field.Name = "chargeUnit";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ChargeUnit);
        oprot.WriteFieldEnd();
      }
      if (__isset.openCloseFee) {
        field.Name = "openCloseFee";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(OpenCloseFee);
        oprot.WriteFieldEnd();
      }
      if (__isset.initialMargin) {
        field.Name = "initialMargin";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(InitialMargin);
        oprot.WriteFieldEnd();
      }
      if (__isset.sellInitialMargin) {
        field.Name = "sellInitialMargin";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(SellInitialMargin);
        oprot.WriteFieldEnd();
      }
      if (__isset.commissionCalculateMode) {
        field.Name = "commissionCalculateMode";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)CommissionCalculateMode);
        oprot.WriteFieldEnd();
      }
      if (__isset.marginCalculateMode) {
        field.Name = "marginCalculateMode";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)MarginCalculateMode);
        oprot.WriteFieldEnd();
      }
      if (CommissionFee != null && __isset.commissionFee) {
        field.Name = "commissionFee";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        CommissionFee.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Margin != null && __isset.margin) {
        field.Name = "margin";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        Margin.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.sledContractId) {
        field.Name = "sledContractId";
        field.Type = TType.I64;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SledContractId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AssetCalculateConfig(");
      sb.Append("SledCommodityId: ");
      sb.Append(SledCommodityId);
      sb.Append(",Currency: ");
      sb.Append(Currency);
      sb.Append(",ContractSize: ");
      sb.Append(ContractSize);
      sb.Append(",ChargeUnit: ");
      sb.Append(ChargeUnit);
      sb.Append(",CommissionFee: ");
      sb.Append(CommissionFee== null ? "<null>" : CommissionFee.ToString());
      sb.Append(",Margin: ");
      sb.Append(Margin== null ? "<null>" : Margin.ToString());
      sb.Append(",SledContractId: ");
      sb.Append(SledContractId);
      sb.Append(",OpenCloseFee: ");
      sb.Append(OpenCloseFee);
      sb.Append(",InitialMargin: ");
      sb.Append(InitialMargin);
      sb.Append(",SellInitialMargin: ");
      sb.Append(SellInitialMargin);
      sb.Append(",CommissionCalculateMode: ");
      sb.Append(CommissionCalculateMode);
      sb.Append(",MarginCalculateMode: ");
      sb.Append(MarginCalculateMode);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
