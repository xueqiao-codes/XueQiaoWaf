/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.asset.thriftapi
{
  public partial class TradeHostingAsset {
    public interface Iface {
      /// <summary>
      /// 查询实时雪橇合约持仓信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      HostingSledContractPositionPage getHostingSledContractPosition(PlatformArgs platformArgs, ReqHostingSledContractPositionOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getHostingSledContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingSledContractPositionOption option, IndexedPageOption pageOption);
      HostingSledContractPositionPage End_getHostingSledContractPosition(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询子账号实时资金
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      HostingFundPage getHostingSubAccountFund(PlatformArgs platformArgs, ReqHostingFundOption option);
      #if SILVERLIGHT
      IAsyncResult Begin_getHostingSubAccountFund(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingFundOption option);
      HostingFundPage End_getHostingSubAccountFund(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 子账号出入金
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="fundChange"></param>
      HostingSubAccountFund changeSubAccountFund(PlatformArgs platformArgs, FundChange fundChange);
      #if SILVERLIGHT
      IAsyncResult Begin_changeSubAccountFund(AsyncCallback callback, object state, PlatformArgs platformArgs, FundChange fundChange);
      HostingSubAccountFund End_changeSubAccountFund(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 子账号设置信用额度
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="amountChange"></param>
      HostingSubAccountFund setSubAccountCreditAmount(PlatformArgs platformArgs, CreditAmountChange amountChange);
      #if SILVERLIGHT
      IAsyncResult Begin_setSubAccountCreditAmount(AsyncCallback callback, object state, PlatformArgs platformArgs, CreditAmountChange amountChange);
      HostingSubAccountFund End_setSubAccountCreditAmount(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询子账号持仓结算信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      SettlementPositionDetailPage getSettlementPositionDetail(PlatformArgs platformArgs, ReqSettlementPositionDetailOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getSettlementPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqSettlementPositionDetailOption option, IndexedPageOption pageOption);
      SettlementPositionDetailPage End_getSettlementPositionDetail(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询子账号出入金记录
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      HostingSubAccountMoneyRecordPage getHostingSubAccountMoneyRecord(PlatformArgs platformArgs, ReqMoneyRecordOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getHostingSubAccountMoneyRecord(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqMoneyRecordOption option, IndexedPageOption pageOption);
      HostingSubAccountMoneyRecordPage End_getHostingSubAccountMoneyRecord(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询实时雪橇合约持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      AssetTradeDetailPage getAssetPositionTradeDetail(PlatformArgs platformArgs, ReqHostingAssetTradeDetailOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getAssetPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingAssetTradeDetailOption option, IndexedPageOption pageOption);
      AssetTradeDetailPage End_getAssetPositionTradeDetail(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询子账号持仓结算的成交明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      AssetTradeDetailPage getSettlementPositionTradeDetail(PlatformArgs platformArgs, ReqSettlementPositionTradeDetailOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getSettlementPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqSettlementPositionTradeDetailOption option, IndexedPageOption pageOption);
      AssetTradeDetailPage End_getSettlementPositionTradeDetail(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询子账号的雪橇合约持仓量
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      HostingPositionVolumePage getHostingPositionVolume(PlatformArgs platformArgs, ReqHostingPositionVolumeOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getHostingPositionVolume(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingPositionVolumeOption option, IndexedPageOption pageOption);
      HostingPositionVolumePage End_getHostingPositionVolume(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询子账号的雪橇合约实时持仓资金
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      HostingPositionFundPage getHostingPositionFund(PlatformArgs platformArgs, ReqHostingPositionFundOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getHostingPositionFund(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingPositionFundOption option, IndexedPageOption pageOption);
      HostingPositionFundPage End_getHostingPositionFund(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询子账号的历史资金信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      HostingFundPage getSubAccountFundHistory(PlatformArgs platformArgs, ReqSubAccountFundHistoryOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getSubAccountFundHistory(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqSubAccountFundHistoryOption option, IndexedPageOption pageOption);
      HostingFundPage End_getSubAccountFundHistory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 删除操作账号中过期合约的持仓(合约已经过期，而持仓在其他地方平掉，但是在雪橇的操作账号中依然显示存在)
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      /// <param name="sledContractId"></param>
      void deleteExpiredContractPosition(PlatformArgs platformArgs, long subAccountId, long sledContractId);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteExpiredContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long sledContractId);
      void End_deleteExpiredContractPosition(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询雪橇合约资金账户持仓的成交明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      AssetTradeDetailPage getTradeAccountPositionTradeDetail(PlatformArgs platformArgs, ReqTradeAccountPositionTradeDetailOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getTradeAccountPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqTradeAccountPositionTradeDetailOption option, IndexedPageOption pageOption);
      AssetTradeDetailPage End_getTradeAccountPositionTradeDetail(IAsyncResult asyncResult);
      #endif
      TradeAccountPositionPage getTradeAccountPosition(PlatformArgs platformArgs, ReqTradeAccountPositionOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getTradeAccountPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqTradeAccountPositionOption option, IndexedPageOption pageOption);
      TradeAccountPositionPage End_getTradeAccountPosition(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp assignPosition(PlatformArgs platformArgs, List<xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned> positonAssigneds);
      #if SILVERLIGHT
      IAsyncResult Begin_assignPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, List<xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned> positonAssigneds);
      xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp End_assignPosition(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 移除托管机上持仓资金的所有数据记录
      /// </summary>
      /// <param name="platformArgs"></param>
      void removeAllAssetData(PlatformArgs platformArgs);
      #if SILVERLIGHT
      IAsyncResult Begin_removeAllAssetData(AsyncCallback callback, object state, PlatformArgs platformArgs);
      void End_removeAllAssetData(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHostingSledContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingSledContractPositionOption option, IndexedPageOption pageOption)
      {
        return send_getHostingSledContractPosition(callback, state, platformArgs, option, pageOption);
      }

      public HostingSledContractPositionPage End_getHostingSledContractPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHostingSledContractPosition();
      }

      #endif

      /// <summary>
      /// 查询实时雪橇合约持仓信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public HostingSledContractPositionPage getHostingSledContractPosition(PlatformArgs platformArgs, ReqHostingSledContractPositionOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getHostingSledContractPosition(platformArgs, option, pageOption);
        return recv_getHostingSledContractPosition();

        #else
        var asyncResult = Begin_getHostingSledContractPosition(null, null, platformArgs, option, pageOption);
        return End_getHostingSledContractPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHostingSledContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingSledContractPositionOption option, IndexedPageOption pageOption)
      #else
      public void send_getHostingSledContractPosition(PlatformArgs platformArgs, ReqHostingSledContractPositionOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHostingSledContractPosition", TMessageType.Call, seqid_));
        getHostingSledContractPosition_args args = new getHostingSledContractPosition_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingSledContractPositionPage recv_getHostingSledContractPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHostingSledContractPosition_result result = new getHostingSledContractPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHostingSledContractPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHostingSubAccountFund(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingFundOption option)
      {
        return send_getHostingSubAccountFund(callback, state, platformArgs, option);
      }

      public HostingFundPage End_getHostingSubAccountFund(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHostingSubAccountFund();
      }

      #endif

      /// <summary>
      /// 查询子账号实时资金
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      public HostingFundPage getHostingSubAccountFund(PlatformArgs platformArgs, ReqHostingFundOption option)
      {
        #if !SILVERLIGHT
        send_getHostingSubAccountFund(platformArgs, option);
        return recv_getHostingSubAccountFund();

        #else
        var asyncResult = Begin_getHostingSubAccountFund(null, null, platformArgs, option);
        return End_getHostingSubAccountFund(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHostingSubAccountFund(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingFundOption option)
      #else
      public void send_getHostingSubAccountFund(PlatformArgs platformArgs, ReqHostingFundOption option)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHostingSubAccountFund", TMessageType.Call, seqid_));
        getHostingSubAccountFund_args args = new getHostingSubAccountFund_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingFundPage recv_getHostingSubAccountFund()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHostingSubAccountFund_result result = new getHostingSubAccountFund_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHostingSubAccountFund failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_changeSubAccountFund(AsyncCallback callback, object state, PlatformArgs platformArgs, FundChange fundChange)
      {
        return send_changeSubAccountFund(callback, state, platformArgs, fundChange);
      }

      public HostingSubAccountFund End_changeSubAccountFund(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_changeSubAccountFund();
      }

      #endif

      /// <summary>
      /// 子账号出入金
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="fundChange"></param>
      public HostingSubAccountFund changeSubAccountFund(PlatformArgs platformArgs, FundChange fundChange)
      {
        #if !SILVERLIGHT
        send_changeSubAccountFund(platformArgs, fundChange);
        return recv_changeSubAccountFund();

        #else
        var asyncResult = Begin_changeSubAccountFund(null, null, platformArgs, fundChange);
        return End_changeSubAccountFund(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_changeSubAccountFund(AsyncCallback callback, object state, PlatformArgs platformArgs, FundChange fundChange)
      #else
      public void send_changeSubAccountFund(PlatformArgs platformArgs, FundChange fundChange)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("changeSubAccountFund", TMessageType.Call, seqid_));
        changeSubAccountFund_args args = new changeSubAccountFund_args();
        args.PlatformArgs = platformArgs;
        args.FundChange = fundChange;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingSubAccountFund recv_changeSubAccountFund()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        changeSubAccountFund_result result = new changeSubAccountFund_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "changeSubAccountFund failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setSubAccountCreditAmount(AsyncCallback callback, object state, PlatformArgs platformArgs, CreditAmountChange amountChange)
      {
        return send_setSubAccountCreditAmount(callback, state, platformArgs, amountChange);
      }

      public HostingSubAccountFund End_setSubAccountCreditAmount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_setSubAccountCreditAmount();
      }

      #endif

      /// <summary>
      /// 子账号设置信用额度
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="amountChange"></param>
      public HostingSubAccountFund setSubAccountCreditAmount(PlatformArgs platformArgs, CreditAmountChange amountChange)
      {
        #if !SILVERLIGHT
        send_setSubAccountCreditAmount(platformArgs, amountChange);
        return recv_setSubAccountCreditAmount();

        #else
        var asyncResult = Begin_setSubAccountCreditAmount(null, null, platformArgs, amountChange);
        return End_setSubAccountCreditAmount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setSubAccountCreditAmount(AsyncCallback callback, object state, PlatformArgs platformArgs, CreditAmountChange amountChange)
      #else
      public void send_setSubAccountCreditAmount(PlatformArgs platformArgs, CreditAmountChange amountChange)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setSubAccountCreditAmount", TMessageType.Call, seqid_));
        setSubAccountCreditAmount_args args = new setSubAccountCreditAmount_args();
        args.PlatformArgs = platformArgs;
        args.AmountChange = amountChange;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingSubAccountFund recv_setSubAccountCreditAmount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setSubAccountCreditAmount_result result = new setSubAccountCreditAmount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setSubAccountCreditAmount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSettlementPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqSettlementPositionDetailOption option, IndexedPageOption pageOption)
      {
        return send_getSettlementPositionDetail(callback, state, platformArgs, option, pageOption);
      }

      public SettlementPositionDetailPage End_getSettlementPositionDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSettlementPositionDetail();
      }

      #endif

      /// <summary>
      /// 查询子账号持仓结算信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public SettlementPositionDetailPage getSettlementPositionDetail(PlatformArgs platformArgs, ReqSettlementPositionDetailOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getSettlementPositionDetail(platformArgs, option, pageOption);
        return recv_getSettlementPositionDetail();

        #else
        var asyncResult = Begin_getSettlementPositionDetail(null, null, platformArgs, option, pageOption);
        return End_getSettlementPositionDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSettlementPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqSettlementPositionDetailOption option, IndexedPageOption pageOption)
      #else
      public void send_getSettlementPositionDetail(PlatformArgs platformArgs, ReqSettlementPositionDetailOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSettlementPositionDetail", TMessageType.Call, seqid_));
        getSettlementPositionDetail_args args = new getSettlementPositionDetail_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SettlementPositionDetailPage recv_getSettlementPositionDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSettlementPositionDetail_result result = new getSettlementPositionDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSettlementPositionDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHostingSubAccountMoneyRecord(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqMoneyRecordOption option, IndexedPageOption pageOption)
      {
        return send_getHostingSubAccountMoneyRecord(callback, state, platformArgs, option, pageOption);
      }

      public HostingSubAccountMoneyRecordPage End_getHostingSubAccountMoneyRecord(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHostingSubAccountMoneyRecord();
      }

      #endif

      /// <summary>
      /// 查询子账号出入金记录
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public HostingSubAccountMoneyRecordPage getHostingSubAccountMoneyRecord(PlatformArgs platformArgs, ReqMoneyRecordOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getHostingSubAccountMoneyRecord(platformArgs, option, pageOption);
        return recv_getHostingSubAccountMoneyRecord();

        #else
        var asyncResult = Begin_getHostingSubAccountMoneyRecord(null, null, platformArgs, option, pageOption);
        return End_getHostingSubAccountMoneyRecord(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHostingSubAccountMoneyRecord(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqMoneyRecordOption option, IndexedPageOption pageOption)
      #else
      public void send_getHostingSubAccountMoneyRecord(PlatformArgs platformArgs, ReqMoneyRecordOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHostingSubAccountMoneyRecord", TMessageType.Call, seqid_));
        getHostingSubAccountMoneyRecord_args args = new getHostingSubAccountMoneyRecord_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingSubAccountMoneyRecordPage recv_getHostingSubAccountMoneyRecord()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHostingSubAccountMoneyRecord_result result = new getHostingSubAccountMoneyRecord_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHostingSubAccountMoneyRecord failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAssetPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingAssetTradeDetailOption option, IndexedPageOption pageOption)
      {
        return send_getAssetPositionTradeDetail(callback, state, platformArgs, option, pageOption);
      }

      public AssetTradeDetailPage End_getAssetPositionTradeDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAssetPositionTradeDetail();
      }

      #endif

      /// <summary>
      /// 查询实时雪橇合约持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public AssetTradeDetailPage getAssetPositionTradeDetail(PlatformArgs platformArgs, ReqHostingAssetTradeDetailOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getAssetPositionTradeDetail(platformArgs, option, pageOption);
        return recv_getAssetPositionTradeDetail();

        #else
        var asyncResult = Begin_getAssetPositionTradeDetail(null, null, platformArgs, option, pageOption);
        return End_getAssetPositionTradeDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAssetPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingAssetTradeDetailOption option, IndexedPageOption pageOption)
      #else
      public void send_getAssetPositionTradeDetail(PlatformArgs platformArgs, ReqHostingAssetTradeDetailOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAssetPositionTradeDetail", TMessageType.Call, seqid_));
        getAssetPositionTradeDetail_args args = new getAssetPositionTradeDetail_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public AssetTradeDetailPage recv_getAssetPositionTradeDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAssetPositionTradeDetail_result result = new getAssetPositionTradeDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAssetPositionTradeDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSettlementPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqSettlementPositionTradeDetailOption option, IndexedPageOption pageOption)
      {
        return send_getSettlementPositionTradeDetail(callback, state, platformArgs, option, pageOption);
      }

      public AssetTradeDetailPage End_getSettlementPositionTradeDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSettlementPositionTradeDetail();
      }

      #endif

      /// <summary>
      /// 查询子账号持仓结算的成交明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public AssetTradeDetailPage getSettlementPositionTradeDetail(PlatformArgs platformArgs, ReqSettlementPositionTradeDetailOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getSettlementPositionTradeDetail(platformArgs, option, pageOption);
        return recv_getSettlementPositionTradeDetail();

        #else
        var asyncResult = Begin_getSettlementPositionTradeDetail(null, null, platformArgs, option, pageOption);
        return End_getSettlementPositionTradeDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSettlementPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqSettlementPositionTradeDetailOption option, IndexedPageOption pageOption)
      #else
      public void send_getSettlementPositionTradeDetail(PlatformArgs platformArgs, ReqSettlementPositionTradeDetailOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSettlementPositionTradeDetail", TMessageType.Call, seqid_));
        getSettlementPositionTradeDetail_args args = new getSettlementPositionTradeDetail_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public AssetTradeDetailPage recv_getSettlementPositionTradeDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSettlementPositionTradeDetail_result result = new getSettlementPositionTradeDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSettlementPositionTradeDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHostingPositionVolume(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingPositionVolumeOption option, IndexedPageOption pageOption)
      {
        return send_getHostingPositionVolume(callback, state, platformArgs, option, pageOption);
      }

      public HostingPositionVolumePage End_getHostingPositionVolume(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHostingPositionVolume();
      }

      #endif

      /// <summary>
      /// 查询子账号的雪橇合约持仓量
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public HostingPositionVolumePage getHostingPositionVolume(PlatformArgs platformArgs, ReqHostingPositionVolumeOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getHostingPositionVolume(platformArgs, option, pageOption);
        return recv_getHostingPositionVolume();

        #else
        var asyncResult = Begin_getHostingPositionVolume(null, null, platformArgs, option, pageOption);
        return End_getHostingPositionVolume(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHostingPositionVolume(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingPositionVolumeOption option, IndexedPageOption pageOption)
      #else
      public void send_getHostingPositionVolume(PlatformArgs platformArgs, ReqHostingPositionVolumeOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHostingPositionVolume", TMessageType.Call, seqid_));
        getHostingPositionVolume_args args = new getHostingPositionVolume_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingPositionVolumePage recv_getHostingPositionVolume()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHostingPositionVolume_result result = new getHostingPositionVolume_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHostingPositionVolume failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHostingPositionFund(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingPositionFundOption option, IndexedPageOption pageOption)
      {
        return send_getHostingPositionFund(callback, state, platformArgs, option, pageOption);
      }

      public HostingPositionFundPage End_getHostingPositionFund(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHostingPositionFund();
      }

      #endif

      /// <summary>
      /// 查询子账号的雪橇合约实时持仓资金
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public HostingPositionFundPage getHostingPositionFund(PlatformArgs platformArgs, ReqHostingPositionFundOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getHostingPositionFund(platformArgs, option, pageOption);
        return recv_getHostingPositionFund();

        #else
        var asyncResult = Begin_getHostingPositionFund(null, null, platformArgs, option, pageOption);
        return End_getHostingPositionFund(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHostingPositionFund(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqHostingPositionFundOption option, IndexedPageOption pageOption)
      #else
      public void send_getHostingPositionFund(PlatformArgs platformArgs, ReqHostingPositionFundOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHostingPositionFund", TMessageType.Call, seqid_));
        getHostingPositionFund_args args = new getHostingPositionFund_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingPositionFundPage recv_getHostingPositionFund()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHostingPositionFund_result result = new getHostingPositionFund_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHostingPositionFund failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSubAccountFundHistory(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqSubAccountFundHistoryOption option, IndexedPageOption pageOption)
      {
        return send_getSubAccountFundHistory(callback, state, platformArgs, option, pageOption);
      }

      public HostingFundPage End_getSubAccountFundHistory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSubAccountFundHistory();
      }

      #endif

      /// <summary>
      /// 查询子账号的历史资金信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public HostingFundPage getSubAccountFundHistory(PlatformArgs platformArgs, ReqSubAccountFundHistoryOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getSubAccountFundHistory(platformArgs, option, pageOption);
        return recv_getSubAccountFundHistory();

        #else
        var asyncResult = Begin_getSubAccountFundHistory(null, null, platformArgs, option, pageOption);
        return End_getSubAccountFundHistory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSubAccountFundHistory(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqSubAccountFundHistoryOption option, IndexedPageOption pageOption)
      #else
      public void send_getSubAccountFundHistory(PlatformArgs platformArgs, ReqSubAccountFundHistoryOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSubAccountFundHistory", TMessageType.Call, seqid_));
        getSubAccountFundHistory_args args = new getSubAccountFundHistory_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingFundPage recv_getSubAccountFundHistory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSubAccountFundHistory_result result = new getSubAccountFundHistory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSubAccountFundHistory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteExpiredContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long sledContractId)
      {
        return send_deleteExpiredContractPosition(callback, state, platformArgs, subAccountId, sledContractId);
      }

      public void End_deleteExpiredContractPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deleteExpiredContractPosition();
      }

      #endif

      /// <summary>
      /// 删除操作账号中过期合约的持仓(合约已经过期，而持仓在其他地方平掉，但是在雪橇的操作账号中依然显示存在)
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="subAccountId"></param>
      /// <param name="sledContractId"></param>
      public void deleteExpiredContractPosition(PlatformArgs platformArgs, long subAccountId, long sledContractId)
      {
        #if !SILVERLIGHT
        send_deleteExpiredContractPosition(platformArgs, subAccountId, sledContractId);
        recv_deleteExpiredContractPosition();

        #else
        var asyncResult = Begin_deleteExpiredContractPosition(null, null, platformArgs, subAccountId, sledContractId);
        End_deleteExpiredContractPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteExpiredContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, long subAccountId, long sledContractId)
      #else
      public void send_deleteExpiredContractPosition(PlatformArgs platformArgs, long subAccountId, long sledContractId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteExpiredContractPosition", TMessageType.Call, seqid_));
        deleteExpiredContractPosition_args args = new deleteExpiredContractPosition_args();
        args.PlatformArgs = platformArgs;
        args.SubAccountId = subAccountId;
        args.SledContractId = sledContractId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deleteExpiredContractPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteExpiredContractPosition_result result = new deleteExpiredContractPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTradeAccountPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqTradeAccountPositionTradeDetailOption option, IndexedPageOption pageOption)
      {
        return send_getTradeAccountPositionTradeDetail(callback, state, platformArgs, option, pageOption);
      }

      public AssetTradeDetailPage End_getTradeAccountPositionTradeDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTradeAccountPositionTradeDetail();
      }

      #endif

      /// <summary>
      /// 查询雪橇合约资金账户持仓的成交明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public AssetTradeDetailPage getTradeAccountPositionTradeDetail(PlatformArgs platformArgs, ReqTradeAccountPositionTradeDetailOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getTradeAccountPositionTradeDetail(platformArgs, option, pageOption);
        return recv_getTradeAccountPositionTradeDetail();

        #else
        var asyncResult = Begin_getTradeAccountPositionTradeDetail(null, null, platformArgs, option, pageOption);
        return End_getTradeAccountPositionTradeDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTradeAccountPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqTradeAccountPositionTradeDetailOption option, IndexedPageOption pageOption)
      #else
      public void send_getTradeAccountPositionTradeDetail(PlatformArgs platformArgs, ReqTradeAccountPositionTradeDetailOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTradeAccountPositionTradeDetail", TMessageType.Call, seqid_));
        getTradeAccountPositionTradeDetail_args args = new getTradeAccountPositionTradeDetail_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public AssetTradeDetailPage recv_getTradeAccountPositionTradeDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTradeAccountPositionTradeDetail_result result = new getTradeAccountPositionTradeDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTradeAccountPositionTradeDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTradeAccountPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqTradeAccountPositionOption option, IndexedPageOption pageOption)
      {
        return send_getTradeAccountPosition(callback, state, platformArgs, option, pageOption);
      }

      public TradeAccountPositionPage End_getTradeAccountPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTradeAccountPosition();
      }

      #endif

      public TradeAccountPositionPage getTradeAccountPosition(PlatformArgs platformArgs, ReqTradeAccountPositionOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getTradeAccountPosition(platformArgs, option, pageOption);
        return recv_getTradeAccountPosition();

        #else
        var asyncResult = Begin_getTradeAccountPosition(null, null, platformArgs, option, pageOption);
        return End_getTradeAccountPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTradeAccountPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqTradeAccountPositionOption option, IndexedPageOption pageOption)
      #else
      public void send_getTradeAccountPosition(PlatformArgs platformArgs, ReqTradeAccountPositionOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTradeAccountPosition", TMessageType.Call, seqid_));
        getTradeAccountPosition_args args = new getTradeAccountPosition_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TradeAccountPositionPage recv_getTradeAccountPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTradeAccountPosition_result result = new getTradeAccountPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTradeAccountPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_assignPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, List<xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned> positonAssigneds)
      {
        return send_assignPosition(callback, state, platformArgs, positonAssigneds);
      }

      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp End_assignPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_assignPosition();
      }

      #endif

      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp assignPosition(PlatformArgs platformArgs, List<xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned> positonAssigneds)
      {
        #if !SILVERLIGHT
        send_assignPosition(platformArgs, positonAssigneds);
        return recv_assignPosition();

        #else
        var asyncResult = Begin_assignPosition(null, null, platformArgs, positonAssigneds);
        return End_assignPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_assignPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, List<xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned> positonAssigneds)
      #else
      public void send_assignPosition(PlatformArgs platformArgs, List<xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned> positonAssigneds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("assignPosition", TMessageType.Call, seqid_));
        assignPosition_args args = new assignPosition_args();
        args.PlatformArgs = platformArgs;
        args.PositonAssigneds = positonAssigneds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp recv_assignPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        assignPosition_result result = new assignPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "assignPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeAllAssetData(AsyncCallback callback, object state, PlatformArgs platformArgs)
      {
        return send_removeAllAssetData(callback, state, platformArgs);
      }

      public void End_removeAllAssetData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_removeAllAssetData();
      }

      #endif

      /// <summary>
      /// 移除托管机上持仓资金的所有数据记录
      /// </summary>
      /// <param name="platformArgs"></param>
      public void removeAllAssetData(PlatformArgs platformArgs)
      {
        #if !SILVERLIGHT
        send_removeAllAssetData(platformArgs);
        recv_removeAllAssetData();

        #else
        var asyncResult = Begin_removeAllAssetData(null, null, platformArgs);
        End_removeAllAssetData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeAllAssetData(AsyncCallback callback, object state, PlatformArgs platformArgs)
      #else
      public void send_removeAllAssetData(PlatformArgs platformArgs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeAllAssetData", TMessageType.Call, seqid_));
        removeAllAssetData_args args = new removeAllAssetData_args();
        args.PlatformArgs = platformArgs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_removeAllAssetData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeAllAssetData_result result = new removeAllAssetData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["getHostingSledContractPosition"] = getHostingSledContractPosition_Process;
        processMap_["getHostingSubAccountFund"] = getHostingSubAccountFund_Process;
        processMap_["changeSubAccountFund"] = changeSubAccountFund_Process;
        processMap_["setSubAccountCreditAmount"] = setSubAccountCreditAmount_Process;
        processMap_["getSettlementPositionDetail"] = getSettlementPositionDetail_Process;
        processMap_["getHostingSubAccountMoneyRecord"] = getHostingSubAccountMoneyRecord_Process;
        processMap_["getAssetPositionTradeDetail"] = getAssetPositionTradeDetail_Process;
        processMap_["getSettlementPositionTradeDetail"] = getSettlementPositionTradeDetail_Process;
        processMap_["getHostingPositionVolume"] = getHostingPositionVolume_Process;
        processMap_["getHostingPositionFund"] = getHostingPositionFund_Process;
        processMap_["getSubAccountFundHistory"] = getSubAccountFundHistory_Process;
        processMap_["deleteExpiredContractPosition"] = deleteExpiredContractPosition_Process;
        processMap_["getTradeAccountPositionTradeDetail"] = getTradeAccountPositionTradeDetail_Process;
        processMap_["getTradeAccountPosition"] = getTradeAccountPosition_Process;
        processMap_["assignPosition"] = assignPosition_Process;
        processMap_["removeAllAssetData"] = removeAllAssetData_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void getHostingSledContractPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHostingSledContractPosition_args args = new getHostingSledContractPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHostingSledContractPosition_result result = new getHostingSledContractPosition_result();
        try {
          result.Success = iface_.getHostingSledContractPosition(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getHostingSledContractPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getHostingSubAccountFund_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHostingSubAccountFund_args args = new getHostingSubAccountFund_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHostingSubAccountFund_result result = new getHostingSubAccountFund_result();
        try {
          result.Success = iface_.getHostingSubAccountFund(args.PlatformArgs, args.Option);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getHostingSubAccountFund", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void changeSubAccountFund_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        changeSubAccountFund_args args = new changeSubAccountFund_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        changeSubAccountFund_result result = new changeSubAccountFund_result();
        try {
          result.Success = iface_.changeSubAccountFund(args.PlatformArgs, args.FundChange);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("changeSubAccountFund", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setSubAccountCreditAmount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setSubAccountCreditAmount_args args = new setSubAccountCreditAmount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setSubAccountCreditAmount_result result = new setSubAccountCreditAmount_result();
        try {
          result.Success = iface_.setSubAccountCreditAmount(args.PlatformArgs, args.AmountChange);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setSubAccountCreditAmount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSettlementPositionDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSettlementPositionDetail_args args = new getSettlementPositionDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSettlementPositionDetail_result result = new getSettlementPositionDetail_result();
        try {
          result.Success = iface_.getSettlementPositionDetail(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getSettlementPositionDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getHostingSubAccountMoneyRecord_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHostingSubAccountMoneyRecord_args args = new getHostingSubAccountMoneyRecord_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHostingSubAccountMoneyRecord_result result = new getHostingSubAccountMoneyRecord_result();
        try {
          result.Success = iface_.getHostingSubAccountMoneyRecord(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getHostingSubAccountMoneyRecord", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAssetPositionTradeDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAssetPositionTradeDetail_args args = new getAssetPositionTradeDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAssetPositionTradeDetail_result result = new getAssetPositionTradeDetail_result();
        try {
          result.Success = iface_.getAssetPositionTradeDetail(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getAssetPositionTradeDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSettlementPositionTradeDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSettlementPositionTradeDetail_args args = new getSettlementPositionTradeDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSettlementPositionTradeDetail_result result = new getSettlementPositionTradeDetail_result();
        try {
          result.Success = iface_.getSettlementPositionTradeDetail(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getSettlementPositionTradeDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getHostingPositionVolume_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHostingPositionVolume_args args = new getHostingPositionVolume_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHostingPositionVolume_result result = new getHostingPositionVolume_result();
        try {
          result.Success = iface_.getHostingPositionVolume(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getHostingPositionVolume", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getHostingPositionFund_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHostingPositionFund_args args = new getHostingPositionFund_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHostingPositionFund_result result = new getHostingPositionFund_result();
        try {
          result.Success = iface_.getHostingPositionFund(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getHostingPositionFund", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSubAccountFundHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSubAccountFundHistory_args args = new getSubAccountFundHistory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSubAccountFundHistory_result result = new getSubAccountFundHistory_result();
        try {
          result.Success = iface_.getSubAccountFundHistory(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getSubAccountFundHistory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteExpiredContractPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteExpiredContractPosition_args args = new deleteExpiredContractPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteExpiredContractPosition_result result = new deleteExpiredContractPosition_result();
        try {
          iface_.deleteExpiredContractPosition(args.PlatformArgs, args.SubAccountId, args.SledContractId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("deleteExpiredContractPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTradeAccountPositionTradeDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTradeAccountPositionTradeDetail_args args = new getTradeAccountPositionTradeDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTradeAccountPositionTradeDetail_result result = new getTradeAccountPositionTradeDetail_result();
        try {
          result.Success = iface_.getTradeAccountPositionTradeDetail(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getTradeAccountPositionTradeDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTradeAccountPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTradeAccountPosition_args args = new getTradeAccountPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTradeAccountPosition_result result = new getTradeAccountPosition_result();
        try {
          result.Success = iface_.getTradeAccountPosition(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getTradeAccountPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void assignPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        assignPosition_args args = new assignPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        assignPosition_result result = new assignPosition_result();
        try {
          result.Success = iface_.assignPosition(args.PlatformArgs, args.PositonAssigneds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("assignPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeAllAssetData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeAllAssetData_args args = new removeAllAssetData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeAllAssetData_result result = new removeAllAssetData_result();
        try {
          iface_.removeAllAssetData(args.PlatformArgs);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("removeAllAssetData", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingSledContractPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqHostingSledContractPositionOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqHostingSledContractPositionOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public getHostingSledContractPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqHostingSledContractPositionOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingSledContractPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingSledContractPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingSledContractPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingSledContractPositionPage _success;
      private ErrorInfo _err;

      public HostingSledContractPositionPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getHostingSledContractPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingSledContractPositionPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingSledContractPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingSledContractPosition_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingSubAccountFund_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqHostingFundOption _option;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqHostingFundOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
      }

      public getHostingSubAccountFund_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqHostingFundOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingSubAccountFund_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingSubAccountFund_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingSubAccountFund_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingFundPage _success;
      private ErrorInfo _err;

      public HostingFundPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getHostingSubAccountFund_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingFundPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingSubAccountFund_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingSubAccountFund_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeSubAccountFund_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private FundChange _fundChange;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public FundChange FundChange
      {
        get
        {
          return _fundChange;
        }
        set
        {
          __isset.fundChange = true;
          SetProperty(ref _fundChange, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool fundChange;
      }

      public changeSubAccountFund_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                FundChange = new FundChange();
                FundChange.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changeSubAccountFund_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FundChange != null && __isset.fundChange) {
          field.Name = "fundChange";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          FundChange.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changeSubAccountFund_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",FundChange: ");
        sb.Append(FundChange== null ? "<null>" : FundChange.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeSubAccountFund_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingSubAccountFund _success;
      private ErrorInfo _err;

      public HostingSubAccountFund Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public changeSubAccountFund_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingSubAccountFund();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changeSubAccountFund_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changeSubAccountFund_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setSubAccountCreditAmount_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private CreditAmountChange _amountChange;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public CreditAmountChange AmountChange
      {
        get
        {
          return _amountChange;
        }
        set
        {
          __isset.amountChange = true;
          SetProperty(ref _amountChange, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool amountChange;
      }

      public setSubAccountCreditAmount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AmountChange = new CreditAmountChange();
                AmountChange.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setSubAccountCreditAmount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AmountChange != null && __isset.amountChange) {
          field.Name = "amountChange";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          AmountChange.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setSubAccountCreditAmount_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",AmountChange: ");
        sb.Append(AmountChange== null ? "<null>" : AmountChange.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setSubAccountCreditAmount_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingSubAccountFund _success;
      private ErrorInfo _err;

      public HostingSubAccountFund Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public setSubAccountCreditAmount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingSubAccountFund();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setSubAccountCreditAmount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setSubAccountCreditAmount_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettlementPositionDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqSettlementPositionDetailOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqSettlementPositionDetailOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public getSettlementPositionDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqSettlementPositionDetailOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettlementPositionDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSettlementPositionDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettlementPositionDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private SettlementPositionDetailPage _success;
      private ErrorInfo _err;

      public SettlementPositionDetailPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getSettlementPositionDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SettlementPositionDetailPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettlementPositionDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSettlementPositionDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingSubAccountMoneyRecord_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqMoneyRecordOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqMoneyRecordOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public getHostingSubAccountMoneyRecord_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqMoneyRecordOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingSubAccountMoneyRecord_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingSubAccountMoneyRecord_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingSubAccountMoneyRecord_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingSubAccountMoneyRecordPage _success;
      private ErrorInfo _err;

      public HostingSubAccountMoneyRecordPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getHostingSubAccountMoneyRecord_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingSubAccountMoneyRecordPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingSubAccountMoneyRecord_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingSubAccountMoneyRecord_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAssetPositionTradeDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqHostingAssetTradeDetailOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqHostingAssetTradeDetailOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public getAssetPositionTradeDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqHostingAssetTradeDetailOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAssetPositionTradeDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAssetPositionTradeDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAssetPositionTradeDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private AssetTradeDetailPage _success;
      private ErrorInfo _err;

      public AssetTradeDetailPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getAssetPositionTradeDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AssetTradeDetailPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAssetPositionTradeDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAssetPositionTradeDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettlementPositionTradeDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqSettlementPositionTradeDetailOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqSettlementPositionTradeDetailOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public getSettlementPositionTradeDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqSettlementPositionTradeDetailOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettlementPositionTradeDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSettlementPositionTradeDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettlementPositionTradeDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private AssetTradeDetailPage _success;
      private ErrorInfo _err;

      public AssetTradeDetailPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getSettlementPositionTradeDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AssetTradeDetailPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettlementPositionTradeDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSettlementPositionTradeDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingPositionVolume_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqHostingPositionVolumeOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqHostingPositionVolumeOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public getHostingPositionVolume_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqHostingPositionVolumeOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingPositionVolume_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingPositionVolume_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingPositionVolume_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingPositionVolumePage _success;
      private ErrorInfo _err;

      public HostingPositionVolumePage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getHostingPositionVolume_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingPositionVolumePage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingPositionVolume_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingPositionVolume_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingPositionFund_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqHostingPositionFundOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqHostingPositionFundOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public getHostingPositionFund_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqHostingPositionFundOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingPositionFund_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingPositionFund_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingPositionFund_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingPositionFundPage _success;
      private ErrorInfo _err;

      public HostingPositionFundPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getHostingPositionFund_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingPositionFundPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingPositionFund_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingPositionFund_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSubAccountFundHistory_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqSubAccountFundHistoryOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqSubAccountFundHistoryOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public getSubAccountFundHistory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqSubAccountFundHistoryOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSubAccountFundHistory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSubAccountFundHistory_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSubAccountFundHistory_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingFundPage _success;
      private ErrorInfo _err;

      public HostingFundPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getSubAccountFundHistory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingFundPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSubAccountFundHistory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSubAccountFundHistory_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteExpiredContractPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private long _subAccountId;
      private long _sledContractId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public long SledContractId
      {
        get
        {
          return _sledContractId;
        }
        set
        {
          __isset.sledContractId = true;
          SetProperty(ref _sledContractId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool subAccountId;
        public bool sledContractId;
      }

      public deleteExpiredContractPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SledContractId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteExpiredContractPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.sledContractId) {
          field.Name = "sledContractId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SledContractId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteExpiredContractPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",SledContractId: ");
        sb.Append(SledContractId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteExpiredContractPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public deleteExpiredContractPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteExpiredContractPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteExpiredContractPosition_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountPositionTradeDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqTradeAccountPositionTradeDetailOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqTradeAccountPositionTradeDetailOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public getTradeAccountPositionTradeDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqTradeAccountPositionTradeDetailOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountPositionTradeDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountPositionTradeDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountPositionTradeDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private AssetTradeDetailPage _success;
      private ErrorInfo _err;

      public AssetTradeDetailPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getTradeAccountPositionTradeDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AssetTradeDetailPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountPositionTradeDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountPositionTradeDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqTradeAccountPositionOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqTradeAccountPositionOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public getTradeAccountPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqTradeAccountPositionOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private TradeAccountPositionPage _success;
      private ErrorInfo _err;

      public TradeAccountPositionPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getTradeAccountPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TradeAccountPositionPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountPosition_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class assignPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private List<xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned> _positonAssigneds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public List<xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned> PositonAssigneds
      {
        get
        {
          return _positonAssigneds;
        }
        set
        {
          __isset.positonAssigneds = true;
          SetProperty(ref _positonAssigneds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool positonAssigneds;
      }

      public assignPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  PositonAssigneds = new List<xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned>();
                  TList _list71 = iprot.ReadListBegin();
                  for( int _i72 = 0; _i72 < _list71.Count; ++_i72)
                  {
                    xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned _elem73 = new xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned();
                    _elem73 = new xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned();
                    _elem73.Read(iprot);
                    PositonAssigneds.Add(_elem73);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("assignPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PositonAssigneds != null && __isset.positonAssigneds) {
          field.Name = "positonAssigneds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, PositonAssigneds.Count));
            foreach (xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned _iter74 in PositonAssigneds)
            {
              _iter74.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("assignPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",PositonAssigneds: ");
        if (PositonAssigneds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionAssigned _iter75 in PositonAssigneds)
          {
            sb.Append(_iter75.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class assignPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public assignPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("assignPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("assignPosition_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeAllAssetData_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
      }

      public removeAllAssetData_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeAllAssetData_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeAllAssetData_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeAllAssetData_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public removeAllAssetData_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeAllAssetData_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeAllAssetData_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
