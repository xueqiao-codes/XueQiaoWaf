/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.proxy
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ProxyLoginResp : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private xueqiao.trade.hosting.HostingSession _hostingSession;
    private string _hostingServerIP;
    private int _hostingProxyPort;
    private long _hostingTimens;
    private xueqiao.trade.hosting.HostingRunningMode _hostingRunningMode;
    private int _companyId;
    private int _companyGroupId;
    private xueqiao.trade.hosting.HostingUser _loginUserInfo;

    public xueqiao.trade.hosting.HostingSession HostingSession
    {
      get
      {
        return _hostingSession;
      }
      set
      {
        __isset.hostingSession = true;
        SetProperty(ref _hostingSession, value);
      }
    }

    public string HostingServerIP
    {
      get
      {
        return _hostingServerIP;
      }
      set
      {
        __isset.hostingServerIP = true;
        SetProperty(ref _hostingServerIP, value);
      }
    }

    public int HostingProxyPort
    {
      get
      {
        return _hostingProxyPort;
      }
      set
      {
        __isset.hostingProxyPort = true;
        SetProperty(ref _hostingProxyPort, value);
      }
    }

    public long HostingTimens
    {
      get
      {
        return _hostingTimens;
      }
      set
      {
        __isset.hostingTimens = true;
        SetProperty(ref _hostingTimens, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.trade.hosting.HostingRunningMode"/>
    /// </summary>
    public xueqiao.trade.hosting.HostingRunningMode HostingRunningMode
    {
      get
      {
        return _hostingRunningMode;
      }
      set
      {
        __isset.hostingRunningMode = true;
        SetProperty(ref _hostingRunningMode, value);
      }
    }

    public int CompanyId
    {
      get
      {
        return _companyId;
      }
      set
      {
        __isset.companyId = true;
        SetProperty(ref _companyId, value);
      }
    }

    public int CompanyGroupId
    {
      get
      {
        return _companyGroupId;
      }
      set
      {
        __isset.companyGroupId = true;
        SetProperty(ref _companyGroupId, value);
      }
    }

    public xueqiao.trade.hosting.HostingUser LoginUserInfo
    {
      get
      {
        return _loginUserInfo;
      }
      set
      {
        __isset.loginUserInfo = true;
        SetProperty(ref _loginUserInfo, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool hostingSession;
      public bool hostingServerIP;
      public bool hostingProxyPort;
      public bool hostingTimens;
      public bool hostingRunningMode;
      public bool companyId;
      public bool companyGroupId;
      public bool loginUserInfo;
    }

    public ProxyLoginResp() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              HostingSession = new xueqiao.trade.hosting.HostingSession();
              HostingSession.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              HostingServerIP = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              HostingProxyPort = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              HostingTimens = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              HostingRunningMode = (xueqiao.trade.hosting.HostingRunningMode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              CompanyId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              CompanyGroupId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              LoginUserInfo = new xueqiao.trade.hosting.HostingUser();
              LoginUserInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ProxyLoginResp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (HostingSession != null && __isset.hostingSession) {
        field.Name = "hostingSession";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        HostingSession.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (HostingServerIP != null && __isset.hostingServerIP) {
        field.Name = "hostingServerIP";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HostingServerIP);
        oprot.WriteFieldEnd();
      }
      if (__isset.hostingProxyPort) {
        field.Name = "hostingProxyPort";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(HostingProxyPort);
        oprot.WriteFieldEnd();
      }
      if (__isset.hostingTimens) {
        field.Name = "hostingTimens";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(HostingTimens);
        oprot.WriteFieldEnd();
      }
      if (__isset.hostingRunningMode) {
        field.Name = "hostingRunningMode";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)HostingRunningMode);
        oprot.WriteFieldEnd();
      }
      if (__isset.companyId) {
        field.Name = "companyId";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CompanyId);
        oprot.WriteFieldEnd();
      }
      if (__isset.companyGroupId) {
        field.Name = "companyGroupId";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CompanyGroupId);
        oprot.WriteFieldEnd();
      }
      if (LoginUserInfo != null && __isset.loginUserInfo) {
        field.Name = "loginUserInfo";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        LoginUserInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ProxyLoginResp(");
      sb.Append("HostingSession: ");
      sb.Append(HostingSession== null ? "<null>" : HostingSession.ToString());
      sb.Append(",HostingServerIP: ");
      sb.Append(HostingServerIP);
      sb.Append(",HostingProxyPort: ");
      sb.Append(HostingProxyPort);
      sb.Append(",HostingTimens: ");
      sb.Append(HostingTimens);
      sb.Append(",HostingRunningMode: ");
      sb.Append(HostingRunningMode);
      sb.Append(",CompanyId: ");
      sb.Append(CompanyId);
      sb.Append(",CompanyGroupId: ");
      sb.Append(CompanyGroupId);
      sb.Append(",LoginUserInfo: ");
      sb.Append(LoginUserInfo== null ? "<null>" : LoginUserInfo.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
