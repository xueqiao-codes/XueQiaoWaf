/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.proxy
{
  public partial class TradeHostingProxy {
    public interface Iface {
      /// <summary>
      /// 客户端可以使用的接口
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="req"></param>
      ProxyLoginResp login(PlatformArgs platformArgs, ProxyLoginReq req);
      #if SILVERLIGHT
      IAsyncResult Begin_login(AsyncCallback callback, object state, PlatformArgs platformArgs, ProxyLoginReq req);
      ProxyLoginResp End_login(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取公司用户所在的组信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="req"></param>
      ProxyFakeLoginResp fakeLogin(PlatformArgs platformArgs, ProxyFakeLoginReq req);
      #if SILVERLIGHT
      IAsyncResult Begin_fakeLogin(AsyncCallback callback, object state, PlatformArgs platformArgs, ProxyFakeLoginReq req);
      ProxyFakeLoginResp End_fakeLogin(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 修改公司成员密码
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="req"></param>
      void updateCompanyUserPassword(PlatformArgs platformArgs, ProxyUpdatePasswordReq req);
      #if SILVERLIGHT
      IAsyncResult Begin_updateCompanyUserPassword(AsyncCallback callback, object state, PlatformArgs platformArgs, ProxyUpdatePasswordReq req);
      void End_updateCompanyUserPassword(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 云端使用的接口
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="session"></param>
      bool checkSession(PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session);
      #if SILVERLIGHT
      IAsyncResult Begin_checkSession(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session);
      bool End_checkSession(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询软件升级信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="req"></param>
      AppVersion queryUpdateInfo(PlatformArgs platformArgs, UpdateInfoReq req);
      #if SILVERLIGHT
      IAsyncResult Begin_queryUpdateInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, UpdateInfoReq req);
      AppVersion End_queryUpdateInfo(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询用户托管机消息的接口
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="session"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.mailbox.user.message.thriftapi.UserMessagePage queryMailBoxMessage(PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session, ReqMailBoxMessageOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryMailBoxMessage(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session, ReqMailBoxMessageOption option, IndexedPageOption pageOption);
      xueqiao.mailbox.user.message.thriftapi.UserMessagePage End_queryMailBoxMessage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 标记用户托管机消息为已读
      /// hostingMessageIds empty 表示所有未读状态设置为已读
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="session"></param>
      /// <param name="hostingMessageIds"></param>
      bool markMessageAsRead(PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session, THashSet<long> hostingMessageIds);
      #if SILVERLIGHT
      IAsyncResult Begin_markMessageAsRead(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session, THashSet<long> hostingMessageIds);
      bool End_markMessageAsRead(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_login(AsyncCallback callback, object state, PlatformArgs platformArgs, ProxyLoginReq req)
      {
        return send_login(callback, state, platformArgs, req);
      }

      public ProxyLoginResp End_login(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_login();
      }

      #endif

      /// <summary>
      /// 客户端可以使用的接口
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="req"></param>
      public ProxyLoginResp login(PlatformArgs platformArgs, ProxyLoginReq req)
      {
        #if !SILVERLIGHT
        send_login(platformArgs, req);
        return recv_login();

        #else
        var asyncResult = Begin_login(null, null, platformArgs, req);
        return End_login(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_login(AsyncCallback callback, object state, PlatformArgs platformArgs, ProxyLoginReq req)
      #else
      public void send_login(PlatformArgs platformArgs, ProxyLoginReq req)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
        login_args args = new login_args();
        args.PlatformArgs = platformArgs;
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProxyLoginResp recv_login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        login_result result = new login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_fakeLogin(AsyncCallback callback, object state, PlatformArgs platformArgs, ProxyFakeLoginReq req)
      {
        return send_fakeLogin(callback, state, platformArgs, req);
      }

      public ProxyFakeLoginResp End_fakeLogin(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_fakeLogin();
      }

      #endif

      /// <summary>
      /// 获取公司用户所在的组信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="req"></param>
      public ProxyFakeLoginResp fakeLogin(PlatformArgs platformArgs, ProxyFakeLoginReq req)
      {
        #if !SILVERLIGHT
        send_fakeLogin(platformArgs, req);
        return recv_fakeLogin();

        #else
        var asyncResult = Begin_fakeLogin(null, null, platformArgs, req);
        return End_fakeLogin(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_fakeLogin(AsyncCallback callback, object state, PlatformArgs platformArgs, ProxyFakeLoginReq req)
      #else
      public void send_fakeLogin(PlatformArgs platformArgs, ProxyFakeLoginReq req)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("fakeLogin", TMessageType.Call, seqid_));
        fakeLogin_args args = new fakeLogin_args();
        args.PlatformArgs = platformArgs;
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProxyFakeLoginResp recv_fakeLogin()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        fakeLogin_result result = new fakeLogin_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fakeLogin failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateCompanyUserPassword(AsyncCallback callback, object state, PlatformArgs platformArgs, ProxyUpdatePasswordReq req)
      {
        return send_updateCompanyUserPassword(callback, state, platformArgs, req);
      }

      public void End_updateCompanyUserPassword(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateCompanyUserPassword();
      }

      #endif

      /// <summary>
      /// 修改公司成员密码
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="req"></param>
      public void updateCompanyUserPassword(PlatformArgs platformArgs, ProxyUpdatePasswordReq req)
      {
        #if !SILVERLIGHT
        send_updateCompanyUserPassword(platformArgs, req);
        recv_updateCompanyUserPassword();

        #else
        var asyncResult = Begin_updateCompanyUserPassword(null, null, platformArgs, req);
        End_updateCompanyUserPassword(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateCompanyUserPassword(AsyncCallback callback, object state, PlatformArgs platformArgs, ProxyUpdatePasswordReq req)
      #else
      public void send_updateCompanyUserPassword(PlatformArgs platformArgs, ProxyUpdatePasswordReq req)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateCompanyUserPassword", TMessageType.Call, seqid_));
        updateCompanyUserPassword_args args = new updateCompanyUserPassword_args();
        args.PlatformArgs = platformArgs;
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateCompanyUserPassword()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateCompanyUserPassword_result result = new updateCompanyUserPassword_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_checkSession(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session)
      {
        return send_checkSession(callback, state, platformArgs, session);
      }

      public bool End_checkSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_checkSession();
      }

      #endif

      /// <summary>
      /// 云端使用的接口
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="session"></param>
      public bool checkSession(PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session)
      {
        #if !SILVERLIGHT
        send_checkSession(platformArgs, session);
        return recv_checkSession();

        #else
        var asyncResult = Begin_checkSession(null, null, platformArgs, session);
        return End_checkSession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_checkSession(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session)
      #else
      public void send_checkSession(PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("checkSession", TMessageType.Call, seqid_));
        checkSession_args args = new checkSession_args();
        args.PlatformArgs = platformArgs;
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_checkSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        checkSession_result result = new checkSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkSession failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryUpdateInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, UpdateInfoReq req)
      {
        return send_queryUpdateInfo(callback, state, platformArgs, req);
      }

      public AppVersion End_queryUpdateInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryUpdateInfo();
      }

      #endif

      /// <summary>
      /// 查询软件升级信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="req"></param>
      public AppVersion queryUpdateInfo(PlatformArgs platformArgs, UpdateInfoReq req)
      {
        #if !SILVERLIGHT
        send_queryUpdateInfo(platformArgs, req);
        return recv_queryUpdateInfo();

        #else
        var asyncResult = Begin_queryUpdateInfo(null, null, platformArgs, req);
        return End_queryUpdateInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryUpdateInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, UpdateInfoReq req)
      #else
      public void send_queryUpdateInfo(PlatformArgs platformArgs, UpdateInfoReq req)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryUpdateInfo", TMessageType.Call, seqid_));
        queryUpdateInfo_args args = new queryUpdateInfo_args();
        args.PlatformArgs = platformArgs;
        args.Req = req;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public AppVersion recv_queryUpdateInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryUpdateInfo_result result = new queryUpdateInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryUpdateInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryMailBoxMessage(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session, ReqMailBoxMessageOption option, IndexedPageOption pageOption)
      {
        return send_queryMailBoxMessage(callback, state, platformArgs, session, option, pageOption);
      }

      public xueqiao.mailbox.user.message.thriftapi.UserMessagePage End_queryMailBoxMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryMailBoxMessage();
      }

      #endif

      /// <summary>
      /// 查询用户托管机消息的接口
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="session"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.mailbox.user.message.thriftapi.UserMessagePage queryMailBoxMessage(PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session, ReqMailBoxMessageOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryMailBoxMessage(platformArgs, session, option, pageOption);
        return recv_queryMailBoxMessage();

        #else
        var asyncResult = Begin_queryMailBoxMessage(null, null, platformArgs, session, option, pageOption);
        return End_queryMailBoxMessage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryMailBoxMessage(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session, ReqMailBoxMessageOption option, IndexedPageOption pageOption)
      #else
      public void send_queryMailBoxMessage(PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session, ReqMailBoxMessageOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryMailBoxMessage", TMessageType.Call, seqid_));
        queryMailBoxMessage_args args = new queryMailBoxMessage_args();
        args.PlatformArgs = platformArgs;
        args.Session = session;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.mailbox.user.message.thriftapi.UserMessagePage recv_queryMailBoxMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryMailBoxMessage_result result = new queryMailBoxMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryMailBoxMessage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_markMessageAsRead(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session, THashSet<long> hostingMessageIds)
      {
        return send_markMessageAsRead(callback, state, platformArgs, session, hostingMessageIds);
      }

      public bool End_markMessageAsRead(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_markMessageAsRead();
      }

      #endif

      /// <summary>
      /// 标记用户托管机消息为已读
      /// hostingMessageIds empty 表示所有未读状态设置为已读
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="session"></param>
      /// <param name="hostingMessageIds"></param>
      public bool markMessageAsRead(PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session, THashSet<long> hostingMessageIds)
      {
        #if !SILVERLIGHT
        send_markMessageAsRead(platformArgs, session, hostingMessageIds);
        return recv_markMessageAsRead();

        #else
        var asyncResult = Begin_markMessageAsRead(null, null, platformArgs, session, hostingMessageIds);
        return End_markMessageAsRead(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_markMessageAsRead(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session, THashSet<long> hostingMessageIds)
      #else
      public void send_markMessageAsRead(PlatformArgs platformArgs, xueqiao.trade.hosting.HostingSession session, THashSet<long> hostingMessageIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("markMessageAsRead", TMessageType.Call, seqid_));
        markMessageAsRead_args args = new markMessageAsRead_args();
        args.PlatformArgs = platformArgs;
        args.Session = session;
        args.HostingMessageIds = hostingMessageIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_markMessageAsRead()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        markMessageAsRead_result result = new markMessageAsRead_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "markMessageAsRead failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["login"] = login_Process;
        processMap_["fakeLogin"] = fakeLogin_Process;
        processMap_["updateCompanyUserPassword"] = updateCompanyUserPassword_Process;
        processMap_["checkSession"] = checkSession_Process;
        processMap_["queryUpdateInfo"] = queryUpdateInfo_Process;
        processMap_["queryMailBoxMessage"] = queryMailBoxMessage_Process;
        processMap_["markMessageAsRead"] = markMessageAsRead_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        login_args args = new login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        login_result result = new login_result();
        try {
          result.Success = iface_.login(args.PlatformArgs, args.Req);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("login", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void fakeLogin_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        fakeLogin_args args = new fakeLogin_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        fakeLogin_result result = new fakeLogin_result();
        try {
          result.Success = iface_.fakeLogin(args.PlatformArgs, args.Req);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("fakeLogin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateCompanyUserPassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateCompanyUserPassword_args args = new updateCompanyUserPassword_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateCompanyUserPassword_result result = new updateCompanyUserPassword_result();
        try {
          iface_.updateCompanyUserPassword(args.PlatformArgs, args.Req);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("updateCompanyUserPassword", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void checkSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        checkSession_args args = new checkSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        checkSession_result result = new checkSession_result();
        try {
          result.Success = iface_.checkSession(args.PlatformArgs, args.Session);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("checkSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryUpdateInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryUpdateInfo_args args = new queryUpdateInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryUpdateInfo_result result = new queryUpdateInfo_result();
        try {
          result.Success = iface_.queryUpdateInfo(args.PlatformArgs, args.Req);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryUpdateInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryMailBoxMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryMailBoxMessage_args args = new queryMailBoxMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryMailBoxMessage_result result = new queryMailBoxMessage_result();
        try {
          result.Success = iface_.queryMailBoxMessage(args.PlatformArgs, args.Session, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryMailBoxMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void markMessageAsRead_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        markMessageAsRead_args args = new markMessageAsRead_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        markMessageAsRead_result result = new markMessageAsRead_result();
        try {
          result.Success = iface_.markMessageAsRead(args.PlatformArgs, args.Session, args.HostingMessageIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("markMessageAsRead", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ProxyLoginReq _req;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ProxyLoginReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          SetProperty(ref _req, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool req;
      }

      public login_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Req = new ProxyLoginReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("login_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("login_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Req: ");
        sb.Append(Req== null ? "<null>" : Req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ProxyLoginResp _success;
      private ErrorInfo _err;

      public ProxyLoginResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public login_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProxyLoginResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("login_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("login_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fakeLogin_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ProxyFakeLoginReq _req;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ProxyFakeLoginReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          SetProperty(ref _req, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool req;
      }

      public fakeLogin_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Req = new ProxyFakeLoginReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fakeLogin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fakeLogin_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Req: ");
        sb.Append(Req== null ? "<null>" : Req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fakeLogin_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ProxyFakeLoginResp _success;
      private ErrorInfo _err;

      public ProxyFakeLoginResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public fakeLogin_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProxyFakeLoginResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fakeLogin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fakeLogin_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateCompanyUserPassword_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ProxyUpdatePasswordReq _req;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ProxyUpdatePasswordReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          SetProperty(ref _req, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool req;
      }

      public updateCompanyUserPassword_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Req = new ProxyUpdatePasswordReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateCompanyUserPassword_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateCompanyUserPassword_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Req: ");
        sb.Append(Req== null ? "<null>" : Req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateCompanyUserPassword_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public updateCompanyUserPassword_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateCompanyUserPassword_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateCompanyUserPassword_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkSession_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.trade.hosting.HostingSession _session;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.trade.hosting.HostingSession Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          SetProperty(ref _session, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool session;
      }

      public checkSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new xueqiao.trade.hosting.HostingSession();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("checkSession_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Session: ");
        sb.Append(Session== null ? "<null>" : Session.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkSession_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private bool _success;
      private ErrorInfo _err;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public checkSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("checkSession_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryUpdateInfo_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private UpdateInfoReq _req;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public UpdateInfoReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.req = true;
          SetProperty(ref _req, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool req;
      }

      public queryUpdateInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Req = new UpdateInfoReq();
                Req.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryUpdateInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Req != null && __isset.req) {
          field.Name = "req";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Req.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryUpdateInfo_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Req: ");
        sb.Append(Req== null ? "<null>" : Req.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryUpdateInfo_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private AppVersion _success;
      private ErrorInfo _err;

      public AppVersion Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryUpdateInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AppVersion();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryUpdateInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryUpdateInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryMailBoxMessage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.trade.hosting.HostingSession _session;
      private ReqMailBoxMessageOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.trade.hosting.HostingSession Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          SetProperty(ref _session, value);
        }
      }

      public ReqMailBoxMessageOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool session;
        public bool option;
        public bool pageOption;
      }

      public queryMailBoxMessage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new xueqiao.trade.hosting.HostingSession();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new ReqMailBoxMessageOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryMailBoxMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryMailBoxMessage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Session: ");
        sb.Append(Session== null ? "<null>" : Session.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryMailBoxMessage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.mailbox.user.message.thriftapi.UserMessagePage _success;
      private ErrorInfo _err;

      public xueqiao.mailbox.user.message.thriftapi.UserMessagePage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryMailBoxMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.mailbox.user.message.thriftapi.UserMessagePage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryMailBoxMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryMailBoxMessage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class markMessageAsRead_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.trade.hosting.HostingSession _session;
      private THashSet<long> _hostingMessageIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.trade.hosting.HostingSession Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          SetProperty(ref _session, value);
        }
      }

      public THashSet<long> HostingMessageIds
      {
        get
        {
          return _hostingMessageIds;
        }
        set
        {
          __isset.hostingMessageIds = true;
          SetProperty(ref _hostingMessageIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool session;
        public bool hostingMessageIds;
      }

      public markMessageAsRead_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Session = new xueqiao.trade.hosting.HostingSession();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  HostingMessageIds = new THashSet<long>();
                  TSet _set10 = iprot.ReadSetBegin();
                  for( int _i11 = 0; _i11 < _set10.Count; ++_i11)
                  {
                    long _elem12 = 0;
                    _elem12 = iprot.ReadI64();
                    HostingMessageIds.Add(_elem12);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("markMessageAsRead_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (HostingMessageIds != null && __isset.hostingMessageIds) {
          field.Name = "hostingMessageIds";
          field.Type = TType.Set;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I64, HostingMessageIds.Count));
            foreach (long _iter13 in HostingMessageIds)
            {
              oprot.WriteI64(_iter13);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("markMessageAsRead_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Session: ");
        sb.Append(Session== null ? "<null>" : Session.ToString());
        sb.Append(",HostingMessageIds: ");
        if (HostingMessageIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (long _iter14 in HostingMessageIds)
          {
            sb.Append(_iter14.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class markMessageAsRead_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private bool _success;
      private ErrorInfo _err;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public markMessageAsRead_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("markMessageAsRead_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("markMessageAsRead_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
