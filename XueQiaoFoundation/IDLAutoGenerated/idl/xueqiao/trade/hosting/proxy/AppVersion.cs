/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.proxy
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AppVersion : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _versionId;
    private long _appId;
    private string _appKey;
    private string _versionKey;
    private VersionNum _versionNum;
    private string _versionNumTag;
    private string _downloadUrlX32;
    private string _downloadUrlX64;
    private List<string> _updateNotes;
    private UpdateType _updateType;

    public long VersionId
    {
      get
      {
        return _versionId;
      }
      set
      {
        __isset.versionId = true;
        SetProperty(ref _versionId, value);
      }
    }

    public long AppId
    {
      get
      {
        return _appId;
      }
      set
      {
        __isset.appId = true;
        SetProperty(ref _appId, value);
      }
    }

    public string AppKey
    {
      get
      {
        return _appKey;
      }
      set
      {
        __isset.appKey = true;
        SetProperty(ref _appKey, value);
      }
    }

    public string VersionKey
    {
      get
      {
        return _versionKey;
      }
      set
      {
        __isset.versionKey = true;
        SetProperty(ref _versionKey, value);
      }
    }

    public VersionNum VersionNum
    {
      get
      {
        return _versionNum;
      }
      set
      {
        __isset.versionNum = true;
        SetProperty(ref _versionNum, value);
      }
    }

    public string VersionNumTag
    {
      get
      {
        return _versionNumTag;
      }
      set
      {
        __isset.versionNumTag = true;
        SetProperty(ref _versionNumTag, value);
      }
    }

    public string DownloadUrlX32
    {
      get
      {
        return _downloadUrlX32;
      }
      set
      {
        __isset.downloadUrlX32 = true;
        SetProperty(ref _downloadUrlX32, value);
      }
    }

    public string DownloadUrlX64
    {
      get
      {
        return _downloadUrlX64;
      }
      set
      {
        __isset.downloadUrlX64 = true;
        SetProperty(ref _downloadUrlX64, value);
      }
    }

    public List<string> UpdateNotes
    {
      get
      {
        return _updateNotes;
      }
      set
      {
        __isset.updateNotes = true;
        SetProperty(ref _updateNotes, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="UpdateType"/>
    /// </summary>
    public UpdateType UpdateType
    {
      get
      {
        return _updateType;
      }
      set
      {
        __isset.updateType = true;
        SetProperty(ref _updateType, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool versionId;
      public bool appId;
      public bool appKey;
      public bool versionKey;
      public bool versionNum;
      public bool versionNumTag;
      public bool downloadUrlX32;
      public bool downloadUrlX64;
      public bool updateNotes;
      public bool updateType;
    }

    public AppVersion() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              VersionId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              AppId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              AppKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              VersionKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              VersionNum = new VersionNum();
              VersionNum.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              VersionNumTag = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              DownloadUrlX32 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              DownloadUrlX64 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                UpdateNotes = new List<string>();
                TList _list5 = iprot.ReadListBegin();
                for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                {
                  string _elem7 = null;
                  _elem7 = iprot.ReadString();
                  UpdateNotes.Add(_elem7);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              UpdateType = (UpdateType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AppVersion");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.versionId) {
        field.Name = "versionId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(VersionId);
        oprot.WriteFieldEnd();
      }
      if (__isset.appId) {
        field.Name = "appId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(AppId);
        oprot.WriteFieldEnd();
      }
      if (AppKey != null && __isset.appKey) {
        field.Name = "appKey";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AppKey);
        oprot.WriteFieldEnd();
      }
      if (VersionKey != null && __isset.versionKey) {
        field.Name = "versionKey";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(VersionKey);
        oprot.WriteFieldEnd();
      }
      if (VersionNum != null && __isset.versionNum) {
        field.Name = "versionNum";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        VersionNum.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (VersionNumTag != null && __isset.versionNumTag) {
        field.Name = "versionNumTag";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(VersionNumTag);
        oprot.WriteFieldEnd();
      }
      if (DownloadUrlX32 != null && __isset.downloadUrlX32) {
        field.Name = "downloadUrlX32";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DownloadUrlX32);
        oprot.WriteFieldEnd();
      }
      if (DownloadUrlX64 != null && __isset.downloadUrlX64) {
        field.Name = "downloadUrlX64";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DownloadUrlX64);
        oprot.WriteFieldEnd();
      }
      if (UpdateNotes != null && __isset.updateNotes) {
        field.Name = "updateNotes";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, UpdateNotes.Count));
          foreach (string _iter8 in UpdateNotes)
          {
            oprot.WriteString(_iter8);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.updateType) {
        field.Name = "updateType";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)UpdateType);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AppVersion(");
      sb.Append("VersionId: ");
      sb.Append(VersionId);
      sb.Append(",AppId: ");
      sb.Append(AppId);
      sb.Append(",AppKey: ");
      sb.Append(AppKey);
      sb.Append(",VersionKey: ");
      sb.Append(VersionKey);
      sb.Append(",VersionNum: ");
      sb.Append(VersionNum== null ? "<null>" : VersionNum.ToString());
      sb.Append(",VersionNumTag: ");
      sb.Append(VersionNumTag);
      sb.Append(",DownloadUrlX32: ");
      sb.Append(DownloadUrlX32);
      sb.Append(",DownloadUrlX64: ");
      sb.Append(DownloadUrlX64);
      sb.Append(",UpdateNotes: ");
      if (UpdateNotes == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (string _iter9 in UpdateNotes)
        {
          sb.Append(_iter9.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",UpdateType: ");
      sb.Append(UpdateType);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
