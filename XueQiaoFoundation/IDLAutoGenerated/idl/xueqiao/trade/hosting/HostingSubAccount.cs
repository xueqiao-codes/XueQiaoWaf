/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting
{

  /// <summary>
  /// 托管机子账户
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingSubAccount : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _subAccountId;
    private string _subAccountName;
    private long _inAmount;
    private long _outAmount;
    private int _createTimestamp;
    private int _lastmodifyTimestamp;

    public long SubAccountId
    {
      get
      {
        return _subAccountId;
      }
      set
      {
        __isset.subAccountId = true;
        SetProperty(ref _subAccountId, value);
      }
    }

    public string SubAccountName
    {
      get
      {
        return _subAccountName;
      }
      set
      {
        __isset.subAccountName = true;
        SetProperty(ref _subAccountName, value);
      }
    }

    public long InAmount
    {
      get
      {
        return _inAmount;
      }
      set
      {
        __isset.inAmount = true;
        SetProperty(ref _inAmount, value);
      }
    }

    public long OutAmount
    {
      get
      {
        return _outAmount;
      }
      set
      {
        __isset.outAmount = true;
        SetProperty(ref _outAmount, value);
      }
    }

    public int CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public int LastmodifyTimestamp
    {
      get
      {
        return _lastmodifyTimestamp;
      }
      set
      {
        __isset.lastmodifyTimestamp = true;
        SetProperty(ref _lastmodifyTimestamp, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool subAccountId;
      public bool subAccountName;
      public bool inAmount;
      public bool outAmount;
      public bool createTimestamp;
      public bool lastmodifyTimestamp;
    }

    public HostingSubAccount() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              SubAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              SubAccountName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              InAmount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              OutAmount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              CreateTimestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              LastmodifyTimestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingSubAccount");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.subAccountId) {
        field.Name = "subAccountId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SubAccountId);
        oprot.WriteFieldEnd();
      }
      if (SubAccountName != null && __isset.subAccountName) {
        field.Name = "subAccountName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SubAccountName);
        oprot.WriteFieldEnd();
      }
      if (__isset.inAmount) {
        field.Name = "inAmount";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(InAmount);
        oprot.WriteFieldEnd();
      }
      if (__isset.outAmount) {
        field.Name = "outAmount";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(OutAmount);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastmodifyTimestamp) {
        field.Name = "lastmodifyTimestamp";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LastmodifyTimestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingSubAccount(");
      sb.Append("SubAccountId: ");
      sb.Append(SubAccountId);
      sb.Append(",SubAccountName: ");
      sb.Append(SubAccountName);
      sb.Append(",InAmount: ");
      sb.Append(InAmount);
      sb.Append(",OutAmount: ");
      sb.Append(OutAmount);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastmodifyTimestamp: ");
      sb.Append(LastmodifyTimestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
