/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.terminal.ao
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingTAFundItem : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private long _tradeAccountId;
    private long _updateTimestampMs;
    private xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund _totalFund;
    private Dictionary<string, HostingTAFundCurrencyGroup> _groupFunds;

    public long TradeAccountId
    {
      get
      {
        return _tradeAccountId;
      }
      set
      {
        __isset.tradeAccountId = true;
        SetProperty(ref _tradeAccountId, value);
      }
    }

    public long UpdateTimestampMs
    {
      get
      {
        return _updateTimestampMs;
      }
      set
      {
        __isset.updateTimestampMs = true;
        SetProperty(ref _updateTimestampMs, value);
      }
    }

    public xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund TotalFund
    {
      get
      {
        return _totalFund;
      }
      set
      {
        __isset.totalFund = true;
        SetProperty(ref _totalFund, value);
      }
    }

    public Dictionary<string, HostingTAFundCurrencyGroup> GroupFunds
    {
      get
      {
        return _groupFunds;
      }
      set
      {
        __isset.groupFunds = true;
        SetProperty(ref _groupFunds, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tradeAccountId;
      public bool updateTimestampMs;
      public bool totalFund;
      public bool groupFunds;
    }

    public HostingTAFundItem() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              TradeAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              UpdateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              TotalFund = new xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund();
              TotalFund.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                GroupFunds = new Dictionary<string, HostingTAFundCurrencyGroup>();
                TMap _map55 = iprot.ReadMapBegin();
                for( int _i56 = 0; _i56 < _map55.Count; ++_i56)
                {
                  string _key57;
                  HostingTAFundCurrencyGroup _val58;
                  _key57 = iprot.ReadString();
                  _val58 = new HostingTAFundCurrencyGroup();
                  _val58.Read(iprot);
                  GroupFunds[_key57] = _val58;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingTAFundItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.tradeAccountId) {
        field.Name = "tradeAccountId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TradeAccountId);
        oprot.WriteFieldEnd();
      }
      if (__isset.updateTimestampMs) {
        field.Name = "updateTimestampMs";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UpdateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (TotalFund != null && __isset.totalFund) {
        field.Name = "totalFund";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        TotalFund.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (GroupFunds != null && __isset.groupFunds) {
        field.Name = "groupFunds";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, GroupFunds.Count));
          foreach (string _iter59 in GroupFunds.Keys)
          {
            oprot.WriteString(_iter59);
            GroupFunds[_iter59].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingTAFundItem(");
      sb.Append("TradeAccountId: ");
      sb.Append(TradeAccountId);
      sb.Append(",UpdateTimestampMs: ");
      sb.Append(UpdateTimestampMs);
      sb.Append(",TotalFund: ");
      sb.Append(TotalFund== null ? "<null>" : TotalFund.ToString());
      sb.Append(",GroupFunds: ");
      if (GroupFunds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (string _iter60 in GroupFunds.Keys)
        {
          sb.Append(_iter60.ToString());
          sb.Append(":");
          sb.Append(GroupFunds[_iter60].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(")");
      return sb.ToString();
    }

  }

}
