/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.terminal.ao
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryHostingTradeAccountOption : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private string _loginUserNamePartical;
    private string _loginUserNameWhole;
    private THashSet<xueqiao.trade.hosting.TradeAccountState> _inAccountStates;
    private THashSet<xueqiao.trade.hosting.TradeAccountState> _notInAccountStates;
    private long _tradeAccountId;
    private int _brokerId;

    public string LoginUserNamePartical
    {
      get
      {
        return _loginUserNamePartical;
      }
      set
      {
        __isset.loginUserNamePartical = true;
        SetProperty(ref _loginUserNamePartical, value);
      }
    }

    public string LoginUserNameWhole
    {
      get
      {
        return _loginUserNameWhole;
      }
      set
      {
        __isset.loginUserNameWhole = true;
        SetProperty(ref _loginUserNameWhole, value);
      }
    }

    public THashSet<xueqiao.trade.hosting.TradeAccountState> InAccountStates
    {
      get
      {
        return _inAccountStates;
      }
      set
      {
        __isset.inAccountStates = true;
        SetProperty(ref _inAccountStates, value);
      }
    }

    public THashSet<xueqiao.trade.hosting.TradeAccountState> NotInAccountStates
    {
      get
      {
        return _notInAccountStates;
      }
      set
      {
        __isset.notInAccountStates = true;
        SetProperty(ref _notInAccountStates, value);
      }
    }

    public long TradeAccountId
    {
      get
      {
        return _tradeAccountId;
      }
      set
      {
        __isset.tradeAccountId = true;
        SetProperty(ref _tradeAccountId, value);
      }
    }

    public int BrokerId
    {
      get
      {
        return _brokerId;
      }
      set
      {
        __isset.brokerId = true;
        SetProperty(ref _brokerId, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool loginUserNamePartical;
      public bool loginUserNameWhole;
      public bool inAccountStates;
      public bool notInAccountStates;
      public bool tradeAccountId;
      public bool brokerId;
    }

    public QueryHostingTradeAccountOption() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 2:
            if (field.Type == TType.String) {
              LoginUserNamePartical = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              LoginUserNameWhole = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Set) {
              {
                InAccountStates = new THashSet<xueqiao.trade.hosting.TradeAccountState>();
                TSet _set10 = iprot.ReadSetBegin();
                for( int _i11 = 0; _i11 < _set10.Count; ++_i11)
                {
                  xueqiao.trade.hosting.TradeAccountState _elem12 = (xueqiao.trade.hosting.TradeAccountState)0;
                  _elem12 = (xueqiao.trade.hosting.TradeAccountState)iprot.ReadI32();
                  InAccountStates.Add(_elem12);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Set) {
              {
                NotInAccountStates = new THashSet<xueqiao.trade.hosting.TradeAccountState>();
                TSet _set13 = iprot.ReadSetBegin();
                for( int _i14 = 0; _i14 < _set13.Count; ++_i14)
                {
                  xueqiao.trade.hosting.TradeAccountState _elem15 = (xueqiao.trade.hosting.TradeAccountState)0;
                  _elem15 = (xueqiao.trade.hosting.TradeAccountState)iprot.ReadI32();
                  NotInAccountStates.Add(_elem15);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              TradeAccountId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              BrokerId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryHostingTradeAccountOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (LoginUserNamePartical != null && __isset.loginUserNamePartical) {
        field.Name = "loginUserNamePartical";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoginUserNamePartical);
        oprot.WriteFieldEnd();
      }
      if (LoginUserNameWhole != null && __isset.loginUserNameWhole) {
        field.Name = "loginUserNameWhole";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoginUserNameWhole);
        oprot.WriteFieldEnd();
      }
      if (InAccountStates != null && __isset.inAccountStates) {
        field.Name = "inAccountStates";
        field.Type = TType.Set;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.I32, InAccountStates.Count));
          foreach (xueqiao.trade.hosting.TradeAccountState _iter16 in InAccountStates)
          {
            oprot.WriteI32((int)_iter16);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (NotInAccountStates != null && __isset.notInAccountStates) {
        field.Name = "notInAccountStates";
        field.Type = TType.Set;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.I32, NotInAccountStates.Count));
          foreach (xueqiao.trade.hosting.TradeAccountState _iter17 in NotInAccountStates)
          {
            oprot.WriteI32((int)_iter17);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.tradeAccountId) {
        field.Name = "tradeAccountId";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TradeAccountId);
        oprot.WriteFieldEnd();
      }
      if (__isset.brokerId) {
        field.Name = "brokerId";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BrokerId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QueryHostingTradeAccountOption(");
      sb.Append("LoginUserNamePartical: ");
      sb.Append(LoginUserNamePartical);
      sb.Append(",LoginUserNameWhole: ");
      sb.Append(LoginUserNameWhole);
      sb.Append(",InAccountStates: ");
      if (InAccountStates == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (xueqiao.trade.hosting.TradeAccountState _iter18 in InAccountStates)
        {
          sb.Append(_iter18.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",NotInAccountStates: ");
      if (NotInAccountStates == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (xueqiao.trade.hosting.TradeAccountState _iter19 in NotInAccountStates)
        {
          sb.Append(_iter19.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",TradeAccountId: ");
      sb.Append(TradeAccountId);
      sb.Append(",BrokerId: ");
      sb.Append(BrokerId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
