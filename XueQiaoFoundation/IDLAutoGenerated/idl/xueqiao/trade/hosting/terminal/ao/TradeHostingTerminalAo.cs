/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting.terminal.ao
{
  public partial class TradeHostingTerminalAo {
    public interface Iface {
      /// <summary>
      /// 子用户列表页查询
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.QueryHostingUserPage getHostingUserPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.QueryHostingUserOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getHostingUserPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.QueryHostingUserOption queryOption, IndexedPageOption pageOption);
      xueqiao.trade.hosting.QueryHostingUserPage End_getHostingUserPage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 用户维持session心跳
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      void heartBeat(PlatformArgs platformArgs, LandingInfo landingInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_heartBeat(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo);
      void End_heartBeat(IAsyncResult asyncResult);
      #endif
      void logout(PlatformArgs platformArgs, LandingInfo landingInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_logout(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo);
      void End_logout(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 根据子用户ID获取其视图详情(包括已经标记删除的), 最大同时获取50个
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="composeGraphIds"></param>
      Dictionary<long, HostingComposeViewDetail> getComposeViewDetails(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> composeGraphIds);
      #if SILVERLIGHT
      IAsyncResult Begin_getComposeViewDetails(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> composeGraphIds);
      Dictionary<long, HostingComposeViewDetail> End_getComposeViewDetails(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 更改组合视图小数点精确位数
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="composeGraphId"></param>
      /// <param name="precisionNumber"></param>
      void changeComposeViewPrecisionNumber(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, short precisionNumber);
      #if SILVERLIGHT
      IAsyncResult Begin_changeComposeViewPrecisionNumber(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, short precisionNumber);
      void End_changeComposeViewPrecisionNumber(IAsyncResult asyncResult);
      #endif
      long createComposeGraph(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingComposeGraph newGraph, string aliasName, short precisionNumber);
      #if SILVERLIGHT
      IAsyncResult Begin_createComposeGraph(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingComposeGraph newGraph, string aliasName, short precisionNumber);
      long End_createComposeGraph(IAsyncResult asyncResult);
      #endif
      void delComposeView(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId);
      #if SILVERLIGHT
      IAsyncResult Begin_delComposeView(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId);
      void End_delComposeView(IAsyncResult asyncResult);
      #endif
      QueryHostingComposeViewDetailPage getComposeViewDetailPage(PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingComposeViewDetailOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getComposeViewDetailPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingComposeViewDetailOption queryOption, IndexedPageOption pageOption);
      QueryHostingComposeViewDetailPage End_getComposeViewDetailPage(IAsyncResult asyncResult);
      #endif
      QuerySameComposeGraphsPage getSameComposeGraphsPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingComposeGraph graph, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getSameComposeGraphsPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingComposeGraph graph, IndexedPageOption pageOption);
      QuerySameComposeGraphsPage End_getSameComposeGraphsPage(IAsyncResult asyncResult);
      #endif
      void addComposeViewBySearch(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string composeGraphKey, string aliasName, short precisionNumber);
      #if SILVERLIGHT
      IAsyncResult Begin_addComposeViewBySearch(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string composeGraphKey, string aliasName, short precisionNumber);
      void End_addComposeViewBySearch(IAsyncResult asyncResult);
      #endif
      void subscribeComposeViewQuotation(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId);
      #if SILVERLIGHT
      IAsyncResult Begin_subscribeComposeViewQuotation(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId);
      void End_subscribeComposeViewQuotation(IAsyncResult asyncResult);
      #endif
      void unSubscribeComposeViewQuotation(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId);
      #if SILVERLIGHT
      IAsyncResult Begin_unSubscribeComposeViewQuotation(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId);
      void End_unSubscribeComposeViewQuotation(IAsyncResult asyncResult);
      #endif
      void changeComposeViewAliasName(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string aliasName);
      #if SILVERLIGHT
      IAsyncResult Begin_changeComposeViewAliasName(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string aliasName);
      void End_changeComposeViewAliasName(IAsyncResult asyncResult);
      #endif
      Dictionary<long, xueqiao.trade.hosting.HostingComposeGraph> getComposeGraphs(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> composeGraphIds);
      #if SILVERLIGHT
      IAsyncResult Begin_getComposeGraphs(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> composeGraphIds);
      Dictionary<long, xueqiao.trade.hosting.HostingComposeGraph> End_getComposeGraphs(IAsyncResult asyncResult);
      #endif
      void addComposeViewByShare(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string aliasName, short precisionNumber);
      #if SILVERLIGHT
      IAsyncResult Begin_addComposeViewByShare(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string aliasName, short precisionNumber);
      void End_addComposeViewByShare(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 添加交易账号
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="newAccount"></param>
      long addTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingTradeAccount newAccount);
      #if SILVERLIGHT
      IAsyncResult Begin_addTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingTradeAccount newAccount);
      long End_addTradeAccount(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 用户禁用账号，实际上是标记账号无效, 并不会一次性物理删除
      ///  如果有关联的账号的订单，则账号会保留数据信息
      ///  如果账号无关联订单信息，则账号会被移除
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      void disableTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_disableTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId);
      void End_disableTradeAccount(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询交易账户页
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      QueryHostingTradeAccountPage getTradeAccountPage(PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingTradeAccountOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getTradeAccountPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingTradeAccountOption queryOption, IndexedPageOption pageOption);
      QueryHostingTradeAccountPage End_getTradeAccountPage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 重新启用账户
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      void enableTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_enableTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId);
      void End_enableTradeAccount(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 更新账号信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="updateAccount"></param>
      void updateTradeAccountInfo(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingTradeAccount updateAccount);
      #if SILVERLIGHT
      IAsyncResult Begin_updateTradeAccountInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingTradeAccount updateAccount);
      void End_updateTradeAccountInfo(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 删除账号
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      void rmTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_rmTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId);
      void End_rmTradeAccount(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询个人用户交易账户页
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      List<xueqiao.trade.hosting.HostingTradeAccount> getPersonalUserTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_getPersonalUserTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      List<xueqiao.trade.hosting.HostingTradeAccount> End_getPersonalUserTradeAccount(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取子账户订单路由配置树
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      xueqiao.trade.hosting.HostingOrderRouteTree getHostingOrderRouteTree(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_getHostingOrderRouteTree(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      xueqiao.trade.hosting.HostingOrderRouteTree End_getHostingOrderRouteTree(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 更新用户订单路由配置树
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="routeTree"></param>
      void updateHostingOrderRouteTree(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, xueqiao.trade.hosting.HostingOrderRouteTree routeTree);
      #if SILVERLIGHT
      IAsyncResult Begin_updateHostingOrderRouteTree(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, xueqiao.trade.hosting.HostingOrderRouteTree routeTree);
      void End_updateHostingOrderRouteTree(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取用户订单路由配置树在服务端的版本
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      int getHostingOrderRouteTreeVersion(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_getHostingOrderRouteTreeVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      int End_getHostingOrderRouteTreeVersion(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取个人用户的子账户订单路由配置树
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      xueqiao.trade.hosting.HostingOrderRouteTree getPersonalUserHostingOrderRouteTree(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_getPersonalUserHostingOrderRouteTree(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      xueqiao.trade.hosting.HostingOrderRouteTree End_getPersonalUserHostingOrderRouteTree(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 雪橇订单格式为${MACHINEID}_${SUBACCOUNTID}_${SUBUSERID}_${LOGINTIMESTAMP}_{客户端自增}
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="orderId"></param>
      /// <param name="orderType"></param>
      /// <param name="orderTarget"></param>
      /// <param name="orderDetail"></param>
      void createXQOrder(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string orderId, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType orderType, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget orderTarget, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderDetail orderDetail);
      #if SILVERLIGHT
      IAsyncResult Begin_createXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string orderId, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType orderType, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget orderTarget, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderDetail orderDetail);
      void End_createXQOrder(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 批量暂停雪橇订单
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="orderIds"></param>
      Dictionary<string, ErrorInfo> batchSuspendXQOrders(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds);
      #if SILVERLIGHT
      IAsyncResult Begin_batchSuspendXQOrders(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds);
      Dictionary<string, ErrorInfo> End_batchSuspendXQOrders(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 批量恢复雪橇订单
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="orderIds"></param>
      /// <param name="resumeModes"></param>
      Dictionary<string, ErrorInfo> batchResumeXQOrders(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds, Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderResumeMode> resumeModes);
      #if SILVERLIGHT
      IAsyncResult Begin_batchResumeXQOrders(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds, Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderResumeMode> resumeModes);
      Dictionary<string, ErrorInfo> End_batchResumeXQOrders(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 批量撤销雪橇订单
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="orderIds"></param>
      Dictionary<string, ErrorInfo> batchCancelXQOrders(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds);
      #if SILVERLIGHT
      IAsyncResult Begin_batchCancelXQOrders(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds);
      Dictionary<string, ErrorInfo> End_batchCancelXQOrders(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取未清理订单和成交信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="qryOption"></param>
      /// <param name="pageOption"></param>
      HostingXQOrderWithTradeListPage getEffectXQOrderWithTradeListPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.arbitrage.thriftapi.QueryEffectXQOrderIndexOption qryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getEffectXQOrderWithTradeListPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.arbitrage.thriftapi.QueryEffectXQOrderIndexOption qryOption, IndexedPageOption pageOption);
      HostingXQOrderWithTradeListPage End_getEffectXQOrderWithTradeListPage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 批量查询订单的信息和其成交信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="orderIds"></param>
      Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderWithTradeList> getXQOrderWithTradeLists(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds);
      #if SILVERLIGHT
      IAsyncResult Begin_getXQOrderWithTradeLists(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds);
      Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderWithTradeList> End_getXQOrderWithTradeLists(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询订单的执行详情
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="orderId"></param>
      xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderExecDetail getXQOrderExecDetail(PlatformArgs platformArgs, LandingInfo landingInfo, string orderId);
      #if SILVERLIGHT
      IAsyncResult Begin_getXQOrderExecDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string orderId);
      xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderExecDetail End_getXQOrderExecDetail(IAsyncResult asyncResult);
      #endif
      HostingXQOrderPage getXQOrderHisPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.history.thriftapi.QueryXQOrderHisIndexItemOption qryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getXQOrderHisPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.history.thriftapi.QueryXQOrderHisIndexItemOption qryOption, IndexedPageOption pageOption);
      HostingXQOrderPage End_getXQOrderHisPage(IAsyncResult asyncResult);
      #endif
      HostingXQTradePage getXQTradeHisPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.history.thriftapi.QueryXQTradeHisIndexItemOption qryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getXQTradeHisPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.history.thriftapi.QueryXQTradeHisIndexItemOption qryOption, IndexedPageOption pageOption);
      HostingXQTradePage End_getXQTradeHisPage(IAsyncResult asyncResult);
      #endif
      HostingUserSetting getUserSetting(PlatformArgs platformArgs, LandingInfo landingInfo, string key);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string key);
      HostingUserSetting End_getUserSetting(IAsyncResult asyncResult);
      #endif
      void updateUserSetting(PlatformArgs platformArgs, LandingInfo landingInfo, string key, HostingUserSetting setting);
      #if SILVERLIGHT
      IAsyncResult Begin_updateUserSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string key, HostingUserSetting setting);
      void End_updateUserSetting(IAsyncResult asyncResult);
      #endif
      int getUserSettingVersion(PlatformArgs platformArgs, LandingInfo landingInfo, string key);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserSettingVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string key);
      int End_getUserSettingVersion(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取子账户以及关联信息列表
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      HostingSAWRUItemListPage getSAWRUTListPage(PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingSAWRUItemListOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getSAWRUTListPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingSAWRUItemListOption queryOption, IndexedPageOption pageOption);
      HostingSAWRUItemListPage End_getSAWRUTListPage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取子账户关联的列表
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountIds"></param>
      Dictionary<long, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> getSARUTBySubAccountId(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> subAccountIds);
      #if SILVERLIGHT
      IAsyncResult Begin_getSARUTBySubAccountId(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> subAccountIds);
      Dictionary<long, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> End_getSARUTBySubAccountId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取用户的关联子账户列表
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subUserIds"></param>
      Dictionary<int, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> getSARUTBySubUserId(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<int> subUserIds);
      #if SILVERLIGHT
      IAsyncResult Begin_getSARUTBySubUserId(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<int> subUserIds);
      Dictionary<int, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> End_getSARUTBySubUserId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 分配子账户列表
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="relatedSubUserIds"></param>
      /// <param name="unRelatedSubUserIds"></param>
      void assignSubAccountRelatedUsers(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, THashSet<int> relatedSubUserIds, THashSet<int> unRelatedSubUserIds);
      #if SILVERLIGHT
      IAsyncResult Begin_assignSubAccountRelatedUsers(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, THashSet<int> relatedSubUserIds, THashSet<int> unRelatedSubUserIds);
      void End_assignSubAccountRelatedUsers(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 子账户重命名
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="subAccountName"></param>
      void renameSubAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string subAccountName);
      #if SILVERLIGHT
      IAsyncResult Begin_renameSubAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string subAccountName);
      void End_renameSubAccount(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 创建子账户
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="newSubAccount"></param>
      long createSubAccount(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingSubAccount newSubAccount);
      #if SILVERLIGHT
      IAsyncResult Begin_createSubAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingSubAccount newSubAccount);
      long End_createSubAccount(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询实时雪橇合约持仓, 查询实时数据不具备分页
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      xueqiao.trade.hosting.asset.thriftapi.HostingSledContractPositionPage getHostingSledContractPosition(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingSledContractPositionOption option);
      #if SILVERLIGHT
      IAsyncResult Begin_getHostingSledContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingSledContractPositionOption option);
      xueqiao.trade.hosting.asset.thriftapi.HostingSledContractPositionPage End_getHostingSledContractPosition(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询子账号实时资金, 查询实时数据不具备分页
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      xueqiao.trade.hosting.asset.thriftapi.HostingFundPage getHostingSubAccountFund(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingFundOption option);
      #if SILVERLIGHT
      IAsyncResult Begin_getHostingSubAccountFund(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingFundOption option);
      xueqiao.trade.hosting.asset.thriftapi.HostingFundPage End_getHostingSubAccountFund(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 子账号出入金
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="fundChange"></param>
      xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund changeSubAccountFund(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.FundChange fundChange);
      #if SILVERLIGHT
      IAsyncResult Begin_changeSubAccountFund(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.FundChange fundChange);
      xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund End_changeSubAccountFund(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 子账号设置信用额度
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="amountChange"></param>
      xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund setSubAccountCreditAmount(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.CreditAmountChange amountChange);
      #if SILVERLIGHT
      IAsyncResult Begin_setSubAccountCreditAmount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.CreditAmountChange amountChange);
      xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund End_setSubAccountCreditAmount(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询实时雪橇合约持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage getAssetPositionTradeDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingAssetTradeDetailOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getAssetPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingAssetTradeDetailOption option, IndexedPageOption pageOption);
      xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage End_getAssetPositionTradeDetail(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询子账号出入金记录
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountMoneyRecordPage getHostingSubAccountMoneyRecord(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqMoneyRecordOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getHostingSubAccountMoneyRecord(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqMoneyRecordOption option, IndexedPageOption pageOption);
      xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountMoneyRecordPage End_getHostingSubAccountMoneyRecord(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询子账号的历史资金信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.asset.thriftapi.HostingFundPage getSubAccountFundHistory(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSubAccountFundHistoryOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getSubAccountFundHistory(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSubAccountFundHistoryOption option, IndexedPageOption pageOption);
      xueqiao.trade.hosting.asset.thriftapi.HostingFundPage End_getSubAccountFundHistory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询子账号的历史持仓信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.asset.thriftapi.SettlementPositionDetailPage getSubAccountPositionHistory(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionDetailOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getSubAccountPositionHistory(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionDetailOption option, IndexedPageOption pageOption);
      xueqiao.trade.hosting.asset.thriftapi.SettlementPositionDetailPage End_getSubAccountPositionHistory(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询子账号的历史持仓的持仓明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage getSubAccountPositionHistoryTradeDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionTradeDetailOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getSubAccountPositionHistoryTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionTradeDetailOption option, IndexedPageOption pageOption);
      xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage End_getSubAccountPositionHistoryTradeDetail(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 删除操作账号中过期合约的持仓(合约已经过期，而持仓在其他地方平掉，但是在雪橇的操作账号中依然显示存在)
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="sledContractId"></param>
      void deleteExpiredContractPosition(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long sledContractId);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteExpiredContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long sledContractId);
      void End_deleteExpiredContractPosition(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取交易账户目前保留的最新的资金信息，如果查询不到，则list为空，否则list中会存在一个对应的资金信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      List<HostingTAFundItem> getTradeAccountFundNow(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_getTradeAccountFundNow(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId);
      List<HostingTAFundItem> End_getTradeAccountFundNow(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询资金历史条目, 最大可查一年内的资金变动每日变动
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      /// <param name="fundDateBegin"></param>
      /// <param name="fundDateEnd"></param>
      List<HostingTAFundHisItem> getTradeAccountFundHis(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string fundDateBegin, string fundDateEnd);
      #if SILVERLIGHT
      IAsyncResult Begin_getTradeAccountFundHis(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string fundDateBegin, string fundDateEnd);
      List<HostingTAFundHisItem> End_getTradeAccountFundHis(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询历史结算信息， 最大可查询一个月内的所有结算单
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      /// <param name="settlementDateBegin"></param>
      /// <param name="settlementDateEnd"></param>
      List<xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo> getTradeAccountSettlementInfos(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string settlementDateBegin, string settlementDateEnd);
      #if SILVERLIGHT
      IAsyncResult Begin_getTradeAccountSettlementInfos(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string settlementDateBegin, string settlementDateEnd);
      List<xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo> End_getTradeAccountSettlementInfos(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询历史结算信息,包含雪橇成交建议查询时间， 最大可查询一个月内的所有结算单
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      /// <param name="settlementDateBegin"></param>
      /// <param name="settlementDateEnd"></param>
      List<TradeAccountSettlementInfoWithRelatedTime> getTradeAccountSettlementInfosWithRelatedTime(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string settlementDateBegin, string settlementDateEnd);
      #if SILVERLIGHT
      IAsyncResult Begin_getTradeAccountSettlementInfosWithRelatedTime(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string settlementDateBegin, string settlementDateEnd);
      List<TradeAccountSettlementInfoWithRelatedTime> End_getTradeAccountSettlementInfosWithRelatedTime(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询资金账户持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage getTradeAccountPositionTradeDetail(PlatformArgs platformArgs, LandingInfo landingInfo, ReqTradeAccountPositionOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getTradeAccountPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, ReqTradeAccountPositionOption option, IndexedPageOption pageOption);
      xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage End_getTradeAccountPositionTradeDetail(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询资金账户持仓核对历史
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.position.adjust.thriftapi.PositionVerifyPage reqPositionVerify(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionVerifyOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_reqPositionVerify(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionVerifyOption option, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.adjust.thriftapi.PositionVerifyPage End_reqPositionVerify(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询资金账户持仓核对明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.position.adjust.thriftapi.PositionDifferencePage reqPositionDifference(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionDifferenceOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_reqPositionDifference(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionDifferenceOption option, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.adjust.thriftapi.PositionDifferencePage End_reqPositionDifference(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 录入持仓明细信息
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="positionManualInputs"></param>
      xueqiao.trade.hosting.position.adjust.thriftapi.ManualInputPositionResp manualInputPosition(PlatformArgs platformArgs, LandingInfo landingInfo, List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput> positionManualInputs);
      #if SILVERLIGHT
      IAsyncResult Begin_manualInputPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput> positionManualInputs);
      xueqiao.trade.hosting.position.adjust.thriftapi.ManualInputPositionResp End_manualInputPosition(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询未分配的持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.position.adjust.thriftapi.PositionUnassignedPage reqPositionUnassigned(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionUnassignedOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_reqPositionUnassigned(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionUnassignedOption option, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.adjust.thriftapi.PositionUnassignedPage End_reqPositionUnassigned(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 分配持仓明细信息
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="assignOption"></param>
      xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp assignPosition(PlatformArgs platformArgs, LandingInfo landingInfo, List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption> assignOption);
      #if SILVERLIGHT
      IAsyncResult Begin_assignPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption> assignOption);
      xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp End_assignPosition(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询持仓编辑锁信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="lockKey"></param>
      xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock reqPositionEditLock(PlatformArgs platformArgs, LandingInfo landingInfo, string lockKey);
      #if SILVERLIGHT
      IAsyncResult Begin_reqPositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string lockKey);
      xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock End_reqPositionEditLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 添加持仓编辑锁信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="positionEditLock"></param>
      void addPositionEditLock(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock positionEditLock);
      #if SILVERLIGHT
      IAsyncResult Begin_addPositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock positionEditLock);
      void End_addPositionEditLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 删除持仓编辑锁信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="positionEditLock"></param>
      void removePositionEditLock(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock positionEditLock);
      #if SILVERLIGHT
      IAsyncResult Begin_removePositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock positionEditLock);
      void End_removePositionEditLock(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询日常持仓核对明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifferencePage reqDailyPositionDifference(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqDailyPositionDifferenceOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_reqDailyPositionDifference(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqDailyPositionDifferenceOption option, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifferencePage End_reqDailyPositionDifference(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 更新日常持仓核对的备注和核对状态信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="difference"></param>
      void updateDailyPositionDifferenceNote(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifference difference);
      #if SILVERLIGHT
      IAsyncResult Begin_updateDailyPositionDifferenceNote(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifference difference);
      void End_updateDailyPositionDifferenceNote(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询已分配的持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignedPage reqPositionAssigned(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionAssignedOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_reqPositionAssigned(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionAssignedOption option, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignedPage End_reqPositionAssigned(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 录入统计组合
      /// (过期废弃)
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="contructComposeReq"></param>
      void contructCompose(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.StatContructComposeReq contructComposeReq);
      #if SILVERLIGHT
      IAsyncResult Begin_contructCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.StatContructComposeReq contructComposeReq);
      void End_contructCompose(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 拆分统计组合
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="disassembleComposePositionReq"></param>
      void disassembleCompose(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.DisassembleComposePositionReq disassembleComposePositionReq);
      #if SILVERLIGHT
      IAsyncResult Begin_disassembleCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.DisassembleComposePositionReq disassembleComposePositionReq);
      void End_disassembleCompose(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 批量平仓
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="batchClosedPositionReq"></param>
      void batchClosePosition(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.BatchClosedPositionReq batchClosedPositionReq);
      #if SILVERLIGHT
      IAsyncResult Begin_batchClosePosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.BatchClosedPositionReq batchClosedPositionReq);
      void End_batchClosePosition(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 恢复当天平仓
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="targetKey"></param>
      /// <param name="targetType"></param>
      void recoverClosedPosition(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType);
      #if SILVERLIGHT
      IAsyncResult Begin_recoverClosedPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType);
      void End_recoverClosedPosition(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 合并合约为组合
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="mergeToComposeReq"></param>
      void mergeToCompose(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.StatMergeToComposeReq mergeToComposeReq);
      #if SILVERLIGHT
      IAsyncResult Begin_mergeToCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.StatMergeToComposeReq mergeToComposeReq);
      void End_mergeToCompose(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 删除过期合约持仓
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="sledContractId"></param>
      void deleteExpiredStatContractPosition(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long sledContractId);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteExpiredStatContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long sledContractId);
      void End_deleteExpiredStatContractPosition(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询统计持仓
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.position.statis.StatPositionSummaryPage queryStatPositionSummaryPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryStatPositionSummaryPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.statis.StatPositionSummaryPage End_queryStatPositionSummaryPage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询持仓详情
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.position.statis.StatPositionItemPage queryStatPositionItemPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionItemOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryStatPositionItemPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionItemOption queryOption, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.statis.StatPositionItemPage End_queryStatPositionItemPage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询当天平仓记录
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="targetKey"></param>
      /// <param name="targetType"></param>
      xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage queryCurrentDayStatClosedPositionPage(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType);
      #if SILVERLIGHT
      IAsyncResult Begin_queryCurrentDayStatClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType);
      xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage End_queryCurrentDayStatClosedPositionPage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询平仓明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.position.statis.StatClosedPositionDetail queryStatClosedPositionDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatClosedPositionItemOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryStatClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatClosedPositionItemOption queryOption, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.statis.StatClosedPositionDetail End_queryStatClosedPositionDetail(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询归档记录
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage queryArchivedClosedPositionPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatClosedPositionDateSummaryOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryArchivedClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatClosedPositionDateSummaryOption queryOption, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage End_queryArchivedClosedPositionPage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询归档（平仓）明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.position.statis.StatClosedPositionDetail queryArchivedClosedPositionDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatArchiveItemOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryArchivedClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatArchiveItemOption queryOption, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.statis.StatClosedPositionDetail End_queryArchivedClosedPositionDetail(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.position.statis.StatPositionSummaryExPage queryStatPositionSummaryExPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryStatPositionSummaryExPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.statis.StatPositionSummaryExPage End_queryStatPositionSummaryExPage(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.position.statis.StatPositionUnitPage queryStatPositionUnitPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionUnitOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryStatPositionUnitPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionUnitOption queryOption, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.statis.StatPositionUnitPage End_queryStatPositionUnitPage(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage queryHistoryClosedPositionPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryHistoryClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage End_queryHistoryClosedPositionPage(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.position.statis.StatClosedPositionDetail queryHistoryClosedPositionDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryHistoryClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.statis.StatClosedPositionDetail End_queryHistoryClosedPositionDetail(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询相关子账户的所有瘸腿成交的TaskNote
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="qryOption"></param>
      /// <param name="pageOption"></param>
      xueqiao.trade.hosting.tasknote.thriftapi.HostingTaskNotePage getXQTradeLameTaskNotePage(PlatformArgs platformArgs, LandingInfo landingInfo, QueryXQTradeLameTaskNotePageOption qryOption, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_getXQTradeLameTaskNotePage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, QueryXQTradeLameTaskNotePageOption qryOption, IndexedPageOption pageOption);
      xueqiao.trade.hosting.tasknote.thriftapi.HostingTaskNotePage End_getXQTradeLameTaskNotePage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 批量删除一个子账户下的TaskNote
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="xqTradeIds"></param>
      Dictionary<long, ErrorInfo> batchDeleteXQTradeLameTaskNotes(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, THashSet<long> xqTradeIds);
      #if SILVERLIGHT
      IAsyncResult Begin_batchDeleteXQTradeLameTaskNotes(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, THashSet<long> xqTradeIds);
      Dictionary<long, ErrorInfo> End_batchDeleteXQTradeLameTaskNotes(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询用户托管机消息的接口
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.mailbox.user.message.thriftapi.UserMessagePage queryMailBoxMessage(PlatformArgs platformArgs, LandingInfo landingInfo, ReqMailBoxMessageOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryMailBoxMessage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, ReqMailBoxMessageOption option, IndexedPageOption pageOption);
      xueqiao.mailbox.user.message.thriftapi.UserMessagePage End_queryMailBoxMessage(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 标记用户托管机消息为已读
      /// hostingMessageIds empty 表示所有未读状态设置为已读
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="hostingMessageIds"></param>
      bool markMessageAsRead(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> hostingMessageIds);
      #if SILVERLIGHT
      IAsyncResult Begin_markMessageAsRead(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> hostingMessageIds);
      bool End_markMessageAsRead(IAsyncResult asyncResult);
      #endif
      List<xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskSupportedItem> getAllSupportedItems(PlatformArgs platformArgs, LandingInfo landingInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_getAllSupportedItems(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo);
      List<xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskSupportedItem> End_getAllSupportedItems(IAsyncResult asyncResult);
      #endif
      int getRiskRuleJointVersion(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_getRiskRuleJointVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      int End_getRiskRuleJointVersion(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint getRiskRuleJoint(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_getRiskRuleJoint(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint End_getRiskRuleJoint(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint batchSetSupportedItems(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, THashSet<string> openedItemIds, THashSet<string> closedItemIds);
      #if SILVERLIGHT
      IAsyncResult Begin_batchSetSupportedItems(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, THashSet<string> openedItemIds, THashSet<string> closedItemIds);
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint End_batchSetSupportedItems(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint batchSetTradedCommodityItems(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, THashSet<long> enabledCommodityIds, THashSet<long> disabledCommodityIds);
      #if SILVERLIGHT
      IAsyncResult Begin_batchSetTradedCommodityItems(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, THashSet<long> enabledCommodityIds, THashSet<long> disabledCommodityIds);
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint End_batchSetTradedCommodityItems(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint batchSetGlobalRules(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem> ruleItems);
      #if SILVERLIGHT
      IAsyncResult Begin_batchSetGlobalRules(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem> ruleItems);
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint End_batchSetGlobalRules(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint batchSetCommodityRules(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, Dictionary<long, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem>> rules);
      #if SILVERLIGHT
      IAsyncResult Begin_batchSetCommodityRules(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, Dictionary<long, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem>> rules);
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint End_batchSetCommodityRules(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint setRiskEnabled(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, bool riskEnabled);
      #if SILVERLIGHT
      IAsyncResult Begin_setRiskEnabled(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, bool riskEnabled);
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint End_setRiskEnabled(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskFrameDataInfo getRiskFrameDataInfo(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_getRiskFrameDataInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskFrameDataInfo End_getRiskFrameDataInfo(IAsyncResult asyncResult);
      #endif
      void setGeneralMarginSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings marginSettings);
      #if SILVERLIGHT
      IAsyncResult Begin_setGeneralMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings marginSettings);
      void End_setGeneralMarginSetting(IAsyncResult asyncResult);
      #endif
      void setGeneralCommissionSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings commissionSettings);
      #if SILVERLIGHT
      IAsyncResult Begin_setGeneralCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings commissionSettings);
      void End_setGeneralCommissionSetting(IAsyncResult asyncResult);
      #endif
      void addSpecMarginSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings marginSettings);
      #if SILVERLIGHT
      IAsyncResult Begin_addSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings marginSettings);
      void End_addSpecMarginSetting(IAsyncResult asyncResult);
      #endif
      void addSpecCommissionSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings commissionSettings);
      #if SILVERLIGHT
      IAsyncResult Begin_addSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings commissionSettings);
      void End_addSpecCommissionSetting(IAsyncResult asyncResult);
      #endif
      void updateSpecMarginSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings marginSettings);
      #if SILVERLIGHT
      IAsyncResult Begin_updateSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings marginSettings);
      void End_updateSpecMarginSetting(IAsyncResult asyncResult);
      #endif
      void updateSpecCommissionSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings commissionSettings);
      #if SILVERLIGHT
      IAsyncResult Begin_updateSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings commissionSettings);
      void End_updateSpecCommissionSetting(IAsyncResult asyncResult);
      #endif
      void deleteSpecMarginSetting(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long commodityId);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long commodityId);
      void End_deleteSpecMarginSetting(IAsyncResult asyncResult);
      #endif
      void deleteSpecCommissionSetting(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long commodityId);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long commodityId);
      void End_deleteSpecCommissionSetting(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings queryXQGeneralMarginSettings(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_queryXQGeneralMarginSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings End_queryXQGeneralMarginSettings(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings queryXQGeneralCommissionSettings(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      #if SILVERLIGHT
      IAsyncResult Begin_queryXQGeneralCommissionSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId);
      xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings End_queryXQGeneralCommissionSettings(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettingPage queryXQSpecMarginSettingPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryXQSpecMarginSettingPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettingPage End_queryXQSpecMarginSettingPage(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettingPage queryXQSpecCommissionSettingPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryXQSpecCommissionSettingPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettingPage End_queryXQSpecCommissionSettingPage(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractMarginPage queryUpsideContractMarginPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryUpsideContractMarginPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractMarginPage End_queryUpsideContractMarginPage(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractCommissionPage queryUpsideContractCommissionPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryUpsideContractCommissionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractCommissionPage End_queryUpsideContractCommissionPage(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.position.fee.thriftapi.XQContractMarginPage queryXQContractMarginPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryXQContractMarginPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.fee.thriftapi.XQContractMarginPage End_queryXQContractMarginPage(IAsyncResult asyncResult);
      #endif
      xueqiao.trade.hosting.position.fee.thriftapi.XQContractCommissionPage queryXQContractCommissionPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_queryXQContractCommissionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption);
      xueqiao.trade.hosting.position.fee.thriftapi.XQContractCommissionPage End_queryXQContractCommissionPage(IAsyncResult asyncResult);
      #endif
      long addAssetAccountWorkingOrder(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.working.order.thriftapi.AssetAccount assetAccount);
      #if SILVERLIGHT
      IAsyncResult Begin_addAssetAccountWorkingOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.working.order.thriftapi.AssetAccount assetAccount);
      long End_addAssetAccountWorkingOrder(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHostingUserPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.QueryHostingUserOption queryOption, IndexedPageOption pageOption)
      {
        return send_getHostingUserPage(callback, state, platformArgs, landingInfo, queryOption, pageOption);
      }

      public xueqiao.trade.hosting.QueryHostingUserPage End_getHostingUserPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHostingUserPage();
      }

      #endif

      /// <summary>
      /// 子用户列表页查询
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.QueryHostingUserPage getHostingUserPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.QueryHostingUserOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getHostingUserPage(platformArgs, landingInfo, queryOption, pageOption);
        return recv_getHostingUserPage();

        #else
        var asyncResult = Begin_getHostingUserPage(null, null, platformArgs, landingInfo, queryOption, pageOption);
        return End_getHostingUserPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHostingUserPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.QueryHostingUserOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_getHostingUserPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.QueryHostingUserOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHostingUserPage", TMessageType.Call, seqid_));
        getHostingUserPage_args args = new getHostingUserPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.QueryHostingUserPage recv_getHostingUserPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHostingUserPage_result result = new getHostingUserPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHostingUserPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_heartBeat(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo)
      {
        return send_heartBeat(callback, state, platformArgs, landingInfo);
      }

      public void End_heartBeat(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_heartBeat();
      }

      #endif

      /// <summary>
      /// 用户维持session心跳
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      public void heartBeat(PlatformArgs platformArgs, LandingInfo landingInfo)
      {
        #if !SILVERLIGHT
        send_heartBeat(platformArgs, landingInfo);
        recv_heartBeat();

        #else
        var asyncResult = Begin_heartBeat(null, null, platformArgs, landingInfo);
        End_heartBeat(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_heartBeat(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo)
      #else
      public void send_heartBeat(PlatformArgs platformArgs, LandingInfo landingInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("heartBeat", TMessageType.Call, seqid_));
        heartBeat_args args = new heartBeat_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_heartBeat()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        heartBeat_result result = new heartBeat_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_logout(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo)
      {
        return send_logout(callback, state, platformArgs, landingInfo);
      }

      public void End_logout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_logout();
      }

      #endif

      public void logout(PlatformArgs platformArgs, LandingInfo landingInfo)
      {
        #if !SILVERLIGHT
        send_logout(platformArgs, landingInfo);
        recv_logout();

        #else
        var asyncResult = Begin_logout(null, null, platformArgs, landingInfo);
        End_logout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logout(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo)
      #else
      public void send_logout(PlatformArgs platformArgs, LandingInfo landingInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
        logout_args args = new logout_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_logout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logout_result result = new logout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getComposeViewDetails(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> composeGraphIds)
      {
        return send_getComposeViewDetails(callback, state, platformArgs, landingInfo, composeGraphIds);
      }

      public Dictionary<long, HostingComposeViewDetail> End_getComposeViewDetails(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getComposeViewDetails();
      }

      #endif

      /// <summary>
      /// 根据子用户ID获取其视图详情(包括已经标记删除的), 最大同时获取50个
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="composeGraphIds"></param>
      public Dictionary<long, HostingComposeViewDetail> getComposeViewDetails(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> composeGraphIds)
      {
        #if !SILVERLIGHT
        send_getComposeViewDetails(platformArgs, landingInfo, composeGraphIds);
        return recv_getComposeViewDetails();

        #else
        var asyncResult = Begin_getComposeViewDetails(null, null, platformArgs, landingInfo, composeGraphIds);
        return End_getComposeViewDetails(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getComposeViewDetails(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> composeGraphIds)
      #else
      public void send_getComposeViewDetails(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> composeGraphIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getComposeViewDetails", TMessageType.Call, seqid_));
        getComposeViewDetails_args args = new getComposeViewDetails_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.ComposeGraphIds = composeGraphIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<long, HostingComposeViewDetail> recv_getComposeViewDetails()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getComposeViewDetails_result result = new getComposeViewDetails_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getComposeViewDetails failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_changeComposeViewPrecisionNumber(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, short precisionNumber)
      {
        return send_changeComposeViewPrecisionNumber(callback, state, platformArgs, landingInfo, composeGraphId, precisionNumber);
      }

      public void End_changeComposeViewPrecisionNumber(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_changeComposeViewPrecisionNumber();
      }

      #endif

      /// <summary>
      /// 更改组合视图小数点精确位数
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="composeGraphId"></param>
      /// <param name="precisionNumber"></param>
      public void changeComposeViewPrecisionNumber(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, short precisionNumber)
      {
        #if !SILVERLIGHT
        send_changeComposeViewPrecisionNumber(platformArgs, landingInfo, composeGraphId, precisionNumber);
        recv_changeComposeViewPrecisionNumber();

        #else
        var asyncResult = Begin_changeComposeViewPrecisionNumber(null, null, platformArgs, landingInfo, composeGraphId, precisionNumber);
        End_changeComposeViewPrecisionNumber(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_changeComposeViewPrecisionNumber(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, short precisionNumber)
      #else
      public void send_changeComposeViewPrecisionNumber(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, short precisionNumber)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("changeComposeViewPrecisionNumber", TMessageType.Call, seqid_));
        changeComposeViewPrecisionNumber_args args = new changeComposeViewPrecisionNumber_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.ComposeGraphId = composeGraphId;
        args.PrecisionNumber = precisionNumber;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_changeComposeViewPrecisionNumber()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        changeComposeViewPrecisionNumber_result result = new changeComposeViewPrecisionNumber_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createComposeGraph(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingComposeGraph newGraph, string aliasName, short precisionNumber)
      {
        return send_createComposeGraph(callback, state, platformArgs, landingInfo, newGraph, aliasName, precisionNumber);
      }

      public long End_createComposeGraph(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createComposeGraph();
      }

      #endif

      public long createComposeGraph(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingComposeGraph newGraph, string aliasName, short precisionNumber)
      {
        #if !SILVERLIGHT
        send_createComposeGraph(platformArgs, landingInfo, newGraph, aliasName, precisionNumber);
        return recv_createComposeGraph();

        #else
        var asyncResult = Begin_createComposeGraph(null, null, platformArgs, landingInfo, newGraph, aliasName, precisionNumber);
        return End_createComposeGraph(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createComposeGraph(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingComposeGraph newGraph, string aliasName, short precisionNumber)
      #else
      public void send_createComposeGraph(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingComposeGraph newGraph, string aliasName, short precisionNumber)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createComposeGraph", TMessageType.Call, seqid_));
        createComposeGraph_args args = new createComposeGraph_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.NewGraph = newGraph;
        args.AliasName = aliasName;
        args.PrecisionNumber = precisionNumber;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_createComposeGraph()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createComposeGraph_result result = new createComposeGraph_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createComposeGraph failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_delComposeView(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId)
      {
        return send_delComposeView(callback, state, platformArgs, landingInfo, composeGraphId);
      }

      public void End_delComposeView(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_delComposeView();
      }

      #endif

      public void delComposeView(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId)
      {
        #if !SILVERLIGHT
        send_delComposeView(platformArgs, landingInfo, composeGraphId);
        recv_delComposeView();

        #else
        var asyncResult = Begin_delComposeView(null, null, platformArgs, landingInfo, composeGraphId);
        End_delComposeView(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_delComposeView(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId)
      #else
      public void send_delComposeView(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("delComposeView", TMessageType.Call, seqid_));
        delComposeView_args args = new delComposeView_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.ComposeGraphId = composeGraphId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_delComposeView()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        delComposeView_result result = new delComposeView_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getComposeViewDetailPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingComposeViewDetailOption queryOption, IndexedPageOption pageOption)
      {
        return send_getComposeViewDetailPage(callback, state, platformArgs, landingInfo, queryOption, pageOption);
      }

      public QueryHostingComposeViewDetailPage End_getComposeViewDetailPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getComposeViewDetailPage();
      }

      #endif

      public QueryHostingComposeViewDetailPage getComposeViewDetailPage(PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingComposeViewDetailOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getComposeViewDetailPage(platformArgs, landingInfo, queryOption, pageOption);
        return recv_getComposeViewDetailPage();

        #else
        var asyncResult = Begin_getComposeViewDetailPage(null, null, platformArgs, landingInfo, queryOption, pageOption);
        return End_getComposeViewDetailPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getComposeViewDetailPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingComposeViewDetailOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_getComposeViewDetailPage(PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingComposeViewDetailOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getComposeViewDetailPage", TMessageType.Call, seqid_));
        getComposeViewDetailPage_args args = new getComposeViewDetailPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public QueryHostingComposeViewDetailPage recv_getComposeViewDetailPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getComposeViewDetailPage_result result = new getComposeViewDetailPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getComposeViewDetailPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSameComposeGraphsPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingComposeGraph graph, IndexedPageOption pageOption)
      {
        return send_getSameComposeGraphsPage(callback, state, platformArgs, landingInfo, graph, pageOption);
      }

      public QuerySameComposeGraphsPage End_getSameComposeGraphsPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSameComposeGraphsPage();
      }

      #endif

      public QuerySameComposeGraphsPage getSameComposeGraphsPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingComposeGraph graph, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getSameComposeGraphsPage(platformArgs, landingInfo, graph, pageOption);
        return recv_getSameComposeGraphsPage();

        #else
        var asyncResult = Begin_getSameComposeGraphsPage(null, null, platformArgs, landingInfo, graph, pageOption);
        return End_getSameComposeGraphsPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSameComposeGraphsPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingComposeGraph graph, IndexedPageOption pageOption)
      #else
      public void send_getSameComposeGraphsPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingComposeGraph graph, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSameComposeGraphsPage", TMessageType.Call, seqid_));
        getSameComposeGraphsPage_args args = new getSameComposeGraphsPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Graph = graph;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public QuerySameComposeGraphsPage recv_getSameComposeGraphsPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSameComposeGraphsPage_result result = new getSameComposeGraphsPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSameComposeGraphsPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addComposeViewBySearch(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string composeGraphKey, string aliasName, short precisionNumber)
      {
        return send_addComposeViewBySearch(callback, state, platformArgs, landingInfo, composeGraphId, composeGraphKey, aliasName, precisionNumber);
      }

      public void End_addComposeViewBySearch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addComposeViewBySearch();
      }

      #endif

      public void addComposeViewBySearch(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string composeGraphKey, string aliasName, short precisionNumber)
      {
        #if !SILVERLIGHT
        send_addComposeViewBySearch(platformArgs, landingInfo, composeGraphId, composeGraphKey, aliasName, precisionNumber);
        recv_addComposeViewBySearch();

        #else
        var asyncResult = Begin_addComposeViewBySearch(null, null, platformArgs, landingInfo, composeGraphId, composeGraphKey, aliasName, precisionNumber);
        End_addComposeViewBySearch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addComposeViewBySearch(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string composeGraphKey, string aliasName, short precisionNumber)
      #else
      public void send_addComposeViewBySearch(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string composeGraphKey, string aliasName, short precisionNumber)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addComposeViewBySearch", TMessageType.Call, seqid_));
        addComposeViewBySearch_args args = new addComposeViewBySearch_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.ComposeGraphId = composeGraphId;
        args.ComposeGraphKey = composeGraphKey;
        args.AliasName = aliasName;
        args.PrecisionNumber = precisionNumber;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addComposeViewBySearch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addComposeViewBySearch_result result = new addComposeViewBySearch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_subscribeComposeViewQuotation(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId)
      {
        return send_subscribeComposeViewQuotation(callback, state, platformArgs, landingInfo, composeGraphId);
      }

      public void End_subscribeComposeViewQuotation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_subscribeComposeViewQuotation();
      }

      #endif

      public void subscribeComposeViewQuotation(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId)
      {
        #if !SILVERLIGHT
        send_subscribeComposeViewQuotation(platformArgs, landingInfo, composeGraphId);
        recv_subscribeComposeViewQuotation();

        #else
        var asyncResult = Begin_subscribeComposeViewQuotation(null, null, platformArgs, landingInfo, composeGraphId);
        End_subscribeComposeViewQuotation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_subscribeComposeViewQuotation(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId)
      #else
      public void send_subscribeComposeViewQuotation(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("subscribeComposeViewQuotation", TMessageType.Call, seqid_));
        subscribeComposeViewQuotation_args args = new subscribeComposeViewQuotation_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.ComposeGraphId = composeGraphId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_subscribeComposeViewQuotation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        subscribeComposeViewQuotation_result result = new subscribeComposeViewQuotation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_unSubscribeComposeViewQuotation(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId)
      {
        return send_unSubscribeComposeViewQuotation(callback, state, platformArgs, landingInfo, composeGraphId);
      }

      public void End_unSubscribeComposeViewQuotation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_unSubscribeComposeViewQuotation();
      }

      #endif

      public void unSubscribeComposeViewQuotation(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId)
      {
        #if !SILVERLIGHT
        send_unSubscribeComposeViewQuotation(platformArgs, landingInfo, composeGraphId);
        recv_unSubscribeComposeViewQuotation();

        #else
        var asyncResult = Begin_unSubscribeComposeViewQuotation(null, null, platformArgs, landingInfo, composeGraphId);
        End_unSubscribeComposeViewQuotation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_unSubscribeComposeViewQuotation(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId)
      #else
      public void send_unSubscribeComposeViewQuotation(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("unSubscribeComposeViewQuotation", TMessageType.Call, seqid_));
        unSubscribeComposeViewQuotation_args args = new unSubscribeComposeViewQuotation_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.ComposeGraphId = composeGraphId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_unSubscribeComposeViewQuotation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        unSubscribeComposeViewQuotation_result result = new unSubscribeComposeViewQuotation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_changeComposeViewAliasName(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string aliasName)
      {
        return send_changeComposeViewAliasName(callback, state, platformArgs, landingInfo, composeGraphId, aliasName);
      }

      public void End_changeComposeViewAliasName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_changeComposeViewAliasName();
      }

      #endif

      public void changeComposeViewAliasName(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string aliasName)
      {
        #if !SILVERLIGHT
        send_changeComposeViewAliasName(platformArgs, landingInfo, composeGraphId, aliasName);
        recv_changeComposeViewAliasName();

        #else
        var asyncResult = Begin_changeComposeViewAliasName(null, null, platformArgs, landingInfo, composeGraphId, aliasName);
        End_changeComposeViewAliasName(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_changeComposeViewAliasName(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string aliasName)
      #else
      public void send_changeComposeViewAliasName(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string aliasName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("changeComposeViewAliasName", TMessageType.Call, seqid_));
        changeComposeViewAliasName_args args = new changeComposeViewAliasName_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.ComposeGraphId = composeGraphId;
        args.AliasName = aliasName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_changeComposeViewAliasName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        changeComposeViewAliasName_result result = new changeComposeViewAliasName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getComposeGraphs(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> composeGraphIds)
      {
        return send_getComposeGraphs(callback, state, platformArgs, landingInfo, composeGraphIds);
      }

      public Dictionary<long, xueqiao.trade.hosting.HostingComposeGraph> End_getComposeGraphs(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getComposeGraphs();
      }

      #endif

      public Dictionary<long, xueqiao.trade.hosting.HostingComposeGraph> getComposeGraphs(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> composeGraphIds)
      {
        #if !SILVERLIGHT
        send_getComposeGraphs(platformArgs, landingInfo, composeGraphIds);
        return recv_getComposeGraphs();

        #else
        var asyncResult = Begin_getComposeGraphs(null, null, platformArgs, landingInfo, composeGraphIds);
        return End_getComposeGraphs(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getComposeGraphs(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> composeGraphIds)
      #else
      public void send_getComposeGraphs(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> composeGraphIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getComposeGraphs", TMessageType.Call, seqid_));
        getComposeGraphs_args args = new getComposeGraphs_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.ComposeGraphIds = composeGraphIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<long, xueqiao.trade.hosting.HostingComposeGraph> recv_getComposeGraphs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getComposeGraphs_result result = new getComposeGraphs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getComposeGraphs failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addComposeViewByShare(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string aliasName, short precisionNumber)
      {
        return send_addComposeViewByShare(callback, state, platformArgs, landingInfo, composeGraphId, aliasName, precisionNumber);
      }

      public void End_addComposeViewByShare(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addComposeViewByShare();
      }

      #endif

      public void addComposeViewByShare(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string aliasName, short precisionNumber)
      {
        #if !SILVERLIGHT
        send_addComposeViewByShare(platformArgs, landingInfo, composeGraphId, aliasName, precisionNumber);
        recv_addComposeViewByShare();

        #else
        var asyncResult = Begin_addComposeViewByShare(null, null, platformArgs, landingInfo, composeGraphId, aliasName, precisionNumber);
        End_addComposeViewByShare(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addComposeViewByShare(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string aliasName, short precisionNumber)
      #else
      public void send_addComposeViewByShare(PlatformArgs platformArgs, LandingInfo landingInfo, long composeGraphId, string aliasName, short precisionNumber)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addComposeViewByShare", TMessageType.Call, seqid_));
        addComposeViewByShare_args args = new addComposeViewByShare_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.ComposeGraphId = composeGraphId;
        args.AliasName = aliasName;
        args.PrecisionNumber = precisionNumber;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addComposeViewByShare()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addComposeViewByShare_result result = new addComposeViewByShare_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingTradeAccount newAccount)
      {
        return send_addTradeAccount(callback, state, platformArgs, landingInfo, newAccount);
      }

      public long End_addTradeAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_addTradeAccount();
      }

      #endif

      /// <summary>
      /// 添加交易账号
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="newAccount"></param>
      public long addTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingTradeAccount newAccount)
      {
        #if !SILVERLIGHT
        send_addTradeAccount(platformArgs, landingInfo, newAccount);
        return recv_addTradeAccount();

        #else
        var asyncResult = Begin_addTradeAccount(null, null, platformArgs, landingInfo, newAccount);
        return End_addTradeAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingTradeAccount newAccount)
      #else
      public void send_addTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingTradeAccount newAccount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addTradeAccount", TMessageType.Call, seqid_));
        addTradeAccount_args args = new addTradeAccount_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.NewAccount = newAccount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_addTradeAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addTradeAccount_result result = new addTradeAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addTradeAccount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_disableTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      {
        return send_disableTradeAccount(callback, state, platformArgs, landingInfo, tradeAccountId);
      }

      public void End_disableTradeAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_disableTradeAccount();
      }

      #endif

      /// <summary>
      /// 用户禁用账号，实际上是标记账号无效, 并不会一次性物理删除
      ///  如果有关联的账号的订单，则账号会保留数据信息
      ///  如果账号无关联订单信息，则账号会被移除
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      public void disableTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      {
        #if !SILVERLIGHT
        send_disableTradeAccount(platformArgs, landingInfo, tradeAccountId);
        recv_disableTradeAccount();

        #else
        var asyncResult = Begin_disableTradeAccount(null, null, platformArgs, landingInfo, tradeAccountId);
        End_disableTradeAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_disableTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      #else
      public void send_disableTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("disableTradeAccount", TMessageType.Call, seqid_));
        disableTradeAccount_args args = new disableTradeAccount_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.TradeAccountId = tradeAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_disableTradeAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        disableTradeAccount_result result = new disableTradeAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTradeAccountPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingTradeAccountOption queryOption, IndexedPageOption pageOption)
      {
        return send_getTradeAccountPage(callback, state, platformArgs, landingInfo, queryOption, pageOption);
      }

      public QueryHostingTradeAccountPage End_getTradeAccountPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTradeAccountPage();
      }

      #endif

      /// <summary>
      /// 查询交易账户页
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      public QueryHostingTradeAccountPage getTradeAccountPage(PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingTradeAccountOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getTradeAccountPage(platformArgs, landingInfo, queryOption, pageOption);
        return recv_getTradeAccountPage();

        #else
        var asyncResult = Begin_getTradeAccountPage(null, null, platformArgs, landingInfo, queryOption, pageOption);
        return End_getTradeAccountPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTradeAccountPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingTradeAccountOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_getTradeAccountPage(PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingTradeAccountOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTradeAccountPage", TMessageType.Call, seqid_));
        getTradeAccountPage_args args = new getTradeAccountPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public QueryHostingTradeAccountPage recv_getTradeAccountPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTradeAccountPage_result result = new getTradeAccountPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTradeAccountPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_enableTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      {
        return send_enableTradeAccount(callback, state, platformArgs, landingInfo, tradeAccountId);
      }

      public void End_enableTradeAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_enableTradeAccount();
      }

      #endif

      /// <summary>
      /// 重新启用账户
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      public void enableTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      {
        #if !SILVERLIGHT
        send_enableTradeAccount(platformArgs, landingInfo, tradeAccountId);
        recv_enableTradeAccount();

        #else
        var asyncResult = Begin_enableTradeAccount(null, null, platformArgs, landingInfo, tradeAccountId);
        End_enableTradeAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_enableTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      #else
      public void send_enableTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("enableTradeAccount", TMessageType.Call, seqid_));
        enableTradeAccount_args args = new enableTradeAccount_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.TradeAccountId = tradeAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_enableTradeAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        enableTradeAccount_result result = new enableTradeAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateTradeAccountInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingTradeAccount updateAccount)
      {
        return send_updateTradeAccountInfo(callback, state, platformArgs, landingInfo, updateAccount);
      }

      public void End_updateTradeAccountInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateTradeAccountInfo();
      }

      #endif

      /// <summary>
      /// 更新账号信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="updateAccount"></param>
      public void updateTradeAccountInfo(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingTradeAccount updateAccount)
      {
        #if !SILVERLIGHT
        send_updateTradeAccountInfo(platformArgs, landingInfo, updateAccount);
        recv_updateTradeAccountInfo();

        #else
        var asyncResult = Begin_updateTradeAccountInfo(null, null, platformArgs, landingInfo, updateAccount);
        End_updateTradeAccountInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateTradeAccountInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingTradeAccount updateAccount)
      #else
      public void send_updateTradeAccountInfo(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingTradeAccount updateAccount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateTradeAccountInfo", TMessageType.Call, seqid_));
        updateTradeAccountInfo_args args = new updateTradeAccountInfo_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.UpdateAccount = updateAccount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateTradeAccountInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateTradeAccountInfo_result result = new updateTradeAccountInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_rmTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      {
        return send_rmTradeAccount(callback, state, platformArgs, landingInfo, tradeAccountId);
      }

      public void End_rmTradeAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_rmTradeAccount();
      }

      #endif

      /// <summary>
      /// 删除账号
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      public void rmTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      {
        #if !SILVERLIGHT
        send_rmTradeAccount(platformArgs, landingInfo, tradeAccountId);
        recv_rmTradeAccount();

        #else
        var asyncResult = Begin_rmTradeAccount(null, null, platformArgs, landingInfo, tradeAccountId);
        End_rmTradeAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_rmTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      #else
      public void send_rmTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("rmTradeAccount", TMessageType.Call, seqid_));
        rmTradeAccount_args args = new rmTradeAccount_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.TradeAccountId = tradeAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_rmTradeAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rmTradeAccount_result result = new rmTradeAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getPersonalUserTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        return send_getPersonalUserTradeAccount(callback, state, platformArgs, landingInfo, subAccountId);
      }

      public List<xueqiao.trade.hosting.HostingTradeAccount> End_getPersonalUserTradeAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getPersonalUserTradeAccount();
      }

      #endif

      /// <summary>
      /// 查询个人用户交易账户页
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      public List<xueqiao.trade.hosting.HostingTradeAccount> getPersonalUserTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        #if !SILVERLIGHT
        send_getPersonalUserTradeAccount(platformArgs, landingInfo, subAccountId);
        return recv_getPersonalUserTradeAccount();

        #else
        var asyncResult = Begin_getPersonalUserTradeAccount(null, null, platformArgs, landingInfo, subAccountId);
        return End_getPersonalUserTradeAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getPersonalUserTradeAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #else
      public void send_getPersonalUserTradeAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getPersonalUserTradeAccount", TMessageType.Call, seqid_));
        getPersonalUserTradeAccount_args args = new getPersonalUserTradeAccount_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<xueqiao.trade.hosting.HostingTradeAccount> recv_getPersonalUserTradeAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPersonalUserTradeAccount_result result = new getPersonalUserTradeAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPersonalUserTradeAccount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHostingOrderRouteTree(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        return send_getHostingOrderRouteTree(callback, state, platformArgs, landingInfo, subAccountId);
      }

      public xueqiao.trade.hosting.HostingOrderRouteTree End_getHostingOrderRouteTree(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHostingOrderRouteTree();
      }

      #endif

      /// <summary>
      /// 获取子账户订单路由配置树
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      public xueqiao.trade.hosting.HostingOrderRouteTree getHostingOrderRouteTree(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        #if !SILVERLIGHT
        send_getHostingOrderRouteTree(platformArgs, landingInfo, subAccountId);
        return recv_getHostingOrderRouteTree();

        #else
        var asyncResult = Begin_getHostingOrderRouteTree(null, null, platformArgs, landingInfo, subAccountId);
        return End_getHostingOrderRouteTree(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHostingOrderRouteTree(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #else
      public void send_getHostingOrderRouteTree(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHostingOrderRouteTree", TMessageType.Call, seqid_));
        getHostingOrderRouteTree_args args = new getHostingOrderRouteTree_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.HostingOrderRouteTree recv_getHostingOrderRouteTree()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHostingOrderRouteTree_result result = new getHostingOrderRouteTree_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHostingOrderRouteTree failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateHostingOrderRouteTree(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, xueqiao.trade.hosting.HostingOrderRouteTree routeTree)
      {
        return send_updateHostingOrderRouteTree(callback, state, platformArgs, landingInfo, subAccountId, routeTree);
      }

      public void End_updateHostingOrderRouteTree(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateHostingOrderRouteTree();
      }

      #endif

      /// <summary>
      /// 更新用户订单路由配置树
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="routeTree"></param>
      public void updateHostingOrderRouteTree(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, xueqiao.trade.hosting.HostingOrderRouteTree routeTree)
      {
        #if !SILVERLIGHT
        send_updateHostingOrderRouteTree(platformArgs, landingInfo, subAccountId, routeTree);
        recv_updateHostingOrderRouteTree();

        #else
        var asyncResult = Begin_updateHostingOrderRouteTree(null, null, platformArgs, landingInfo, subAccountId, routeTree);
        End_updateHostingOrderRouteTree(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateHostingOrderRouteTree(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, xueqiao.trade.hosting.HostingOrderRouteTree routeTree)
      #else
      public void send_updateHostingOrderRouteTree(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, xueqiao.trade.hosting.HostingOrderRouteTree routeTree)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateHostingOrderRouteTree", TMessageType.Call, seqid_));
        updateHostingOrderRouteTree_args args = new updateHostingOrderRouteTree_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.RouteTree = routeTree;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateHostingOrderRouteTree()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateHostingOrderRouteTree_result result = new updateHostingOrderRouteTree_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHostingOrderRouteTreeVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        return send_getHostingOrderRouteTreeVersion(callback, state, platformArgs, landingInfo, subAccountId);
      }

      public int End_getHostingOrderRouteTreeVersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHostingOrderRouteTreeVersion();
      }

      #endif

      /// <summary>
      /// 获取用户订单路由配置树在服务端的版本
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      public int getHostingOrderRouteTreeVersion(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        #if !SILVERLIGHT
        send_getHostingOrderRouteTreeVersion(platformArgs, landingInfo, subAccountId);
        return recv_getHostingOrderRouteTreeVersion();

        #else
        var asyncResult = Begin_getHostingOrderRouteTreeVersion(null, null, platformArgs, landingInfo, subAccountId);
        return End_getHostingOrderRouteTreeVersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHostingOrderRouteTreeVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #else
      public void send_getHostingOrderRouteTreeVersion(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHostingOrderRouteTreeVersion", TMessageType.Call, seqid_));
        getHostingOrderRouteTreeVersion_args args = new getHostingOrderRouteTreeVersion_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_getHostingOrderRouteTreeVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHostingOrderRouteTreeVersion_result result = new getHostingOrderRouteTreeVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHostingOrderRouteTreeVersion failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getPersonalUserHostingOrderRouteTree(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        return send_getPersonalUserHostingOrderRouteTree(callback, state, platformArgs, landingInfo, subAccountId);
      }

      public xueqiao.trade.hosting.HostingOrderRouteTree End_getPersonalUserHostingOrderRouteTree(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getPersonalUserHostingOrderRouteTree();
      }

      #endif

      /// <summary>
      /// 获取个人用户的子账户订单路由配置树
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      public xueqiao.trade.hosting.HostingOrderRouteTree getPersonalUserHostingOrderRouteTree(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        #if !SILVERLIGHT
        send_getPersonalUserHostingOrderRouteTree(platformArgs, landingInfo, subAccountId);
        return recv_getPersonalUserHostingOrderRouteTree();

        #else
        var asyncResult = Begin_getPersonalUserHostingOrderRouteTree(null, null, platformArgs, landingInfo, subAccountId);
        return End_getPersonalUserHostingOrderRouteTree(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getPersonalUserHostingOrderRouteTree(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #else
      public void send_getPersonalUserHostingOrderRouteTree(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getPersonalUserHostingOrderRouteTree", TMessageType.Call, seqid_));
        getPersonalUserHostingOrderRouteTree_args args = new getPersonalUserHostingOrderRouteTree_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.HostingOrderRouteTree recv_getPersonalUserHostingOrderRouteTree()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPersonalUserHostingOrderRouteTree_result result = new getPersonalUserHostingOrderRouteTree_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPersonalUserHostingOrderRouteTree failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string orderId, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType orderType, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget orderTarget, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderDetail orderDetail)
      {
        return send_createXQOrder(callback, state, platformArgs, landingInfo, subAccountId, orderId, orderType, orderTarget, orderDetail);
      }

      public void End_createXQOrder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_createXQOrder();
      }

      #endif

      /// <summary>
      /// 雪橇订单格式为${MACHINEID}_${SUBACCOUNTID}_${SUBUSERID}_${LOGINTIMESTAMP}_{客户端自增}
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="orderId"></param>
      /// <param name="orderType"></param>
      /// <param name="orderTarget"></param>
      /// <param name="orderDetail"></param>
      public void createXQOrder(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string orderId, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType orderType, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget orderTarget, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderDetail orderDetail)
      {
        #if !SILVERLIGHT
        send_createXQOrder(platformArgs, landingInfo, subAccountId, orderId, orderType, orderTarget, orderDetail);
        recv_createXQOrder();

        #else
        var asyncResult = Begin_createXQOrder(null, null, platformArgs, landingInfo, subAccountId, orderId, orderType, orderTarget, orderDetail);
        End_createXQOrder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createXQOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string orderId, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType orderType, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget orderTarget, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderDetail orderDetail)
      #else
      public void send_createXQOrder(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string orderId, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType orderType, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget orderTarget, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderDetail orderDetail)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createXQOrder", TMessageType.Call, seqid_));
        createXQOrder_args args = new createXQOrder_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.OrderId = orderId;
        args.OrderType = orderType;
        args.OrderTarget = orderTarget;
        args.OrderDetail = orderDetail;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_createXQOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createXQOrder_result result = new createXQOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchSuspendXQOrders(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds)
      {
        return send_batchSuspendXQOrders(callback, state, platformArgs, landingInfo, orderIds);
      }

      public Dictionary<string, ErrorInfo> End_batchSuspendXQOrders(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_batchSuspendXQOrders();
      }

      #endif

      /// <summary>
      /// 批量暂停雪橇订单
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="orderIds"></param>
      public Dictionary<string, ErrorInfo> batchSuspendXQOrders(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds)
      {
        #if !SILVERLIGHT
        send_batchSuspendXQOrders(platformArgs, landingInfo, orderIds);
        return recv_batchSuspendXQOrders();

        #else
        var asyncResult = Begin_batchSuspendXQOrders(null, null, platformArgs, landingInfo, orderIds);
        return End_batchSuspendXQOrders(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchSuspendXQOrders(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds)
      #else
      public void send_batchSuspendXQOrders(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchSuspendXQOrders", TMessageType.Call, seqid_));
        batchSuspendXQOrders_args args = new batchSuspendXQOrders_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.OrderIds = orderIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, ErrorInfo> recv_batchSuspendXQOrders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchSuspendXQOrders_result result = new batchSuspendXQOrders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batchSuspendXQOrders failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchResumeXQOrders(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds, Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderResumeMode> resumeModes)
      {
        return send_batchResumeXQOrders(callback, state, platformArgs, landingInfo, orderIds, resumeModes);
      }

      public Dictionary<string, ErrorInfo> End_batchResumeXQOrders(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_batchResumeXQOrders();
      }

      #endif

      /// <summary>
      /// 批量恢复雪橇订单
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="orderIds"></param>
      /// <param name="resumeModes"></param>
      public Dictionary<string, ErrorInfo> batchResumeXQOrders(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds, Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderResumeMode> resumeModes)
      {
        #if !SILVERLIGHT
        send_batchResumeXQOrders(platformArgs, landingInfo, orderIds, resumeModes);
        return recv_batchResumeXQOrders();

        #else
        var asyncResult = Begin_batchResumeXQOrders(null, null, platformArgs, landingInfo, orderIds, resumeModes);
        return End_batchResumeXQOrders(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchResumeXQOrders(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds, Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderResumeMode> resumeModes)
      #else
      public void send_batchResumeXQOrders(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds, Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderResumeMode> resumeModes)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchResumeXQOrders", TMessageType.Call, seqid_));
        batchResumeXQOrders_args args = new batchResumeXQOrders_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.OrderIds = orderIds;
        args.ResumeModes = resumeModes;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, ErrorInfo> recv_batchResumeXQOrders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchResumeXQOrders_result result = new batchResumeXQOrders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batchResumeXQOrders failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchCancelXQOrders(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds)
      {
        return send_batchCancelXQOrders(callback, state, platformArgs, landingInfo, orderIds);
      }

      public Dictionary<string, ErrorInfo> End_batchCancelXQOrders(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_batchCancelXQOrders();
      }

      #endif

      /// <summary>
      /// 批量撤销雪橇订单
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="orderIds"></param>
      public Dictionary<string, ErrorInfo> batchCancelXQOrders(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds)
      {
        #if !SILVERLIGHT
        send_batchCancelXQOrders(platformArgs, landingInfo, orderIds);
        return recv_batchCancelXQOrders();

        #else
        var asyncResult = Begin_batchCancelXQOrders(null, null, platformArgs, landingInfo, orderIds);
        return End_batchCancelXQOrders(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchCancelXQOrders(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds)
      #else
      public void send_batchCancelXQOrders(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchCancelXQOrders", TMessageType.Call, seqid_));
        batchCancelXQOrders_args args = new batchCancelXQOrders_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.OrderIds = orderIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, ErrorInfo> recv_batchCancelXQOrders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchCancelXQOrders_result result = new batchCancelXQOrders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batchCancelXQOrders failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getEffectXQOrderWithTradeListPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.arbitrage.thriftapi.QueryEffectXQOrderIndexOption qryOption, IndexedPageOption pageOption)
      {
        return send_getEffectXQOrderWithTradeListPage(callback, state, platformArgs, landingInfo, qryOption, pageOption);
      }

      public HostingXQOrderWithTradeListPage End_getEffectXQOrderWithTradeListPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getEffectXQOrderWithTradeListPage();
      }

      #endif

      /// <summary>
      /// 获取未清理订单和成交信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="qryOption"></param>
      /// <param name="pageOption"></param>
      public HostingXQOrderWithTradeListPage getEffectXQOrderWithTradeListPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.arbitrage.thriftapi.QueryEffectXQOrderIndexOption qryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getEffectXQOrderWithTradeListPage(platformArgs, landingInfo, qryOption, pageOption);
        return recv_getEffectXQOrderWithTradeListPage();

        #else
        var asyncResult = Begin_getEffectXQOrderWithTradeListPage(null, null, platformArgs, landingInfo, qryOption, pageOption);
        return End_getEffectXQOrderWithTradeListPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getEffectXQOrderWithTradeListPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.arbitrage.thriftapi.QueryEffectXQOrderIndexOption qryOption, IndexedPageOption pageOption)
      #else
      public void send_getEffectXQOrderWithTradeListPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.arbitrage.thriftapi.QueryEffectXQOrderIndexOption qryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getEffectXQOrderWithTradeListPage", TMessageType.Call, seqid_));
        getEffectXQOrderWithTradeListPage_args args = new getEffectXQOrderWithTradeListPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QryOption = qryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingXQOrderWithTradeListPage recv_getEffectXQOrderWithTradeListPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getEffectXQOrderWithTradeListPage_result result = new getEffectXQOrderWithTradeListPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getEffectXQOrderWithTradeListPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getXQOrderWithTradeLists(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds)
      {
        return send_getXQOrderWithTradeLists(callback, state, platformArgs, landingInfo, orderIds);
      }

      public Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderWithTradeList> End_getXQOrderWithTradeLists(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getXQOrderWithTradeLists();
      }

      #endif

      /// <summary>
      /// 批量查询订单的信息和其成交信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="orderIds"></param>
      public Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderWithTradeList> getXQOrderWithTradeLists(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds)
      {
        #if !SILVERLIGHT
        send_getXQOrderWithTradeLists(platformArgs, landingInfo, orderIds);
        return recv_getXQOrderWithTradeLists();

        #else
        var asyncResult = Begin_getXQOrderWithTradeLists(null, null, platformArgs, landingInfo, orderIds);
        return End_getXQOrderWithTradeLists(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getXQOrderWithTradeLists(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds)
      #else
      public void send_getXQOrderWithTradeLists(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<string> orderIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getXQOrderWithTradeLists", TMessageType.Call, seqid_));
        getXQOrderWithTradeLists_args args = new getXQOrderWithTradeLists_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.OrderIds = orderIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderWithTradeList> recv_getXQOrderWithTradeLists()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getXQOrderWithTradeLists_result result = new getXQOrderWithTradeLists_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getXQOrderWithTradeLists failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getXQOrderExecDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string orderId)
      {
        return send_getXQOrderExecDetail(callback, state, platformArgs, landingInfo, orderId);
      }

      public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderExecDetail End_getXQOrderExecDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getXQOrderExecDetail();
      }

      #endif

      /// <summary>
      /// 查询订单的执行详情
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="orderId"></param>
      public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderExecDetail getXQOrderExecDetail(PlatformArgs platformArgs, LandingInfo landingInfo, string orderId)
      {
        #if !SILVERLIGHT
        send_getXQOrderExecDetail(platformArgs, landingInfo, orderId);
        return recv_getXQOrderExecDetail();

        #else
        var asyncResult = Begin_getXQOrderExecDetail(null, null, platformArgs, landingInfo, orderId);
        return End_getXQOrderExecDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getXQOrderExecDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string orderId)
      #else
      public void send_getXQOrderExecDetail(PlatformArgs platformArgs, LandingInfo landingInfo, string orderId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getXQOrderExecDetail", TMessageType.Call, seqid_));
        getXQOrderExecDetail_args args = new getXQOrderExecDetail_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.OrderId = orderId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderExecDetail recv_getXQOrderExecDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getXQOrderExecDetail_result result = new getXQOrderExecDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getXQOrderExecDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getXQOrderHisPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.history.thriftapi.QueryXQOrderHisIndexItemOption qryOption, IndexedPageOption pageOption)
      {
        return send_getXQOrderHisPage(callback, state, platformArgs, landingInfo, qryOption, pageOption);
      }

      public HostingXQOrderPage End_getXQOrderHisPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getXQOrderHisPage();
      }

      #endif

      public HostingXQOrderPage getXQOrderHisPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.history.thriftapi.QueryXQOrderHisIndexItemOption qryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getXQOrderHisPage(platformArgs, landingInfo, qryOption, pageOption);
        return recv_getXQOrderHisPage();

        #else
        var asyncResult = Begin_getXQOrderHisPage(null, null, platformArgs, landingInfo, qryOption, pageOption);
        return End_getXQOrderHisPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getXQOrderHisPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.history.thriftapi.QueryXQOrderHisIndexItemOption qryOption, IndexedPageOption pageOption)
      #else
      public void send_getXQOrderHisPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.history.thriftapi.QueryXQOrderHisIndexItemOption qryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getXQOrderHisPage", TMessageType.Call, seqid_));
        getXQOrderHisPage_args args = new getXQOrderHisPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QryOption = qryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingXQOrderPage recv_getXQOrderHisPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getXQOrderHisPage_result result = new getXQOrderHisPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getXQOrderHisPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getXQTradeHisPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.history.thriftapi.QueryXQTradeHisIndexItemOption qryOption, IndexedPageOption pageOption)
      {
        return send_getXQTradeHisPage(callback, state, platformArgs, landingInfo, qryOption, pageOption);
      }

      public HostingXQTradePage End_getXQTradeHisPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getXQTradeHisPage();
      }

      #endif

      public HostingXQTradePage getXQTradeHisPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.history.thriftapi.QueryXQTradeHisIndexItemOption qryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getXQTradeHisPage(platformArgs, landingInfo, qryOption, pageOption);
        return recv_getXQTradeHisPage();

        #else
        var asyncResult = Begin_getXQTradeHisPage(null, null, platformArgs, landingInfo, qryOption, pageOption);
        return End_getXQTradeHisPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getXQTradeHisPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.history.thriftapi.QueryXQTradeHisIndexItemOption qryOption, IndexedPageOption pageOption)
      #else
      public void send_getXQTradeHisPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.history.thriftapi.QueryXQTradeHisIndexItemOption qryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getXQTradeHisPage", TMessageType.Call, seqid_));
        getXQTradeHisPage_args args = new getXQTradeHisPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QryOption = qryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingXQTradePage recv_getXQTradeHisPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getXQTradeHisPage_result result = new getXQTradeHisPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getXQTradeHisPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string key)
      {
        return send_getUserSetting(callback, state, platformArgs, landingInfo, key);
      }

      public HostingUserSetting End_getUserSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserSetting();
      }

      #endif

      public HostingUserSetting getUserSetting(PlatformArgs platformArgs, LandingInfo landingInfo, string key)
      {
        #if !SILVERLIGHT
        send_getUserSetting(platformArgs, landingInfo, key);
        return recv_getUserSetting();

        #else
        var asyncResult = Begin_getUserSetting(null, null, platformArgs, landingInfo, key);
        return End_getUserSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string key)
      #else
      public void send_getUserSetting(PlatformArgs platformArgs, LandingInfo landingInfo, string key)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserSetting", TMessageType.Call, seqid_));
        getUserSetting_args args = new getUserSetting_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Key = key;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingUserSetting recv_getUserSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserSetting_result result = new getUserSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserSetting failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateUserSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string key, HostingUserSetting setting)
      {
        return send_updateUserSetting(callback, state, platformArgs, landingInfo, key, setting);
      }

      public void End_updateUserSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateUserSetting();
      }

      #endif

      public void updateUserSetting(PlatformArgs platformArgs, LandingInfo landingInfo, string key, HostingUserSetting setting)
      {
        #if !SILVERLIGHT
        send_updateUserSetting(platformArgs, landingInfo, key, setting);
        recv_updateUserSetting();

        #else
        var asyncResult = Begin_updateUserSetting(null, null, platformArgs, landingInfo, key, setting);
        End_updateUserSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateUserSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string key, HostingUserSetting setting)
      #else
      public void send_updateUserSetting(PlatformArgs platformArgs, LandingInfo landingInfo, string key, HostingUserSetting setting)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateUserSetting", TMessageType.Call, seqid_));
        updateUserSetting_args args = new updateUserSetting_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Key = key;
        args.Setting = setting;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateUserSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateUserSetting_result result = new updateUserSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserSettingVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string key)
      {
        return send_getUserSettingVersion(callback, state, platformArgs, landingInfo, key);
      }

      public int End_getUserSettingVersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserSettingVersion();
      }

      #endif

      public int getUserSettingVersion(PlatformArgs platformArgs, LandingInfo landingInfo, string key)
      {
        #if !SILVERLIGHT
        send_getUserSettingVersion(platformArgs, landingInfo, key);
        return recv_getUserSettingVersion();

        #else
        var asyncResult = Begin_getUserSettingVersion(null, null, platformArgs, landingInfo, key);
        return End_getUserSettingVersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserSettingVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string key)
      #else
      public void send_getUserSettingVersion(PlatformArgs platformArgs, LandingInfo landingInfo, string key)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserSettingVersion", TMessageType.Call, seqid_));
        getUserSettingVersion_args args = new getUserSettingVersion_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Key = key;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_getUserSettingVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserSettingVersion_result result = new getUserSettingVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserSettingVersion failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSAWRUTListPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingSAWRUItemListOption queryOption, IndexedPageOption pageOption)
      {
        return send_getSAWRUTListPage(callback, state, platformArgs, landingInfo, queryOption, pageOption);
      }

      public HostingSAWRUItemListPage End_getSAWRUTListPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSAWRUTListPage();
      }

      #endif

      /// <summary>
      /// 获取子账户以及关联信息列表
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      public HostingSAWRUItemListPage getSAWRUTListPage(PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingSAWRUItemListOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getSAWRUTListPage(platformArgs, landingInfo, queryOption, pageOption);
        return recv_getSAWRUTListPage();

        #else
        var asyncResult = Begin_getSAWRUTListPage(null, null, platformArgs, landingInfo, queryOption, pageOption);
        return End_getSAWRUTListPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSAWRUTListPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingSAWRUItemListOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_getSAWRUTListPage(PlatformArgs platformArgs, LandingInfo landingInfo, QueryHostingSAWRUItemListOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSAWRUTListPage", TMessageType.Call, seqid_));
        getSAWRUTListPage_args args = new getSAWRUTListPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public HostingSAWRUItemListPage recv_getSAWRUTListPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSAWRUTListPage_result result = new getSAWRUTListPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSAWRUTListPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSARUTBySubAccountId(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> subAccountIds)
      {
        return send_getSARUTBySubAccountId(callback, state, platformArgs, landingInfo, subAccountIds);
      }

      public Dictionary<long, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> End_getSARUTBySubAccountId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSARUTBySubAccountId();
      }

      #endif

      /// <summary>
      /// 获取子账户关联的列表
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountIds"></param>
      public Dictionary<long, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> getSARUTBySubAccountId(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> subAccountIds)
      {
        #if !SILVERLIGHT
        send_getSARUTBySubAccountId(platformArgs, landingInfo, subAccountIds);
        return recv_getSARUTBySubAccountId();

        #else
        var asyncResult = Begin_getSARUTBySubAccountId(null, null, platformArgs, landingInfo, subAccountIds);
        return End_getSARUTBySubAccountId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSARUTBySubAccountId(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> subAccountIds)
      #else
      public void send_getSARUTBySubAccountId(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> subAccountIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSARUTBySubAccountId", TMessageType.Call, seqid_));
        getSARUTBySubAccountId_args args = new getSARUTBySubAccountId_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountIds = subAccountIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<long, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> recv_getSARUTBySubAccountId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSARUTBySubAccountId_result result = new getSARUTBySubAccountId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSARUTBySubAccountId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSARUTBySubUserId(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<int> subUserIds)
      {
        return send_getSARUTBySubUserId(callback, state, platformArgs, landingInfo, subUserIds);
      }

      public Dictionary<int, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> End_getSARUTBySubUserId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSARUTBySubUserId();
      }

      #endif

      /// <summary>
      /// 获取用户的关联子账户列表
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subUserIds"></param>
      public Dictionary<int, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> getSARUTBySubUserId(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<int> subUserIds)
      {
        #if !SILVERLIGHT
        send_getSARUTBySubUserId(platformArgs, landingInfo, subUserIds);
        return recv_getSARUTBySubUserId();

        #else
        var asyncResult = Begin_getSARUTBySubUserId(null, null, platformArgs, landingInfo, subUserIds);
        return End_getSARUTBySubUserId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSARUTBySubUserId(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<int> subUserIds)
      #else
      public void send_getSARUTBySubUserId(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<int> subUserIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSARUTBySubUserId", TMessageType.Call, seqid_));
        getSARUTBySubUserId_args args = new getSARUTBySubUserId_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubUserIds = subUserIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<int, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> recv_getSARUTBySubUserId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSARUTBySubUserId_result result = new getSARUTBySubUserId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSARUTBySubUserId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_assignSubAccountRelatedUsers(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, THashSet<int> relatedSubUserIds, THashSet<int> unRelatedSubUserIds)
      {
        return send_assignSubAccountRelatedUsers(callback, state, platformArgs, landingInfo, subAccountId, relatedSubUserIds, unRelatedSubUserIds);
      }

      public void End_assignSubAccountRelatedUsers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_assignSubAccountRelatedUsers();
      }

      #endif

      /// <summary>
      /// 分配子账户列表
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="relatedSubUserIds"></param>
      /// <param name="unRelatedSubUserIds"></param>
      public void assignSubAccountRelatedUsers(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, THashSet<int> relatedSubUserIds, THashSet<int> unRelatedSubUserIds)
      {
        #if !SILVERLIGHT
        send_assignSubAccountRelatedUsers(platformArgs, landingInfo, subAccountId, relatedSubUserIds, unRelatedSubUserIds);
        recv_assignSubAccountRelatedUsers();

        #else
        var asyncResult = Begin_assignSubAccountRelatedUsers(null, null, platformArgs, landingInfo, subAccountId, relatedSubUserIds, unRelatedSubUserIds);
        End_assignSubAccountRelatedUsers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_assignSubAccountRelatedUsers(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, THashSet<int> relatedSubUserIds, THashSet<int> unRelatedSubUserIds)
      #else
      public void send_assignSubAccountRelatedUsers(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, THashSet<int> relatedSubUserIds, THashSet<int> unRelatedSubUserIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("assignSubAccountRelatedUsers", TMessageType.Call, seqid_));
        assignSubAccountRelatedUsers_args args = new assignSubAccountRelatedUsers_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.RelatedSubUserIds = relatedSubUserIds;
        args.UnRelatedSubUserIds = unRelatedSubUserIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_assignSubAccountRelatedUsers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        assignSubAccountRelatedUsers_result result = new assignSubAccountRelatedUsers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_renameSubAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string subAccountName)
      {
        return send_renameSubAccount(callback, state, platformArgs, landingInfo, subAccountId, subAccountName);
      }

      public void End_renameSubAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_renameSubAccount();
      }

      #endif

      /// <summary>
      /// 子账户重命名
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="subAccountName"></param>
      public void renameSubAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string subAccountName)
      {
        #if !SILVERLIGHT
        send_renameSubAccount(platformArgs, landingInfo, subAccountId, subAccountName);
        recv_renameSubAccount();

        #else
        var asyncResult = Begin_renameSubAccount(null, null, platformArgs, landingInfo, subAccountId, subAccountName);
        End_renameSubAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_renameSubAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string subAccountName)
      #else
      public void send_renameSubAccount(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string subAccountName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("renameSubAccount", TMessageType.Call, seqid_));
        renameSubAccount_args args = new renameSubAccount_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.SubAccountName = subAccountName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_renameSubAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        renameSubAccount_result result = new renameSubAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createSubAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingSubAccount newSubAccount)
      {
        return send_createSubAccount(callback, state, platformArgs, landingInfo, newSubAccount);
      }

      public long End_createSubAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createSubAccount();
      }

      #endif

      /// <summary>
      /// 创建子账户
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="newSubAccount"></param>
      public long createSubAccount(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingSubAccount newSubAccount)
      {
        #if !SILVERLIGHT
        send_createSubAccount(platformArgs, landingInfo, newSubAccount);
        return recv_createSubAccount();

        #else
        var asyncResult = Begin_createSubAccount(null, null, platformArgs, landingInfo, newSubAccount);
        return End_createSubAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createSubAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingSubAccount newSubAccount)
      #else
      public void send_createSubAccount(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.HostingSubAccount newSubAccount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createSubAccount", TMessageType.Call, seqid_));
        createSubAccount_args args = new createSubAccount_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.NewSubAccount = newSubAccount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_createSubAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createSubAccount_result result = new createSubAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSubAccount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHostingSledContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingSledContractPositionOption option)
      {
        return send_getHostingSledContractPosition(callback, state, platformArgs, landingInfo, option);
      }

      public xueqiao.trade.hosting.asset.thriftapi.HostingSledContractPositionPage End_getHostingSledContractPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHostingSledContractPosition();
      }

      #endif

      /// <summary>
      /// 查询实时雪橇合约持仓, 查询实时数据不具备分页
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      public xueqiao.trade.hosting.asset.thriftapi.HostingSledContractPositionPage getHostingSledContractPosition(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingSledContractPositionOption option)
      {
        #if !SILVERLIGHT
        send_getHostingSledContractPosition(platformArgs, landingInfo, option);
        return recv_getHostingSledContractPosition();

        #else
        var asyncResult = Begin_getHostingSledContractPosition(null, null, platformArgs, landingInfo, option);
        return End_getHostingSledContractPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHostingSledContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingSledContractPositionOption option)
      #else
      public void send_getHostingSledContractPosition(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingSledContractPositionOption option)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHostingSledContractPosition", TMessageType.Call, seqid_));
        getHostingSledContractPosition_args args = new getHostingSledContractPosition_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.asset.thriftapi.HostingSledContractPositionPage recv_getHostingSledContractPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHostingSledContractPosition_result result = new getHostingSledContractPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHostingSledContractPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHostingSubAccountFund(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingFundOption option)
      {
        return send_getHostingSubAccountFund(callback, state, platformArgs, landingInfo, option);
      }

      public xueqiao.trade.hosting.asset.thriftapi.HostingFundPage End_getHostingSubAccountFund(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHostingSubAccountFund();
      }

      #endif

      /// <summary>
      /// 查询子账号实时资金, 查询实时数据不具备分页
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      public xueqiao.trade.hosting.asset.thriftapi.HostingFundPage getHostingSubAccountFund(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingFundOption option)
      {
        #if !SILVERLIGHT
        send_getHostingSubAccountFund(platformArgs, landingInfo, option);
        return recv_getHostingSubAccountFund();

        #else
        var asyncResult = Begin_getHostingSubAccountFund(null, null, platformArgs, landingInfo, option);
        return End_getHostingSubAccountFund(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHostingSubAccountFund(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingFundOption option)
      #else
      public void send_getHostingSubAccountFund(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingFundOption option)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHostingSubAccountFund", TMessageType.Call, seqid_));
        getHostingSubAccountFund_args args = new getHostingSubAccountFund_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.asset.thriftapi.HostingFundPage recv_getHostingSubAccountFund()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHostingSubAccountFund_result result = new getHostingSubAccountFund_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHostingSubAccountFund failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_changeSubAccountFund(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.FundChange fundChange)
      {
        return send_changeSubAccountFund(callback, state, platformArgs, landingInfo, fundChange);
      }

      public xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund End_changeSubAccountFund(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_changeSubAccountFund();
      }

      #endif

      /// <summary>
      /// 子账号出入金
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="fundChange"></param>
      public xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund changeSubAccountFund(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.FundChange fundChange)
      {
        #if !SILVERLIGHT
        send_changeSubAccountFund(platformArgs, landingInfo, fundChange);
        return recv_changeSubAccountFund();

        #else
        var asyncResult = Begin_changeSubAccountFund(null, null, platformArgs, landingInfo, fundChange);
        return End_changeSubAccountFund(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_changeSubAccountFund(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.FundChange fundChange)
      #else
      public void send_changeSubAccountFund(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.FundChange fundChange)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("changeSubAccountFund", TMessageType.Call, seqid_));
        changeSubAccountFund_args args = new changeSubAccountFund_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.FundChange = fundChange;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund recv_changeSubAccountFund()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        changeSubAccountFund_result result = new changeSubAccountFund_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "changeSubAccountFund failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setSubAccountCreditAmount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.CreditAmountChange amountChange)
      {
        return send_setSubAccountCreditAmount(callback, state, platformArgs, landingInfo, amountChange);
      }

      public xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund End_setSubAccountCreditAmount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_setSubAccountCreditAmount();
      }

      #endif

      /// <summary>
      /// 子账号设置信用额度
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="amountChange"></param>
      public xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund setSubAccountCreditAmount(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.CreditAmountChange amountChange)
      {
        #if !SILVERLIGHT
        send_setSubAccountCreditAmount(platformArgs, landingInfo, amountChange);
        return recv_setSubAccountCreditAmount();

        #else
        var asyncResult = Begin_setSubAccountCreditAmount(null, null, platformArgs, landingInfo, amountChange);
        return End_setSubAccountCreditAmount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setSubAccountCreditAmount(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.CreditAmountChange amountChange)
      #else
      public void send_setSubAccountCreditAmount(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.CreditAmountChange amountChange)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setSubAccountCreditAmount", TMessageType.Call, seqid_));
        setSubAccountCreditAmount_args args = new setSubAccountCreditAmount_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.AmountChange = amountChange;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund recv_setSubAccountCreditAmount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setSubAccountCreditAmount_result result = new setSubAccountCreditAmount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setSubAccountCreditAmount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAssetPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingAssetTradeDetailOption option, IndexedPageOption pageOption)
      {
        return send_getAssetPositionTradeDetail(callback, state, platformArgs, landingInfo, option, pageOption);
      }

      public xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage End_getAssetPositionTradeDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAssetPositionTradeDetail();
      }

      #endif

      /// <summary>
      /// 查询实时雪橇合约持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage getAssetPositionTradeDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingAssetTradeDetailOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getAssetPositionTradeDetail(platformArgs, landingInfo, option, pageOption);
        return recv_getAssetPositionTradeDetail();

        #else
        var asyncResult = Begin_getAssetPositionTradeDetail(null, null, platformArgs, landingInfo, option, pageOption);
        return End_getAssetPositionTradeDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAssetPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingAssetTradeDetailOption option, IndexedPageOption pageOption)
      #else
      public void send_getAssetPositionTradeDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqHostingAssetTradeDetailOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAssetPositionTradeDetail", TMessageType.Call, seqid_));
        getAssetPositionTradeDetail_args args = new getAssetPositionTradeDetail_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage recv_getAssetPositionTradeDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAssetPositionTradeDetail_result result = new getAssetPositionTradeDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAssetPositionTradeDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHostingSubAccountMoneyRecord(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqMoneyRecordOption option, IndexedPageOption pageOption)
      {
        return send_getHostingSubAccountMoneyRecord(callback, state, platformArgs, landingInfo, option, pageOption);
      }

      public xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountMoneyRecordPage End_getHostingSubAccountMoneyRecord(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHostingSubAccountMoneyRecord();
      }

      #endif

      /// <summary>
      /// 查询子账号出入金记录
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountMoneyRecordPage getHostingSubAccountMoneyRecord(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqMoneyRecordOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getHostingSubAccountMoneyRecord(platformArgs, landingInfo, option, pageOption);
        return recv_getHostingSubAccountMoneyRecord();

        #else
        var asyncResult = Begin_getHostingSubAccountMoneyRecord(null, null, platformArgs, landingInfo, option, pageOption);
        return End_getHostingSubAccountMoneyRecord(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHostingSubAccountMoneyRecord(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqMoneyRecordOption option, IndexedPageOption pageOption)
      #else
      public void send_getHostingSubAccountMoneyRecord(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqMoneyRecordOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHostingSubAccountMoneyRecord", TMessageType.Call, seqid_));
        getHostingSubAccountMoneyRecord_args args = new getHostingSubAccountMoneyRecord_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountMoneyRecordPage recv_getHostingSubAccountMoneyRecord()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHostingSubAccountMoneyRecord_result result = new getHostingSubAccountMoneyRecord_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHostingSubAccountMoneyRecord failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSubAccountFundHistory(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSubAccountFundHistoryOption option, IndexedPageOption pageOption)
      {
        return send_getSubAccountFundHistory(callback, state, platformArgs, landingInfo, option, pageOption);
      }

      public xueqiao.trade.hosting.asset.thriftapi.HostingFundPage End_getSubAccountFundHistory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSubAccountFundHistory();
      }

      #endif

      /// <summary>
      /// 查询子账号的历史资金信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.asset.thriftapi.HostingFundPage getSubAccountFundHistory(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSubAccountFundHistoryOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getSubAccountFundHistory(platformArgs, landingInfo, option, pageOption);
        return recv_getSubAccountFundHistory();

        #else
        var asyncResult = Begin_getSubAccountFundHistory(null, null, platformArgs, landingInfo, option, pageOption);
        return End_getSubAccountFundHistory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSubAccountFundHistory(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSubAccountFundHistoryOption option, IndexedPageOption pageOption)
      #else
      public void send_getSubAccountFundHistory(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSubAccountFundHistoryOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSubAccountFundHistory", TMessageType.Call, seqid_));
        getSubAccountFundHistory_args args = new getSubAccountFundHistory_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.asset.thriftapi.HostingFundPage recv_getSubAccountFundHistory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSubAccountFundHistory_result result = new getSubAccountFundHistory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSubAccountFundHistory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSubAccountPositionHistory(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionDetailOption option, IndexedPageOption pageOption)
      {
        return send_getSubAccountPositionHistory(callback, state, platformArgs, landingInfo, option, pageOption);
      }

      public xueqiao.trade.hosting.asset.thriftapi.SettlementPositionDetailPage End_getSubAccountPositionHistory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSubAccountPositionHistory();
      }

      #endif

      /// <summary>
      /// 查询子账号的历史持仓信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.asset.thriftapi.SettlementPositionDetailPage getSubAccountPositionHistory(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionDetailOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getSubAccountPositionHistory(platformArgs, landingInfo, option, pageOption);
        return recv_getSubAccountPositionHistory();

        #else
        var asyncResult = Begin_getSubAccountPositionHistory(null, null, platformArgs, landingInfo, option, pageOption);
        return End_getSubAccountPositionHistory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSubAccountPositionHistory(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionDetailOption option, IndexedPageOption pageOption)
      #else
      public void send_getSubAccountPositionHistory(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionDetailOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSubAccountPositionHistory", TMessageType.Call, seqid_));
        getSubAccountPositionHistory_args args = new getSubAccountPositionHistory_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.asset.thriftapi.SettlementPositionDetailPage recv_getSubAccountPositionHistory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSubAccountPositionHistory_result result = new getSubAccountPositionHistory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSubAccountPositionHistory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSubAccountPositionHistoryTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionTradeDetailOption option, IndexedPageOption pageOption)
      {
        return send_getSubAccountPositionHistoryTradeDetail(callback, state, platformArgs, landingInfo, option, pageOption);
      }

      public xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage End_getSubAccountPositionHistoryTradeDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSubAccountPositionHistoryTradeDetail();
      }

      #endif

      /// <summary>
      /// 查询子账号的历史持仓的持仓明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage getSubAccountPositionHistoryTradeDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionTradeDetailOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getSubAccountPositionHistoryTradeDetail(platformArgs, landingInfo, option, pageOption);
        return recv_getSubAccountPositionHistoryTradeDetail();

        #else
        var asyncResult = Begin_getSubAccountPositionHistoryTradeDetail(null, null, platformArgs, landingInfo, option, pageOption);
        return End_getSubAccountPositionHistoryTradeDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSubAccountPositionHistoryTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionTradeDetailOption option, IndexedPageOption pageOption)
      #else
      public void send_getSubAccountPositionHistoryTradeDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionTradeDetailOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSubAccountPositionHistoryTradeDetail", TMessageType.Call, seqid_));
        getSubAccountPositionHistoryTradeDetail_args args = new getSubAccountPositionHistoryTradeDetail_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage recv_getSubAccountPositionHistoryTradeDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSubAccountPositionHistoryTradeDetail_result result = new getSubAccountPositionHistoryTradeDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSubAccountPositionHistoryTradeDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteExpiredContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long sledContractId)
      {
        return send_deleteExpiredContractPosition(callback, state, platformArgs, landingInfo, subAccountId, sledContractId);
      }

      public void End_deleteExpiredContractPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deleteExpiredContractPosition();
      }

      #endif

      /// <summary>
      /// 删除操作账号中过期合约的持仓(合约已经过期，而持仓在其他地方平掉，但是在雪橇的操作账号中依然显示存在)
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="sledContractId"></param>
      public void deleteExpiredContractPosition(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long sledContractId)
      {
        #if !SILVERLIGHT
        send_deleteExpiredContractPosition(platformArgs, landingInfo, subAccountId, sledContractId);
        recv_deleteExpiredContractPosition();

        #else
        var asyncResult = Begin_deleteExpiredContractPosition(null, null, platformArgs, landingInfo, subAccountId, sledContractId);
        End_deleteExpiredContractPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteExpiredContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long sledContractId)
      #else
      public void send_deleteExpiredContractPosition(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long sledContractId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteExpiredContractPosition", TMessageType.Call, seqid_));
        deleteExpiredContractPosition_args args = new deleteExpiredContractPosition_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.SledContractId = sledContractId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deleteExpiredContractPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteExpiredContractPosition_result result = new deleteExpiredContractPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTradeAccountFundNow(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      {
        return send_getTradeAccountFundNow(callback, state, platformArgs, landingInfo, tradeAccountId);
      }

      public List<HostingTAFundItem> End_getTradeAccountFundNow(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTradeAccountFundNow();
      }

      #endif

      /// <summary>
      /// 获取交易账户目前保留的最新的资金信息，如果查询不到，则list为空，否则list中会存在一个对应的资金信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      public List<HostingTAFundItem> getTradeAccountFundNow(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      {
        #if !SILVERLIGHT
        send_getTradeAccountFundNow(platformArgs, landingInfo, tradeAccountId);
        return recv_getTradeAccountFundNow();

        #else
        var asyncResult = Begin_getTradeAccountFundNow(null, null, platformArgs, landingInfo, tradeAccountId);
        return End_getTradeAccountFundNow(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTradeAccountFundNow(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      #else
      public void send_getTradeAccountFundNow(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTradeAccountFundNow", TMessageType.Call, seqid_));
        getTradeAccountFundNow_args args = new getTradeAccountFundNow_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.TradeAccountId = tradeAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<HostingTAFundItem> recv_getTradeAccountFundNow()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTradeAccountFundNow_result result = new getTradeAccountFundNow_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTradeAccountFundNow failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTradeAccountFundHis(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string fundDateBegin, string fundDateEnd)
      {
        return send_getTradeAccountFundHis(callback, state, platformArgs, landingInfo, tradeAccountId, fundDateBegin, fundDateEnd);
      }

      public List<HostingTAFundHisItem> End_getTradeAccountFundHis(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTradeAccountFundHis();
      }

      #endif

      /// <summary>
      /// 查询资金历史条目, 最大可查一年内的资金变动每日变动
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      /// <param name="fundDateBegin"></param>
      /// <param name="fundDateEnd"></param>
      public List<HostingTAFundHisItem> getTradeAccountFundHis(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string fundDateBegin, string fundDateEnd)
      {
        #if !SILVERLIGHT
        send_getTradeAccountFundHis(platformArgs, landingInfo, tradeAccountId, fundDateBegin, fundDateEnd);
        return recv_getTradeAccountFundHis();

        #else
        var asyncResult = Begin_getTradeAccountFundHis(null, null, platformArgs, landingInfo, tradeAccountId, fundDateBegin, fundDateEnd);
        return End_getTradeAccountFundHis(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTradeAccountFundHis(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string fundDateBegin, string fundDateEnd)
      #else
      public void send_getTradeAccountFundHis(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string fundDateBegin, string fundDateEnd)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTradeAccountFundHis", TMessageType.Call, seqid_));
        getTradeAccountFundHis_args args = new getTradeAccountFundHis_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.TradeAccountId = tradeAccountId;
        args.FundDateBegin = fundDateBegin;
        args.FundDateEnd = fundDateEnd;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<HostingTAFundHisItem> recv_getTradeAccountFundHis()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTradeAccountFundHis_result result = new getTradeAccountFundHis_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTradeAccountFundHis failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTradeAccountSettlementInfos(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string settlementDateBegin, string settlementDateEnd)
      {
        return send_getTradeAccountSettlementInfos(callback, state, platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd);
      }

      public List<xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo> End_getTradeAccountSettlementInfos(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTradeAccountSettlementInfos();
      }

      #endif

      /// <summary>
      /// 查询历史结算信息， 最大可查询一个月内的所有结算单
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      /// <param name="settlementDateBegin"></param>
      /// <param name="settlementDateEnd"></param>
      public List<xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo> getTradeAccountSettlementInfos(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string settlementDateBegin, string settlementDateEnd)
      {
        #if !SILVERLIGHT
        send_getTradeAccountSettlementInfos(platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd);
        return recv_getTradeAccountSettlementInfos();

        #else
        var asyncResult = Begin_getTradeAccountSettlementInfos(null, null, platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd);
        return End_getTradeAccountSettlementInfos(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTradeAccountSettlementInfos(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string settlementDateBegin, string settlementDateEnd)
      #else
      public void send_getTradeAccountSettlementInfos(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string settlementDateBegin, string settlementDateEnd)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTradeAccountSettlementInfos", TMessageType.Call, seqid_));
        getTradeAccountSettlementInfos_args args = new getTradeAccountSettlementInfos_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.TradeAccountId = tradeAccountId;
        args.SettlementDateBegin = settlementDateBegin;
        args.SettlementDateEnd = settlementDateEnd;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo> recv_getTradeAccountSettlementInfos()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTradeAccountSettlementInfos_result result = new getTradeAccountSettlementInfos_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTradeAccountSettlementInfos failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTradeAccountSettlementInfosWithRelatedTime(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string settlementDateBegin, string settlementDateEnd)
      {
        return send_getTradeAccountSettlementInfosWithRelatedTime(callback, state, platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd);
      }

      public List<TradeAccountSettlementInfoWithRelatedTime> End_getTradeAccountSettlementInfosWithRelatedTime(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTradeAccountSettlementInfosWithRelatedTime();
      }

      #endif

      /// <summary>
      /// 查询历史结算信息,包含雪橇成交建议查询时间， 最大可查询一个月内的所有结算单
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tradeAccountId"></param>
      /// <param name="settlementDateBegin"></param>
      /// <param name="settlementDateEnd"></param>
      public List<TradeAccountSettlementInfoWithRelatedTime> getTradeAccountSettlementInfosWithRelatedTime(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string settlementDateBegin, string settlementDateEnd)
      {
        #if !SILVERLIGHT
        send_getTradeAccountSettlementInfosWithRelatedTime(platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd);
        return recv_getTradeAccountSettlementInfosWithRelatedTime();

        #else
        var asyncResult = Begin_getTradeAccountSettlementInfosWithRelatedTime(null, null, platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd);
        return End_getTradeAccountSettlementInfosWithRelatedTime(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTradeAccountSettlementInfosWithRelatedTime(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string settlementDateBegin, string settlementDateEnd)
      #else
      public void send_getTradeAccountSettlementInfosWithRelatedTime(PlatformArgs platformArgs, LandingInfo landingInfo, long tradeAccountId, string settlementDateBegin, string settlementDateEnd)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTradeAccountSettlementInfosWithRelatedTime", TMessageType.Call, seqid_));
        getTradeAccountSettlementInfosWithRelatedTime_args args = new getTradeAccountSettlementInfosWithRelatedTime_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.TradeAccountId = tradeAccountId;
        args.SettlementDateBegin = settlementDateBegin;
        args.SettlementDateEnd = settlementDateEnd;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TradeAccountSettlementInfoWithRelatedTime> recv_getTradeAccountSettlementInfosWithRelatedTime()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTradeAccountSettlementInfosWithRelatedTime_result result = new getTradeAccountSettlementInfosWithRelatedTime_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTradeAccountSettlementInfosWithRelatedTime failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTradeAccountPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, ReqTradeAccountPositionOption option, IndexedPageOption pageOption)
      {
        return send_getTradeAccountPositionTradeDetail(callback, state, platformArgs, landingInfo, option, pageOption);
      }

      public xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage End_getTradeAccountPositionTradeDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTradeAccountPositionTradeDetail();
      }

      #endif

      /// <summary>
      /// 查询资金账户持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage getTradeAccountPositionTradeDetail(PlatformArgs platformArgs, LandingInfo landingInfo, ReqTradeAccountPositionOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getTradeAccountPositionTradeDetail(platformArgs, landingInfo, option, pageOption);
        return recv_getTradeAccountPositionTradeDetail();

        #else
        var asyncResult = Begin_getTradeAccountPositionTradeDetail(null, null, platformArgs, landingInfo, option, pageOption);
        return End_getTradeAccountPositionTradeDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTradeAccountPositionTradeDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, ReqTradeAccountPositionOption option, IndexedPageOption pageOption)
      #else
      public void send_getTradeAccountPositionTradeDetail(PlatformArgs platformArgs, LandingInfo landingInfo, ReqTradeAccountPositionOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTradeAccountPositionTradeDetail", TMessageType.Call, seqid_));
        getTradeAccountPositionTradeDetail_args args = new getTradeAccountPositionTradeDetail_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage recv_getTradeAccountPositionTradeDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTradeAccountPositionTradeDetail_result result = new getTradeAccountPositionTradeDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTradeAccountPositionTradeDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqPositionVerify(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionVerifyOption option, IndexedPageOption pageOption)
      {
        return send_reqPositionVerify(callback, state, platformArgs, landingInfo, option, pageOption);
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionVerifyPage End_reqPositionVerify(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqPositionVerify();
      }

      #endif

      /// <summary>
      /// 查询资金账户持仓核对历史
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionVerifyPage reqPositionVerify(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionVerifyOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_reqPositionVerify(platformArgs, landingInfo, option, pageOption);
        return recv_reqPositionVerify();

        #else
        var asyncResult = Begin_reqPositionVerify(null, null, platformArgs, landingInfo, option, pageOption);
        return End_reqPositionVerify(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqPositionVerify(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionVerifyOption option, IndexedPageOption pageOption)
      #else
      public void send_reqPositionVerify(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionVerifyOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqPositionVerify", TMessageType.Call, seqid_));
        reqPositionVerify_args args = new reqPositionVerify_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionVerifyPage recv_reqPositionVerify()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqPositionVerify_result result = new reqPositionVerify_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqPositionVerify failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqPositionDifference(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionDifferenceOption option, IndexedPageOption pageOption)
      {
        return send_reqPositionDifference(callback, state, platformArgs, landingInfo, option, pageOption);
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionDifferencePage End_reqPositionDifference(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqPositionDifference();
      }

      #endif

      /// <summary>
      /// 查询资金账户持仓核对明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionDifferencePage reqPositionDifference(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionDifferenceOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_reqPositionDifference(platformArgs, landingInfo, option, pageOption);
        return recv_reqPositionDifference();

        #else
        var asyncResult = Begin_reqPositionDifference(null, null, platformArgs, landingInfo, option, pageOption);
        return End_reqPositionDifference(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqPositionDifference(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionDifferenceOption option, IndexedPageOption pageOption)
      #else
      public void send_reqPositionDifference(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionDifferenceOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqPositionDifference", TMessageType.Call, seqid_));
        reqPositionDifference_args args = new reqPositionDifference_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionDifferencePage recv_reqPositionDifference()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqPositionDifference_result result = new reqPositionDifference_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqPositionDifference failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_manualInputPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput> positionManualInputs)
      {
        return send_manualInputPosition(callback, state, platformArgs, landingInfo, positionManualInputs);
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.ManualInputPositionResp End_manualInputPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_manualInputPosition();
      }

      #endif

      /// <summary>
      /// 录入持仓明细信息
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="positionManualInputs"></param>
      public xueqiao.trade.hosting.position.adjust.thriftapi.ManualInputPositionResp manualInputPosition(PlatformArgs platformArgs, LandingInfo landingInfo, List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput> positionManualInputs)
      {
        #if !SILVERLIGHT
        send_manualInputPosition(platformArgs, landingInfo, positionManualInputs);
        return recv_manualInputPosition();

        #else
        var asyncResult = Begin_manualInputPosition(null, null, platformArgs, landingInfo, positionManualInputs);
        return End_manualInputPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_manualInputPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput> positionManualInputs)
      #else
      public void send_manualInputPosition(PlatformArgs platformArgs, LandingInfo landingInfo, List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput> positionManualInputs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("manualInputPosition", TMessageType.Call, seqid_));
        manualInputPosition_args args = new manualInputPosition_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.PositionManualInputs = positionManualInputs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.ManualInputPositionResp recv_manualInputPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        manualInputPosition_result result = new manualInputPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "manualInputPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqPositionUnassigned(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionUnassignedOption option, IndexedPageOption pageOption)
      {
        return send_reqPositionUnassigned(callback, state, platformArgs, landingInfo, option, pageOption);
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionUnassignedPage End_reqPositionUnassigned(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqPositionUnassigned();
      }

      #endif

      /// <summary>
      /// 查询未分配的持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionUnassignedPage reqPositionUnassigned(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionUnassignedOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_reqPositionUnassigned(platformArgs, landingInfo, option, pageOption);
        return recv_reqPositionUnassigned();

        #else
        var asyncResult = Begin_reqPositionUnassigned(null, null, platformArgs, landingInfo, option, pageOption);
        return End_reqPositionUnassigned(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqPositionUnassigned(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionUnassignedOption option, IndexedPageOption pageOption)
      #else
      public void send_reqPositionUnassigned(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionUnassignedOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqPositionUnassigned", TMessageType.Call, seqid_));
        reqPositionUnassigned_args args = new reqPositionUnassigned_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionUnassignedPage recv_reqPositionUnassigned()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqPositionUnassigned_result result = new reqPositionUnassigned_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqPositionUnassigned failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_assignPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption> assignOption)
      {
        return send_assignPosition(callback, state, platformArgs, landingInfo, assignOption);
      }

      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp End_assignPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_assignPosition();
      }

      #endif

      /// <summary>
      /// 分配持仓明细信息
      /// 
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="assignOption"></param>
      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp assignPosition(PlatformArgs platformArgs, LandingInfo landingInfo, List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption> assignOption)
      {
        #if !SILVERLIGHT
        send_assignPosition(platformArgs, landingInfo, assignOption);
        return recv_assignPosition();

        #else
        var asyncResult = Begin_assignPosition(null, null, platformArgs, landingInfo, assignOption);
        return End_assignPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_assignPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption> assignOption)
      #else
      public void send_assignPosition(PlatformArgs platformArgs, LandingInfo landingInfo, List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption> assignOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("assignPosition", TMessageType.Call, seqid_));
        assignPosition_args args = new assignPosition_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.AssignOption = assignOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp recv_assignPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        assignPosition_result result = new assignPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "assignPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqPositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string lockKey)
      {
        return send_reqPositionEditLock(callback, state, platformArgs, landingInfo, lockKey);
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock End_reqPositionEditLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqPositionEditLock();
      }

      #endif

      /// <summary>
      /// 查询持仓编辑锁信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="lockKey"></param>
      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock reqPositionEditLock(PlatformArgs platformArgs, LandingInfo landingInfo, string lockKey)
      {
        #if !SILVERLIGHT
        send_reqPositionEditLock(platformArgs, landingInfo, lockKey);
        return recv_reqPositionEditLock();

        #else
        var asyncResult = Begin_reqPositionEditLock(null, null, platformArgs, landingInfo, lockKey);
        return End_reqPositionEditLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqPositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, string lockKey)
      #else
      public void send_reqPositionEditLock(PlatformArgs platformArgs, LandingInfo landingInfo, string lockKey)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqPositionEditLock", TMessageType.Call, seqid_));
        reqPositionEditLock_args args = new reqPositionEditLock_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.LockKey = lockKey;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock recv_reqPositionEditLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqPositionEditLock_result result = new reqPositionEditLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqPositionEditLock failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addPositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock positionEditLock)
      {
        return send_addPositionEditLock(callback, state, platformArgs, landingInfo, positionEditLock);
      }

      public void End_addPositionEditLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addPositionEditLock();
      }

      #endif

      /// <summary>
      /// 添加持仓编辑锁信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="positionEditLock"></param>
      public void addPositionEditLock(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock positionEditLock)
      {
        #if !SILVERLIGHT
        send_addPositionEditLock(platformArgs, landingInfo, positionEditLock);
        recv_addPositionEditLock();

        #else
        var asyncResult = Begin_addPositionEditLock(null, null, platformArgs, landingInfo, positionEditLock);
        End_addPositionEditLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addPositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock positionEditLock)
      #else
      public void send_addPositionEditLock(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock positionEditLock)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addPositionEditLock", TMessageType.Call, seqid_));
        addPositionEditLock_args args = new addPositionEditLock_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.PositionEditLock = positionEditLock;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addPositionEditLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addPositionEditLock_result result = new addPositionEditLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removePositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock positionEditLock)
      {
        return send_removePositionEditLock(callback, state, platformArgs, landingInfo, positionEditLock);
      }

      public void End_removePositionEditLock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_removePositionEditLock();
      }

      #endif

      /// <summary>
      /// 删除持仓编辑锁信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="positionEditLock"></param>
      public void removePositionEditLock(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock positionEditLock)
      {
        #if !SILVERLIGHT
        send_removePositionEditLock(platformArgs, landingInfo, positionEditLock);
        recv_removePositionEditLock();

        #else
        var asyncResult = Begin_removePositionEditLock(null, null, platformArgs, landingInfo, positionEditLock);
        End_removePositionEditLock(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removePositionEditLock(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock positionEditLock)
      #else
      public void send_removePositionEditLock(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock positionEditLock)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removePositionEditLock", TMessageType.Call, seqid_));
        removePositionEditLock_args args = new removePositionEditLock_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.PositionEditLock = positionEditLock;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_removePositionEditLock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removePositionEditLock_result result = new removePositionEditLock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqDailyPositionDifference(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqDailyPositionDifferenceOption option, IndexedPageOption pageOption)
      {
        return send_reqDailyPositionDifference(callback, state, platformArgs, landingInfo, option, pageOption);
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifferencePage End_reqDailyPositionDifference(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqDailyPositionDifference();
      }

      #endif

      /// <summary>
      /// 查询日常持仓核对明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifferencePage reqDailyPositionDifference(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqDailyPositionDifferenceOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_reqDailyPositionDifference(platformArgs, landingInfo, option, pageOption);
        return recv_reqDailyPositionDifference();

        #else
        var asyncResult = Begin_reqDailyPositionDifference(null, null, platformArgs, landingInfo, option, pageOption);
        return End_reqDailyPositionDifference(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqDailyPositionDifference(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqDailyPositionDifferenceOption option, IndexedPageOption pageOption)
      #else
      public void send_reqDailyPositionDifference(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqDailyPositionDifferenceOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqDailyPositionDifference", TMessageType.Call, seqid_));
        reqDailyPositionDifference_args args = new reqDailyPositionDifference_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifferencePage recv_reqDailyPositionDifference()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqDailyPositionDifference_result result = new reqDailyPositionDifference_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqDailyPositionDifference failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateDailyPositionDifferenceNote(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifference difference)
      {
        return send_updateDailyPositionDifferenceNote(callback, state, platformArgs, landingInfo, difference);
      }

      public void End_updateDailyPositionDifferenceNote(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateDailyPositionDifferenceNote();
      }

      #endif

      /// <summary>
      /// 更新日常持仓核对的备注和核对状态信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="difference"></param>
      public void updateDailyPositionDifferenceNote(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifference difference)
      {
        #if !SILVERLIGHT
        send_updateDailyPositionDifferenceNote(platformArgs, landingInfo, difference);
        recv_updateDailyPositionDifferenceNote();

        #else
        var asyncResult = Begin_updateDailyPositionDifferenceNote(null, null, platformArgs, landingInfo, difference);
        End_updateDailyPositionDifferenceNote(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateDailyPositionDifferenceNote(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifference difference)
      #else
      public void send_updateDailyPositionDifferenceNote(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifference difference)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateDailyPositionDifferenceNote", TMessageType.Call, seqid_));
        updateDailyPositionDifferenceNote_args args = new updateDailyPositionDifferenceNote_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Difference = difference;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateDailyPositionDifferenceNote()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateDailyPositionDifferenceNote_result result = new updateDailyPositionDifferenceNote_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqPositionAssigned(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionAssignedOption option, IndexedPageOption pageOption)
      {
        return send_reqPositionAssigned(callback, state, platformArgs, landingInfo, option, pageOption);
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignedPage End_reqPositionAssigned(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqPositionAssigned();
      }

      #endif

      /// <summary>
      /// 查询已分配的持仓明细信息
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignedPage reqPositionAssigned(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionAssignedOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_reqPositionAssigned(platformArgs, landingInfo, option, pageOption);
        return recv_reqPositionAssigned();

        #else
        var asyncResult = Begin_reqPositionAssigned(null, null, platformArgs, landingInfo, option, pageOption);
        return End_reqPositionAssigned(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqPositionAssigned(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionAssignedOption option, IndexedPageOption pageOption)
      #else
      public void send_reqPositionAssigned(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionAssignedOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqPositionAssigned", TMessageType.Call, seqid_));
        reqPositionAssigned_args args = new reqPositionAssigned_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignedPage recv_reqPositionAssigned()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqPositionAssigned_result result = new reqPositionAssigned_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqPositionAssigned failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_contructCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.StatContructComposeReq contructComposeReq)
      {
        return send_contructCompose(callback, state, platformArgs, landingInfo, contructComposeReq);
      }

      public void End_contructCompose(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_contructCompose();
      }

      #endif

      /// <summary>
      /// 录入统计组合
      /// (过期废弃)
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="contructComposeReq"></param>
      public void contructCompose(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.StatContructComposeReq contructComposeReq)
      {
        #if !SILVERLIGHT
        send_contructCompose(platformArgs, landingInfo, contructComposeReq);
        recv_contructCompose();

        #else
        var asyncResult = Begin_contructCompose(null, null, platformArgs, landingInfo, contructComposeReq);
        End_contructCompose(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_contructCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.StatContructComposeReq contructComposeReq)
      #else
      public void send_contructCompose(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.StatContructComposeReq contructComposeReq)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("contructCompose", TMessageType.Call, seqid_));
        contructCompose_args args = new contructCompose_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.ContructComposeReq = contructComposeReq;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_contructCompose()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        contructCompose_result result = new contructCompose_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_disassembleCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.DisassembleComposePositionReq disassembleComposePositionReq)
      {
        return send_disassembleCompose(callback, state, platformArgs, landingInfo, disassembleComposePositionReq);
      }

      public void End_disassembleCompose(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_disassembleCompose();
      }

      #endif

      /// <summary>
      /// 拆分统计组合
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="disassembleComposePositionReq"></param>
      public void disassembleCompose(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.DisassembleComposePositionReq disassembleComposePositionReq)
      {
        #if !SILVERLIGHT
        send_disassembleCompose(platformArgs, landingInfo, disassembleComposePositionReq);
        recv_disassembleCompose();

        #else
        var asyncResult = Begin_disassembleCompose(null, null, platformArgs, landingInfo, disassembleComposePositionReq);
        End_disassembleCompose(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_disassembleCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.DisassembleComposePositionReq disassembleComposePositionReq)
      #else
      public void send_disassembleCompose(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.DisassembleComposePositionReq disassembleComposePositionReq)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("disassembleCompose", TMessageType.Call, seqid_));
        disassembleCompose_args args = new disassembleCompose_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.DisassembleComposePositionReq = disassembleComposePositionReq;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_disassembleCompose()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        disassembleCompose_result result = new disassembleCompose_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchClosePosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.BatchClosedPositionReq batchClosedPositionReq)
      {
        return send_batchClosePosition(callback, state, platformArgs, landingInfo, batchClosedPositionReq);
      }

      public void End_batchClosePosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_batchClosePosition();
      }

      #endif

      /// <summary>
      /// 批量平仓
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="batchClosedPositionReq"></param>
      public void batchClosePosition(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.BatchClosedPositionReq batchClosedPositionReq)
      {
        #if !SILVERLIGHT
        send_batchClosePosition(platformArgs, landingInfo, batchClosedPositionReq);
        recv_batchClosePosition();

        #else
        var asyncResult = Begin_batchClosePosition(null, null, platformArgs, landingInfo, batchClosedPositionReq);
        End_batchClosePosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchClosePosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.BatchClosedPositionReq batchClosedPositionReq)
      #else
      public void send_batchClosePosition(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.BatchClosedPositionReq batchClosedPositionReq)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchClosePosition", TMessageType.Call, seqid_));
        batchClosePosition_args args = new batchClosePosition_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.BatchClosedPositionReq = batchClosedPositionReq;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_batchClosePosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchClosePosition_result result = new batchClosePosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_recoverClosedPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      {
        return send_recoverClosedPosition(callback, state, platformArgs, landingInfo, subAccountId, targetKey, targetType);
      }

      public void End_recoverClosedPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_recoverClosedPosition();
      }

      #endif

      /// <summary>
      /// 恢复当天平仓
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="targetKey"></param>
      /// <param name="targetType"></param>
      public void recoverClosedPosition(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      {
        #if !SILVERLIGHT
        send_recoverClosedPosition(platformArgs, landingInfo, subAccountId, targetKey, targetType);
        recv_recoverClosedPosition();

        #else
        var asyncResult = Begin_recoverClosedPosition(null, null, platformArgs, landingInfo, subAccountId, targetKey, targetType);
        End_recoverClosedPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_recoverClosedPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      #else
      public void send_recoverClosedPosition(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("recoverClosedPosition", TMessageType.Call, seqid_));
        recoverClosedPosition_args args = new recoverClosedPosition_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.TargetKey = targetKey;
        args.TargetType = targetType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_recoverClosedPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        recoverClosedPosition_result result = new recoverClosedPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_mergeToCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.StatMergeToComposeReq mergeToComposeReq)
      {
        return send_mergeToCompose(callback, state, platformArgs, landingInfo, mergeToComposeReq);
      }

      public void End_mergeToCompose(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_mergeToCompose();
      }

      #endif

      /// <summary>
      /// 合并合约为组合
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="mergeToComposeReq"></param>
      public void mergeToCompose(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.StatMergeToComposeReq mergeToComposeReq)
      {
        #if !SILVERLIGHT
        send_mergeToCompose(platformArgs, landingInfo, mergeToComposeReq);
        recv_mergeToCompose();

        #else
        var asyncResult = Begin_mergeToCompose(null, null, platformArgs, landingInfo, mergeToComposeReq);
        End_mergeToCompose(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_mergeToCompose(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.StatMergeToComposeReq mergeToComposeReq)
      #else
      public void send_mergeToCompose(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.StatMergeToComposeReq mergeToComposeReq)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("mergeToCompose", TMessageType.Call, seqid_));
        mergeToCompose_args args = new mergeToCompose_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.MergeToComposeReq = mergeToComposeReq;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_mergeToCompose()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mergeToCompose_result result = new mergeToCompose_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteExpiredStatContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long sledContractId)
      {
        return send_deleteExpiredStatContractPosition(callback, state, platformArgs, landingInfo, subAccountId, sledContractId);
      }

      public void End_deleteExpiredStatContractPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deleteExpiredStatContractPosition();
      }

      #endif

      /// <summary>
      /// 删除过期合约持仓
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="sledContractId"></param>
      public void deleteExpiredStatContractPosition(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long sledContractId)
      {
        #if !SILVERLIGHT
        send_deleteExpiredStatContractPosition(platformArgs, landingInfo, subAccountId, sledContractId);
        recv_deleteExpiredStatContractPosition();

        #else
        var asyncResult = Begin_deleteExpiredStatContractPosition(null, null, platformArgs, landingInfo, subAccountId, sledContractId);
        End_deleteExpiredStatContractPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteExpiredStatContractPosition(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long sledContractId)
      #else
      public void send_deleteExpiredStatContractPosition(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long sledContractId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteExpiredStatContractPosition", TMessageType.Call, seqid_));
        deleteExpiredStatContractPosition_args args = new deleteExpiredStatContractPosition_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.SledContractId = sledContractId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deleteExpiredStatContractPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteExpiredStatContractPosition_result result = new deleteExpiredStatContractPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryStatPositionSummaryPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryStatPositionSummaryPage(callback, state, platformArgs, landingInfo, queryOption, pageOption);
      }

      public xueqiao.trade.hosting.position.statis.StatPositionSummaryPage End_queryStatPositionSummaryPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryStatPositionSummaryPage();
      }

      #endif

      /// <summary>
      /// 查询统计持仓
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.position.statis.StatPositionSummaryPage queryStatPositionSummaryPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryStatPositionSummaryPage(platformArgs, landingInfo, queryOption, pageOption);
        return recv_queryStatPositionSummaryPage();

        #else
        var asyncResult = Begin_queryStatPositionSummaryPage(null, null, platformArgs, landingInfo, queryOption, pageOption);
        return End_queryStatPositionSummaryPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryStatPositionSummaryPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryStatPositionSummaryPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryStatPositionSummaryPage", TMessageType.Call, seqid_));
        queryStatPositionSummaryPage_args args = new queryStatPositionSummaryPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.statis.StatPositionSummaryPage recv_queryStatPositionSummaryPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryStatPositionSummaryPage_result result = new queryStatPositionSummaryPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryStatPositionSummaryPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryStatPositionItemPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionItemOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryStatPositionItemPage(callback, state, platformArgs, landingInfo, queryOption, pageOption);
      }

      public xueqiao.trade.hosting.position.statis.StatPositionItemPage End_queryStatPositionItemPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryStatPositionItemPage();
      }

      #endif

      /// <summary>
      /// 查询持仓详情
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.position.statis.StatPositionItemPage queryStatPositionItemPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionItemOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryStatPositionItemPage(platformArgs, landingInfo, queryOption, pageOption);
        return recv_queryStatPositionItemPage();

        #else
        var asyncResult = Begin_queryStatPositionItemPage(null, null, platformArgs, landingInfo, queryOption, pageOption);
        return End_queryStatPositionItemPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryStatPositionItemPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionItemOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryStatPositionItemPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionItemOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryStatPositionItemPage", TMessageType.Call, seqid_));
        queryStatPositionItemPage_args args = new queryStatPositionItemPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.statis.StatPositionItemPage recv_queryStatPositionItemPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryStatPositionItemPage_result result = new queryStatPositionItemPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryStatPositionItemPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryCurrentDayStatClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      {
        return send_queryCurrentDayStatClosedPositionPage(callback, state, platformArgs, landingInfo, subAccountId, targetKey, targetType);
      }

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage End_queryCurrentDayStatClosedPositionPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryCurrentDayStatClosedPositionPage();
      }

      #endif

      /// <summary>
      /// 查询当天平仓记录
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="targetKey"></param>
      /// <param name="targetType"></param>
      public xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage queryCurrentDayStatClosedPositionPage(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      {
        #if !SILVERLIGHT
        send_queryCurrentDayStatClosedPositionPage(platformArgs, landingInfo, subAccountId, targetKey, targetType);
        return recv_queryCurrentDayStatClosedPositionPage();

        #else
        var asyncResult = Begin_queryCurrentDayStatClosedPositionPage(null, null, platformArgs, landingInfo, subAccountId, targetKey, targetType);
        return End_queryCurrentDayStatClosedPositionPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryCurrentDayStatClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      #else
      public void send_queryCurrentDayStatClosedPositionPage(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, string targetKey, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryCurrentDayStatClosedPositionPage", TMessageType.Call, seqid_));
        queryCurrentDayStatClosedPositionPage_args args = new queryCurrentDayStatClosedPositionPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.TargetKey = targetKey;
        args.TargetType = targetType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage recv_queryCurrentDayStatClosedPositionPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryCurrentDayStatClosedPositionPage_result result = new queryCurrentDayStatClosedPositionPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryCurrentDayStatClosedPositionPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryStatClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatClosedPositionItemOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryStatClosedPositionDetail(callback, state, platformArgs, landingInfo, queryOption, pageOption);
      }

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDetail End_queryStatClosedPositionDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryStatClosedPositionDetail();
      }

      #endif

      /// <summary>
      /// 查询平仓明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.position.statis.StatClosedPositionDetail queryStatClosedPositionDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatClosedPositionItemOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryStatClosedPositionDetail(platformArgs, landingInfo, queryOption, pageOption);
        return recv_queryStatClosedPositionDetail();

        #else
        var asyncResult = Begin_queryStatClosedPositionDetail(null, null, platformArgs, landingInfo, queryOption, pageOption);
        return End_queryStatClosedPositionDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryStatClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatClosedPositionItemOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryStatClosedPositionDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatClosedPositionItemOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryStatClosedPositionDetail", TMessageType.Call, seqid_));
        queryStatClosedPositionDetail_args args = new queryStatClosedPositionDetail_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDetail recv_queryStatClosedPositionDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryStatClosedPositionDetail_result result = new queryStatClosedPositionDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryStatClosedPositionDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryArchivedClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatClosedPositionDateSummaryOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryArchivedClosedPositionPage(callback, state, platformArgs, landingInfo, queryOption, pageOption);
      }

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage End_queryArchivedClosedPositionPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryArchivedClosedPositionPage();
      }

      #endif

      /// <summary>
      /// 查询归档记录
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage queryArchivedClosedPositionPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatClosedPositionDateSummaryOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryArchivedClosedPositionPage(platformArgs, landingInfo, queryOption, pageOption);
        return recv_queryArchivedClosedPositionPage();

        #else
        var asyncResult = Begin_queryArchivedClosedPositionPage(null, null, platformArgs, landingInfo, queryOption, pageOption);
        return End_queryArchivedClosedPositionPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryArchivedClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatClosedPositionDateSummaryOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryArchivedClosedPositionPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatClosedPositionDateSummaryOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryArchivedClosedPositionPage", TMessageType.Call, seqid_));
        queryArchivedClosedPositionPage_args args = new queryArchivedClosedPositionPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage recv_queryArchivedClosedPositionPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryArchivedClosedPositionPage_result result = new queryArchivedClosedPositionPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryArchivedClosedPositionPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryArchivedClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatArchiveItemOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryArchivedClosedPositionDetail(callback, state, platformArgs, landingInfo, queryOption, pageOption);
      }

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDetail End_queryArchivedClosedPositionDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryArchivedClosedPositionDetail();
      }

      #endif

      /// <summary>
      /// 查询归档（平仓）明细
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="queryOption"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.position.statis.StatClosedPositionDetail queryArchivedClosedPositionDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatArchiveItemOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryArchivedClosedPositionDetail(platformArgs, landingInfo, queryOption, pageOption);
        return recv_queryArchivedClosedPositionDetail();

        #else
        var asyncResult = Begin_queryArchivedClosedPositionDetail(null, null, platformArgs, landingInfo, queryOption, pageOption);
        return End_queryArchivedClosedPositionDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryArchivedClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatArchiveItemOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryArchivedClosedPositionDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatArchiveItemOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryArchivedClosedPositionDetail", TMessageType.Call, seqid_));
        queryArchivedClosedPositionDetail_args args = new queryArchivedClosedPositionDetail_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDetail recv_queryArchivedClosedPositionDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryArchivedClosedPositionDetail_result result = new queryArchivedClosedPositionDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryArchivedClosedPositionDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryStatPositionSummaryExPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryStatPositionSummaryExPage(callback, state, platformArgs, landingInfo, queryOption, pageOption);
      }

      public xueqiao.trade.hosting.position.statis.StatPositionSummaryExPage End_queryStatPositionSummaryExPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryStatPositionSummaryExPage();
      }

      #endif

      public xueqiao.trade.hosting.position.statis.StatPositionSummaryExPage queryStatPositionSummaryExPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryStatPositionSummaryExPage(platformArgs, landingInfo, queryOption, pageOption);
        return recv_queryStatPositionSummaryExPage();

        #else
        var asyncResult = Begin_queryStatPositionSummaryExPage(null, null, platformArgs, landingInfo, queryOption, pageOption);
        return End_queryStatPositionSummaryExPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryStatPositionSummaryExPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryStatPositionSummaryExPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryStatPositionSummaryExPage", TMessageType.Call, seqid_));
        queryStatPositionSummaryExPage_args args = new queryStatPositionSummaryExPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.statis.StatPositionSummaryExPage recv_queryStatPositionSummaryExPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryStatPositionSummaryExPage_result result = new queryStatPositionSummaryExPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryStatPositionSummaryExPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryStatPositionUnitPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionUnitOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryStatPositionUnitPage(callback, state, platformArgs, landingInfo, queryOption, pageOption);
      }

      public xueqiao.trade.hosting.position.statis.StatPositionUnitPage End_queryStatPositionUnitPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryStatPositionUnitPage();
      }

      #endif

      public xueqiao.trade.hosting.position.statis.StatPositionUnitPage queryStatPositionUnitPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionUnitOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryStatPositionUnitPage(platformArgs, landingInfo, queryOption, pageOption);
        return recv_queryStatPositionUnitPage();

        #else
        var asyncResult = Begin_queryStatPositionUnitPage(null, null, platformArgs, landingInfo, queryOption, pageOption);
        return End_queryStatPositionUnitPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryStatPositionUnitPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionUnitOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryStatPositionUnitPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryStatPositionUnitOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryStatPositionUnitPage", TMessageType.Call, seqid_));
        queryStatPositionUnitPage_args args = new queryStatPositionUnitPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.statis.StatPositionUnitPage recv_queryStatPositionUnitPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryStatPositionUnitPage_result result = new queryStatPositionUnitPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryStatPositionUnitPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryHistoryClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryHistoryClosedPositionPage(callback, state, platformArgs, landingInfo, queryOption, pageOption);
      }

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage End_queryHistoryClosedPositionPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryHistoryClosedPositionPage();
      }

      #endif

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage queryHistoryClosedPositionPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryHistoryClosedPositionPage(platformArgs, landingInfo, queryOption, pageOption);
        return recv_queryHistoryClosedPositionPage();

        #else
        var asyncResult = Begin_queryHistoryClosedPositionPage(null, null, platformArgs, landingInfo, queryOption, pageOption);
        return End_queryHistoryClosedPositionPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryHistoryClosedPositionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryHistoryClosedPositionPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryHistoryClosedPositionPage", TMessageType.Call, seqid_));
        queryHistoryClosedPositionPage_args args = new queryHistoryClosedPositionPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage recv_queryHistoryClosedPositionPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryHistoryClosedPositionPage_result result = new queryHistoryClosedPositionPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryHistoryClosedPositionPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryHistoryClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      {
        return send_queryHistoryClosedPositionDetail(callback, state, platformArgs, landingInfo, queryOption, pageOption);
      }

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDetail End_queryHistoryClosedPositionDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryHistoryClosedPositionDetail();
      }

      #endif

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDetail queryHistoryClosedPositionDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryHistoryClosedPositionDetail(platformArgs, landingInfo, queryOption, pageOption);
        return recv_queryHistoryClosedPositionDetail();

        #else
        var asyncResult = Begin_queryHistoryClosedPositionDetail(null, null, platformArgs, landingInfo, queryOption, pageOption);
        return End_queryHistoryClosedPositionDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryHistoryClosedPositionDetail(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      #else
      public void send_queryHistoryClosedPositionDetail(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption queryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryHistoryClosedPositionDetail", TMessageType.Call, seqid_));
        queryHistoryClosedPositionDetail_args args = new queryHistoryClosedPositionDetail_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOption = queryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDetail recv_queryHistoryClosedPositionDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryHistoryClosedPositionDetail_result result = new queryHistoryClosedPositionDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryHistoryClosedPositionDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getXQTradeLameTaskNotePage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, QueryXQTradeLameTaskNotePageOption qryOption, IndexedPageOption pageOption)
      {
        return send_getXQTradeLameTaskNotePage(callback, state, platformArgs, landingInfo, qryOption, pageOption);
      }

      public xueqiao.trade.hosting.tasknote.thriftapi.HostingTaskNotePage End_getXQTradeLameTaskNotePage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getXQTradeLameTaskNotePage();
      }

      #endif

      /// <summary>
      /// 查询相关子账户的所有瘸腿成交的TaskNote
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="qryOption"></param>
      /// <param name="pageOption"></param>
      public xueqiao.trade.hosting.tasknote.thriftapi.HostingTaskNotePage getXQTradeLameTaskNotePage(PlatformArgs platformArgs, LandingInfo landingInfo, QueryXQTradeLameTaskNotePageOption qryOption, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_getXQTradeLameTaskNotePage(platformArgs, landingInfo, qryOption, pageOption);
        return recv_getXQTradeLameTaskNotePage();

        #else
        var asyncResult = Begin_getXQTradeLameTaskNotePage(null, null, platformArgs, landingInfo, qryOption, pageOption);
        return End_getXQTradeLameTaskNotePage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getXQTradeLameTaskNotePage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, QueryXQTradeLameTaskNotePageOption qryOption, IndexedPageOption pageOption)
      #else
      public void send_getXQTradeLameTaskNotePage(PlatformArgs platformArgs, LandingInfo landingInfo, QueryXQTradeLameTaskNotePageOption qryOption, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getXQTradeLameTaskNotePage", TMessageType.Call, seqid_));
        getXQTradeLameTaskNotePage_args args = new getXQTradeLameTaskNotePage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QryOption = qryOption;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.tasknote.thriftapi.HostingTaskNotePage recv_getXQTradeLameTaskNotePage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getXQTradeLameTaskNotePage_result result = new getXQTradeLameTaskNotePage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getXQTradeLameTaskNotePage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchDeleteXQTradeLameTaskNotes(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, THashSet<long> xqTradeIds)
      {
        return send_batchDeleteXQTradeLameTaskNotes(callback, state, platformArgs, landingInfo, subAccountId, xqTradeIds);
      }

      public Dictionary<long, ErrorInfo> End_batchDeleteXQTradeLameTaskNotes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_batchDeleteXQTradeLameTaskNotes();
      }

      #endif

      /// <summary>
      /// 批量删除一个子账户下的TaskNote
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="subAccountId"></param>
      /// <param name="xqTradeIds"></param>
      public Dictionary<long, ErrorInfo> batchDeleteXQTradeLameTaskNotes(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, THashSet<long> xqTradeIds)
      {
        #if !SILVERLIGHT
        send_batchDeleteXQTradeLameTaskNotes(platformArgs, landingInfo, subAccountId, xqTradeIds);
        return recv_batchDeleteXQTradeLameTaskNotes();

        #else
        var asyncResult = Begin_batchDeleteXQTradeLameTaskNotes(null, null, platformArgs, landingInfo, subAccountId, xqTradeIds);
        return End_batchDeleteXQTradeLameTaskNotes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchDeleteXQTradeLameTaskNotes(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, THashSet<long> xqTradeIds)
      #else
      public void send_batchDeleteXQTradeLameTaskNotes(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, THashSet<long> xqTradeIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchDeleteXQTradeLameTaskNotes", TMessageType.Call, seqid_));
        batchDeleteXQTradeLameTaskNotes_args args = new batchDeleteXQTradeLameTaskNotes_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.XqTradeIds = xqTradeIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<long, ErrorInfo> recv_batchDeleteXQTradeLameTaskNotes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchDeleteXQTradeLameTaskNotes_result result = new batchDeleteXQTradeLameTaskNotes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batchDeleteXQTradeLameTaskNotes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryMailBoxMessage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, ReqMailBoxMessageOption option, IndexedPageOption pageOption)
      {
        return send_queryMailBoxMessage(callback, state, platformArgs, landingInfo, option, pageOption);
      }

      public xueqiao.mailbox.user.message.thriftapi.UserMessagePage End_queryMailBoxMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryMailBoxMessage();
      }

      #endif

      /// <summary>
      /// 查询用户托管机消息的接口
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.mailbox.user.message.thriftapi.UserMessagePage queryMailBoxMessage(PlatformArgs platformArgs, LandingInfo landingInfo, ReqMailBoxMessageOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryMailBoxMessage(platformArgs, landingInfo, option, pageOption);
        return recv_queryMailBoxMessage();

        #else
        var asyncResult = Begin_queryMailBoxMessage(null, null, platformArgs, landingInfo, option, pageOption);
        return End_queryMailBoxMessage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryMailBoxMessage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, ReqMailBoxMessageOption option, IndexedPageOption pageOption)
      #else
      public void send_queryMailBoxMessage(PlatformArgs platformArgs, LandingInfo landingInfo, ReqMailBoxMessageOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryMailBoxMessage", TMessageType.Call, seqid_));
        queryMailBoxMessage_args args = new queryMailBoxMessage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.mailbox.user.message.thriftapi.UserMessagePage recv_queryMailBoxMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryMailBoxMessage_result result = new queryMailBoxMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryMailBoxMessage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_markMessageAsRead(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> hostingMessageIds)
      {
        return send_markMessageAsRead(callback, state, platformArgs, landingInfo, hostingMessageIds);
      }

      public bool End_markMessageAsRead(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_markMessageAsRead();
      }

      #endif

      /// <summary>
      /// 标记用户托管机消息为已读
      /// hostingMessageIds empty 表示所有未读状态设置为已读
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="hostingMessageIds"></param>
      public bool markMessageAsRead(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> hostingMessageIds)
      {
        #if !SILVERLIGHT
        send_markMessageAsRead(platformArgs, landingInfo, hostingMessageIds);
        return recv_markMessageAsRead();

        #else
        var asyncResult = Begin_markMessageAsRead(null, null, platformArgs, landingInfo, hostingMessageIds);
        return End_markMessageAsRead(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_markMessageAsRead(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> hostingMessageIds)
      #else
      public void send_markMessageAsRead(PlatformArgs platformArgs, LandingInfo landingInfo, THashSet<long> hostingMessageIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("markMessageAsRead", TMessageType.Call, seqid_));
        markMessageAsRead_args args = new markMessageAsRead_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.HostingMessageIds = hostingMessageIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_markMessageAsRead()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        markMessageAsRead_result result = new markMessageAsRead_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "markMessageAsRead failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAllSupportedItems(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo)
      {
        return send_getAllSupportedItems(callback, state, platformArgs, landingInfo);
      }

      public List<xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskSupportedItem> End_getAllSupportedItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAllSupportedItems();
      }

      #endif

      public List<xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskSupportedItem> getAllSupportedItems(PlatformArgs platformArgs, LandingInfo landingInfo)
      {
        #if !SILVERLIGHT
        send_getAllSupportedItems(platformArgs, landingInfo);
        return recv_getAllSupportedItems();

        #else
        var asyncResult = Begin_getAllSupportedItems(null, null, platformArgs, landingInfo);
        return End_getAllSupportedItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAllSupportedItems(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo)
      #else
      public void send_getAllSupportedItems(PlatformArgs platformArgs, LandingInfo landingInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAllSupportedItems", TMessageType.Call, seqid_));
        getAllSupportedItems_args args = new getAllSupportedItems_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskSupportedItem> recv_getAllSupportedItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAllSupportedItems_result result = new getAllSupportedItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllSupportedItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRiskRuleJointVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        return send_getRiskRuleJointVersion(callback, state, platformArgs, landingInfo, subAccountId);
      }

      public int End_getRiskRuleJointVersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRiskRuleJointVersion();
      }

      #endif

      public int getRiskRuleJointVersion(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        #if !SILVERLIGHT
        send_getRiskRuleJointVersion(platformArgs, landingInfo, subAccountId);
        return recv_getRiskRuleJointVersion();

        #else
        var asyncResult = Begin_getRiskRuleJointVersion(null, null, platformArgs, landingInfo, subAccountId);
        return End_getRiskRuleJointVersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRiskRuleJointVersion(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #else
      public void send_getRiskRuleJointVersion(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRiskRuleJointVersion", TMessageType.Call, seqid_));
        getRiskRuleJointVersion_args args = new getRiskRuleJointVersion_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_getRiskRuleJointVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRiskRuleJointVersion_result result = new getRiskRuleJointVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRiskRuleJointVersion failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRiskRuleJoint(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        return send_getRiskRuleJoint(callback, state, platformArgs, landingInfo, subAccountId);
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint End_getRiskRuleJoint(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRiskRuleJoint();
      }

      #endif

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint getRiskRuleJoint(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        #if !SILVERLIGHT
        send_getRiskRuleJoint(platformArgs, landingInfo, subAccountId);
        return recv_getRiskRuleJoint();

        #else
        var asyncResult = Begin_getRiskRuleJoint(null, null, platformArgs, landingInfo, subAccountId);
        return End_getRiskRuleJoint(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRiskRuleJoint(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #else
      public void send_getRiskRuleJoint(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRiskRuleJoint", TMessageType.Call, seqid_));
        getRiskRuleJoint_args args = new getRiskRuleJoint_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint recv_getRiskRuleJoint()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRiskRuleJoint_result result = new getRiskRuleJoint_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRiskRuleJoint failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchSetSupportedItems(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, THashSet<string> openedItemIds, THashSet<string> closedItemIds)
      {
        return send_batchSetSupportedItems(callback, state, platformArgs, landingInfo, subAccountId, version, openedItemIds, closedItemIds);
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint End_batchSetSupportedItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_batchSetSupportedItems();
      }

      #endif

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint batchSetSupportedItems(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, THashSet<string> openedItemIds, THashSet<string> closedItemIds)
      {
        #if !SILVERLIGHT
        send_batchSetSupportedItems(platformArgs, landingInfo, subAccountId, version, openedItemIds, closedItemIds);
        return recv_batchSetSupportedItems();

        #else
        var asyncResult = Begin_batchSetSupportedItems(null, null, platformArgs, landingInfo, subAccountId, version, openedItemIds, closedItemIds);
        return End_batchSetSupportedItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchSetSupportedItems(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, THashSet<string> openedItemIds, THashSet<string> closedItemIds)
      #else
      public void send_batchSetSupportedItems(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, THashSet<string> openedItemIds, THashSet<string> closedItemIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchSetSupportedItems", TMessageType.Call, seqid_));
        batchSetSupportedItems_args args = new batchSetSupportedItems_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Version = version;
        args.OpenedItemIds = openedItemIds;
        args.ClosedItemIds = closedItemIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint recv_batchSetSupportedItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchSetSupportedItems_result result = new batchSetSupportedItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batchSetSupportedItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchSetTradedCommodityItems(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, THashSet<long> enabledCommodityIds, THashSet<long> disabledCommodityIds)
      {
        return send_batchSetTradedCommodityItems(callback, state, platformArgs, landingInfo, subAccountId, version, enabledCommodityIds, disabledCommodityIds);
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint End_batchSetTradedCommodityItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_batchSetTradedCommodityItems();
      }

      #endif

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint batchSetTradedCommodityItems(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, THashSet<long> enabledCommodityIds, THashSet<long> disabledCommodityIds)
      {
        #if !SILVERLIGHT
        send_batchSetTradedCommodityItems(platformArgs, landingInfo, subAccountId, version, enabledCommodityIds, disabledCommodityIds);
        return recv_batchSetTradedCommodityItems();

        #else
        var asyncResult = Begin_batchSetTradedCommodityItems(null, null, platformArgs, landingInfo, subAccountId, version, enabledCommodityIds, disabledCommodityIds);
        return End_batchSetTradedCommodityItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchSetTradedCommodityItems(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, THashSet<long> enabledCommodityIds, THashSet<long> disabledCommodityIds)
      #else
      public void send_batchSetTradedCommodityItems(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, THashSet<long> enabledCommodityIds, THashSet<long> disabledCommodityIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchSetTradedCommodityItems", TMessageType.Call, seqid_));
        batchSetTradedCommodityItems_args args = new batchSetTradedCommodityItems_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Version = version;
        args.EnabledCommodityIds = enabledCommodityIds;
        args.DisabledCommodityIds = disabledCommodityIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint recv_batchSetTradedCommodityItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchSetTradedCommodityItems_result result = new batchSetTradedCommodityItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batchSetTradedCommodityItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchSetGlobalRules(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem> ruleItems)
      {
        return send_batchSetGlobalRules(callback, state, platformArgs, landingInfo, subAccountId, version, ruleItems);
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint End_batchSetGlobalRules(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_batchSetGlobalRules();
      }

      #endif

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint batchSetGlobalRules(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem> ruleItems)
      {
        #if !SILVERLIGHT
        send_batchSetGlobalRules(platformArgs, landingInfo, subAccountId, version, ruleItems);
        return recv_batchSetGlobalRules();

        #else
        var asyncResult = Begin_batchSetGlobalRules(null, null, platformArgs, landingInfo, subAccountId, version, ruleItems);
        return End_batchSetGlobalRules(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchSetGlobalRules(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem> ruleItems)
      #else
      public void send_batchSetGlobalRules(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem> ruleItems)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchSetGlobalRules", TMessageType.Call, seqid_));
        batchSetGlobalRules_args args = new batchSetGlobalRules_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Version = version;
        args.RuleItems = ruleItems;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint recv_batchSetGlobalRules()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchSetGlobalRules_result result = new batchSetGlobalRules_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batchSetGlobalRules failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_batchSetCommodityRules(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, Dictionary<long, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem>> rules)
      {
        return send_batchSetCommodityRules(callback, state, platformArgs, landingInfo, subAccountId, version, rules);
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint End_batchSetCommodityRules(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_batchSetCommodityRules();
      }

      #endif

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint batchSetCommodityRules(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, Dictionary<long, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem>> rules)
      {
        #if !SILVERLIGHT
        send_batchSetCommodityRules(platformArgs, landingInfo, subAccountId, version, rules);
        return recv_batchSetCommodityRules();

        #else
        var asyncResult = Begin_batchSetCommodityRules(null, null, platformArgs, landingInfo, subAccountId, version, rules);
        return End_batchSetCommodityRules(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_batchSetCommodityRules(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, Dictionary<long, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem>> rules)
      #else
      public void send_batchSetCommodityRules(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, Dictionary<long, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem>> rules)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("batchSetCommodityRules", TMessageType.Call, seqid_));
        batchSetCommodityRules_args args = new batchSetCommodityRules_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Version = version;
        args.Rules = rules;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint recv_batchSetCommodityRules()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batchSetCommodityRules_result result = new batchSetCommodityRules_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batchSetCommodityRules failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setRiskEnabled(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, bool riskEnabled)
      {
        return send_setRiskEnabled(callback, state, platformArgs, landingInfo, subAccountId, version, riskEnabled);
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint End_setRiskEnabled(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_setRiskEnabled();
      }

      #endif

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint setRiskEnabled(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, bool riskEnabled)
      {
        #if !SILVERLIGHT
        send_setRiskEnabled(platformArgs, landingInfo, subAccountId, version, riskEnabled);
        return recv_setRiskEnabled();

        #else
        var asyncResult = Begin_setRiskEnabled(null, null, platformArgs, landingInfo, subAccountId, version, riskEnabled);
        return End_setRiskEnabled(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setRiskEnabled(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, bool riskEnabled)
      #else
      public void send_setRiskEnabled(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, int version, bool riskEnabled)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setRiskEnabled", TMessageType.Call, seqid_));
        setRiskEnabled_args args = new setRiskEnabled_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Version = version;
        args.RiskEnabled = riskEnabled;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint recv_setRiskEnabled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setRiskEnabled_result result = new setRiskEnabled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setRiskEnabled failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRiskFrameDataInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        return send_getRiskFrameDataInfo(callback, state, platformArgs, landingInfo, subAccountId);
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskFrameDataInfo End_getRiskFrameDataInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRiskFrameDataInfo();
      }

      #endif

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskFrameDataInfo getRiskFrameDataInfo(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        #if !SILVERLIGHT
        send_getRiskFrameDataInfo(platformArgs, landingInfo, subAccountId);
        return recv_getRiskFrameDataInfo();

        #else
        var asyncResult = Begin_getRiskFrameDataInfo(null, null, platformArgs, landingInfo, subAccountId);
        return End_getRiskFrameDataInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRiskFrameDataInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #else
      public void send_getRiskFrameDataInfo(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRiskFrameDataInfo", TMessageType.Call, seqid_));
        getRiskFrameDataInfo_args args = new getRiskFrameDataInfo_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskFrameDataInfo recv_getRiskFrameDataInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRiskFrameDataInfo_result result = new getRiskFrameDataInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRiskFrameDataInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setGeneralMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings marginSettings)
      {
        return send_setGeneralMarginSetting(callback, state, platformArgs, landingInfo, marginSettings);
      }

      public void End_setGeneralMarginSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setGeneralMarginSetting();
      }

      #endif

      public void setGeneralMarginSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings marginSettings)
      {
        #if !SILVERLIGHT
        send_setGeneralMarginSetting(platformArgs, landingInfo, marginSettings);
        recv_setGeneralMarginSetting();

        #else
        var asyncResult = Begin_setGeneralMarginSetting(null, null, platformArgs, landingInfo, marginSettings);
        End_setGeneralMarginSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setGeneralMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings marginSettings)
      #else
      public void send_setGeneralMarginSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings marginSettings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setGeneralMarginSetting", TMessageType.Call, seqid_));
        setGeneralMarginSetting_args args = new setGeneralMarginSetting_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.MarginSettings = marginSettings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setGeneralMarginSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setGeneralMarginSetting_result result = new setGeneralMarginSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setGeneralCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings commissionSettings)
      {
        return send_setGeneralCommissionSetting(callback, state, platformArgs, landingInfo, commissionSettings);
      }

      public void End_setGeneralCommissionSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setGeneralCommissionSetting();
      }

      #endif

      public void setGeneralCommissionSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings commissionSettings)
      {
        #if !SILVERLIGHT
        send_setGeneralCommissionSetting(platformArgs, landingInfo, commissionSettings);
        recv_setGeneralCommissionSetting();

        #else
        var asyncResult = Begin_setGeneralCommissionSetting(null, null, platformArgs, landingInfo, commissionSettings);
        End_setGeneralCommissionSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setGeneralCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings commissionSettings)
      #else
      public void send_setGeneralCommissionSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings commissionSettings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setGeneralCommissionSetting", TMessageType.Call, seqid_));
        setGeneralCommissionSetting_args args = new setGeneralCommissionSetting_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.CommissionSettings = commissionSettings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setGeneralCommissionSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setGeneralCommissionSetting_result result = new setGeneralCommissionSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings marginSettings)
      {
        return send_addSpecMarginSetting(callback, state, platformArgs, landingInfo, marginSettings);
      }

      public void End_addSpecMarginSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addSpecMarginSetting();
      }

      #endif

      public void addSpecMarginSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings marginSettings)
      {
        #if !SILVERLIGHT
        send_addSpecMarginSetting(platformArgs, landingInfo, marginSettings);
        recv_addSpecMarginSetting();

        #else
        var asyncResult = Begin_addSpecMarginSetting(null, null, platformArgs, landingInfo, marginSettings);
        End_addSpecMarginSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings marginSettings)
      #else
      public void send_addSpecMarginSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings marginSettings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addSpecMarginSetting", TMessageType.Call, seqid_));
        addSpecMarginSetting_args args = new addSpecMarginSetting_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.MarginSettings = marginSettings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addSpecMarginSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addSpecMarginSetting_result result = new addSpecMarginSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings commissionSettings)
      {
        return send_addSpecCommissionSetting(callback, state, platformArgs, landingInfo, commissionSettings);
      }

      public void End_addSpecCommissionSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addSpecCommissionSetting();
      }

      #endif

      public void addSpecCommissionSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings commissionSettings)
      {
        #if !SILVERLIGHT
        send_addSpecCommissionSetting(platformArgs, landingInfo, commissionSettings);
        recv_addSpecCommissionSetting();

        #else
        var asyncResult = Begin_addSpecCommissionSetting(null, null, platformArgs, landingInfo, commissionSettings);
        End_addSpecCommissionSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings commissionSettings)
      #else
      public void send_addSpecCommissionSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings commissionSettings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addSpecCommissionSetting", TMessageType.Call, seqid_));
        addSpecCommissionSetting_args args = new addSpecCommissionSetting_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.CommissionSettings = commissionSettings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addSpecCommissionSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addSpecCommissionSetting_result result = new addSpecCommissionSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings marginSettings)
      {
        return send_updateSpecMarginSetting(callback, state, platformArgs, landingInfo, marginSettings);
      }

      public void End_updateSpecMarginSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateSpecMarginSetting();
      }

      #endif

      public void updateSpecMarginSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings marginSettings)
      {
        #if !SILVERLIGHT
        send_updateSpecMarginSetting(platformArgs, landingInfo, marginSettings);
        recv_updateSpecMarginSetting();

        #else
        var asyncResult = Begin_updateSpecMarginSetting(null, null, platformArgs, landingInfo, marginSettings);
        End_updateSpecMarginSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings marginSettings)
      #else
      public void send_updateSpecMarginSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings marginSettings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateSpecMarginSetting", TMessageType.Call, seqid_));
        updateSpecMarginSetting_args args = new updateSpecMarginSetting_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.MarginSettings = marginSettings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateSpecMarginSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateSpecMarginSetting_result result = new updateSpecMarginSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings commissionSettings)
      {
        return send_updateSpecCommissionSetting(callback, state, platformArgs, landingInfo, commissionSettings);
      }

      public void End_updateSpecCommissionSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateSpecCommissionSetting();
      }

      #endif

      public void updateSpecCommissionSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings commissionSettings)
      {
        #if !SILVERLIGHT
        send_updateSpecCommissionSetting(platformArgs, landingInfo, commissionSettings);
        recv_updateSpecCommissionSetting();

        #else
        var asyncResult = Begin_updateSpecCommissionSetting(null, null, platformArgs, landingInfo, commissionSettings);
        End_updateSpecCommissionSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings commissionSettings)
      #else
      public void send_updateSpecCommissionSetting(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings commissionSettings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateSpecCommissionSetting", TMessageType.Call, seqid_));
        updateSpecCommissionSetting_args args = new updateSpecCommissionSetting_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.CommissionSettings = commissionSettings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateSpecCommissionSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateSpecCommissionSetting_result result = new updateSpecCommissionSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long commodityId)
      {
        return send_deleteSpecMarginSetting(callback, state, platformArgs, landingInfo, subAccountId, commodityId);
      }

      public void End_deleteSpecMarginSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deleteSpecMarginSetting();
      }

      #endif

      public void deleteSpecMarginSetting(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long commodityId)
      {
        #if !SILVERLIGHT
        send_deleteSpecMarginSetting(platformArgs, landingInfo, subAccountId, commodityId);
        recv_deleteSpecMarginSetting();

        #else
        var asyncResult = Begin_deleteSpecMarginSetting(null, null, platformArgs, landingInfo, subAccountId, commodityId);
        End_deleteSpecMarginSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteSpecMarginSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long commodityId)
      #else
      public void send_deleteSpecMarginSetting(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long commodityId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteSpecMarginSetting", TMessageType.Call, seqid_));
        deleteSpecMarginSetting_args args = new deleteSpecMarginSetting_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.CommodityId = commodityId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deleteSpecMarginSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteSpecMarginSetting_result result = new deleteSpecMarginSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long commodityId)
      {
        return send_deleteSpecCommissionSetting(callback, state, platformArgs, landingInfo, subAccountId, commodityId);
      }

      public void End_deleteSpecCommissionSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deleteSpecCommissionSetting();
      }

      #endif

      public void deleteSpecCommissionSetting(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long commodityId)
      {
        #if !SILVERLIGHT
        send_deleteSpecCommissionSetting(platformArgs, landingInfo, subAccountId, commodityId);
        recv_deleteSpecCommissionSetting();

        #else
        var asyncResult = Begin_deleteSpecCommissionSetting(null, null, platformArgs, landingInfo, subAccountId, commodityId);
        End_deleteSpecCommissionSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteSpecCommissionSetting(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long commodityId)
      #else
      public void send_deleteSpecCommissionSetting(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId, long commodityId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteSpecCommissionSetting", TMessageType.Call, seqid_));
        deleteSpecCommissionSetting_args args = new deleteSpecCommissionSetting_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.CommodityId = commodityId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deleteSpecCommissionSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteSpecCommissionSetting_result result = new deleteSpecCommissionSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryXQGeneralMarginSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        return send_queryXQGeneralMarginSettings(callback, state, platformArgs, landingInfo, subAccountId);
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings End_queryXQGeneralMarginSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryXQGeneralMarginSettings();
      }

      #endif

      public xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings queryXQGeneralMarginSettings(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        #if !SILVERLIGHT
        send_queryXQGeneralMarginSettings(platformArgs, landingInfo, subAccountId);
        return recv_queryXQGeneralMarginSettings();

        #else
        var asyncResult = Begin_queryXQGeneralMarginSettings(null, null, platformArgs, landingInfo, subAccountId);
        return End_queryXQGeneralMarginSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryXQGeneralMarginSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #else
      public void send_queryXQGeneralMarginSettings(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryXQGeneralMarginSettings", TMessageType.Call, seqid_));
        queryXQGeneralMarginSettings_args args = new queryXQGeneralMarginSettings_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings recv_queryXQGeneralMarginSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryXQGeneralMarginSettings_result result = new queryXQGeneralMarginSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryXQGeneralMarginSettings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryXQGeneralCommissionSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        return send_queryXQGeneralCommissionSettings(callback, state, platformArgs, landingInfo, subAccountId);
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings End_queryXQGeneralCommissionSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryXQGeneralCommissionSettings();
      }

      #endif

      public xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings queryXQGeneralCommissionSettings(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      {
        #if !SILVERLIGHT
        send_queryXQGeneralCommissionSettings(platformArgs, landingInfo, subAccountId);
        return recv_queryXQGeneralCommissionSettings();

        #else
        var asyncResult = Begin_queryXQGeneralCommissionSettings(null, null, platformArgs, landingInfo, subAccountId);
        return End_queryXQGeneralCommissionSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryXQGeneralCommissionSettings(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #else
      public void send_queryXQGeneralCommissionSettings(PlatformArgs platformArgs, LandingInfo landingInfo, long subAccountId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryXQGeneralCommissionSettings", TMessageType.Call, seqid_));
        queryXQGeneralCommissionSettings_args args = new queryXQGeneralCommissionSettings_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.SubAccountId = subAccountId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings recv_queryXQGeneralCommissionSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryXQGeneralCommissionSettings_result result = new queryXQGeneralCommissionSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryXQGeneralCommissionSettings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryXQSpecMarginSettingPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      {
        return send_queryXQSpecMarginSettingPage(callback, state, platformArgs, landingInfo, queryOptions, pageOption);
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettingPage End_queryXQSpecMarginSettingPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryXQSpecMarginSettingPage();
      }

      #endif

      public xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettingPage queryXQSpecMarginSettingPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryXQSpecMarginSettingPage(platformArgs, landingInfo, queryOptions, pageOption);
        return recv_queryXQSpecMarginSettingPage();

        #else
        var asyncResult = Begin_queryXQSpecMarginSettingPage(null, null, platformArgs, landingInfo, queryOptions, pageOption);
        return End_queryXQSpecMarginSettingPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryXQSpecMarginSettingPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      #else
      public void send_queryXQSpecMarginSettingPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryXQSpecMarginSettingPage", TMessageType.Call, seqid_));
        queryXQSpecMarginSettingPage_args args = new queryXQSpecMarginSettingPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOptions = queryOptions;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettingPage recv_queryXQSpecMarginSettingPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryXQSpecMarginSettingPage_result result = new queryXQSpecMarginSettingPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryXQSpecMarginSettingPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryXQSpecCommissionSettingPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      {
        return send_queryXQSpecCommissionSettingPage(callback, state, platformArgs, landingInfo, queryOptions, pageOption);
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettingPage End_queryXQSpecCommissionSettingPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryXQSpecCommissionSettingPage();
      }

      #endif

      public xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettingPage queryXQSpecCommissionSettingPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryXQSpecCommissionSettingPage(platformArgs, landingInfo, queryOptions, pageOption);
        return recv_queryXQSpecCommissionSettingPage();

        #else
        var asyncResult = Begin_queryXQSpecCommissionSettingPage(null, null, platformArgs, landingInfo, queryOptions, pageOption);
        return End_queryXQSpecCommissionSettingPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryXQSpecCommissionSettingPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      #else
      public void send_queryXQSpecCommissionSettingPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions queryOptions, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryXQSpecCommissionSettingPage", TMessageType.Call, seqid_));
        queryXQSpecCommissionSettingPage_args args = new queryXQSpecCommissionSettingPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOptions = queryOptions;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettingPage recv_queryXQSpecCommissionSettingPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryXQSpecCommissionSettingPage_result result = new queryXQSpecCommissionSettingPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryXQSpecCommissionSettingPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryUpsideContractMarginPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        return send_queryUpsideContractMarginPage(callback, state, platformArgs, landingInfo, queryOptions, pageOption);
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractMarginPage End_queryUpsideContractMarginPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryUpsideContractMarginPage();
      }

      #endif

      public xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractMarginPage queryUpsideContractMarginPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryUpsideContractMarginPage(platformArgs, landingInfo, queryOptions, pageOption);
        return recv_queryUpsideContractMarginPage();

        #else
        var asyncResult = Begin_queryUpsideContractMarginPage(null, null, platformArgs, landingInfo, queryOptions, pageOption);
        return End_queryUpsideContractMarginPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryUpsideContractMarginPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      #else
      public void send_queryUpsideContractMarginPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryUpsideContractMarginPage", TMessageType.Call, seqid_));
        queryUpsideContractMarginPage_args args = new queryUpsideContractMarginPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOptions = queryOptions;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractMarginPage recv_queryUpsideContractMarginPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryUpsideContractMarginPage_result result = new queryUpsideContractMarginPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryUpsideContractMarginPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryUpsideContractCommissionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        return send_queryUpsideContractCommissionPage(callback, state, platformArgs, landingInfo, queryOptions, pageOption);
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractCommissionPage End_queryUpsideContractCommissionPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryUpsideContractCommissionPage();
      }

      #endif

      public xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractCommissionPage queryUpsideContractCommissionPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryUpsideContractCommissionPage(platformArgs, landingInfo, queryOptions, pageOption);
        return recv_queryUpsideContractCommissionPage();

        #else
        var asyncResult = Begin_queryUpsideContractCommissionPage(null, null, platformArgs, landingInfo, queryOptions, pageOption);
        return End_queryUpsideContractCommissionPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryUpsideContractCommissionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      #else
      public void send_queryUpsideContractCommissionPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions queryOptions, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryUpsideContractCommissionPage", TMessageType.Call, seqid_));
        queryUpsideContractCommissionPage_args args = new queryUpsideContractCommissionPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOptions = queryOptions;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractCommissionPage recv_queryUpsideContractCommissionPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryUpsideContractCommissionPage_result result = new queryUpsideContractCommissionPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryUpsideContractCommissionPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryXQContractMarginPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        return send_queryXQContractMarginPage(callback, state, platformArgs, landingInfo, queryOptions, pageOption);
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQContractMarginPage End_queryXQContractMarginPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryXQContractMarginPage();
      }

      #endif

      public xueqiao.trade.hosting.position.fee.thriftapi.XQContractMarginPage queryXQContractMarginPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryXQContractMarginPage(platformArgs, landingInfo, queryOptions, pageOption);
        return recv_queryXQContractMarginPage();

        #else
        var asyncResult = Begin_queryXQContractMarginPage(null, null, platformArgs, landingInfo, queryOptions, pageOption);
        return End_queryXQContractMarginPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryXQContractMarginPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      #else
      public void send_queryXQContractMarginPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryXQContractMarginPage", TMessageType.Call, seqid_));
        queryXQContractMarginPage_args args = new queryXQContractMarginPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOptions = queryOptions;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQContractMarginPage recv_queryXQContractMarginPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryXQContractMarginPage_result result = new queryXQContractMarginPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryXQContractMarginPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryXQContractCommissionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        return send_queryXQContractCommissionPage(callback, state, platformArgs, landingInfo, queryOptions, pageOption);
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQContractCommissionPage End_queryXQContractCommissionPage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryXQContractCommissionPage();
      }

      #endif

      public xueqiao.trade.hosting.position.fee.thriftapi.XQContractCommissionPage queryXQContractCommissionPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_queryXQContractCommissionPage(platformArgs, landingInfo, queryOptions, pageOption);
        return recv_queryXQContractCommissionPage();

        #else
        var asyncResult = Begin_queryXQContractCommissionPage(null, null, platformArgs, landingInfo, queryOptions, pageOption);
        return End_queryXQContractCommissionPage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryXQContractCommissionPage(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      #else
      public void send_queryXQContractCommissionPage(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions queryOptions, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryXQContractCommissionPage", TMessageType.Call, seqid_));
        queryXQContractCommissionPage_args args = new queryXQContractCommissionPage_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.QueryOptions = queryOptions;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQContractCommissionPage recv_queryXQContractCommissionPage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryXQContractCommissionPage_result result = new queryXQContractCommissionPage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryXQContractCommissionPage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addAssetAccountWorkingOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.working.order.thriftapi.AssetAccount assetAccount)
      {
        return send_addAssetAccountWorkingOrder(callback, state, platformArgs, landingInfo, assetAccount);
      }

      public long End_addAssetAccountWorkingOrder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_addAssetAccountWorkingOrder();
      }

      #endif

      public long addAssetAccountWorkingOrder(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.working.order.thriftapi.AssetAccount assetAccount)
      {
        #if !SILVERLIGHT
        send_addAssetAccountWorkingOrder(platformArgs, landingInfo, assetAccount);
        return recv_addAssetAccountWorkingOrder();

        #else
        var asyncResult = Begin_addAssetAccountWorkingOrder(null, null, platformArgs, landingInfo, assetAccount);
        return End_addAssetAccountWorkingOrder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addAssetAccountWorkingOrder(AsyncCallback callback, object state, PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.working.order.thriftapi.AssetAccount assetAccount)
      #else
      public void send_addAssetAccountWorkingOrder(PlatformArgs platformArgs, LandingInfo landingInfo, xueqiao.working.order.thriftapi.AssetAccount assetAccount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addAssetAccountWorkingOrder", TMessageType.Call, seqid_));
        addAssetAccountWorkingOrder_args args = new addAssetAccountWorkingOrder_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.AssetAccount = assetAccount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_addAssetAccountWorkingOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addAssetAccountWorkingOrder_result result = new addAssetAccountWorkingOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addAssetAccountWorkingOrder failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["getHostingUserPage"] = getHostingUserPage_Process;
        processMap_["heartBeat"] = heartBeat_Process;
        processMap_["logout"] = logout_Process;
        processMap_["getComposeViewDetails"] = getComposeViewDetails_Process;
        processMap_["changeComposeViewPrecisionNumber"] = changeComposeViewPrecisionNumber_Process;
        processMap_["createComposeGraph"] = createComposeGraph_Process;
        processMap_["delComposeView"] = delComposeView_Process;
        processMap_["getComposeViewDetailPage"] = getComposeViewDetailPage_Process;
        processMap_["getSameComposeGraphsPage"] = getSameComposeGraphsPage_Process;
        processMap_["addComposeViewBySearch"] = addComposeViewBySearch_Process;
        processMap_["subscribeComposeViewQuotation"] = subscribeComposeViewQuotation_Process;
        processMap_["unSubscribeComposeViewQuotation"] = unSubscribeComposeViewQuotation_Process;
        processMap_["changeComposeViewAliasName"] = changeComposeViewAliasName_Process;
        processMap_["getComposeGraphs"] = getComposeGraphs_Process;
        processMap_["addComposeViewByShare"] = addComposeViewByShare_Process;
        processMap_["addTradeAccount"] = addTradeAccount_Process;
        processMap_["disableTradeAccount"] = disableTradeAccount_Process;
        processMap_["getTradeAccountPage"] = getTradeAccountPage_Process;
        processMap_["enableTradeAccount"] = enableTradeAccount_Process;
        processMap_["updateTradeAccountInfo"] = updateTradeAccountInfo_Process;
        processMap_["rmTradeAccount"] = rmTradeAccount_Process;
        processMap_["getPersonalUserTradeAccount"] = getPersonalUserTradeAccount_Process;
        processMap_["getHostingOrderRouteTree"] = getHostingOrderRouteTree_Process;
        processMap_["updateHostingOrderRouteTree"] = updateHostingOrderRouteTree_Process;
        processMap_["getHostingOrderRouteTreeVersion"] = getHostingOrderRouteTreeVersion_Process;
        processMap_["getPersonalUserHostingOrderRouteTree"] = getPersonalUserHostingOrderRouteTree_Process;
        processMap_["createXQOrder"] = createXQOrder_Process;
        processMap_["batchSuspendXQOrders"] = batchSuspendXQOrders_Process;
        processMap_["batchResumeXQOrders"] = batchResumeXQOrders_Process;
        processMap_["batchCancelXQOrders"] = batchCancelXQOrders_Process;
        processMap_["getEffectXQOrderWithTradeListPage"] = getEffectXQOrderWithTradeListPage_Process;
        processMap_["getXQOrderWithTradeLists"] = getXQOrderWithTradeLists_Process;
        processMap_["getXQOrderExecDetail"] = getXQOrderExecDetail_Process;
        processMap_["getXQOrderHisPage"] = getXQOrderHisPage_Process;
        processMap_["getXQTradeHisPage"] = getXQTradeHisPage_Process;
        processMap_["getUserSetting"] = getUserSetting_Process;
        processMap_["updateUserSetting"] = updateUserSetting_Process;
        processMap_["getUserSettingVersion"] = getUserSettingVersion_Process;
        processMap_["getSAWRUTListPage"] = getSAWRUTListPage_Process;
        processMap_["getSARUTBySubAccountId"] = getSARUTBySubAccountId_Process;
        processMap_["getSARUTBySubUserId"] = getSARUTBySubUserId_Process;
        processMap_["assignSubAccountRelatedUsers"] = assignSubAccountRelatedUsers_Process;
        processMap_["renameSubAccount"] = renameSubAccount_Process;
        processMap_["createSubAccount"] = createSubAccount_Process;
        processMap_["getHostingSledContractPosition"] = getHostingSledContractPosition_Process;
        processMap_["getHostingSubAccountFund"] = getHostingSubAccountFund_Process;
        processMap_["changeSubAccountFund"] = changeSubAccountFund_Process;
        processMap_["setSubAccountCreditAmount"] = setSubAccountCreditAmount_Process;
        processMap_["getAssetPositionTradeDetail"] = getAssetPositionTradeDetail_Process;
        processMap_["getHostingSubAccountMoneyRecord"] = getHostingSubAccountMoneyRecord_Process;
        processMap_["getSubAccountFundHistory"] = getSubAccountFundHistory_Process;
        processMap_["getSubAccountPositionHistory"] = getSubAccountPositionHistory_Process;
        processMap_["getSubAccountPositionHistoryTradeDetail"] = getSubAccountPositionHistoryTradeDetail_Process;
        processMap_["deleteExpiredContractPosition"] = deleteExpiredContractPosition_Process;
        processMap_["getTradeAccountFundNow"] = getTradeAccountFundNow_Process;
        processMap_["getTradeAccountFundHis"] = getTradeAccountFundHis_Process;
        processMap_["getTradeAccountSettlementInfos"] = getTradeAccountSettlementInfos_Process;
        processMap_["getTradeAccountSettlementInfosWithRelatedTime"] = getTradeAccountSettlementInfosWithRelatedTime_Process;
        processMap_["getTradeAccountPositionTradeDetail"] = getTradeAccountPositionTradeDetail_Process;
        processMap_["reqPositionVerify"] = reqPositionVerify_Process;
        processMap_["reqPositionDifference"] = reqPositionDifference_Process;
        processMap_["manualInputPosition"] = manualInputPosition_Process;
        processMap_["reqPositionUnassigned"] = reqPositionUnassigned_Process;
        processMap_["assignPosition"] = assignPosition_Process;
        processMap_["reqPositionEditLock"] = reqPositionEditLock_Process;
        processMap_["addPositionEditLock"] = addPositionEditLock_Process;
        processMap_["removePositionEditLock"] = removePositionEditLock_Process;
        processMap_["reqDailyPositionDifference"] = reqDailyPositionDifference_Process;
        processMap_["updateDailyPositionDifferenceNote"] = updateDailyPositionDifferenceNote_Process;
        processMap_["reqPositionAssigned"] = reqPositionAssigned_Process;
        processMap_["contructCompose"] = contructCompose_Process;
        processMap_["disassembleCompose"] = disassembleCompose_Process;
        processMap_["batchClosePosition"] = batchClosePosition_Process;
        processMap_["recoverClosedPosition"] = recoverClosedPosition_Process;
        processMap_["mergeToCompose"] = mergeToCompose_Process;
        processMap_["deleteExpiredStatContractPosition"] = deleteExpiredStatContractPosition_Process;
        processMap_["queryStatPositionSummaryPage"] = queryStatPositionSummaryPage_Process;
        processMap_["queryStatPositionItemPage"] = queryStatPositionItemPage_Process;
        processMap_["queryCurrentDayStatClosedPositionPage"] = queryCurrentDayStatClosedPositionPage_Process;
        processMap_["queryStatClosedPositionDetail"] = queryStatClosedPositionDetail_Process;
        processMap_["queryArchivedClosedPositionPage"] = queryArchivedClosedPositionPage_Process;
        processMap_["queryArchivedClosedPositionDetail"] = queryArchivedClosedPositionDetail_Process;
        processMap_["queryStatPositionSummaryExPage"] = queryStatPositionSummaryExPage_Process;
        processMap_["queryStatPositionUnitPage"] = queryStatPositionUnitPage_Process;
        processMap_["queryHistoryClosedPositionPage"] = queryHistoryClosedPositionPage_Process;
        processMap_["queryHistoryClosedPositionDetail"] = queryHistoryClosedPositionDetail_Process;
        processMap_["getXQTradeLameTaskNotePage"] = getXQTradeLameTaskNotePage_Process;
        processMap_["batchDeleteXQTradeLameTaskNotes"] = batchDeleteXQTradeLameTaskNotes_Process;
        processMap_["queryMailBoxMessage"] = queryMailBoxMessage_Process;
        processMap_["markMessageAsRead"] = markMessageAsRead_Process;
        processMap_["getAllSupportedItems"] = getAllSupportedItems_Process;
        processMap_["getRiskRuleJointVersion"] = getRiskRuleJointVersion_Process;
        processMap_["getRiskRuleJoint"] = getRiskRuleJoint_Process;
        processMap_["batchSetSupportedItems"] = batchSetSupportedItems_Process;
        processMap_["batchSetTradedCommodityItems"] = batchSetTradedCommodityItems_Process;
        processMap_["batchSetGlobalRules"] = batchSetGlobalRules_Process;
        processMap_["batchSetCommodityRules"] = batchSetCommodityRules_Process;
        processMap_["setRiskEnabled"] = setRiskEnabled_Process;
        processMap_["getRiskFrameDataInfo"] = getRiskFrameDataInfo_Process;
        processMap_["setGeneralMarginSetting"] = setGeneralMarginSetting_Process;
        processMap_["setGeneralCommissionSetting"] = setGeneralCommissionSetting_Process;
        processMap_["addSpecMarginSetting"] = addSpecMarginSetting_Process;
        processMap_["addSpecCommissionSetting"] = addSpecCommissionSetting_Process;
        processMap_["updateSpecMarginSetting"] = updateSpecMarginSetting_Process;
        processMap_["updateSpecCommissionSetting"] = updateSpecCommissionSetting_Process;
        processMap_["deleteSpecMarginSetting"] = deleteSpecMarginSetting_Process;
        processMap_["deleteSpecCommissionSetting"] = deleteSpecCommissionSetting_Process;
        processMap_["queryXQGeneralMarginSettings"] = queryXQGeneralMarginSettings_Process;
        processMap_["queryXQGeneralCommissionSettings"] = queryXQGeneralCommissionSettings_Process;
        processMap_["queryXQSpecMarginSettingPage"] = queryXQSpecMarginSettingPage_Process;
        processMap_["queryXQSpecCommissionSettingPage"] = queryXQSpecCommissionSettingPage_Process;
        processMap_["queryUpsideContractMarginPage"] = queryUpsideContractMarginPage_Process;
        processMap_["queryUpsideContractCommissionPage"] = queryUpsideContractCommissionPage_Process;
        processMap_["queryXQContractMarginPage"] = queryXQContractMarginPage_Process;
        processMap_["queryXQContractCommissionPage"] = queryXQContractCommissionPage_Process;
        processMap_["addAssetAccountWorkingOrder"] = addAssetAccountWorkingOrder_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void getHostingUserPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHostingUserPage_args args = new getHostingUserPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHostingUserPage_result result = new getHostingUserPage_result();
        try {
          result.Success = iface_.getHostingUserPage(args.PlatformArgs, args.LandingInfo, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getHostingUserPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void heartBeat_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        heartBeat_args args = new heartBeat_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        heartBeat_result result = new heartBeat_result();
        try {
          iface_.heartBeat(args.PlatformArgs, args.LandingInfo);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("heartBeat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logout_args args = new logout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logout_result result = new logout_result();
        try {
          iface_.logout(args.PlatformArgs, args.LandingInfo);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getComposeViewDetails_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getComposeViewDetails_args args = new getComposeViewDetails_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getComposeViewDetails_result result = new getComposeViewDetails_result();
        try {
          result.Success = iface_.getComposeViewDetails(args.PlatformArgs, args.LandingInfo, args.ComposeGraphIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getComposeViewDetails", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void changeComposeViewPrecisionNumber_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        changeComposeViewPrecisionNumber_args args = new changeComposeViewPrecisionNumber_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        changeComposeViewPrecisionNumber_result result = new changeComposeViewPrecisionNumber_result();
        try {
          iface_.changeComposeViewPrecisionNumber(args.PlatformArgs, args.LandingInfo, args.ComposeGraphId, args.PrecisionNumber);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("changeComposeViewPrecisionNumber", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createComposeGraph_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createComposeGraph_args args = new createComposeGraph_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createComposeGraph_result result = new createComposeGraph_result();
        try {
          result.Success = iface_.createComposeGraph(args.PlatformArgs, args.LandingInfo, args.NewGraph, args.AliasName, args.PrecisionNumber);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("createComposeGraph", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void delComposeView_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        delComposeView_args args = new delComposeView_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        delComposeView_result result = new delComposeView_result();
        try {
          iface_.delComposeView(args.PlatformArgs, args.LandingInfo, args.ComposeGraphId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("delComposeView", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getComposeViewDetailPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getComposeViewDetailPage_args args = new getComposeViewDetailPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getComposeViewDetailPage_result result = new getComposeViewDetailPage_result();
        try {
          result.Success = iface_.getComposeViewDetailPage(args.PlatformArgs, args.LandingInfo, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getComposeViewDetailPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSameComposeGraphsPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSameComposeGraphsPage_args args = new getSameComposeGraphsPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSameComposeGraphsPage_result result = new getSameComposeGraphsPage_result();
        try {
          result.Success = iface_.getSameComposeGraphsPage(args.PlatformArgs, args.LandingInfo, args.Graph, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getSameComposeGraphsPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addComposeViewBySearch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addComposeViewBySearch_args args = new addComposeViewBySearch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addComposeViewBySearch_result result = new addComposeViewBySearch_result();
        try {
          iface_.addComposeViewBySearch(args.PlatformArgs, args.LandingInfo, args.ComposeGraphId, args.ComposeGraphKey, args.AliasName, args.PrecisionNumber);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addComposeViewBySearch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void subscribeComposeViewQuotation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        subscribeComposeViewQuotation_args args = new subscribeComposeViewQuotation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        subscribeComposeViewQuotation_result result = new subscribeComposeViewQuotation_result();
        try {
          iface_.subscribeComposeViewQuotation(args.PlatformArgs, args.LandingInfo, args.ComposeGraphId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("subscribeComposeViewQuotation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void unSubscribeComposeViewQuotation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        unSubscribeComposeViewQuotation_args args = new unSubscribeComposeViewQuotation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        unSubscribeComposeViewQuotation_result result = new unSubscribeComposeViewQuotation_result();
        try {
          iface_.unSubscribeComposeViewQuotation(args.PlatformArgs, args.LandingInfo, args.ComposeGraphId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("unSubscribeComposeViewQuotation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void changeComposeViewAliasName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        changeComposeViewAliasName_args args = new changeComposeViewAliasName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        changeComposeViewAliasName_result result = new changeComposeViewAliasName_result();
        try {
          iface_.changeComposeViewAliasName(args.PlatformArgs, args.LandingInfo, args.ComposeGraphId, args.AliasName);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("changeComposeViewAliasName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getComposeGraphs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getComposeGraphs_args args = new getComposeGraphs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getComposeGraphs_result result = new getComposeGraphs_result();
        try {
          result.Success = iface_.getComposeGraphs(args.PlatformArgs, args.LandingInfo, args.ComposeGraphIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getComposeGraphs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addComposeViewByShare_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addComposeViewByShare_args args = new addComposeViewByShare_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addComposeViewByShare_result result = new addComposeViewByShare_result();
        try {
          iface_.addComposeViewByShare(args.PlatformArgs, args.LandingInfo, args.ComposeGraphId, args.AliasName, args.PrecisionNumber);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addComposeViewByShare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addTradeAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addTradeAccount_args args = new addTradeAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addTradeAccount_result result = new addTradeAccount_result();
        try {
          result.Success = iface_.addTradeAccount(args.PlatformArgs, args.LandingInfo, args.NewAccount);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addTradeAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void disableTradeAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        disableTradeAccount_args args = new disableTradeAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        disableTradeAccount_result result = new disableTradeAccount_result();
        try {
          iface_.disableTradeAccount(args.PlatformArgs, args.LandingInfo, args.TradeAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("disableTradeAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTradeAccountPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTradeAccountPage_args args = new getTradeAccountPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTradeAccountPage_result result = new getTradeAccountPage_result();
        try {
          result.Success = iface_.getTradeAccountPage(args.PlatformArgs, args.LandingInfo, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getTradeAccountPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void enableTradeAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        enableTradeAccount_args args = new enableTradeAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        enableTradeAccount_result result = new enableTradeAccount_result();
        try {
          iface_.enableTradeAccount(args.PlatformArgs, args.LandingInfo, args.TradeAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("enableTradeAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateTradeAccountInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateTradeAccountInfo_args args = new updateTradeAccountInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateTradeAccountInfo_result result = new updateTradeAccountInfo_result();
        try {
          iface_.updateTradeAccountInfo(args.PlatformArgs, args.LandingInfo, args.UpdateAccount);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("updateTradeAccountInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rmTradeAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rmTradeAccount_args args = new rmTradeAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rmTradeAccount_result result = new rmTradeAccount_result();
        try {
          iface_.rmTradeAccount(args.PlatformArgs, args.LandingInfo, args.TradeAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("rmTradeAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPersonalUserTradeAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPersonalUserTradeAccount_args args = new getPersonalUserTradeAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPersonalUserTradeAccount_result result = new getPersonalUserTradeAccount_result();
        try {
          result.Success = iface_.getPersonalUserTradeAccount(args.PlatformArgs, args.LandingInfo, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonalUserTradeAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getHostingOrderRouteTree_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHostingOrderRouteTree_args args = new getHostingOrderRouteTree_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHostingOrderRouteTree_result result = new getHostingOrderRouteTree_result();
        try {
          result.Success = iface_.getHostingOrderRouteTree(args.PlatformArgs, args.LandingInfo, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getHostingOrderRouteTree", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateHostingOrderRouteTree_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateHostingOrderRouteTree_args args = new updateHostingOrderRouteTree_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateHostingOrderRouteTree_result result = new updateHostingOrderRouteTree_result();
        try {
          iface_.updateHostingOrderRouteTree(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.RouteTree);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("updateHostingOrderRouteTree", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getHostingOrderRouteTreeVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHostingOrderRouteTreeVersion_args args = new getHostingOrderRouteTreeVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHostingOrderRouteTreeVersion_result result = new getHostingOrderRouteTreeVersion_result();
        try {
          result.Success = iface_.getHostingOrderRouteTreeVersion(args.PlatformArgs, args.LandingInfo, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getHostingOrderRouteTreeVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPersonalUserHostingOrderRouteTree_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPersonalUserHostingOrderRouteTree_args args = new getPersonalUserHostingOrderRouteTree_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPersonalUserHostingOrderRouteTree_result result = new getPersonalUserHostingOrderRouteTree_result();
        try {
          result.Success = iface_.getPersonalUserHostingOrderRouteTree(args.PlatformArgs, args.LandingInfo, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonalUserHostingOrderRouteTree", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createXQOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createXQOrder_args args = new createXQOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createXQOrder_result result = new createXQOrder_result();
        try {
          iface_.createXQOrder(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.OrderId, args.OrderType, args.OrderTarget, args.OrderDetail);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("createXQOrder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchSuspendXQOrders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchSuspendXQOrders_args args = new batchSuspendXQOrders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchSuspendXQOrders_result result = new batchSuspendXQOrders_result();
        try {
          result.Success = iface_.batchSuspendXQOrders(args.PlatformArgs, args.LandingInfo, args.OrderIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchSuspendXQOrders", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchResumeXQOrders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchResumeXQOrders_args args = new batchResumeXQOrders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchResumeXQOrders_result result = new batchResumeXQOrders_result();
        try {
          result.Success = iface_.batchResumeXQOrders(args.PlatformArgs, args.LandingInfo, args.OrderIds, args.ResumeModes);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchResumeXQOrders", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchCancelXQOrders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchCancelXQOrders_args args = new batchCancelXQOrders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchCancelXQOrders_result result = new batchCancelXQOrders_result();
        try {
          result.Success = iface_.batchCancelXQOrders(args.PlatformArgs, args.LandingInfo, args.OrderIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchCancelXQOrders", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getEffectXQOrderWithTradeListPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getEffectXQOrderWithTradeListPage_args args = new getEffectXQOrderWithTradeListPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getEffectXQOrderWithTradeListPage_result result = new getEffectXQOrderWithTradeListPage_result();
        try {
          result.Success = iface_.getEffectXQOrderWithTradeListPage(args.PlatformArgs, args.LandingInfo, args.QryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getEffectXQOrderWithTradeListPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getXQOrderWithTradeLists_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getXQOrderWithTradeLists_args args = new getXQOrderWithTradeLists_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getXQOrderWithTradeLists_result result = new getXQOrderWithTradeLists_result();
        try {
          result.Success = iface_.getXQOrderWithTradeLists(args.PlatformArgs, args.LandingInfo, args.OrderIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getXQOrderWithTradeLists", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getXQOrderExecDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getXQOrderExecDetail_args args = new getXQOrderExecDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getXQOrderExecDetail_result result = new getXQOrderExecDetail_result();
        try {
          result.Success = iface_.getXQOrderExecDetail(args.PlatformArgs, args.LandingInfo, args.OrderId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getXQOrderExecDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getXQOrderHisPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getXQOrderHisPage_args args = new getXQOrderHisPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getXQOrderHisPage_result result = new getXQOrderHisPage_result();
        try {
          result.Success = iface_.getXQOrderHisPage(args.PlatformArgs, args.LandingInfo, args.QryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getXQOrderHisPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getXQTradeHisPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getXQTradeHisPage_args args = new getXQTradeHisPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getXQTradeHisPage_result result = new getXQTradeHisPage_result();
        try {
          result.Success = iface_.getXQTradeHisPage(args.PlatformArgs, args.LandingInfo, args.QryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getXQTradeHisPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserSetting_args args = new getUserSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserSetting_result result = new getUserSetting_result();
        try {
          result.Success = iface_.getUserSetting(args.PlatformArgs, args.LandingInfo, args.Key);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getUserSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateUserSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateUserSetting_args args = new updateUserSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateUserSetting_result result = new updateUserSetting_result();
        try {
          iface_.updateUserSetting(args.PlatformArgs, args.LandingInfo, args.Key, args.Setting);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("updateUserSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserSettingVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserSettingVersion_args args = new getUserSettingVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserSettingVersion_result result = new getUserSettingVersion_result();
        try {
          result.Success = iface_.getUserSettingVersion(args.PlatformArgs, args.LandingInfo, args.Key);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getUserSettingVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSAWRUTListPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSAWRUTListPage_args args = new getSAWRUTListPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSAWRUTListPage_result result = new getSAWRUTListPage_result();
        try {
          result.Success = iface_.getSAWRUTListPage(args.PlatformArgs, args.LandingInfo, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getSAWRUTListPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSARUTBySubAccountId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSARUTBySubAccountId_args args = new getSARUTBySubAccountId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSARUTBySubAccountId_result result = new getSARUTBySubAccountId_result();
        try {
          result.Success = iface_.getSARUTBySubAccountId(args.PlatformArgs, args.LandingInfo, args.SubAccountIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getSARUTBySubAccountId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSARUTBySubUserId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSARUTBySubUserId_args args = new getSARUTBySubUserId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSARUTBySubUserId_result result = new getSARUTBySubUserId_result();
        try {
          result.Success = iface_.getSARUTBySubUserId(args.PlatformArgs, args.LandingInfo, args.SubUserIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getSARUTBySubUserId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void assignSubAccountRelatedUsers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        assignSubAccountRelatedUsers_args args = new assignSubAccountRelatedUsers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        assignSubAccountRelatedUsers_result result = new assignSubAccountRelatedUsers_result();
        try {
          iface_.assignSubAccountRelatedUsers(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.RelatedSubUserIds, args.UnRelatedSubUserIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("assignSubAccountRelatedUsers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void renameSubAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        renameSubAccount_args args = new renameSubAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        renameSubAccount_result result = new renameSubAccount_result();
        try {
          iface_.renameSubAccount(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.SubAccountName);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("renameSubAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createSubAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createSubAccount_args args = new createSubAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createSubAccount_result result = new createSubAccount_result();
        try {
          result.Success = iface_.createSubAccount(args.PlatformArgs, args.LandingInfo, args.NewSubAccount);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("createSubAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getHostingSledContractPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHostingSledContractPosition_args args = new getHostingSledContractPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHostingSledContractPosition_result result = new getHostingSledContractPosition_result();
        try {
          result.Success = iface_.getHostingSledContractPosition(args.PlatformArgs, args.LandingInfo, args.Option);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getHostingSledContractPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getHostingSubAccountFund_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHostingSubAccountFund_args args = new getHostingSubAccountFund_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHostingSubAccountFund_result result = new getHostingSubAccountFund_result();
        try {
          result.Success = iface_.getHostingSubAccountFund(args.PlatformArgs, args.LandingInfo, args.Option);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getHostingSubAccountFund", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void changeSubAccountFund_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        changeSubAccountFund_args args = new changeSubAccountFund_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        changeSubAccountFund_result result = new changeSubAccountFund_result();
        try {
          result.Success = iface_.changeSubAccountFund(args.PlatformArgs, args.LandingInfo, args.FundChange);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("changeSubAccountFund", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setSubAccountCreditAmount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setSubAccountCreditAmount_args args = new setSubAccountCreditAmount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setSubAccountCreditAmount_result result = new setSubAccountCreditAmount_result();
        try {
          result.Success = iface_.setSubAccountCreditAmount(args.PlatformArgs, args.LandingInfo, args.AmountChange);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setSubAccountCreditAmount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAssetPositionTradeDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAssetPositionTradeDetail_args args = new getAssetPositionTradeDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAssetPositionTradeDetail_result result = new getAssetPositionTradeDetail_result();
        try {
          result.Success = iface_.getAssetPositionTradeDetail(args.PlatformArgs, args.LandingInfo, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getAssetPositionTradeDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getHostingSubAccountMoneyRecord_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHostingSubAccountMoneyRecord_args args = new getHostingSubAccountMoneyRecord_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHostingSubAccountMoneyRecord_result result = new getHostingSubAccountMoneyRecord_result();
        try {
          result.Success = iface_.getHostingSubAccountMoneyRecord(args.PlatformArgs, args.LandingInfo, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getHostingSubAccountMoneyRecord", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSubAccountFundHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSubAccountFundHistory_args args = new getSubAccountFundHistory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSubAccountFundHistory_result result = new getSubAccountFundHistory_result();
        try {
          result.Success = iface_.getSubAccountFundHistory(args.PlatformArgs, args.LandingInfo, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getSubAccountFundHistory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSubAccountPositionHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSubAccountPositionHistory_args args = new getSubAccountPositionHistory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSubAccountPositionHistory_result result = new getSubAccountPositionHistory_result();
        try {
          result.Success = iface_.getSubAccountPositionHistory(args.PlatformArgs, args.LandingInfo, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getSubAccountPositionHistory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSubAccountPositionHistoryTradeDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSubAccountPositionHistoryTradeDetail_args args = new getSubAccountPositionHistoryTradeDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSubAccountPositionHistoryTradeDetail_result result = new getSubAccountPositionHistoryTradeDetail_result();
        try {
          result.Success = iface_.getSubAccountPositionHistoryTradeDetail(args.PlatformArgs, args.LandingInfo, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getSubAccountPositionHistoryTradeDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteExpiredContractPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteExpiredContractPosition_args args = new deleteExpiredContractPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteExpiredContractPosition_result result = new deleteExpiredContractPosition_result();
        try {
          iface_.deleteExpiredContractPosition(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.SledContractId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("deleteExpiredContractPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTradeAccountFundNow_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTradeAccountFundNow_args args = new getTradeAccountFundNow_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTradeAccountFundNow_result result = new getTradeAccountFundNow_result();
        try {
          result.Success = iface_.getTradeAccountFundNow(args.PlatformArgs, args.LandingInfo, args.TradeAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getTradeAccountFundNow", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTradeAccountFundHis_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTradeAccountFundHis_args args = new getTradeAccountFundHis_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTradeAccountFundHis_result result = new getTradeAccountFundHis_result();
        try {
          result.Success = iface_.getTradeAccountFundHis(args.PlatformArgs, args.LandingInfo, args.TradeAccountId, args.FundDateBegin, args.FundDateEnd);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getTradeAccountFundHis", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTradeAccountSettlementInfos_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTradeAccountSettlementInfos_args args = new getTradeAccountSettlementInfos_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTradeAccountSettlementInfos_result result = new getTradeAccountSettlementInfos_result();
        try {
          result.Success = iface_.getTradeAccountSettlementInfos(args.PlatformArgs, args.LandingInfo, args.TradeAccountId, args.SettlementDateBegin, args.SettlementDateEnd);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getTradeAccountSettlementInfos", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTradeAccountSettlementInfosWithRelatedTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTradeAccountSettlementInfosWithRelatedTime_args args = new getTradeAccountSettlementInfosWithRelatedTime_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTradeAccountSettlementInfosWithRelatedTime_result result = new getTradeAccountSettlementInfosWithRelatedTime_result();
        try {
          result.Success = iface_.getTradeAccountSettlementInfosWithRelatedTime(args.PlatformArgs, args.LandingInfo, args.TradeAccountId, args.SettlementDateBegin, args.SettlementDateEnd);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getTradeAccountSettlementInfosWithRelatedTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTradeAccountPositionTradeDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTradeAccountPositionTradeDetail_args args = new getTradeAccountPositionTradeDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTradeAccountPositionTradeDetail_result result = new getTradeAccountPositionTradeDetail_result();
        try {
          result.Success = iface_.getTradeAccountPositionTradeDetail(args.PlatformArgs, args.LandingInfo, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getTradeAccountPositionTradeDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqPositionVerify_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqPositionVerify_args args = new reqPositionVerify_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqPositionVerify_result result = new reqPositionVerify_result();
        try {
          result.Success = iface_.reqPositionVerify(args.PlatformArgs, args.LandingInfo, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqPositionVerify", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqPositionDifference_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqPositionDifference_args args = new reqPositionDifference_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqPositionDifference_result result = new reqPositionDifference_result();
        try {
          result.Success = iface_.reqPositionDifference(args.PlatformArgs, args.LandingInfo, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqPositionDifference", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void manualInputPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        manualInputPosition_args args = new manualInputPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        manualInputPosition_result result = new manualInputPosition_result();
        try {
          result.Success = iface_.manualInputPosition(args.PlatformArgs, args.LandingInfo, args.PositionManualInputs);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("manualInputPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqPositionUnassigned_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqPositionUnassigned_args args = new reqPositionUnassigned_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqPositionUnassigned_result result = new reqPositionUnassigned_result();
        try {
          result.Success = iface_.reqPositionUnassigned(args.PlatformArgs, args.LandingInfo, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqPositionUnassigned", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void assignPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        assignPosition_args args = new assignPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        assignPosition_result result = new assignPosition_result();
        try {
          result.Success = iface_.assignPosition(args.PlatformArgs, args.LandingInfo, args.AssignOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("assignPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqPositionEditLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqPositionEditLock_args args = new reqPositionEditLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqPositionEditLock_result result = new reqPositionEditLock_result();
        try {
          result.Success = iface_.reqPositionEditLock(args.PlatformArgs, args.LandingInfo, args.LockKey);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqPositionEditLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addPositionEditLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addPositionEditLock_args args = new addPositionEditLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addPositionEditLock_result result = new addPositionEditLock_result();
        try {
          iface_.addPositionEditLock(args.PlatformArgs, args.LandingInfo, args.PositionEditLock);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addPositionEditLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removePositionEditLock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removePositionEditLock_args args = new removePositionEditLock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removePositionEditLock_result result = new removePositionEditLock_result();
        try {
          iface_.removePositionEditLock(args.PlatformArgs, args.LandingInfo, args.PositionEditLock);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("removePositionEditLock", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqDailyPositionDifference_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqDailyPositionDifference_args args = new reqDailyPositionDifference_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqDailyPositionDifference_result result = new reqDailyPositionDifference_result();
        try {
          result.Success = iface_.reqDailyPositionDifference(args.PlatformArgs, args.LandingInfo, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqDailyPositionDifference", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateDailyPositionDifferenceNote_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateDailyPositionDifferenceNote_args args = new updateDailyPositionDifferenceNote_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateDailyPositionDifferenceNote_result result = new updateDailyPositionDifferenceNote_result();
        try {
          iface_.updateDailyPositionDifferenceNote(args.PlatformArgs, args.LandingInfo, args.Difference);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("updateDailyPositionDifferenceNote", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqPositionAssigned_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqPositionAssigned_args args = new reqPositionAssigned_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqPositionAssigned_result result = new reqPositionAssigned_result();
        try {
          result.Success = iface_.reqPositionAssigned(args.PlatformArgs, args.LandingInfo, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqPositionAssigned", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void contructCompose_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        contructCompose_args args = new contructCompose_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        contructCompose_result result = new contructCompose_result();
        try {
          iface_.contructCompose(args.PlatformArgs, args.LandingInfo, args.ContructComposeReq);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("contructCompose", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void disassembleCompose_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        disassembleCompose_args args = new disassembleCompose_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        disassembleCompose_result result = new disassembleCompose_result();
        try {
          iface_.disassembleCompose(args.PlatformArgs, args.LandingInfo, args.DisassembleComposePositionReq);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("disassembleCompose", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchClosePosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchClosePosition_args args = new batchClosePosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchClosePosition_result result = new batchClosePosition_result();
        try {
          iface_.batchClosePosition(args.PlatformArgs, args.LandingInfo, args.BatchClosedPositionReq);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchClosePosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void recoverClosedPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        recoverClosedPosition_args args = new recoverClosedPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        recoverClosedPosition_result result = new recoverClosedPosition_result();
        try {
          iface_.recoverClosedPosition(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.TargetKey, args.TargetType);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("recoverClosedPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mergeToCompose_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mergeToCompose_args args = new mergeToCompose_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mergeToCompose_result result = new mergeToCompose_result();
        try {
          iface_.mergeToCompose(args.PlatformArgs, args.LandingInfo, args.MergeToComposeReq);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("mergeToCompose", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteExpiredStatContractPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteExpiredStatContractPosition_args args = new deleteExpiredStatContractPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteExpiredStatContractPosition_result result = new deleteExpiredStatContractPosition_result();
        try {
          iface_.deleteExpiredStatContractPosition(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.SledContractId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("deleteExpiredStatContractPosition", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryStatPositionSummaryPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryStatPositionSummaryPage_args args = new queryStatPositionSummaryPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryStatPositionSummaryPage_result result = new queryStatPositionSummaryPage_result();
        try {
          result.Success = iface_.queryStatPositionSummaryPage(args.PlatformArgs, args.LandingInfo, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryStatPositionSummaryPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryStatPositionItemPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryStatPositionItemPage_args args = new queryStatPositionItemPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryStatPositionItemPage_result result = new queryStatPositionItemPage_result();
        try {
          result.Success = iface_.queryStatPositionItemPage(args.PlatformArgs, args.LandingInfo, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryStatPositionItemPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryCurrentDayStatClosedPositionPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryCurrentDayStatClosedPositionPage_args args = new queryCurrentDayStatClosedPositionPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryCurrentDayStatClosedPositionPage_result result = new queryCurrentDayStatClosedPositionPage_result();
        try {
          result.Success = iface_.queryCurrentDayStatClosedPositionPage(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.TargetKey, args.TargetType);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryCurrentDayStatClosedPositionPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryStatClosedPositionDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryStatClosedPositionDetail_args args = new queryStatClosedPositionDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryStatClosedPositionDetail_result result = new queryStatClosedPositionDetail_result();
        try {
          result.Success = iface_.queryStatClosedPositionDetail(args.PlatformArgs, args.LandingInfo, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryStatClosedPositionDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryArchivedClosedPositionPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryArchivedClosedPositionPage_args args = new queryArchivedClosedPositionPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryArchivedClosedPositionPage_result result = new queryArchivedClosedPositionPage_result();
        try {
          result.Success = iface_.queryArchivedClosedPositionPage(args.PlatformArgs, args.LandingInfo, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryArchivedClosedPositionPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryArchivedClosedPositionDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryArchivedClosedPositionDetail_args args = new queryArchivedClosedPositionDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryArchivedClosedPositionDetail_result result = new queryArchivedClosedPositionDetail_result();
        try {
          result.Success = iface_.queryArchivedClosedPositionDetail(args.PlatformArgs, args.LandingInfo, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryArchivedClosedPositionDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryStatPositionSummaryExPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryStatPositionSummaryExPage_args args = new queryStatPositionSummaryExPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryStatPositionSummaryExPage_result result = new queryStatPositionSummaryExPage_result();
        try {
          result.Success = iface_.queryStatPositionSummaryExPage(args.PlatformArgs, args.LandingInfo, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryStatPositionSummaryExPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryStatPositionUnitPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryStatPositionUnitPage_args args = new queryStatPositionUnitPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryStatPositionUnitPage_result result = new queryStatPositionUnitPage_result();
        try {
          result.Success = iface_.queryStatPositionUnitPage(args.PlatformArgs, args.LandingInfo, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryStatPositionUnitPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryHistoryClosedPositionPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryHistoryClosedPositionPage_args args = new queryHistoryClosedPositionPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryHistoryClosedPositionPage_result result = new queryHistoryClosedPositionPage_result();
        try {
          result.Success = iface_.queryHistoryClosedPositionPage(args.PlatformArgs, args.LandingInfo, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryHistoryClosedPositionPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryHistoryClosedPositionDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryHistoryClosedPositionDetail_args args = new queryHistoryClosedPositionDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryHistoryClosedPositionDetail_result result = new queryHistoryClosedPositionDetail_result();
        try {
          result.Success = iface_.queryHistoryClosedPositionDetail(args.PlatformArgs, args.LandingInfo, args.QueryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryHistoryClosedPositionDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getXQTradeLameTaskNotePage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getXQTradeLameTaskNotePage_args args = new getXQTradeLameTaskNotePage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getXQTradeLameTaskNotePage_result result = new getXQTradeLameTaskNotePage_result();
        try {
          result.Success = iface_.getXQTradeLameTaskNotePage(args.PlatformArgs, args.LandingInfo, args.QryOption, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getXQTradeLameTaskNotePage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchDeleteXQTradeLameTaskNotes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchDeleteXQTradeLameTaskNotes_args args = new batchDeleteXQTradeLameTaskNotes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchDeleteXQTradeLameTaskNotes_result result = new batchDeleteXQTradeLameTaskNotes_result();
        try {
          result.Success = iface_.batchDeleteXQTradeLameTaskNotes(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.XqTradeIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchDeleteXQTradeLameTaskNotes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryMailBoxMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryMailBoxMessage_args args = new queryMailBoxMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryMailBoxMessage_result result = new queryMailBoxMessage_result();
        try {
          result.Success = iface_.queryMailBoxMessage(args.PlatformArgs, args.LandingInfo, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryMailBoxMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void markMessageAsRead_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        markMessageAsRead_args args = new markMessageAsRead_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        markMessageAsRead_result result = new markMessageAsRead_result();
        try {
          result.Success = iface_.markMessageAsRead(args.PlatformArgs, args.LandingInfo, args.HostingMessageIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("markMessageAsRead", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAllSupportedItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAllSupportedItems_args args = new getAllSupportedItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAllSupportedItems_result result = new getAllSupportedItems_result();
        try {
          result.Success = iface_.getAllSupportedItems(args.PlatformArgs, args.LandingInfo);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getAllSupportedItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRiskRuleJointVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRiskRuleJointVersion_args args = new getRiskRuleJointVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRiskRuleJointVersion_result result = new getRiskRuleJointVersion_result();
        try {
          result.Success = iface_.getRiskRuleJointVersion(args.PlatformArgs, args.LandingInfo, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getRiskRuleJointVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRiskRuleJoint_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRiskRuleJoint_args args = new getRiskRuleJoint_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRiskRuleJoint_result result = new getRiskRuleJoint_result();
        try {
          result.Success = iface_.getRiskRuleJoint(args.PlatformArgs, args.LandingInfo, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getRiskRuleJoint", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchSetSupportedItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchSetSupportedItems_args args = new batchSetSupportedItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchSetSupportedItems_result result = new batchSetSupportedItems_result();
        try {
          result.Success = iface_.batchSetSupportedItems(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.Version, args.OpenedItemIds, args.ClosedItemIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchSetSupportedItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchSetTradedCommodityItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchSetTradedCommodityItems_args args = new batchSetTradedCommodityItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchSetTradedCommodityItems_result result = new batchSetTradedCommodityItems_result();
        try {
          result.Success = iface_.batchSetTradedCommodityItems(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.Version, args.EnabledCommodityIds, args.DisabledCommodityIds);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchSetTradedCommodityItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchSetGlobalRules_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchSetGlobalRules_args args = new batchSetGlobalRules_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchSetGlobalRules_result result = new batchSetGlobalRules_result();
        try {
          result.Success = iface_.batchSetGlobalRules(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.Version, args.RuleItems);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchSetGlobalRules", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batchSetCommodityRules_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batchSetCommodityRules_args args = new batchSetCommodityRules_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batchSetCommodityRules_result result = new batchSetCommodityRules_result();
        try {
          result.Success = iface_.batchSetCommodityRules(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.Version, args.Rules);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("batchSetCommodityRules", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setRiskEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setRiskEnabled_args args = new setRiskEnabled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setRiskEnabled_result result = new setRiskEnabled_result();
        try {
          result.Success = iface_.setRiskEnabled(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.Version, args.RiskEnabled);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setRiskEnabled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRiskFrameDataInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRiskFrameDataInfo_args args = new getRiskFrameDataInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRiskFrameDataInfo_result result = new getRiskFrameDataInfo_result();
        try {
          result.Success = iface_.getRiskFrameDataInfo(args.PlatformArgs, args.LandingInfo, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getRiskFrameDataInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setGeneralMarginSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setGeneralMarginSetting_args args = new setGeneralMarginSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setGeneralMarginSetting_result result = new setGeneralMarginSetting_result();
        try {
          iface_.setGeneralMarginSetting(args.PlatformArgs, args.LandingInfo, args.MarginSettings);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setGeneralMarginSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setGeneralCommissionSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setGeneralCommissionSetting_args args = new setGeneralCommissionSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setGeneralCommissionSetting_result result = new setGeneralCommissionSetting_result();
        try {
          iface_.setGeneralCommissionSetting(args.PlatformArgs, args.LandingInfo, args.CommissionSettings);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setGeneralCommissionSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addSpecMarginSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addSpecMarginSetting_args args = new addSpecMarginSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addSpecMarginSetting_result result = new addSpecMarginSetting_result();
        try {
          iface_.addSpecMarginSetting(args.PlatformArgs, args.LandingInfo, args.MarginSettings);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addSpecMarginSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addSpecCommissionSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addSpecCommissionSetting_args args = new addSpecCommissionSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addSpecCommissionSetting_result result = new addSpecCommissionSetting_result();
        try {
          iface_.addSpecCommissionSetting(args.PlatformArgs, args.LandingInfo, args.CommissionSettings);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addSpecCommissionSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateSpecMarginSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateSpecMarginSetting_args args = new updateSpecMarginSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateSpecMarginSetting_result result = new updateSpecMarginSetting_result();
        try {
          iface_.updateSpecMarginSetting(args.PlatformArgs, args.LandingInfo, args.MarginSettings);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("updateSpecMarginSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateSpecCommissionSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateSpecCommissionSetting_args args = new updateSpecCommissionSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateSpecCommissionSetting_result result = new updateSpecCommissionSetting_result();
        try {
          iface_.updateSpecCommissionSetting(args.PlatformArgs, args.LandingInfo, args.CommissionSettings);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("updateSpecCommissionSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteSpecMarginSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteSpecMarginSetting_args args = new deleteSpecMarginSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteSpecMarginSetting_result result = new deleteSpecMarginSetting_result();
        try {
          iface_.deleteSpecMarginSetting(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.CommodityId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("deleteSpecMarginSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteSpecCommissionSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteSpecCommissionSetting_args args = new deleteSpecCommissionSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteSpecCommissionSetting_result result = new deleteSpecCommissionSetting_result();
        try {
          iface_.deleteSpecCommissionSetting(args.PlatformArgs, args.LandingInfo, args.SubAccountId, args.CommodityId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("deleteSpecCommissionSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryXQGeneralMarginSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryXQGeneralMarginSettings_args args = new queryXQGeneralMarginSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryXQGeneralMarginSettings_result result = new queryXQGeneralMarginSettings_result();
        try {
          result.Success = iface_.queryXQGeneralMarginSettings(args.PlatformArgs, args.LandingInfo, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryXQGeneralMarginSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryXQGeneralCommissionSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryXQGeneralCommissionSettings_args args = new queryXQGeneralCommissionSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryXQGeneralCommissionSettings_result result = new queryXQGeneralCommissionSettings_result();
        try {
          result.Success = iface_.queryXQGeneralCommissionSettings(args.PlatformArgs, args.LandingInfo, args.SubAccountId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryXQGeneralCommissionSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryXQSpecMarginSettingPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryXQSpecMarginSettingPage_args args = new queryXQSpecMarginSettingPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryXQSpecMarginSettingPage_result result = new queryXQSpecMarginSettingPage_result();
        try {
          result.Success = iface_.queryXQSpecMarginSettingPage(args.PlatformArgs, args.LandingInfo, args.QueryOptions, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryXQSpecMarginSettingPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryXQSpecCommissionSettingPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryXQSpecCommissionSettingPage_args args = new queryXQSpecCommissionSettingPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryXQSpecCommissionSettingPage_result result = new queryXQSpecCommissionSettingPage_result();
        try {
          result.Success = iface_.queryXQSpecCommissionSettingPage(args.PlatformArgs, args.LandingInfo, args.QueryOptions, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryXQSpecCommissionSettingPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryUpsideContractMarginPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryUpsideContractMarginPage_args args = new queryUpsideContractMarginPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryUpsideContractMarginPage_result result = new queryUpsideContractMarginPage_result();
        try {
          result.Success = iface_.queryUpsideContractMarginPage(args.PlatformArgs, args.LandingInfo, args.QueryOptions, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryUpsideContractMarginPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryUpsideContractCommissionPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryUpsideContractCommissionPage_args args = new queryUpsideContractCommissionPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryUpsideContractCommissionPage_result result = new queryUpsideContractCommissionPage_result();
        try {
          result.Success = iface_.queryUpsideContractCommissionPage(args.PlatformArgs, args.LandingInfo, args.QueryOptions, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryUpsideContractCommissionPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryXQContractMarginPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryXQContractMarginPage_args args = new queryXQContractMarginPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryXQContractMarginPage_result result = new queryXQContractMarginPage_result();
        try {
          result.Success = iface_.queryXQContractMarginPage(args.PlatformArgs, args.LandingInfo, args.QueryOptions, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryXQContractMarginPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryXQContractCommissionPage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryXQContractCommissionPage_args args = new queryXQContractCommissionPage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryXQContractCommissionPage_result result = new queryXQContractCommissionPage_result();
        try {
          result.Success = iface_.queryXQContractCommissionPage(args.PlatformArgs, args.LandingInfo, args.QueryOptions, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("queryXQContractCommissionPage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addAssetAccountWorkingOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addAssetAccountWorkingOrder_args args = new addAssetAccountWorkingOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addAssetAccountWorkingOrder_result result = new addAssetAccountWorkingOrder_result();
        try {
          result.Success = iface_.addAssetAccountWorkingOrder(args.PlatformArgs, args.LandingInfo, args.AssetAccount);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addAssetAccountWorkingOrder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingUserPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.QueryHostingUserOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.QueryHostingUserOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOption;
        public bool pageOption;
      }

      public getHostingUserPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOption = new xueqiao.trade.hosting.QueryHostingUserOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingUserPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingUserPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingUserPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.QueryHostingUserPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.QueryHostingUserPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getHostingUserPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.QueryHostingUserPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingUserPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingUserPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class heartBeat_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
      }

      public heartBeat_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("heartBeat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("heartBeat_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class heartBeat_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public heartBeat_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("heartBeat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("heartBeat_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
      }

      public logout_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logout_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logout_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public logout_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logout_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getComposeViewDetails_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private THashSet<long> _composeGraphIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public THashSet<long> ComposeGraphIds
      {
        get
        {
          return _composeGraphIds;
        }
        set
        {
          __isset.composeGraphIds = true;
          SetProperty(ref _composeGraphIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool composeGraphIds;
      }

      public getComposeViewDetails_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Set) {
                {
                  ComposeGraphIds = new THashSet<long>();
                  TSet _set71 = iprot.ReadSetBegin();
                  for( int _i72 = 0; _i72 < _set71.Count; ++_i72)
                  {
                    long _elem73 = 0;
                    _elem73 = iprot.ReadI64();
                    ComposeGraphIds.Add(_elem73);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getComposeViewDetails_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ComposeGraphIds != null && __isset.composeGraphIds) {
          field.Name = "composeGraphIds";
          field.Type = TType.Set;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I64, ComposeGraphIds.Count));
            foreach (long _iter74 in ComposeGraphIds)
            {
              oprot.WriteI64(_iter74);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getComposeViewDetails_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",ComposeGraphIds: ");
        if (ComposeGraphIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (long _iter75 in ComposeGraphIds)
          {
            sb.Append(_iter75.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getComposeViewDetails_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private Dictionary<long, HostingComposeViewDetail> _success;
      private ErrorInfo _err;

      public Dictionary<long, HostingComposeViewDetail> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getComposeViewDetails_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<long, HostingComposeViewDetail>();
                  TMap _map76 = iprot.ReadMapBegin();
                  for( int _i77 = 0; _i77 < _map76.Count; ++_i77)
                  {
                    long _key78;
                    HostingComposeViewDetail _val79;
                    _key78 = iprot.ReadI64();
                    _val79 = new HostingComposeViewDetail();
                    _val79.Read(iprot);
                    Success[_key78] = _val79;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getComposeViewDetails_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, Success.Count));
              foreach (long _iter80 in Success.Keys)
              {
                oprot.WriteI64(_iter80);
                Success[_iter80].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getComposeViewDetails_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (long _iter81 in Success.Keys)
          {
            sb.Append(_iter81.ToString());
            sb.Append(":");
            sb.Append(Success[_iter81].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeComposeViewPrecisionNumber_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _composeGraphId;
      private short _precisionNumber;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long ComposeGraphId
      {
        get
        {
          return _composeGraphId;
        }
        set
        {
          __isset.composeGraphId = true;
          SetProperty(ref _composeGraphId, value);
        }
      }

      public short PrecisionNumber
      {
        get
        {
          return _precisionNumber;
        }
        set
        {
          __isset.precisionNumber = true;
          SetProperty(ref _precisionNumber, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool composeGraphId;
        public bool precisionNumber;
      }

      public changeComposeViewPrecisionNumber_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                ComposeGraphId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I16) {
                PrecisionNumber = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changeComposeViewPrecisionNumber_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.composeGraphId) {
          field.Name = "composeGraphId";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ComposeGraphId);
          oprot.WriteFieldEnd();
        }
        if (__isset.precisionNumber) {
          field.Name = "precisionNumber";
          field.Type = TType.I16;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PrecisionNumber);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changeComposeViewPrecisionNumber_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",ComposeGraphId: ");
        sb.Append(ComposeGraphId);
        sb.Append(",PrecisionNumber: ");
        sb.Append(PrecisionNumber);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeComposeViewPrecisionNumber_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public changeComposeViewPrecisionNumber_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changeComposeViewPrecisionNumber_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changeComposeViewPrecisionNumber_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createComposeGraph_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.HostingComposeGraph _newGraph;
      private string _aliasName;
      private short _precisionNumber;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.HostingComposeGraph NewGraph
      {
        get
        {
          return _newGraph;
        }
        set
        {
          __isset.newGraph = true;
          SetProperty(ref _newGraph, value);
        }
      }

      public string AliasName
      {
        get
        {
          return _aliasName;
        }
        set
        {
          __isset.aliasName = true;
          SetProperty(ref _aliasName, value);
        }
      }

      public short PrecisionNumber
      {
        get
        {
          return _precisionNumber;
        }
        set
        {
          __isset.precisionNumber = true;
          SetProperty(ref _precisionNumber, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool newGraph;
        public bool aliasName;
        public bool precisionNumber;
      }

      public createComposeGraph_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                NewGraph = new xueqiao.trade.hosting.HostingComposeGraph();
                NewGraph.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                AliasName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I16) {
                PrecisionNumber = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createComposeGraph_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (NewGraph != null && __isset.newGraph) {
          field.Name = "newGraph";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          NewGraph.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AliasName != null && __isset.aliasName) {
          field.Name = "aliasName";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AliasName);
          oprot.WriteFieldEnd();
        }
        if (__isset.precisionNumber) {
          field.Name = "precisionNumber";
          field.Type = TType.I16;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PrecisionNumber);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createComposeGraph_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",NewGraph: ");
        sb.Append(NewGraph== null ? "<null>" : NewGraph.ToString());
        sb.Append(",AliasName: ");
        sb.Append(AliasName);
        sb.Append(",PrecisionNumber: ");
        sb.Append(PrecisionNumber);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createComposeGraph_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private long _success;
      private ErrorInfo _err;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public createComposeGraph_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createComposeGraph_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createComposeGraph_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class delComposeView_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _composeGraphId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long ComposeGraphId
      {
        get
        {
          return _composeGraphId;
        }
        set
        {
          __isset.composeGraphId = true;
          SetProperty(ref _composeGraphId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool composeGraphId;
      }

      public delComposeView_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                ComposeGraphId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("delComposeView_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.composeGraphId) {
          field.Name = "composeGraphId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ComposeGraphId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("delComposeView_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",ComposeGraphId: ");
        sb.Append(ComposeGraphId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class delComposeView_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public delComposeView_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("delComposeView_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("delComposeView_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getComposeViewDetailPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private QueryHostingComposeViewDetailOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public QueryHostingComposeViewDetailOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOption;
        public bool pageOption;
      }

      public getComposeViewDetailPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOption = new QueryHostingComposeViewDetailOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getComposeViewDetailPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getComposeViewDetailPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getComposeViewDetailPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private QueryHostingComposeViewDetailPage _success;
      private ErrorInfo _err;

      public QueryHostingComposeViewDetailPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getComposeViewDetailPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new QueryHostingComposeViewDetailPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getComposeViewDetailPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getComposeViewDetailPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSameComposeGraphsPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.HostingComposeGraph _graph;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.HostingComposeGraph Graph
      {
        get
        {
          return _graph;
        }
        set
        {
          __isset.graph = true;
          SetProperty(ref _graph, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool graph;
        public bool pageOption;
      }

      public getSameComposeGraphsPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Graph = new xueqiao.trade.hosting.HostingComposeGraph();
                Graph.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSameComposeGraphsPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Graph != null && __isset.graph) {
          field.Name = "graph";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Graph.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSameComposeGraphsPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Graph: ");
        sb.Append(Graph== null ? "<null>" : Graph.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSameComposeGraphsPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private QuerySameComposeGraphsPage _success;
      private ErrorInfo _err;

      public QuerySameComposeGraphsPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getSameComposeGraphsPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new QuerySameComposeGraphsPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSameComposeGraphsPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSameComposeGraphsPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addComposeViewBySearch_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _composeGraphId;
      private string _composeGraphKey;
      private string _aliasName;
      private short _precisionNumber;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long ComposeGraphId
      {
        get
        {
          return _composeGraphId;
        }
        set
        {
          __isset.composeGraphId = true;
          SetProperty(ref _composeGraphId, value);
        }
      }

      public string ComposeGraphKey
      {
        get
        {
          return _composeGraphKey;
        }
        set
        {
          __isset.composeGraphKey = true;
          SetProperty(ref _composeGraphKey, value);
        }
      }

      public string AliasName
      {
        get
        {
          return _aliasName;
        }
        set
        {
          __isset.aliasName = true;
          SetProperty(ref _aliasName, value);
        }
      }

      public short PrecisionNumber
      {
        get
        {
          return _precisionNumber;
        }
        set
        {
          __isset.precisionNumber = true;
          SetProperty(ref _precisionNumber, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool composeGraphId;
        public bool composeGraphKey;
        public bool aliasName;
        public bool precisionNumber;
      }

      public addComposeViewBySearch_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                ComposeGraphId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                ComposeGraphKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                AliasName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I16) {
                PrecisionNumber = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addComposeViewBySearch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.composeGraphId) {
          field.Name = "composeGraphId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ComposeGraphId);
          oprot.WriteFieldEnd();
        }
        if (ComposeGraphKey != null && __isset.composeGraphKey) {
          field.Name = "composeGraphKey";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ComposeGraphKey);
          oprot.WriteFieldEnd();
        }
        if (AliasName != null && __isset.aliasName) {
          field.Name = "aliasName";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AliasName);
          oprot.WriteFieldEnd();
        }
        if (__isset.precisionNumber) {
          field.Name = "precisionNumber";
          field.Type = TType.I16;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PrecisionNumber);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addComposeViewBySearch_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",ComposeGraphId: ");
        sb.Append(ComposeGraphId);
        sb.Append(",ComposeGraphKey: ");
        sb.Append(ComposeGraphKey);
        sb.Append(",AliasName: ");
        sb.Append(AliasName);
        sb.Append(",PrecisionNumber: ");
        sb.Append(PrecisionNumber);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addComposeViewBySearch_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public addComposeViewBySearch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addComposeViewBySearch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addComposeViewBySearch_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class subscribeComposeViewQuotation_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _composeGraphId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long ComposeGraphId
      {
        get
        {
          return _composeGraphId;
        }
        set
        {
          __isset.composeGraphId = true;
          SetProperty(ref _composeGraphId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool composeGraphId;
      }

      public subscribeComposeViewQuotation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                ComposeGraphId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("subscribeComposeViewQuotation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.composeGraphId) {
          field.Name = "composeGraphId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ComposeGraphId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("subscribeComposeViewQuotation_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",ComposeGraphId: ");
        sb.Append(ComposeGraphId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class subscribeComposeViewQuotation_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public subscribeComposeViewQuotation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("subscribeComposeViewQuotation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("subscribeComposeViewQuotation_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unSubscribeComposeViewQuotation_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _composeGraphId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long ComposeGraphId
      {
        get
        {
          return _composeGraphId;
        }
        set
        {
          __isset.composeGraphId = true;
          SetProperty(ref _composeGraphId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool composeGraphId;
      }

      public unSubscribeComposeViewQuotation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                ComposeGraphId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("unSubscribeComposeViewQuotation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.composeGraphId) {
          field.Name = "composeGraphId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ComposeGraphId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("unSubscribeComposeViewQuotation_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",ComposeGraphId: ");
        sb.Append(ComposeGraphId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unSubscribeComposeViewQuotation_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public unSubscribeComposeViewQuotation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("unSubscribeComposeViewQuotation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("unSubscribeComposeViewQuotation_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeComposeViewAliasName_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _composeGraphId;
      private string _aliasName;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long ComposeGraphId
      {
        get
        {
          return _composeGraphId;
        }
        set
        {
          __isset.composeGraphId = true;
          SetProperty(ref _composeGraphId, value);
        }
      }

      public string AliasName
      {
        get
        {
          return _aliasName;
        }
        set
        {
          __isset.aliasName = true;
          SetProperty(ref _aliasName, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool composeGraphId;
        public bool aliasName;
      }

      public changeComposeViewAliasName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                ComposeGraphId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                AliasName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changeComposeViewAliasName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.composeGraphId) {
          field.Name = "composeGraphId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ComposeGraphId);
          oprot.WriteFieldEnd();
        }
        if (AliasName != null && __isset.aliasName) {
          field.Name = "aliasName";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AliasName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changeComposeViewAliasName_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",ComposeGraphId: ");
        sb.Append(ComposeGraphId);
        sb.Append(",AliasName: ");
        sb.Append(AliasName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeComposeViewAliasName_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public changeComposeViewAliasName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changeComposeViewAliasName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changeComposeViewAliasName_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getComposeGraphs_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private THashSet<long> _composeGraphIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public THashSet<long> ComposeGraphIds
      {
        get
        {
          return _composeGraphIds;
        }
        set
        {
          __isset.composeGraphIds = true;
          SetProperty(ref _composeGraphIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool composeGraphIds;
      }

      public getComposeGraphs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  ComposeGraphIds = new THashSet<long>();
                  TSet _set82 = iprot.ReadSetBegin();
                  for( int _i83 = 0; _i83 < _set82.Count; ++_i83)
                  {
                    long _elem84 = 0;
                    _elem84 = iprot.ReadI64();
                    ComposeGraphIds.Add(_elem84);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getComposeGraphs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ComposeGraphIds != null && __isset.composeGraphIds) {
          field.Name = "composeGraphIds";
          field.Type = TType.Set;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I64, ComposeGraphIds.Count));
            foreach (long _iter85 in ComposeGraphIds)
            {
              oprot.WriteI64(_iter85);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getComposeGraphs_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",ComposeGraphIds: ");
        if (ComposeGraphIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (long _iter86 in ComposeGraphIds)
          {
            sb.Append(_iter86.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getComposeGraphs_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private Dictionary<long, xueqiao.trade.hosting.HostingComposeGraph> _success;
      private ErrorInfo _err;

      public Dictionary<long, xueqiao.trade.hosting.HostingComposeGraph> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getComposeGraphs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<long, xueqiao.trade.hosting.HostingComposeGraph>();
                  TMap _map87 = iprot.ReadMapBegin();
                  for( int _i88 = 0; _i88 < _map87.Count; ++_i88)
                  {
                    long _key89;
                    xueqiao.trade.hosting.HostingComposeGraph _val90;
                    _key89 = iprot.ReadI64();
                    _val90 = new xueqiao.trade.hosting.HostingComposeGraph();
                    _val90.Read(iprot);
                    Success[_key89] = _val90;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getComposeGraphs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, Success.Count));
              foreach (long _iter91 in Success.Keys)
              {
                oprot.WriteI64(_iter91);
                Success[_iter91].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getComposeGraphs_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (long _iter92 in Success.Keys)
          {
            sb.Append(_iter92.ToString());
            sb.Append(":");
            sb.Append(Success[_iter92].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addComposeViewByShare_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _composeGraphId;
      private string _aliasName;
      private short _precisionNumber;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long ComposeGraphId
      {
        get
        {
          return _composeGraphId;
        }
        set
        {
          __isset.composeGraphId = true;
          SetProperty(ref _composeGraphId, value);
        }
      }

      public string AliasName
      {
        get
        {
          return _aliasName;
        }
        set
        {
          __isset.aliasName = true;
          SetProperty(ref _aliasName, value);
        }
      }

      public short PrecisionNumber
      {
        get
        {
          return _precisionNumber;
        }
        set
        {
          __isset.precisionNumber = true;
          SetProperty(ref _precisionNumber, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool composeGraphId;
        public bool aliasName;
        public bool precisionNumber;
      }

      public addComposeViewByShare_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                ComposeGraphId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                AliasName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I16) {
                PrecisionNumber = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addComposeViewByShare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.composeGraphId) {
          field.Name = "composeGraphId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ComposeGraphId);
          oprot.WriteFieldEnd();
        }
        if (AliasName != null && __isset.aliasName) {
          field.Name = "aliasName";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AliasName);
          oprot.WriteFieldEnd();
        }
        if (__isset.precisionNumber) {
          field.Name = "precisionNumber";
          field.Type = TType.I16;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(PrecisionNumber);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addComposeViewByShare_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",ComposeGraphId: ");
        sb.Append(ComposeGraphId);
        sb.Append(",AliasName: ");
        sb.Append(AliasName);
        sb.Append(",PrecisionNumber: ");
        sb.Append(PrecisionNumber);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addComposeViewByShare_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public addComposeViewByShare_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addComposeViewByShare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addComposeViewByShare_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addTradeAccount_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.HostingTradeAccount _newAccount;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.HostingTradeAccount NewAccount
      {
        get
        {
          return _newAccount;
        }
        set
        {
          __isset.newAccount = true;
          SetProperty(ref _newAccount, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool newAccount;
      }

      public addTradeAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                NewAccount = new xueqiao.trade.hosting.HostingTradeAccount();
                NewAccount.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addTradeAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (NewAccount != null && __isset.newAccount) {
          field.Name = "newAccount";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          NewAccount.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addTradeAccount_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",NewAccount: ");
        sb.Append(NewAccount== null ? "<null>" : NewAccount.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addTradeAccount_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private long _success;
      private ErrorInfo _err;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public addTradeAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addTradeAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addTradeAccount_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class disableTradeAccount_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _tradeAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long TradeAccountId
      {
        get
        {
          return _tradeAccountId;
        }
        set
        {
          __isset.tradeAccountId = true;
          SetProperty(ref _tradeAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool tradeAccountId;
      }

      public disableTradeAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TradeAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("disableTradeAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.tradeAccountId) {
          field.Name = "tradeAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TradeAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("disableTradeAccount_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",TradeAccountId: ");
        sb.Append(TradeAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class disableTradeAccount_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public disableTradeAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("disableTradeAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("disableTradeAccount_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private QueryHostingTradeAccountOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public QueryHostingTradeAccountOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOption;
        public bool pageOption;
      }

      public getTradeAccountPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOption = new QueryHostingTradeAccountOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private QueryHostingTradeAccountPage _success;
      private ErrorInfo _err;

      public QueryHostingTradeAccountPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getTradeAccountPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new QueryHostingTradeAccountPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class enableTradeAccount_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _tradeAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long TradeAccountId
      {
        get
        {
          return _tradeAccountId;
        }
        set
        {
          __isset.tradeAccountId = true;
          SetProperty(ref _tradeAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool tradeAccountId;
      }

      public enableTradeAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TradeAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("enableTradeAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.tradeAccountId) {
          field.Name = "tradeAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TradeAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("enableTradeAccount_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",TradeAccountId: ");
        sb.Append(TradeAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class enableTradeAccount_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public enableTradeAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("enableTradeAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("enableTradeAccount_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateTradeAccountInfo_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.HostingTradeAccount _updateAccount;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.HostingTradeAccount UpdateAccount
      {
        get
        {
          return _updateAccount;
        }
        set
        {
          __isset.updateAccount = true;
          SetProperty(ref _updateAccount, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool updateAccount;
      }

      public updateTradeAccountInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                UpdateAccount = new xueqiao.trade.hosting.HostingTradeAccount();
                UpdateAccount.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateTradeAccountInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (UpdateAccount != null && __isset.updateAccount) {
          field.Name = "updateAccount";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          UpdateAccount.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateTradeAccountInfo_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",UpdateAccount: ");
        sb.Append(UpdateAccount== null ? "<null>" : UpdateAccount.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateTradeAccountInfo_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public updateTradeAccountInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateTradeAccountInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateTradeAccountInfo_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rmTradeAccount_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _tradeAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long TradeAccountId
      {
        get
        {
          return _tradeAccountId;
        }
        set
        {
          __isset.tradeAccountId = true;
          SetProperty(ref _tradeAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool tradeAccountId;
      }

      public rmTradeAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TradeAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rmTradeAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.tradeAccountId) {
          field.Name = "tradeAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TradeAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rmTradeAccount_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",TradeAccountId: ");
        sb.Append(TradeAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rmTradeAccount_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public rmTradeAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rmTradeAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rmTradeAccount_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPersonalUserTradeAccount_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
      }

      public getPersonalUserTradeAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPersonalUserTradeAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPersonalUserTradeAccount_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPersonalUserTradeAccount_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<xueqiao.trade.hosting.HostingTradeAccount> _success;
      private ErrorInfo _err;

      public List<xueqiao.trade.hosting.HostingTradeAccount> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getPersonalUserTradeAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<xueqiao.trade.hosting.HostingTradeAccount>();
                  TList _list93 = iprot.ReadListBegin();
                  for( int _i94 = 0; _i94 < _list93.Count; ++_i94)
                  {
                    xueqiao.trade.hosting.HostingTradeAccount _elem95 = new xueqiao.trade.hosting.HostingTradeAccount();
                    _elem95 = new xueqiao.trade.hosting.HostingTradeAccount();
                    _elem95.Read(iprot);
                    Success.Add(_elem95);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPersonalUserTradeAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (xueqiao.trade.hosting.HostingTradeAccount _iter96 in Success)
              {
                _iter96.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPersonalUserTradeAccount_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (xueqiao.trade.hosting.HostingTradeAccount _iter97 in Success)
          {
            sb.Append(_iter97.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingOrderRouteTree_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
      }

      public getHostingOrderRouteTree_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingOrderRouteTree_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingOrderRouteTree_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingOrderRouteTree_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.HostingOrderRouteTree _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.HostingOrderRouteTree Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getHostingOrderRouteTree_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.HostingOrderRouteTree();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingOrderRouteTree_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingOrderRouteTree_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateHostingOrderRouteTree_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private xueqiao.trade.hosting.HostingOrderRouteTree _routeTree;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public xueqiao.trade.hosting.HostingOrderRouteTree RouteTree
      {
        get
        {
          return _routeTree;
        }
        set
        {
          __isset.routeTree = true;
          SetProperty(ref _routeTree, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool routeTree;
      }

      public updateHostingOrderRouteTree_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                RouteTree = new xueqiao.trade.hosting.HostingOrderRouteTree();
                RouteTree.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateHostingOrderRouteTree_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (RouteTree != null && __isset.routeTree) {
          field.Name = "routeTree";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          RouteTree.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateHostingOrderRouteTree_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",RouteTree: ");
        sb.Append(RouteTree== null ? "<null>" : RouteTree.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateHostingOrderRouteTree_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public updateHostingOrderRouteTree_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateHostingOrderRouteTree_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateHostingOrderRouteTree_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingOrderRouteTreeVersion_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
      }

      public getHostingOrderRouteTreeVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingOrderRouteTreeVersion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingOrderRouteTreeVersion_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingOrderRouteTreeVersion_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private int _success;
      private ErrorInfo _err;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getHostingOrderRouteTreeVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingOrderRouteTreeVersion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingOrderRouteTreeVersion_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPersonalUserHostingOrderRouteTree_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
      }

      public getPersonalUserHostingOrderRouteTree_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPersonalUserHostingOrderRouteTree_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPersonalUserHostingOrderRouteTree_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPersonalUserHostingOrderRouteTree_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.HostingOrderRouteTree _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.HostingOrderRouteTree Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getPersonalUserHostingOrderRouteTree_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.HostingOrderRouteTree();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPersonalUserHostingOrderRouteTree_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPersonalUserHostingOrderRouteTree_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createXQOrder_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private string _orderId;
      private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType _orderType;
      private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget _orderTarget;
      private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderDetail _orderDetail;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public string OrderId
      {
        get
        {
          return _orderId;
        }
        set
        {
          __isset.orderId = true;
          SetProperty(ref _orderId, value);
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType"/>
      /// </summary>
      public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType OrderType
      {
        get
        {
          return _orderType;
        }
        set
        {
          __isset.orderType = true;
          SetProperty(ref _orderType, value);
        }
      }

      public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget OrderTarget
      {
        get
        {
          return _orderTarget;
        }
        set
        {
          __isset.orderTarget = true;
          SetProperty(ref _orderTarget, value);
        }
      }

      public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderDetail OrderDetail
      {
        get
        {
          return _orderDetail;
        }
        set
        {
          __isset.orderDetail = true;
          SetProperty(ref _orderDetail, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool orderId;
        public bool orderType;
        public bool orderTarget;
        public bool orderDetail;
      }

      public createXQOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                OrderId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                OrderType = (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                OrderTarget = new xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTarget();
                OrderTarget.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                OrderDetail = new xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderDetail();
                OrderDetail.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createXQOrder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (OrderId != null && __isset.orderId) {
          field.Name = "orderId";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OrderId);
          oprot.WriteFieldEnd();
        }
        if (__isset.orderType) {
          field.Name = "orderType";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)OrderType);
          oprot.WriteFieldEnd();
        }
        if (OrderTarget != null && __isset.orderTarget) {
          field.Name = "orderTarget";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          OrderTarget.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderDetail != null && __isset.orderDetail) {
          field.Name = "orderDetail";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          OrderDetail.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createXQOrder_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",OrderId: ");
        sb.Append(OrderId);
        sb.Append(",OrderType: ");
        sb.Append(OrderType);
        sb.Append(",OrderTarget: ");
        sb.Append(OrderTarget== null ? "<null>" : OrderTarget.ToString());
        sb.Append(",OrderDetail: ");
        sb.Append(OrderDetail== null ? "<null>" : OrderDetail.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createXQOrder_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public createXQOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createXQOrder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createXQOrder_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSuspendXQOrders_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private THashSet<string> _orderIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public THashSet<string> OrderIds
      {
        get
        {
          return _orderIds;
        }
        set
        {
          __isset.orderIds = true;
          SetProperty(ref _orderIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool orderIds;
      }

      public batchSuspendXQOrders_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  OrderIds = new THashSet<string>();
                  TSet _set98 = iprot.ReadSetBegin();
                  for( int _i99 = 0; _i99 < _set98.Count; ++_i99)
                  {
                    string _elem100 = null;
                    _elem100 = iprot.ReadString();
                    OrderIds.Add(_elem100);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSuspendXQOrders_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderIds != null && __isset.orderIds) {
          field.Name = "orderIds";
          field.Type = TType.Set;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, OrderIds.Count));
            foreach (string _iter101 in OrderIds)
            {
              oprot.WriteString(_iter101);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSuspendXQOrders_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",OrderIds: ");
        if (OrderIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (string _iter102 in OrderIds)
          {
            sb.Append(_iter102.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSuspendXQOrders_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private Dictionary<string, ErrorInfo> _success;
      private ErrorInfo _err;

      public Dictionary<string, ErrorInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public batchSuspendXQOrders_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, ErrorInfo>();
                  TMap _map103 = iprot.ReadMapBegin();
                  for( int _i104 = 0; _i104 < _map103.Count; ++_i104)
                  {
                    string _key105;
                    ErrorInfo _val106;
                    _key105 = iprot.ReadString();
                    _val106 = new ErrorInfo();
                    _val106.Read(iprot);
                    Success[_key105] = _val106;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSuspendXQOrders_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter107 in Success.Keys)
              {
                oprot.WriteString(_iter107);
                Success[_iter107].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSuspendXQOrders_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (string _iter108 in Success.Keys)
          {
            sb.Append(_iter108.ToString());
            sb.Append(":");
            sb.Append(Success[_iter108].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchResumeXQOrders_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private THashSet<string> _orderIds;
      private Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderResumeMode> _resumeModes;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public THashSet<string> OrderIds
      {
        get
        {
          return _orderIds;
        }
        set
        {
          __isset.orderIds = true;
          SetProperty(ref _orderIds, value);
        }
      }

      public Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderResumeMode> ResumeModes
      {
        get
        {
          return _resumeModes;
        }
        set
        {
          __isset.resumeModes = true;
          SetProperty(ref _resumeModes, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool orderIds;
        public bool resumeModes;
      }

      public batchResumeXQOrders_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  OrderIds = new THashSet<string>();
                  TSet _set109 = iprot.ReadSetBegin();
                  for( int _i110 = 0; _i110 < _set109.Count; ++_i110)
                  {
                    string _elem111 = null;
                    _elem111 = iprot.ReadString();
                    OrderIds.Add(_elem111);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Map) {
                {
                  ResumeModes = new Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderResumeMode>();
                  TMap _map112 = iprot.ReadMapBegin();
                  for( int _i113 = 0; _i113 < _map112.Count; ++_i113)
                  {
                    string _key114;
                    xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderResumeMode _val115;
                    _key114 = iprot.ReadString();
                    _val115 = (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderResumeMode)iprot.ReadI32();
                    ResumeModes[_key114] = _val115;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchResumeXQOrders_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderIds != null && __isset.orderIds) {
          field.Name = "orderIds";
          field.Type = TType.Set;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, OrderIds.Count));
            foreach (string _iter116 in OrderIds)
            {
              oprot.WriteString(_iter116);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ResumeModes != null && __isset.resumeModes) {
          field.Name = "resumeModes";
          field.Type = TType.Map;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I32, ResumeModes.Count));
            foreach (string _iter117 in ResumeModes.Keys)
            {
              oprot.WriteString(_iter117);
              oprot.WriteI32((int)ResumeModes[_iter117]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchResumeXQOrders_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",OrderIds: ");
        if (OrderIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (string _iter118 in OrderIds)
          {
            sb.Append(_iter118.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",ResumeModes: ");
        if (ResumeModes == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (string _iter119 in ResumeModes.Keys)
          {
            sb.Append(_iter119.ToString());
            sb.Append(":");
            sb.Append(ResumeModes[_iter119].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchResumeXQOrders_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private Dictionary<string, ErrorInfo> _success;
      private ErrorInfo _err;

      public Dictionary<string, ErrorInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public batchResumeXQOrders_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, ErrorInfo>();
                  TMap _map120 = iprot.ReadMapBegin();
                  for( int _i121 = 0; _i121 < _map120.Count; ++_i121)
                  {
                    string _key122;
                    ErrorInfo _val123;
                    _key122 = iprot.ReadString();
                    _val123 = new ErrorInfo();
                    _val123.Read(iprot);
                    Success[_key122] = _val123;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchResumeXQOrders_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter124 in Success.Keys)
              {
                oprot.WriteString(_iter124);
                Success[_iter124].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchResumeXQOrders_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (string _iter125 in Success.Keys)
          {
            sb.Append(_iter125.ToString());
            sb.Append(":");
            sb.Append(Success[_iter125].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchCancelXQOrders_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private THashSet<string> _orderIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public THashSet<string> OrderIds
      {
        get
        {
          return _orderIds;
        }
        set
        {
          __isset.orderIds = true;
          SetProperty(ref _orderIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool orderIds;
      }

      public batchCancelXQOrders_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  OrderIds = new THashSet<string>();
                  TSet _set126 = iprot.ReadSetBegin();
                  for( int _i127 = 0; _i127 < _set126.Count; ++_i127)
                  {
                    string _elem128 = null;
                    _elem128 = iprot.ReadString();
                    OrderIds.Add(_elem128);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchCancelXQOrders_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderIds != null && __isset.orderIds) {
          field.Name = "orderIds";
          field.Type = TType.Set;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, OrderIds.Count));
            foreach (string _iter129 in OrderIds)
            {
              oprot.WriteString(_iter129);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchCancelXQOrders_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",OrderIds: ");
        if (OrderIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (string _iter130 in OrderIds)
          {
            sb.Append(_iter130.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchCancelXQOrders_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private Dictionary<string, ErrorInfo> _success;
      private ErrorInfo _err;

      public Dictionary<string, ErrorInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public batchCancelXQOrders_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, ErrorInfo>();
                  TMap _map131 = iprot.ReadMapBegin();
                  for( int _i132 = 0; _i132 < _map131.Count; ++_i132)
                  {
                    string _key133;
                    ErrorInfo _val134;
                    _key133 = iprot.ReadString();
                    _val134 = new ErrorInfo();
                    _val134.Read(iprot);
                    Success[_key133] = _val134;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchCancelXQOrders_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter135 in Success.Keys)
              {
                oprot.WriteString(_iter135);
                Success[_iter135].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchCancelXQOrders_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (string _iter136 in Success.Keys)
          {
            sb.Append(_iter136.ToString());
            sb.Append(":");
            sb.Append(Success[_iter136].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEffectXQOrderWithTradeListPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.arbitrage.thriftapi.QueryEffectXQOrderIndexOption _qryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.arbitrage.thriftapi.QueryEffectXQOrderIndexOption QryOption
      {
        get
        {
          return _qryOption;
        }
        set
        {
          __isset.qryOption = true;
          SetProperty(ref _qryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool qryOption;
        public bool pageOption;
      }

      public getEffectXQOrderWithTradeListPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QryOption = new xueqiao.trade.hosting.arbitrage.thriftapi.QueryEffectXQOrderIndexOption();
                QryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEffectXQOrderWithTradeListPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QryOption != null && __isset.qryOption) {
          field.Name = "qryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getEffectXQOrderWithTradeListPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QryOption: ");
        sb.Append(QryOption== null ? "<null>" : QryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEffectXQOrderWithTradeListPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingXQOrderWithTradeListPage _success;
      private ErrorInfo _err;

      public HostingXQOrderWithTradeListPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getEffectXQOrderWithTradeListPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingXQOrderWithTradeListPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEffectXQOrderWithTradeListPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getEffectXQOrderWithTradeListPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrderWithTradeLists_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private THashSet<string> _orderIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public THashSet<string> OrderIds
      {
        get
        {
          return _orderIds;
        }
        set
        {
          __isset.orderIds = true;
          SetProperty(ref _orderIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool orderIds;
      }

      public getXQOrderWithTradeLists_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  OrderIds = new THashSet<string>();
                  TSet _set137 = iprot.ReadSetBegin();
                  for( int _i138 = 0; _i138 < _set137.Count; ++_i138)
                  {
                    string _elem139 = null;
                    _elem139 = iprot.ReadString();
                    OrderIds.Add(_elem139);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrderWithTradeLists_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderIds != null && __isset.orderIds) {
          field.Name = "orderIds";
          field.Type = TType.Set;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, OrderIds.Count));
            foreach (string _iter140 in OrderIds)
            {
              oprot.WriteString(_iter140);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrderWithTradeLists_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",OrderIds: ");
        if (OrderIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (string _iter141 in OrderIds)
          {
            sb.Append(_iter141.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrderWithTradeLists_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderWithTradeList> _success;
      private ErrorInfo _err;

      public Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderWithTradeList> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getXQOrderWithTradeLists_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderWithTradeList>();
                  TMap _map142 = iprot.ReadMapBegin();
                  for( int _i143 = 0; _i143 < _map142.Count; ++_i143)
                  {
                    string _key144;
                    xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderWithTradeList _val145;
                    _key144 = iprot.ReadString();
                    _val145 = new xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderWithTradeList();
                    _val145.Read(iprot);
                    Success[_key144] = _val145;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrderWithTradeLists_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter146 in Success.Keys)
              {
                oprot.WriteString(_iter146);
                Success[_iter146].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrderWithTradeLists_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (string _iter147 in Success.Keys)
          {
            sb.Append(_iter147.ToString());
            sb.Append(":");
            sb.Append(Success[_iter147].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrderExecDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private string _orderId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public string OrderId
      {
        get
        {
          return _orderId;
        }
        set
        {
          __isset.orderId = true;
          SetProperty(ref _orderId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool orderId;
      }

      public getXQOrderExecDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                OrderId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrderExecDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OrderId != null && __isset.orderId) {
          field.Name = "orderId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OrderId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrderExecDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",OrderId: ");
        sb.Append(OrderId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrderExecDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderExecDetail _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderExecDetail Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getXQOrderExecDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQOrderExecDetail();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrderExecDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrderExecDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrderHisPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.history.thriftapi.QueryXQOrderHisIndexItemOption _qryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.history.thriftapi.QueryXQOrderHisIndexItemOption QryOption
      {
        get
        {
          return _qryOption;
        }
        set
        {
          __isset.qryOption = true;
          SetProperty(ref _qryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool qryOption;
        public bool pageOption;
      }

      public getXQOrderHisPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QryOption = new xueqiao.trade.hosting.history.thriftapi.QueryXQOrderHisIndexItemOption();
                QryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrderHisPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QryOption != null && __isset.qryOption) {
          field.Name = "qryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrderHisPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QryOption: ");
        sb.Append(QryOption== null ? "<null>" : QryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQOrderHisPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingXQOrderPage _success;
      private ErrorInfo _err;

      public HostingXQOrderPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getXQOrderHisPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingXQOrderPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQOrderHisPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQOrderHisPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQTradeHisPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.history.thriftapi.QueryXQTradeHisIndexItemOption _qryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.history.thriftapi.QueryXQTradeHisIndexItemOption QryOption
      {
        get
        {
          return _qryOption;
        }
        set
        {
          __isset.qryOption = true;
          SetProperty(ref _qryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool qryOption;
        public bool pageOption;
      }

      public getXQTradeHisPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QryOption = new xueqiao.trade.hosting.history.thriftapi.QueryXQTradeHisIndexItemOption();
                QryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQTradeHisPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QryOption != null && __isset.qryOption) {
          field.Name = "qryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQTradeHisPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QryOption: ");
        sb.Append(QryOption== null ? "<null>" : QryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQTradeHisPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingXQTradePage _success;
      private ErrorInfo _err;

      public HostingXQTradePage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getXQTradeHisPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingXQTradePage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQTradeHisPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQTradeHisPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private string _key;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          SetProperty(ref _key, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool key;
      }

      public getUserSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUserSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Key: ");
        sb.Append(Key);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingUserSetting _success;
      private ErrorInfo _err;

      public HostingUserSetting Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getUserSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingUserSetting();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUserSetting_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateUserSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private string _key;
      private HostingUserSetting _setting;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          SetProperty(ref _key, value);
        }
      }

      public HostingUserSetting Setting
      {
        get
        {
          return _setting;
        }
        set
        {
          __isset.setting = true;
          SetProperty(ref _setting, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool key;
        public bool setting;
      }

      public updateUserSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Setting = new HostingUserSetting();
                Setting.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateUserSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Setting != null && __isset.setting) {
          field.Name = "setting";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Setting.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateUserSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Key: ");
        sb.Append(Key);
        sb.Append(",Setting: ");
        sb.Append(Setting== null ? "<null>" : Setting.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateUserSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public updateUserSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateUserSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateUserSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserSettingVersion_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private string _key;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          SetProperty(ref _key, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool key;
      }

      public getUserSettingVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserSettingVersion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUserSettingVersion_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Key: ");
        sb.Append(Key);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserSettingVersion_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private int _success;
      private ErrorInfo _err;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getUserSettingVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserSettingVersion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUserSettingVersion_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSAWRUTListPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private QueryHostingSAWRUItemListOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public QueryHostingSAWRUItemListOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOption;
        public bool pageOption;
      }

      public getSAWRUTListPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOption = new QueryHostingSAWRUItemListOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSAWRUTListPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSAWRUTListPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSAWRUTListPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private HostingSAWRUItemListPage _success;
      private ErrorInfo _err;

      public HostingSAWRUItemListPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getSAWRUTListPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new HostingSAWRUItemListPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSAWRUTListPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSAWRUTListPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSARUTBySubAccountId_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private THashSet<long> _subAccountIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public THashSet<long> SubAccountIds
      {
        get
        {
          return _subAccountIds;
        }
        set
        {
          __isset.subAccountIds = true;
          SetProperty(ref _subAccountIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountIds;
      }

      public getSARUTBySubAccountId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  SubAccountIds = new THashSet<long>();
                  TSet _set148 = iprot.ReadSetBegin();
                  for( int _i149 = 0; _i149 < _set148.Count; ++_i149)
                  {
                    long _elem150 = 0;
                    _elem150 = iprot.ReadI64();
                    SubAccountIds.Add(_elem150);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSARUTBySubAccountId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (SubAccountIds != null && __isset.subAccountIds) {
          field.Name = "subAccountIds";
          field.Type = TType.Set;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I64, SubAccountIds.Count));
            foreach (long _iter151 in SubAccountIds)
            {
              oprot.WriteI64(_iter151);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSARUTBySubAccountId_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountIds: ");
        if (SubAccountIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (long _iter152 in SubAccountIds)
          {
            sb.Append(_iter152.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSARUTBySubAccountId_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private Dictionary<long, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> _success;
      private ErrorInfo _err;

      public Dictionary<long, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getSARUTBySubAccountId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<long, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>>();
                  TMap _map153 = iprot.ReadMapBegin();
                  for( int _i154 = 0; _i154 < _map153.Count; ++_i154)
                  {
                    long _key155;
                    List<xueqiao.trade.hosting.HostingSubAccountRelatedItem> _val156;
                    _key155 = iprot.ReadI64();
                    {
                      _val156 = new List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>();
                      TList _list157 = iprot.ReadListBegin();
                      for( int _i158 = 0; _i158 < _list157.Count; ++_i158)
                      {
                        xueqiao.trade.hosting.HostingSubAccountRelatedItem _elem159 = new xueqiao.trade.hosting.HostingSubAccountRelatedItem();
                        _elem159 = new xueqiao.trade.hosting.HostingSubAccountRelatedItem();
                        _elem159.Read(iprot);
                        _val156.Add(_elem159);
                      }
                      iprot.ReadListEnd();
                    }
                    Success[_key155] = _val156;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSARUTBySubAccountId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I64, TType.List, Success.Count));
              foreach (long _iter160 in Success.Keys)
              {
                oprot.WriteI64(_iter160);
                {
                  oprot.WriteListBegin(new TList(TType.Struct, Success[_iter160].Count));
                  foreach (xueqiao.trade.hosting.HostingSubAccountRelatedItem _iter161 in Success[_iter160])
                  {
                    _iter161.Write(oprot);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSARUTBySubAccountId_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (long _iter162 in Success.Keys)
          {
            sb.Append(_iter162.ToString());
            sb.Append(":");
            sb.Append(Success[_iter162].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSARUTBySubUserId_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private THashSet<int> _subUserIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public THashSet<int> SubUserIds
      {
        get
        {
          return _subUserIds;
        }
        set
        {
          __isset.subUserIds = true;
          SetProperty(ref _subUserIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subUserIds;
      }

      public getSARUTBySubUserId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  SubUserIds = new THashSet<int>();
                  TSet _set163 = iprot.ReadSetBegin();
                  for( int _i164 = 0; _i164 < _set163.Count; ++_i164)
                  {
                    int _elem165 = 0;
                    _elem165 = iprot.ReadI32();
                    SubUserIds.Add(_elem165);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSARUTBySubUserId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (SubUserIds != null && __isset.subUserIds) {
          field.Name = "subUserIds";
          field.Type = TType.Set;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I32, SubUserIds.Count));
            foreach (int _iter166 in SubUserIds)
            {
              oprot.WriteI32(_iter166);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSARUTBySubUserId_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubUserIds: ");
        if (SubUserIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (int _iter167 in SubUserIds)
          {
            sb.Append(_iter167.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSARUTBySubUserId_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private Dictionary<int, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> _success;
      private ErrorInfo _err;

      public Dictionary<int, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getSARUTBySubUserId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<int, List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>>();
                  TMap _map168 = iprot.ReadMapBegin();
                  for( int _i169 = 0; _i169 < _map168.Count; ++_i169)
                  {
                    int _key170;
                    List<xueqiao.trade.hosting.HostingSubAccountRelatedItem> _val171;
                    _key170 = iprot.ReadI32();
                    {
                      _val171 = new List<xueqiao.trade.hosting.HostingSubAccountRelatedItem>();
                      TList _list172 = iprot.ReadListBegin();
                      for( int _i173 = 0; _i173 < _list172.Count; ++_i173)
                      {
                        xueqiao.trade.hosting.HostingSubAccountRelatedItem _elem174 = new xueqiao.trade.hosting.HostingSubAccountRelatedItem();
                        _elem174 = new xueqiao.trade.hosting.HostingSubAccountRelatedItem();
                        _elem174.Read(iprot);
                        _val171.Add(_elem174);
                      }
                      iprot.ReadListEnd();
                    }
                    Success[_key170] = _val171;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSARUTBySubUserId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.List, Success.Count));
              foreach (int _iter175 in Success.Keys)
              {
                oprot.WriteI32(_iter175);
                {
                  oprot.WriteListBegin(new TList(TType.Struct, Success[_iter175].Count));
                  foreach (xueqiao.trade.hosting.HostingSubAccountRelatedItem _iter176 in Success[_iter175])
                  {
                    _iter176.Write(oprot);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSARUTBySubUserId_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (int _iter177 in Success.Keys)
          {
            sb.Append(_iter177.ToString());
            sb.Append(":");
            sb.Append(Success[_iter177].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class assignSubAccountRelatedUsers_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private THashSet<int> _relatedSubUserIds;
      private THashSet<int> _unRelatedSubUserIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public THashSet<int> RelatedSubUserIds
      {
        get
        {
          return _relatedSubUserIds;
        }
        set
        {
          __isset.relatedSubUserIds = true;
          SetProperty(ref _relatedSubUserIds, value);
        }
      }

      public THashSet<int> UnRelatedSubUserIds
      {
        get
        {
          return _unRelatedSubUserIds;
        }
        set
        {
          __isset.unRelatedSubUserIds = true;
          SetProperty(ref _unRelatedSubUserIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool relatedSubUserIds;
        public bool unRelatedSubUserIds;
      }

      public assignSubAccountRelatedUsers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Set) {
                {
                  RelatedSubUserIds = new THashSet<int>();
                  TSet _set178 = iprot.ReadSetBegin();
                  for( int _i179 = 0; _i179 < _set178.Count; ++_i179)
                  {
                    int _elem180 = 0;
                    _elem180 = iprot.ReadI32();
                    RelatedSubUserIds.Add(_elem180);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Set) {
                {
                  UnRelatedSubUserIds = new THashSet<int>();
                  TSet _set181 = iprot.ReadSetBegin();
                  for( int _i182 = 0; _i182 < _set181.Count; ++_i182)
                  {
                    int _elem183 = 0;
                    _elem183 = iprot.ReadI32();
                    UnRelatedSubUserIds.Add(_elem183);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("assignSubAccountRelatedUsers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (RelatedSubUserIds != null && __isset.relatedSubUserIds) {
          field.Name = "relatedSubUserIds";
          field.Type = TType.Set;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I32, RelatedSubUserIds.Count));
            foreach (int _iter184 in RelatedSubUserIds)
            {
              oprot.WriteI32(_iter184);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (UnRelatedSubUserIds != null && __isset.unRelatedSubUserIds) {
          field.Name = "unRelatedSubUserIds";
          field.Type = TType.Set;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I32, UnRelatedSubUserIds.Count));
            foreach (int _iter185 in UnRelatedSubUserIds)
            {
              oprot.WriteI32(_iter185);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("assignSubAccountRelatedUsers_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",RelatedSubUserIds: ");
        if (RelatedSubUserIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (int _iter186 in RelatedSubUserIds)
          {
            sb.Append(_iter186.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",UnRelatedSubUserIds: ");
        if (UnRelatedSubUserIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (int _iter187 in UnRelatedSubUserIds)
          {
            sb.Append(_iter187.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class assignSubAccountRelatedUsers_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public assignSubAccountRelatedUsers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("assignSubAccountRelatedUsers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("assignSubAccountRelatedUsers_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class renameSubAccount_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private string _subAccountName;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public string SubAccountName
      {
        get
        {
          return _subAccountName;
        }
        set
        {
          __isset.subAccountName = true;
          SetProperty(ref _subAccountName, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool subAccountName;
      }

      public renameSubAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                SubAccountName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("renameSubAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (SubAccountName != null && __isset.subAccountName) {
          field.Name = "subAccountName";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SubAccountName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("renameSubAccount_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",SubAccountName: ");
        sb.Append(SubAccountName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class renameSubAccount_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public renameSubAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("renameSubAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("renameSubAccount_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createSubAccount_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.HostingSubAccount _newSubAccount;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.HostingSubAccount NewSubAccount
      {
        get
        {
          return _newSubAccount;
        }
        set
        {
          __isset.newSubAccount = true;
          SetProperty(ref _newSubAccount, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool newSubAccount;
      }

      public createSubAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                NewSubAccount = new xueqiao.trade.hosting.HostingSubAccount();
                NewSubAccount.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createSubAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (NewSubAccount != null && __isset.newSubAccount) {
          field.Name = "newSubAccount";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          NewSubAccount.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createSubAccount_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",NewSubAccount: ");
        sb.Append(NewSubAccount== null ? "<null>" : NewSubAccount.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createSubAccount_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private long _success;
      private ErrorInfo _err;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public createSubAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createSubAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createSubAccount_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingSledContractPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.asset.thriftapi.ReqHostingSledContractPositionOption _option;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.asset.thriftapi.ReqHostingSledContractPositionOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
      }

      public getHostingSledContractPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.trade.hosting.asset.thriftapi.ReqHostingSledContractPositionOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingSledContractPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingSledContractPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingSledContractPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.asset.thriftapi.HostingSledContractPositionPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.asset.thriftapi.HostingSledContractPositionPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getHostingSledContractPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.asset.thriftapi.HostingSledContractPositionPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingSledContractPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingSledContractPosition_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingSubAccountFund_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.asset.thriftapi.ReqHostingFundOption _option;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.asset.thriftapi.ReqHostingFundOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
      }

      public getHostingSubAccountFund_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.trade.hosting.asset.thriftapi.ReqHostingFundOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingSubAccountFund_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingSubAccountFund_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingSubAccountFund_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.asset.thriftapi.HostingFundPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.asset.thriftapi.HostingFundPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getHostingSubAccountFund_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.asset.thriftapi.HostingFundPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingSubAccountFund_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingSubAccountFund_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeSubAccountFund_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.asset.thriftapi.FundChange _fundChange;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.asset.thriftapi.FundChange FundChange
      {
        get
        {
          return _fundChange;
        }
        set
        {
          __isset.fundChange = true;
          SetProperty(ref _fundChange, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool fundChange;
      }

      public changeSubAccountFund_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                FundChange = new xueqiao.trade.hosting.asset.thriftapi.FundChange();
                FundChange.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changeSubAccountFund_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FundChange != null && __isset.fundChange) {
          field.Name = "fundChange";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          FundChange.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changeSubAccountFund_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",FundChange: ");
        sb.Append(FundChange== null ? "<null>" : FundChange.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeSubAccountFund_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public changeSubAccountFund_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changeSubAccountFund_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changeSubAccountFund_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setSubAccountCreditAmount_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.asset.thriftapi.CreditAmountChange _amountChange;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.asset.thriftapi.CreditAmountChange AmountChange
      {
        get
        {
          return _amountChange;
        }
        set
        {
          __isset.amountChange = true;
          SetProperty(ref _amountChange, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool amountChange;
      }

      public setSubAccountCreditAmount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                AmountChange = new xueqiao.trade.hosting.asset.thriftapi.CreditAmountChange();
                AmountChange.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setSubAccountCreditAmount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AmountChange != null && __isset.amountChange) {
          field.Name = "amountChange";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          AmountChange.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setSubAccountCreditAmount_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",AmountChange: ");
        sb.Append(AmountChange== null ? "<null>" : AmountChange.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setSubAccountCreditAmount_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public setSubAccountCreditAmount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountFund();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setSubAccountCreditAmount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setSubAccountCreditAmount_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAssetPositionTradeDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.asset.thriftapi.ReqHostingAssetTradeDetailOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.asset.thriftapi.ReqHostingAssetTradeDetailOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
        public bool pageOption;
      }

      public getAssetPositionTradeDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.trade.hosting.asset.thriftapi.ReqHostingAssetTradeDetailOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAssetPositionTradeDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAssetPositionTradeDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAssetPositionTradeDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getAssetPositionTradeDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAssetPositionTradeDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAssetPositionTradeDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingSubAccountMoneyRecord_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.asset.thriftapi.ReqMoneyRecordOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.asset.thriftapi.ReqMoneyRecordOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
        public bool pageOption;
      }

      public getHostingSubAccountMoneyRecord_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.trade.hosting.asset.thriftapi.ReqMoneyRecordOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingSubAccountMoneyRecord_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingSubAccountMoneyRecord_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHostingSubAccountMoneyRecord_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountMoneyRecordPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountMoneyRecordPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getHostingSubAccountMoneyRecord_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.asset.thriftapi.HostingSubAccountMoneyRecordPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHostingSubAccountMoneyRecord_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHostingSubAccountMoneyRecord_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSubAccountFundHistory_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.asset.thriftapi.ReqSubAccountFundHistoryOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.asset.thriftapi.ReqSubAccountFundHistoryOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
        public bool pageOption;
      }

      public getSubAccountFundHistory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.trade.hosting.asset.thriftapi.ReqSubAccountFundHistoryOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSubAccountFundHistory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSubAccountFundHistory_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSubAccountFundHistory_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.asset.thriftapi.HostingFundPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.asset.thriftapi.HostingFundPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getSubAccountFundHistory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.asset.thriftapi.HostingFundPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSubAccountFundHistory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSubAccountFundHistory_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSubAccountPositionHistory_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionDetailOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionDetailOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
        public bool pageOption;
      }

      public getSubAccountPositionHistory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionDetailOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSubAccountPositionHistory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSubAccountPositionHistory_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSubAccountPositionHistory_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.asset.thriftapi.SettlementPositionDetailPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.asset.thriftapi.SettlementPositionDetailPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getSubAccountPositionHistory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.asset.thriftapi.SettlementPositionDetailPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSubAccountPositionHistory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSubAccountPositionHistory_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSubAccountPositionHistoryTradeDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionTradeDetailOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionTradeDetailOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
        public bool pageOption;
      }

      public getSubAccountPositionHistoryTradeDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.trade.hosting.asset.thriftapi.ReqSettlementPositionTradeDetailOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSubAccountPositionHistoryTradeDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSubAccountPositionHistoryTradeDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSubAccountPositionHistoryTradeDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getSubAccountPositionHistoryTradeDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSubAccountPositionHistoryTradeDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSubAccountPositionHistoryTradeDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteExpiredContractPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private long _sledContractId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public long SledContractId
      {
        get
        {
          return _sledContractId;
        }
        set
        {
          __isset.sledContractId = true;
          SetProperty(ref _sledContractId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool sledContractId;
      }

      public deleteExpiredContractPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                SledContractId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteExpiredContractPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.sledContractId) {
          field.Name = "sledContractId";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SledContractId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteExpiredContractPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",SledContractId: ");
        sb.Append(SledContractId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteExpiredContractPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public deleteExpiredContractPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteExpiredContractPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteExpiredContractPosition_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountFundNow_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _tradeAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long TradeAccountId
      {
        get
        {
          return _tradeAccountId;
        }
        set
        {
          __isset.tradeAccountId = true;
          SetProperty(ref _tradeAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool tradeAccountId;
      }

      public getTradeAccountFundNow_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TradeAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountFundNow_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.tradeAccountId) {
          field.Name = "tradeAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TradeAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountFundNow_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",TradeAccountId: ");
        sb.Append(TradeAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountFundNow_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<HostingTAFundItem> _success;
      private ErrorInfo _err;

      public List<HostingTAFundItem> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getTradeAccountFundNow_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<HostingTAFundItem>();
                  TList _list188 = iprot.ReadListBegin();
                  for( int _i189 = 0; _i189 < _list188.Count; ++_i189)
                  {
                    HostingTAFundItem _elem190 = new HostingTAFundItem();
                    _elem190 = new HostingTAFundItem();
                    _elem190.Read(iprot);
                    Success.Add(_elem190);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountFundNow_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (HostingTAFundItem _iter191 in Success)
              {
                _iter191.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountFundNow_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (HostingTAFundItem _iter192 in Success)
          {
            sb.Append(_iter192.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountFundHis_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _tradeAccountId;
      private string _fundDateBegin;
      private string _fundDateEnd;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long TradeAccountId
      {
        get
        {
          return _tradeAccountId;
        }
        set
        {
          __isset.tradeAccountId = true;
          SetProperty(ref _tradeAccountId, value);
        }
      }

      public string FundDateBegin
      {
        get
        {
          return _fundDateBegin;
        }
        set
        {
          __isset.fundDateBegin = true;
          SetProperty(ref _fundDateBegin, value);
        }
      }

      public string FundDateEnd
      {
        get
        {
          return _fundDateEnd;
        }
        set
        {
          __isset.fundDateEnd = true;
          SetProperty(ref _fundDateEnd, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool tradeAccountId;
        public bool fundDateBegin;
        public bool fundDateEnd;
      }

      public getTradeAccountFundHis_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TradeAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                FundDateBegin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                FundDateEnd = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountFundHis_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.tradeAccountId) {
          field.Name = "tradeAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TradeAccountId);
          oprot.WriteFieldEnd();
        }
        if (FundDateBegin != null && __isset.fundDateBegin) {
          field.Name = "fundDateBegin";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FundDateBegin);
          oprot.WriteFieldEnd();
        }
        if (FundDateEnd != null && __isset.fundDateEnd) {
          field.Name = "fundDateEnd";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FundDateEnd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountFundHis_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",TradeAccountId: ");
        sb.Append(TradeAccountId);
        sb.Append(",FundDateBegin: ");
        sb.Append(FundDateBegin);
        sb.Append(",FundDateEnd: ");
        sb.Append(FundDateEnd);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountFundHis_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<HostingTAFundHisItem> _success;
      private ErrorInfo _err;

      public List<HostingTAFundHisItem> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getTradeAccountFundHis_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<HostingTAFundHisItem>();
                  TList _list193 = iprot.ReadListBegin();
                  for( int _i194 = 0; _i194 < _list193.Count; ++_i194)
                  {
                    HostingTAFundHisItem _elem195 = new HostingTAFundHisItem();
                    _elem195 = new HostingTAFundHisItem();
                    _elem195.Read(iprot);
                    Success.Add(_elem195);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountFundHis_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (HostingTAFundHisItem _iter196 in Success)
              {
                _iter196.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountFundHis_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (HostingTAFundHisItem _iter197 in Success)
          {
            sb.Append(_iter197.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountSettlementInfos_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _tradeAccountId;
      private string _settlementDateBegin;
      private string _settlementDateEnd;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long TradeAccountId
      {
        get
        {
          return _tradeAccountId;
        }
        set
        {
          __isset.tradeAccountId = true;
          SetProperty(ref _tradeAccountId, value);
        }
      }

      public string SettlementDateBegin
      {
        get
        {
          return _settlementDateBegin;
        }
        set
        {
          __isset.settlementDateBegin = true;
          SetProperty(ref _settlementDateBegin, value);
        }
      }

      public string SettlementDateEnd
      {
        get
        {
          return _settlementDateEnd;
        }
        set
        {
          __isset.settlementDateEnd = true;
          SetProperty(ref _settlementDateEnd, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool tradeAccountId;
        public bool settlementDateBegin;
        public bool settlementDateEnd;
      }

      public getTradeAccountSettlementInfos_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TradeAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                SettlementDateBegin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                SettlementDateEnd = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountSettlementInfos_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.tradeAccountId) {
          field.Name = "tradeAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TradeAccountId);
          oprot.WriteFieldEnd();
        }
        if (SettlementDateBegin != null && __isset.settlementDateBegin) {
          field.Name = "settlementDateBegin";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SettlementDateBegin);
          oprot.WriteFieldEnd();
        }
        if (SettlementDateEnd != null && __isset.settlementDateEnd) {
          field.Name = "settlementDateEnd";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SettlementDateEnd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountSettlementInfos_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",TradeAccountId: ");
        sb.Append(TradeAccountId);
        sb.Append(",SettlementDateBegin: ");
        sb.Append(SettlementDateBegin);
        sb.Append(",SettlementDateEnd: ");
        sb.Append(SettlementDateEnd);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountSettlementInfos_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo> _success;
      private ErrorInfo _err;

      public List<xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getTradeAccountSettlementInfos_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo>();
                  TList _list198 = iprot.ReadListBegin();
                  for( int _i199 = 0; _i199 < _list198.Count; ++_i199)
                  {
                    xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo _elem200 = new xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo();
                    _elem200 = new xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo();
                    _elem200.Read(iprot);
                    Success.Add(_elem200);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountSettlementInfos_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo _iter201 in Success)
              {
                _iter201.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountSettlementInfos_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo _iter202 in Success)
          {
            sb.Append(_iter202.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountSettlementInfosWithRelatedTime_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _tradeAccountId;
      private string _settlementDateBegin;
      private string _settlementDateEnd;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long TradeAccountId
      {
        get
        {
          return _tradeAccountId;
        }
        set
        {
          __isset.tradeAccountId = true;
          SetProperty(ref _tradeAccountId, value);
        }
      }

      public string SettlementDateBegin
      {
        get
        {
          return _settlementDateBegin;
        }
        set
        {
          __isset.settlementDateBegin = true;
          SetProperty(ref _settlementDateBegin, value);
        }
      }

      public string SettlementDateEnd
      {
        get
        {
          return _settlementDateEnd;
        }
        set
        {
          __isset.settlementDateEnd = true;
          SetProperty(ref _settlementDateEnd, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool tradeAccountId;
        public bool settlementDateBegin;
        public bool settlementDateEnd;
      }

      public getTradeAccountSettlementInfosWithRelatedTime_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TradeAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                SettlementDateBegin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                SettlementDateEnd = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountSettlementInfosWithRelatedTime_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.tradeAccountId) {
          field.Name = "tradeAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TradeAccountId);
          oprot.WriteFieldEnd();
        }
        if (SettlementDateBegin != null && __isset.settlementDateBegin) {
          field.Name = "settlementDateBegin";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SettlementDateBegin);
          oprot.WriteFieldEnd();
        }
        if (SettlementDateEnd != null && __isset.settlementDateEnd) {
          field.Name = "settlementDateEnd";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SettlementDateEnd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountSettlementInfosWithRelatedTime_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",TradeAccountId: ");
        sb.Append(TradeAccountId);
        sb.Append(",SettlementDateBegin: ");
        sb.Append(SettlementDateBegin);
        sb.Append(",SettlementDateEnd: ");
        sb.Append(SettlementDateEnd);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountSettlementInfosWithRelatedTime_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<TradeAccountSettlementInfoWithRelatedTime> _success;
      private ErrorInfo _err;

      public List<TradeAccountSettlementInfoWithRelatedTime> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getTradeAccountSettlementInfosWithRelatedTime_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TradeAccountSettlementInfoWithRelatedTime>();
                  TList _list203 = iprot.ReadListBegin();
                  for( int _i204 = 0; _i204 < _list203.Count; ++_i204)
                  {
                    TradeAccountSettlementInfoWithRelatedTime _elem205 = new TradeAccountSettlementInfoWithRelatedTime();
                    _elem205 = new TradeAccountSettlementInfoWithRelatedTime();
                    _elem205.Read(iprot);
                    Success.Add(_elem205);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountSettlementInfosWithRelatedTime_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TradeAccountSettlementInfoWithRelatedTime _iter206 in Success)
              {
                _iter206.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountSettlementInfosWithRelatedTime_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (TradeAccountSettlementInfoWithRelatedTime _iter207 in Success)
          {
            sb.Append(_iter207.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountPositionTradeDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private ReqTradeAccountPositionOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public ReqTradeAccountPositionOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
        public bool pageOption;
      }

      public getTradeAccountPositionTradeDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new ReqTradeAccountPositionOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountPositionTradeDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountPositionTradeDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTradeAccountPositionTradeDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getTradeAccountPositionTradeDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.asset.thriftapi.AssetTradeDetailPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTradeAccountPositionTradeDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTradeAccountPositionTradeDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionVerify_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionVerifyOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionVerifyOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
        public bool pageOption;
      }

      public reqPositionVerify_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionVerifyOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionVerify_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionVerify_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionVerify_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.adjust.thriftapi.PositionVerifyPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionVerifyPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqPositionVerify_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.adjust.thriftapi.PositionVerifyPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionVerify_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionVerify_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionDifference_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionDifferenceOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionDifferenceOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
        public bool pageOption;
      }

      public reqPositionDifference_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionDifferenceOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionDifference_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionDifference_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionDifference_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.adjust.thriftapi.PositionDifferencePage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionDifferencePage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqPositionDifference_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.adjust.thriftapi.PositionDifferencePage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionDifference_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionDifference_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class manualInputPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput> _positionManualInputs;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput> PositionManualInputs
      {
        get
        {
          return _positionManualInputs;
        }
        set
        {
          __isset.positionManualInputs = true;
          SetProperty(ref _positionManualInputs, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool positionManualInputs;
      }

      public manualInputPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  PositionManualInputs = new List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput>();
                  TList _list208 = iprot.ReadListBegin();
                  for( int _i209 = 0; _i209 < _list208.Count; ++_i209)
                  {
                    xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput _elem210 = new xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput();
                    _elem210 = new xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput();
                    _elem210.Read(iprot);
                    PositionManualInputs.Add(_elem210);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("manualInputPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PositionManualInputs != null && __isset.positionManualInputs) {
          field.Name = "positionManualInputs";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, PositionManualInputs.Count));
            foreach (xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput _iter211 in PositionManualInputs)
            {
              _iter211.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("manualInputPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",PositionManualInputs: ");
        if (PositionManualInputs == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (xueqiao.trade.hosting.position.adjust.thriftapi.PositionManualInput _iter212 in PositionManualInputs)
          {
            sb.Append(_iter212.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class manualInputPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.adjust.thriftapi.ManualInputPositionResp _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.adjust.thriftapi.ManualInputPositionResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public manualInputPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.adjust.thriftapi.ManualInputPositionResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("manualInputPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("manualInputPosition_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionUnassigned_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionUnassignedOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionUnassignedOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
        public bool pageOption;
      }

      public reqPositionUnassigned_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionUnassignedOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionUnassigned_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionUnassigned_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionUnassigned_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.adjust.thriftapi.PositionUnassignedPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionUnassignedPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqPositionUnassigned_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.adjust.thriftapi.PositionUnassignedPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionUnassigned_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionUnassigned_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class assignPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption> _assignOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption> AssignOption
      {
        get
        {
          return _assignOption;
        }
        set
        {
          __isset.assignOption = true;
          SetProperty(ref _assignOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool assignOption;
      }

      public assignPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  AssignOption = new List<xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption>();
                  TList _list213 = iprot.ReadListBegin();
                  for( int _i214 = 0; _i214 < _list213.Count; ++_i214)
                  {
                    xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption _elem215 = new xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption();
                    _elem215 = new xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption();
                    _elem215.Read(iprot);
                    AssignOption.Add(_elem215);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("assignPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AssignOption != null && __isset.assignOption) {
          field.Name = "assignOption";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, AssignOption.Count));
            foreach (xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption _iter216 in AssignOption)
            {
              _iter216.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("assignPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",AssignOption: ");
        if (AssignOption == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignOption _iter217 in AssignOption)
          {
            sb.Append(_iter217.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class assignPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public assignPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("assignPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("assignPosition_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionEditLock_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private string _lockKey;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public string LockKey
      {
        get
        {
          return _lockKey;
        }
        set
        {
          __isset.lockKey = true;
          SetProperty(ref _lockKey, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool lockKey;
      }

      public reqPositionEditLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                LockKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionEditLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LockKey != null && __isset.lockKey) {
          field.Name = "lockKey";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LockKey);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionEditLock_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",LockKey: ");
        sb.Append(LockKey);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionEditLock_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqPositionEditLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionEditLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionEditLock_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addPositionEditLock_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock _positionEditLock;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock PositionEditLock
      {
        get
        {
          return _positionEditLock;
        }
        set
        {
          __isset.positionEditLock = true;
          SetProperty(ref _positionEditLock, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool positionEditLock;
      }

      public addPositionEditLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PositionEditLock = new xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock();
                PositionEditLock.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addPositionEditLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PositionEditLock != null && __isset.positionEditLock) {
          field.Name = "positionEditLock";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PositionEditLock.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addPositionEditLock_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",PositionEditLock: ");
        sb.Append(PositionEditLock== null ? "<null>" : PositionEditLock.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addPositionEditLock_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public addPositionEditLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addPositionEditLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addPositionEditLock_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removePositionEditLock_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock _positionEditLock;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock PositionEditLock
      {
        get
        {
          return _positionEditLock;
        }
        set
        {
          __isset.positionEditLock = true;
          SetProperty(ref _positionEditLock, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool positionEditLock;
      }

      public removePositionEditLock_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PositionEditLock = new xueqiao.trade.hosting.position.adjust.thriftapi.PositionEditLock();
                PositionEditLock.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removePositionEditLock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PositionEditLock != null && __isset.positionEditLock) {
          field.Name = "positionEditLock";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PositionEditLock.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removePositionEditLock_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",PositionEditLock: ");
        sb.Append(PositionEditLock== null ? "<null>" : PositionEditLock.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removePositionEditLock_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public removePositionEditLock_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removePositionEditLock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removePositionEditLock_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqDailyPositionDifference_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.adjust.thriftapi.ReqDailyPositionDifferenceOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.ReqDailyPositionDifferenceOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
        public bool pageOption;
      }

      public reqDailyPositionDifference_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.trade.hosting.position.adjust.thriftapi.ReqDailyPositionDifferenceOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqDailyPositionDifference_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqDailyPositionDifference_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqDailyPositionDifference_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifferencePage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifferencePage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqDailyPositionDifference_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifferencePage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqDailyPositionDifference_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqDailyPositionDifference_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateDailyPositionDifferenceNote_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifference _difference;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifference Difference
      {
        get
        {
          return _difference;
        }
        set
        {
          __isset.difference = true;
          SetProperty(ref _difference, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool difference;
      }

      public updateDailyPositionDifferenceNote_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Difference = new xueqiao.trade.hosting.position.adjust.thriftapi.DailyPositionDifference();
                Difference.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateDailyPositionDifferenceNote_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Difference != null && __isset.difference) {
          field.Name = "difference";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Difference.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateDailyPositionDifferenceNote_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Difference: ");
        sb.Append(Difference== null ? "<null>" : Difference.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateDailyPositionDifferenceNote_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public updateDailyPositionDifferenceNote_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateDailyPositionDifferenceNote_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateDailyPositionDifferenceNote_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionAssigned_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionAssignedOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionAssignedOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
        public bool pageOption;
      }

      public reqPositionAssigned_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.trade.hosting.position.adjust.thriftapi.ReqPositionAssignedOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionAssigned_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionAssigned_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqPositionAssigned_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignedPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignedPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqPositionAssigned_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.adjust.thriftapi.PositionAssignedPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqPositionAssigned_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqPositionAssigned_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class contructCompose_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.statis.StatContructComposeReq _contructComposeReq;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.statis.StatContructComposeReq ContructComposeReq
      {
        get
        {
          return _contructComposeReq;
        }
        set
        {
          __isset.contructComposeReq = true;
          SetProperty(ref _contructComposeReq, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool contructComposeReq;
      }

      public contructCompose_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                ContructComposeReq = new xueqiao.trade.hosting.position.statis.StatContructComposeReq();
                ContructComposeReq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("contructCompose_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ContructComposeReq != null && __isset.contructComposeReq) {
          field.Name = "contructComposeReq";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          ContructComposeReq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("contructCompose_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",ContructComposeReq: ");
        sb.Append(ContructComposeReq== null ? "<null>" : ContructComposeReq.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class contructCompose_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public contructCompose_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("contructCompose_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("contructCompose_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class disassembleCompose_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.statis.DisassembleComposePositionReq _disassembleComposePositionReq;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.statis.DisassembleComposePositionReq DisassembleComposePositionReq
      {
        get
        {
          return _disassembleComposePositionReq;
        }
        set
        {
          __isset.disassembleComposePositionReq = true;
          SetProperty(ref _disassembleComposePositionReq, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool disassembleComposePositionReq;
      }

      public disassembleCompose_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                DisassembleComposePositionReq = new xueqiao.trade.hosting.position.statis.DisassembleComposePositionReq();
                DisassembleComposePositionReq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("disassembleCompose_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DisassembleComposePositionReq != null && __isset.disassembleComposePositionReq) {
          field.Name = "disassembleComposePositionReq";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          DisassembleComposePositionReq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("disassembleCompose_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",DisassembleComposePositionReq: ");
        sb.Append(DisassembleComposePositionReq== null ? "<null>" : DisassembleComposePositionReq.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class disassembleCompose_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public disassembleCompose_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("disassembleCompose_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("disassembleCompose_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchClosePosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.statis.BatchClosedPositionReq _batchClosedPositionReq;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.statis.BatchClosedPositionReq BatchClosedPositionReq
      {
        get
        {
          return _batchClosedPositionReq;
        }
        set
        {
          __isset.batchClosedPositionReq = true;
          SetProperty(ref _batchClosedPositionReq, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool batchClosedPositionReq;
      }

      public batchClosePosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                BatchClosedPositionReq = new xueqiao.trade.hosting.position.statis.BatchClosedPositionReq();
                BatchClosedPositionReq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchClosePosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (BatchClosedPositionReq != null && __isset.batchClosedPositionReq) {
          field.Name = "batchClosedPositionReq";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          BatchClosedPositionReq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchClosePosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",BatchClosedPositionReq: ");
        sb.Append(BatchClosedPositionReq== null ? "<null>" : BatchClosedPositionReq.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchClosePosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public batchClosePosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchClosePosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchClosePosition_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class recoverClosedPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private string _targetKey;
      private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType _targetType;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public string TargetKey
      {
        get
        {
          return _targetKey;
        }
        set
        {
          __isset.targetKey = true;
          SetProperty(ref _targetKey, value);
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType"/>
      /// </summary>
      public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType TargetType
      {
        get
        {
          return _targetType;
        }
        set
        {
          __isset.targetType = true;
          SetProperty(ref _targetType, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool targetKey;
        public bool targetType;
      }

      public recoverClosedPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                TargetKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                TargetType = (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("recoverClosedPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (TargetKey != null && __isset.targetKey) {
          field.Name = "targetKey";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TargetKey);
          oprot.WriteFieldEnd();
        }
        if (__isset.targetType) {
          field.Name = "targetType";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)TargetType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("recoverClosedPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",TargetKey: ");
        sb.Append(TargetKey);
        sb.Append(",TargetType: ");
        sb.Append(TargetType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class recoverClosedPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public recoverClosedPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("recoverClosedPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("recoverClosedPosition_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mergeToCompose_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.statis.StatMergeToComposeReq _mergeToComposeReq;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.statis.StatMergeToComposeReq MergeToComposeReq
      {
        get
        {
          return _mergeToComposeReq;
        }
        set
        {
          __isset.mergeToComposeReq = true;
          SetProperty(ref _mergeToComposeReq, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool mergeToComposeReq;
      }

      public mergeToCompose_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                MergeToComposeReq = new xueqiao.trade.hosting.position.statis.StatMergeToComposeReq();
                MergeToComposeReq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mergeToCompose_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MergeToComposeReq != null && __isset.mergeToComposeReq) {
          field.Name = "mergeToComposeReq";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          MergeToComposeReq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mergeToCompose_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",MergeToComposeReq: ");
        sb.Append(MergeToComposeReq== null ? "<null>" : MergeToComposeReq.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class mergeToCompose_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public mergeToCompose_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mergeToCompose_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mergeToCompose_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteExpiredStatContractPosition_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private long _sledContractId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public long SledContractId
      {
        get
        {
          return _sledContractId;
        }
        set
        {
          __isset.sledContractId = true;
          SetProperty(ref _sledContractId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool sledContractId;
      }

      public deleteExpiredStatContractPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                SledContractId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteExpiredStatContractPosition_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.sledContractId) {
          field.Name = "sledContractId";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SledContractId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteExpiredStatContractPosition_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",SledContractId: ");
        sb.Append(SledContractId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteExpiredStatContractPosition_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public deleteExpiredStatContractPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteExpiredStatContractPosition_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteExpiredStatContractPosition_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionSummaryPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOption;
        public bool pageOption;
      }

      public queryStatPositionSummaryPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOption = new xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionSummaryPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionSummaryPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionSummaryPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.statis.StatPositionSummaryPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.statis.StatPositionSummaryPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryStatPositionSummaryPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.statis.StatPositionSummaryPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionSummaryPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionSummaryPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionItemPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.statis.QueryStatPositionItemOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.statis.QueryStatPositionItemOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOption;
        public bool pageOption;
      }

      public queryStatPositionItemPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOption = new xueqiao.trade.hosting.position.statis.QueryStatPositionItemOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionItemPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionItemPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionItemPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.statis.StatPositionItemPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.statis.StatPositionItemPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryStatPositionItemPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.statis.StatPositionItemPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionItemPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionItemPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryCurrentDayStatClosedPositionPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private string _targetKey;
      private xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType _targetType;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public string TargetKey
      {
        get
        {
          return _targetKey;
        }
        set
        {
          __isset.targetKey = true;
          SetProperty(ref _targetKey, value);
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType"/>
      /// </summary>
      public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType TargetType
      {
        get
        {
          return _targetType;
        }
        set
        {
          __isset.targetType = true;
          SetProperty(ref _targetType, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool targetKey;
        public bool targetType;
      }

      public queryCurrentDayStatClosedPositionPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                TargetKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                TargetType = (xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryCurrentDayStatClosedPositionPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (TargetKey != null && __isset.targetKey) {
          field.Name = "targetKey";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TargetKey);
          oprot.WriteFieldEnd();
        }
        if (__isset.targetType) {
          field.Name = "targetType";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)TargetType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryCurrentDayStatClosedPositionPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",TargetKey: ");
        sb.Append(TargetKey);
        sb.Append(",TargetType: ");
        sb.Append(TargetType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryCurrentDayStatClosedPositionPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryCurrentDayStatClosedPositionPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryCurrentDayStatClosedPositionPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryCurrentDayStatClosedPositionPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatClosedPositionDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.statis.QueryStatClosedPositionItemOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.statis.QueryStatClosedPositionItemOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOption;
        public bool pageOption;
      }

      public queryStatClosedPositionDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOption = new xueqiao.trade.hosting.position.statis.QueryStatClosedPositionItemOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatClosedPositionDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatClosedPositionDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatClosedPositionDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.statis.StatClosedPositionDetail _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDetail Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryStatClosedPositionDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.statis.StatClosedPositionDetail();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatClosedPositionDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatClosedPositionDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryArchivedClosedPositionPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.statis.QueryStatClosedPositionDateSummaryOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.statis.QueryStatClosedPositionDateSummaryOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOption;
        public bool pageOption;
      }

      public queryArchivedClosedPositionPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOption = new xueqiao.trade.hosting.position.statis.QueryStatClosedPositionDateSummaryOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryArchivedClosedPositionPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryArchivedClosedPositionPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryArchivedClosedPositionPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryArchivedClosedPositionPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryArchivedClosedPositionPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryArchivedClosedPositionPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryArchivedClosedPositionDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.statis.QueryStatArchiveItemOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.statis.QueryStatArchiveItemOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOption;
        public bool pageOption;
      }

      public queryArchivedClosedPositionDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOption = new xueqiao.trade.hosting.position.statis.QueryStatArchiveItemOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryArchivedClosedPositionDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryArchivedClosedPositionDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryArchivedClosedPositionDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.statis.StatClosedPositionDetail _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDetail Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryArchivedClosedPositionDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.statis.StatClosedPositionDetail();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryArchivedClosedPositionDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryArchivedClosedPositionDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionSummaryExPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOption;
        public bool pageOption;
      }

      public queryStatPositionSummaryExPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOption = new xueqiao.trade.hosting.position.statis.QueryStatPositionSummaryOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionSummaryExPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionSummaryExPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionSummaryExPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.statis.StatPositionSummaryExPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.statis.StatPositionSummaryExPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryStatPositionSummaryExPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.statis.StatPositionSummaryExPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionSummaryExPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionSummaryExPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionUnitPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.statis.QueryStatPositionUnitOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.statis.QueryStatPositionUnitOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOption;
        public bool pageOption;
      }

      public queryStatPositionUnitPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOption = new xueqiao.trade.hosting.position.statis.QueryStatPositionUnitOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionUnitPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionUnitPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryStatPositionUnitPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.statis.StatPositionUnitPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.statis.StatPositionUnitPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryStatPositionUnitPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.statis.StatPositionUnitPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryStatPositionUnitPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryStatPositionUnitPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryHistoryClosedPositionPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOption;
        public bool pageOption;
      }

      public queryHistoryClosedPositionPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOption = new xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryHistoryClosedPositionPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryHistoryClosedPositionPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryHistoryClosedPositionPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryHistoryClosedPositionPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.statis.StatClosedPositionDateSummaryPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryHistoryClosedPositionPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryHistoryClosedPositionPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryHistoryClosedPositionDetail_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption _queryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption QueryOption
      {
        get
        {
          return _queryOption;
        }
        set
        {
          __isset.queryOption = true;
          SetProperty(ref _queryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOption;
        public bool pageOption;
      }

      public queryHistoryClosedPositionDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOption = new xueqiao.trade.hosting.position.statis.QueryHistoryClosedPositionOption();
                QueryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryHistoryClosedPositionDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOption != null && __isset.queryOption) {
          field.Name = "queryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryHistoryClosedPositionDetail_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOption: ");
        sb.Append(QueryOption== null ? "<null>" : QueryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryHistoryClosedPositionDetail_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.statis.StatClosedPositionDetail _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.statis.StatClosedPositionDetail Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryHistoryClosedPositionDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.statis.StatClosedPositionDetail();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryHistoryClosedPositionDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryHistoryClosedPositionDetail_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQTradeLameTaskNotePage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private QueryXQTradeLameTaskNotePageOption _qryOption;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public QueryXQTradeLameTaskNotePageOption QryOption
      {
        get
        {
          return _qryOption;
        }
        set
        {
          __isset.qryOption = true;
          SetProperty(ref _qryOption, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool qryOption;
        public bool pageOption;
      }

      public getXQTradeLameTaskNotePage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QryOption = new QueryXQTradeLameTaskNotePageOption();
                QryOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQTradeLameTaskNotePage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QryOption != null && __isset.qryOption) {
          field.Name = "qryOption";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QryOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQTradeLameTaskNotePage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QryOption: ");
        sb.Append(QryOption== null ? "<null>" : QryOption.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getXQTradeLameTaskNotePage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.tasknote.thriftapi.HostingTaskNotePage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.tasknote.thriftapi.HostingTaskNotePage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getXQTradeLameTaskNotePage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.tasknote.thriftapi.HostingTaskNotePage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getXQTradeLameTaskNotePage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getXQTradeLameTaskNotePage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchDeleteXQTradeLameTaskNotes_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private THashSet<long> _xqTradeIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public THashSet<long> XqTradeIds
      {
        get
        {
          return _xqTradeIds;
        }
        set
        {
          __isset.xqTradeIds = true;
          SetProperty(ref _xqTradeIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool xqTradeIds;
      }

      public batchDeleteXQTradeLameTaskNotes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Set) {
                {
                  XqTradeIds = new THashSet<long>();
                  TSet _set218 = iprot.ReadSetBegin();
                  for( int _i219 = 0; _i219 < _set218.Count; ++_i219)
                  {
                    long _elem220 = 0;
                    _elem220 = iprot.ReadI64();
                    XqTradeIds.Add(_elem220);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchDeleteXQTradeLameTaskNotes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (XqTradeIds != null && __isset.xqTradeIds) {
          field.Name = "xqTradeIds";
          field.Type = TType.Set;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I64, XqTradeIds.Count));
            foreach (long _iter221 in XqTradeIds)
            {
              oprot.WriteI64(_iter221);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchDeleteXQTradeLameTaskNotes_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",XqTradeIds: ");
        if (XqTradeIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (long _iter222 in XqTradeIds)
          {
            sb.Append(_iter222.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchDeleteXQTradeLameTaskNotes_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private Dictionary<long, ErrorInfo> _success;
      private ErrorInfo _err;

      public Dictionary<long, ErrorInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public batchDeleteXQTradeLameTaskNotes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<long, ErrorInfo>();
                  TMap _map223 = iprot.ReadMapBegin();
                  for( int _i224 = 0; _i224 < _map223.Count; ++_i224)
                  {
                    long _key225;
                    ErrorInfo _val226;
                    _key225 = iprot.ReadI64();
                    _val226 = new ErrorInfo();
                    _val226.Read(iprot);
                    Success[_key225] = _val226;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchDeleteXQTradeLameTaskNotes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, Success.Count));
              foreach (long _iter227 in Success.Keys)
              {
                oprot.WriteI64(_iter227);
                Success[_iter227].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchDeleteXQTradeLameTaskNotes_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (long _iter228 in Success.Keys)
          {
            sb.Append(_iter228.ToString());
            sb.Append(":");
            sb.Append(Success[_iter228].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryMailBoxMessage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private ReqMailBoxMessageOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public ReqMailBoxMessageOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
        public bool pageOption;
      }

      public queryMailBoxMessage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new ReqMailBoxMessageOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryMailBoxMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryMailBoxMessage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryMailBoxMessage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.mailbox.user.message.thriftapi.UserMessagePage _success;
      private ErrorInfo _err;

      public xueqiao.mailbox.user.message.thriftapi.UserMessagePage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryMailBoxMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.mailbox.user.message.thriftapi.UserMessagePage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryMailBoxMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryMailBoxMessage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class markMessageAsRead_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private THashSet<long> _hostingMessageIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public THashSet<long> HostingMessageIds
      {
        get
        {
          return _hostingMessageIds;
        }
        set
        {
          __isset.hostingMessageIds = true;
          SetProperty(ref _hostingMessageIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool hostingMessageIds;
      }

      public markMessageAsRead_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  HostingMessageIds = new THashSet<long>();
                  TSet _set229 = iprot.ReadSetBegin();
                  for( int _i230 = 0; _i230 < _set229.Count; ++_i230)
                  {
                    long _elem231 = 0;
                    _elem231 = iprot.ReadI64();
                    HostingMessageIds.Add(_elem231);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("markMessageAsRead_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (HostingMessageIds != null && __isset.hostingMessageIds) {
          field.Name = "hostingMessageIds";
          field.Type = TType.Set;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I64, HostingMessageIds.Count));
            foreach (long _iter232 in HostingMessageIds)
            {
              oprot.WriteI64(_iter232);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("markMessageAsRead_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",HostingMessageIds: ");
        if (HostingMessageIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (long _iter233 in HostingMessageIds)
          {
            sb.Append(_iter233.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class markMessageAsRead_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private bool _success;
      private ErrorInfo _err;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public markMessageAsRead_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("markMessageAsRead_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("markMessageAsRead_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllSupportedItems_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
      }

      public getAllSupportedItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllSupportedItems_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAllSupportedItems_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllSupportedItems_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskSupportedItem> _success;
      private ErrorInfo _err;

      public List<xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskSupportedItem> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getAllSupportedItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskSupportedItem>();
                  TList _list234 = iprot.ReadListBegin();
                  for( int _i235 = 0; _i235 < _list234.Count; ++_i235)
                  {
                    xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskSupportedItem _elem236 = new xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskSupportedItem();
                    _elem236 = new xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskSupportedItem();
                    _elem236.Read(iprot);
                    Success.Add(_elem236);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllSupportedItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskSupportedItem _iter237 in Success)
              {
                _iter237.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAllSupportedItems_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskSupportedItem _iter238 in Success)
          {
            sb.Append(_iter238.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRiskRuleJointVersion_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
      }

      public getRiskRuleJointVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRiskRuleJointVersion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRiskRuleJointVersion_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRiskRuleJointVersion_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private int _success;
      private ErrorInfo _err;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getRiskRuleJointVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRiskRuleJointVersion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRiskRuleJointVersion_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRiskRuleJoint_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
      }

      public getRiskRuleJoint_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRiskRuleJoint_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRiskRuleJoint_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRiskRuleJoint_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getRiskRuleJoint_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRiskRuleJoint_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRiskRuleJoint_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetSupportedItems_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private int _version;
      private THashSet<string> _openedItemIds;
      private THashSet<string> _closedItemIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          SetProperty(ref _version, value);
        }
      }

      public THashSet<string> OpenedItemIds
      {
        get
        {
          return _openedItemIds;
        }
        set
        {
          __isset.openedItemIds = true;
          SetProperty(ref _openedItemIds, value);
        }
      }

      public THashSet<string> ClosedItemIds
      {
        get
        {
          return _closedItemIds;
        }
        set
        {
          __isset.closedItemIds = true;
          SetProperty(ref _closedItemIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool version;
        public bool openedItemIds;
        public bool closedItemIds;
      }

      public batchSetSupportedItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Version = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Set) {
                {
                  OpenedItemIds = new THashSet<string>();
                  TSet _set239 = iprot.ReadSetBegin();
                  for( int _i240 = 0; _i240 < _set239.Count; ++_i240)
                  {
                    string _elem241 = null;
                    _elem241 = iprot.ReadString();
                    OpenedItemIds.Add(_elem241);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Set) {
                {
                  ClosedItemIds = new THashSet<string>();
                  TSet _set242 = iprot.ReadSetBegin();
                  for( int _i243 = 0; _i243 < _set242.Count; ++_i243)
                  {
                    string _elem244 = null;
                    _elem244 = iprot.ReadString();
                    ClosedItemIds.Add(_elem244);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetSupportedItems_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.version) {
          field.Name = "version";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Version);
          oprot.WriteFieldEnd();
        }
        if (OpenedItemIds != null && __isset.openedItemIds) {
          field.Name = "openedItemIds";
          field.Type = TType.Set;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, OpenedItemIds.Count));
            foreach (string _iter245 in OpenedItemIds)
            {
              oprot.WriteString(_iter245);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ClosedItemIds != null && __isset.closedItemIds) {
          field.Name = "closedItemIds";
          field.Type = TType.Set;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, ClosedItemIds.Count));
            foreach (string _iter246 in ClosedItemIds)
            {
              oprot.WriteString(_iter246);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetSupportedItems_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",Version: ");
        sb.Append(Version);
        sb.Append(",OpenedItemIds: ");
        if (OpenedItemIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (string _iter247 in OpenedItemIds)
          {
            sb.Append(_iter247.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",ClosedItemIds: ");
        if (ClosedItemIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (string _iter248 in ClosedItemIds)
          {
            sb.Append(_iter248.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetSupportedItems_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public batchSetSupportedItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetSupportedItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetSupportedItems_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetTradedCommodityItems_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private int _version;
      private THashSet<long> _enabledCommodityIds;
      private THashSet<long> _disabledCommodityIds;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          SetProperty(ref _version, value);
        }
      }

      public THashSet<long> EnabledCommodityIds
      {
        get
        {
          return _enabledCommodityIds;
        }
        set
        {
          __isset.enabledCommodityIds = true;
          SetProperty(ref _enabledCommodityIds, value);
        }
      }

      public THashSet<long> DisabledCommodityIds
      {
        get
        {
          return _disabledCommodityIds;
        }
        set
        {
          __isset.disabledCommodityIds = true;
          SetProperty(ref _disabledCommodityIds, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool version;
        public bool enabledCommodityIds;
        public bool disabledCommodityIds;
      }

      public batchSetTradedCommodityItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Version = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Set) {
                {
                  EnabledCommodityIds = new THashSet<long>();
                  TSet _set249 = iprot.ReadSetBegin();
                  for( int _i250 = 0; _i250 < _set249.Count; ++_i250)
                  {
                    long _elem251 = 0;
                    _elem251 = iprot.ReadI64();
                    EnabledCommodityIds.Add(_elem251);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Set) {
                {
                  DisabledCommodityIds = new THashSet<long>();
                  TSet _set252 = iprot.ReadSetBegin();
                  for( int _i253 = 0; _i253 < _set252.Count; ++_i253)
                  {
                    long _elem254 = 0;
                    _elem254 = iprot.ReadI64();
                    DisabledCommodityIds.Add(_elem254);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetTradedCommodityItems_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.version) {
          field.Name = "version";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Version);
          oprot.WriteFieldEnd();
        }
        if (EnabledCommodityIds != null && __isset.enabledCommodityIds) {
          field.Name = "enabledCommodityIds";
          field.Type = TType.Set;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I64, EnabledCommodityIds.Count));
            foreach (long _iter255 in EnabledCommodityIds)
            {
              oprot.WriteI64(_iter255);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (DisabledCommodityIds != null && __isset.disabledCommodityIds) {
          field.Name = "disabledCommodityIds";
          field.Type = TType.Set;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I64, DisabledCommodityIds.Count));
            foreach (long _iter256 in DisabledCommodityIds)
            {
              oprot.WriteI64(_iter256);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetTradedCommodityItems_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",Version: ");
        sb.Append(Version);
        sb.Append(",EnabledCommodityIds: ");
        if (EnabledCommodityIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (long _iter257 in EnabledCommodityIds)
          {
            sb.Append(_iter257.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",DisabledCommodityIds: ");
        if (DisabledCommodityIds == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (long _iter258 in DisabledCommodityIds)
          {
            sb.Append(_iter258.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetTradedCommodityItems_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public batchSetTradedCommodityItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetTradedCommodityItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetTradedCommodityItems_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetGlobalRules_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private int _version;
      private Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem> _ruleItems;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          SetProperty(ref _version, value);
        }
      }

      public Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem> RuleItems
      {
        get
        {
          return _ruleItems;
        }
        set
        {
          __isset.ruleItems = true;
          SetProperty(ref _ruleItems, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool version;
        public bool ruleItems;
      }

      public batchSetGlobalRules_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Version = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Map) {
                {
                  RuleItems = new Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem>();
                  TMap _map259 = iprot.ReadMapBegin();
                  for( int _i260 = 0; _i260 < _map259.Count; ++_i260)
                  {
                    string _key261;
                    xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem _val262;
                    _key261 = iprot.ReadString();
                    _val262 = new xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem();
                    _val262.Read(iprot);
                    RuleItems[_key261] = _val262;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetGlobalRules_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.version) {
          field.Name = "version";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Version);
          oprot.WriteFieldEnd();
        }
        if (RuleItems != null && __isset.ruleItems) {
          field.Name = "ruleItems";
          field.Type = TType.Map;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, RuleItems.Count));
            foreach (string _iter263 in RuleItems.Keys)
            {
              oprot.WriteString(_iter263);
              RuleItems[_iter263].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetGlobalRules_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",Version: ");
        sb.Append(Version);
        sb.Append(",RuleItems: ");
        if (RuleItems == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (string _iter264 in RuleItems.Keys)
          {
            sb.Append(_iter264.ToString());
            sb.Append(":");
            sb.Append(RuleItems[_iter264].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetGlobalRules_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public batchSetGlobalRules_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetGlobalRules_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetGlobalRules_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetCommodityRules_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private int _version;
      private Dictionary<long, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem>> _rules;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          SetProperty(ref _version, value);
        }
      }

      public Dictionary<long, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem>> Rules
      {
        get
        {
          return _rules;
        }
        set
        {
          __isset.rules = true;
          SetProperty(ref _rules, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool version;
        public bool rules;
      }

      public batchSetCommodityRules_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Version = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Map) {
                {
                  Rules = new Dictionary<long, Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem>>();
                  TMap _map265 = iprot.ReadMapBegin();
                  for( int _i266 = 0; _i266 < _map265.Count; ++_i266)
                  {
                    long _key267;
                    Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem> _val268;
                    _key267 = iprot.ReadI64();
                    {
                      _val268 = new Dictionary<string, xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem>();
                      TMap _map269 = iprot.ReadMapBegin();
                      for( int _i270 = 0; _i270 < _map269.Count; ++_i270)
                      {
                        string _key271;
                        xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem _val272;
                        _key271 = iprot.ReadString();
                        _val272 = new xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleItem();
                        _val272.Read(iprot);
                        _val268[_key271] = _val272;
                      }
                      iprot.ReadMapEnd();
                    }
                    Rules[_key267] = _val268;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetCommodityRules_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.version) {
          field.Name = "version";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Version);
          oprot.WriteFieldEnd();
        }
        if (Rules != null && __isset.rules) {
          field.Name = "rules";
          field.Type = TType.Map;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I64, TType.Map, Rules.Count));
            foreach (long _iter273 in Rules.Keys)
            {
              oprot.WriteI64(_iter273);
              {
                oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Rules[_iter273].Count));
                foreach (string _iter274 in Rules[_iter273].Keys)
                {
                  oprot.WriteString(_iter274);
                  Rules[_iter273][_iter274].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetCommodityRules_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",Version: ");
        sb.Append(Version);
        sb.Append(",Rules: ");
        if (Rules == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("{");
          foreach (long _iter275 in Rules.Keys)
          {
            sb.Append(_iter275.ToString());
            sb.Append(":");
            sb.Append(Rules[_iter275].ToString());
            sb.Append(", ");
          }
          sb.Append("}");
        }
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class batchSetCommodityRules_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public batchSetCommodityRules_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batchSetCommodityRules_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batchSetCommodityRules_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setRiskEnabled_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private int _version;
      private bool _riskEnabled;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public int Version
      {
        get
        {
          return _version;
        }
        set
        {
          __isset.version = true;
          SetProperty(ref _version, value);
        }
      }

      public bool RiskEnabled
      {
        get
        {
          return _riskEnabled;
        }
        set
        {
          __isset.riskEnabled = true;
          SetProperty(ref _riskEnabled, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool version;
        public bool riskEnabled;
      }

      public setRiskEnabled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Version = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                RiskEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setRiskEnabled_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.version) {
          field.Name = "version";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Version);
          oprot.WriteFieldEnd();
        }
        if (__isset.riskEnabled) {
          field.Name = "riskEnabled";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(RiskEnabled);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setRiskEnabled_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",Version: ");
        sb.Append(Version);
        sb.Append(",RiskEnabled: ");
        sb.Append(RiskEnabled);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setRiskEnabled_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public setRiskEnabled_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskRuleJoint();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setRiskEnabled_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setRiskEnabled_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRiskFrameDataInfo_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
      }

      public getRiskFrameDataInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRiskFrameDataInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRiskFrameDataInfo_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRiskFrameDataInfo_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskFrameDataInfo _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskFrameDataInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getRiskFrameDataInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.risk.manager.thriftapi.HostingRiskFrameDataInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRiskFrameDataInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRiskFrameDataInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setGeneralMarginSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings _marginSettings;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings MarginSettings
      {
        get
        {
          return _marginSettings;
        }
        set
        {
          __isset.marginSettings = true;
          SetProperty(ref _marginSettings, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool marginSettings;
      }

      public setGeneralMarginSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                MarginSettings = new xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings();
                MarginSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setGeneralMarginSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MarginSettings != null && __isset.marginSettings) {
          field.Name = "marginSettings";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          MarginSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setGeneralMarginSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",MarginSettings: ");
        sb.Append(MarginSettings== null ? "<null>" : MarginSettings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setGeneralMarginSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public setGeneralMarginSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setGeneralMarginSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setGeneralMarginSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setGeneralCommissionSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings _commissionSettings;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings CommissionSettings
      {
        get
        {
          return _commissionSettings;
        }
        set
        {
          __isset.commissionSettings = true;
          SetProperty(ref _commissionSettings, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool commissionSettings;
      }

      public setGeneralCommissionSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                CommissionSettings = new xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings();
                CommissionSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setGeneralCommissionSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (CommissionSettings != null && __isset.commissionSettings) {
          field.Name = "commissionSettings";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          CommissionSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setGeneralCommissionSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",CommissionSettings: ");
        sb.Append(CommissionSettings== null ? "<null>" : CommissionSettings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setGeneralCommissionSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public setGeneralCommissionSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setGeneralCommissionSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setGeneralCommissionSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addSpecMarginSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings _marginSettings;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings MarginSettings
      {
        get
        {
          return _marginSettings;
        }
        set
        {
          __isset.marginSettings = true;
          SetProperty(ref _marginSettings, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool marginSettings;
      }

      public addSpecMarginSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                MarginSettings = new xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings();
                MarginSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addSpecMarginSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MarginSettings != null && __isset.marginSettings) {
          field.Name = "marginSettings";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          MarginSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addSpecMarginSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",MarginSettings: ");
        sb.Append(MarginSettings== null ? "<null>" : MarginSettings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addSpecMarginSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public addSpecMarginSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addSpecMarginSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addSpecMarginSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addSpecCommissionSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings _commissionSettings;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings CommissionSettings
      {
        get
        {
          return _commissionSettings;
        }
        set
        {
          __isset.commissionSettings = true;
          SetProperty(ref _commissionSettings, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool commissionSettings;
      }

      public addSpecCommissionSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                CommissionSettings = new xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings();
                CommissionSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addSpecCommissionSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (CommissionSettings != null && __isset.commissionSettings) {
          field.Name = "commissionSettings";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          CommissionSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addSpecCommissionSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",CommissionSettings: ");
        sb.Append(CommissionSettings== null ? "<null>" : CommissionSettings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addSpecCommissionSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public addSpecCommissionSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addSpecCommissionSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addSpecCommissionSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSpecMarginSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings _marginSettings;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings MarginSettings
      {
        get
        {
          return _marginSettings;
        }
        set
        {
          __isset.marginSettings = true;
          SetProperty(ref _marginSettings, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool marginSettings;
      }

      public updateSpecMarginSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                MarginSettings = new xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettings();
                MarginSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSpecMarginSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MarginSettings != null && __isset.marginSettings) {
          field.Name = "marginSettings";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          MarginSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSpecMarginSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",MarginSettings: ");
        sb.Append(MarginSettings== null ? "<null>" : MarginSettings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSpecMarginSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public updateSpecMarginSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSpecMarginSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSpecMarginSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSpecCommissionSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings _commissionSettings;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings CommissionSettings
      {
        get
        {
          return _commissionSettings;
        }
        set
        {
          __isset.commissionSettings = true;
          SetProperty(ref _commissionSettings, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool commissionSettings;
      }

      public updateSpecCommissionSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                CommissionSettings = new xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettings();
                CommissionSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSpecCommissionSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (CommissionSettings != null && __isset.commissionSettings) {
          field.Name = "commissionSettings";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          CommissionSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSpecCommissionSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",CommissionSettings: ");
        sb.Append(CommissionSettings== null ? "<null>" : CommissionSettings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSpecCommissionSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public updateSpecCommissionSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSpecCommissionSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSpecCommissionSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteSpecMarginSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private long _commodityId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public long CommodityId
      {
        get
        {
          return _commodityId;
        }
        set
        {
          __isset.commodityId = true;
          SetProperty(ref _commodityId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool commodityId;
      }

      public deleteSpecMarginSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                CommodityId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteSpecMarginSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.commodityId) {
          field.Name = "commodityId";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(CommodityId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteSpecMarginSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",CommodityId: ");
        sb.Append(CommodityId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteSpecMarginSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public deleteSpecMarginSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteSpecMarginSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteSpecMarginSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteSpecCommissionSetting_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;
      private long _commodityId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }

      public long CommodityId
      {
        get
        {
          return _commodityId;
        }
        set
        {
          __isset.commodityId = true;
          SetProperty(ref _commodityId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
        public bool commodityId;
      }

      public deleteSpecCommissionSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                CommodityId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteSpecCommissionSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        if (__isset.commodityId) {
          field.Name = "commodityId";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(CommodityId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteSpecCommissionSetting_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(",CommodityId: ");
        sb.Append(CommodityId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteSpecCommissionSetting_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public deleteSpecCommissionSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteSpecCommissionSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteSpecCommissionSetting_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQGeneralMarginSettings_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
      }

      public queryXQGeneralMarginSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQGeneralMarginSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQGeneralMarginSettings_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQGeneralMarginSettings_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryXQGeneralMarginSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralMarginSettings();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQGeneralMarginSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQGeneralMarginSettings_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQGeneralCommissionSettings_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private long _subAccountId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long SubAccountId
      {
        get
        {
          return _subAccountId;
        }
        set
        {
          __isset.subAccountId = true;
          SetProperty(ref _subAccountId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool subAccountId;
      }

      public queryXQGeneralCommissionSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                SubAccountId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQGeneralCommissionSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.subAccountId) {
          field.Name = "subAccountId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SubAccountId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQGeneralCommissionSettings_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",SubAccountId: ");
        sb.Append(SubAccountId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQGeneralCommissionSettings_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryXQGeneralCommissionSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.fee.thriftapi.XQGeneralCommissionSettings();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQGeneralCommissionSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQGeneralCommissionSettings_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQSpecMarginSettingPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions _queryOptions;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions QueryOptions
      {
        get
        {
          return _queryOptions;
        }
        set
        {
          __isset.queryOptions = true;
          SetProperty(ref _queryOptions, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOptions;
        public bool pageOption;
      }

      public queryXQSpecMarginSettingPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOptions = new xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions();
                QueryOptions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQSpecMarginSettingPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOptions != null && __isset.queryOptions) {
          field.Name = "queryOptions";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOptions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQSpecMarginSettingPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOptions: ");
        sb.Append(QueryOptions== null ? "<null>" : QueryOptions.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQSpecMarginSettingPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettingPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettingPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryXQSpecMarginSettingPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.fee.thriftapi.XQSpecMarginSettingPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQSpecMarginSettingPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQSpecMarginSettingPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQSpecCommissionSettingPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions _queryOptions;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions QueryOptions
      {
        get
        {
          return _queryOptions;
        }
        set
        {
          __isset.queryOptions = true;
          SetProperty(ref _queryOptions, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOptions;
        public bool pageOption;
      }

      public queryXQSpecCommissionSettingPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOptions = new xueqiao.trade.hosting.position.fee.thriftapi.QueryXQSpecSettingOptions();
                QueryOptions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQSpecCommissionSettingPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOptions != null && __isset.queryOptions) {
          field.Name = "queryOptions";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOptions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQSpecCommissionSettingPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOptions: ");
        sb.Append(QueryOptions== null ? "<null>" : QueryOptions.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQSpecCommissionSettingPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettingPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettingPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryXQSpecCommissionSettingPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.fee.thriftapi.XQSpecCommissionSettingPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQSpecCommissionSettingPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQSpecCommissionSettingPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryUpsideContractMarginPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions _queryOptions;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions QueryOptions
      {
        get
        {
          return _queryOptions;
        }
        set
        {
          __isset.queryOptions = true;
          SetProperty(ref _queryOptions, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOptions;
        public bool pageOption;
      }

      public queryUpsideContractMarginPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOptions = new xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions();
                QueryOptions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryUpsideContractMarginPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOptions != null && __isset.queryOptions) {
          field.Name = "queryOptions";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOptions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryUpsideContractMarginPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOptions: ");
        sb.Append(QueryOptions== null ? "<null>" : QueryOptions.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryUpsideContractMarginPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractMarginPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractMarginPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryUpsideContractMarginPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractMarginPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryUpsideContractMarginPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryUpsideContractMarginPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryUpsideContractCommissionPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions _queryOptions;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions QueryOptions
      {
        get
        {
          return _queryOptions;
        }
        set
        {
          __isset.queryOptions = true;
          SetProperty(ref _queryOptions, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOptions;
        public bool pageOption;
      }

      public queryUpsideContractCommissionPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOptions = new xueqiao.trade.hosting.position.fee.thriftapi.QueryUpsidePFeeOptions();
                QueryOptions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryUpsideContractCommissionPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOptions != null && __isset.queryOptions) {
          field.Name = "queryOptions";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOptions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryUpsideContractCommissionPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOptions: ");
        sb.Append(QueryOptions== null ? "<null>" : QueryOptions.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryUpsideContractCommissionPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractCommissionPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractCommissionPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryUpsideContractCommissionPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.fee.thriftapi.UpsideContractCommissionPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryUpsideContractCommissionPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryUpsideContractCommissionPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQContractMarginPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions _queryOptions;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions QueryOptions
      {
        get
        {
          return _queryOptions;
        }
        set
        {
          __isset.queryOptions = true;
          SetProperty(ref _queryOptions, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOptions;
        public bool pageOption;
      }

      public queryXQContractMarginPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOptions = new xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions();
                QueryOptions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQContractMarginPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOptions != null && __isset.queryOptions) {
          field.Name = "queryOptions";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOptions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQContractMarginPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOptions: ");
        sb.Append(QueryOptions== null ? "<null>" : QueryOptions.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQContractMarginPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.fee.thriftapi.XQContractMarginPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.fee.thriftapi.XQContractMarginPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryXQContractMarginPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.fee.thriftapi.XQContractMarginPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQContractMarginPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQContractMarginPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQContractCommissionPage_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions _queryOptions;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions QueryOptions
      {
        get
        {
          return _queryOptions;
        }
        set
        {
          __isset.queryOptions = true;
          SetProperty(ref _queryOptions, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool queryOptions;
        public bool pageOption;
      }

      public queryXQContractCommissionPage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                QueryOptions = new xueqiao.trade.hosting.position.fee.thriftapi.QueryXQPFeeOptions();
                QueryOptions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQContractCommissionPage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (QueryOptions != null && __isset.queryOptions) {
          field.Name = "queryOptions";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          QueryOptions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQContractCommissionPage_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",QueryOptions: ");
        sb.Append(QueryOptions== null ? "<null>" : QueryOptions.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryXQContractCommissionPage_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.trade.hosting.position.fee.thriftapi.XQContractCommissionPage _success;
      private ErrorInfo _err;

      public xueqiao.trade.hosting.position.fee.thriftapi.XQContractCommissionPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public queryXQContractCommissionPage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.trade.hosting.position.fee.thriftapi.XQContractCommissionPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("queryXQContractCommissionPage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("queryXQContractCommissionPage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addAssetAccountWorkingOrder_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LandingInfo _landingInfo;
      private xueqiao.working.order.thriftapi.AssetAccount _assetAccount;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.working.order.thriftapi.AssetAccount AssetAccount
      {
        get
        {
          return _assetAccount;
        }
        set
        {
          __isset.assetAccount = true;
          SetProperty(ref _assetAccount, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool assetAccount;
      }

      public addAssetAccountWorkingOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new LandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                AssetAccount = new xueqiao.working.order.thriftapi.AssetAccount();
                AssetAccount.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addAssetAccountWorkingOrder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AssetAccount != null && __isset.assetAccount) {
          field.Name = "assetAccount";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          AssetAccount.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addAssetAccountWorkingOrder_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",AssetAccount: ");
        sb.Append(AssetAccount== null ? "<null>" : AssetAccount.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addAssetAccountWorkingOrder_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private long _success;
      private ErrorInfo _err;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public addAssetAccountWorkingOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addAssetAccountWorkingOrder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addAssetAccountWorkingOrder_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
