/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.trade.hosting
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HostingComposeGraph : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _createSubUserId;
    private long _composeGraphId;
    private string _formular;
    private Dictionary<string, HostingComposeLeg> _legs;
    private string _composeGraphKey;
    private HostingComposeGraphEnv _composeGraphEnv;
    private int _createTimestamp;
    private int _lastmodifyTimestamp;

    public int CreateSubUserId
    {
      get
      {
        return _createSubUserId;
      }
      set
      {
        __isset.createSubUserId = true;
        SetProperty(ref _createSubUserId, value);
      }
    }

    public long ComposeGraphId
    {
      get
      {
        return _composeGraphId;
      }
      set
      {
        __isset.composeGraphId = true;
        SetProperty(ref _composeGraphId, value);
      }
    }

    public string Formular
    {
      get
      {
        return _formular;
      }
      set
      {
        __isset.formular = true;
        SetProperty(ref _formular, value);
      }
    }

    public Dictionary<string, HostingComposeLeg> Legs
    {
      get
      {
        return _legs;
      }
      set
      {
        __isset.legs = true;
        SetProperty(ref _legs, value);
      }
    }

    public string ComposeGraphKey
    {
      get
      {
        return _composeGraphKey;
      }
      set
      {
        __isset.composeGraphKey = true;
        SetProperty(ref _composeGraphKey, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="HostingComposeGraphEnv"/>
    /// </summary>
    public HostingComposeGraphEnv ComposeGraphEnv
    {
      get
      {
        return _composeGraphEnv;
      }
      set
      {
        __isset.composeGraphEnv = true;
        SetProperty(ref _composeGraphEnv, value);
      }
    }

    public int CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }

    public int LastmodifyTimestamp
    {
      get
      {
        return _lastmodifyTimestamp;
      }
      set
      {
        __isset.lastmodifyTimestamp = true;
        SetProperty(ref _lastmodifyTimestamp, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool createSubUserId;
      public bool composeGraphId;
      public bool formular;
      public bool legs;
      public bool composeGraphKey;
      public bool composeGraphEnv;
      public bool createTimestamp;
      public bool lastmodifyTimestamp;
    }

    public HostingComposeGraph() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              CreateSubUserId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              ComposeGraphId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Formular = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                Legs = new Dictionary<string, HostingComposeLeg>();
                TMap _map5 = iprot.ReadMapBegin();
                for( int _i6 = 0; _i6 < _map5.Count; ++_i6)
                {
                  string _key7;
                  HostingComposeLeg _val8;
                  _key7 = iprot.ReadString();
                  _val8 = new HostingComposeLeg();
                  _val8.Read(iprot);
                  Legs[_key7] = _val8;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              ComposeGraphKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              ComposeGraphEnv = (HostingComposeGraphEnv)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              CreateTimestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              LastmodifyTimestamp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HostingComposeGraph");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.createSubUserId) {
        field.Name = "createSubUserId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CreateSubUserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.composeGraphId) {
        field.Name = "composeGraphId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ComposeGraphId);
        oprot.WriteFieldEnd();
      }
      if (Formular != null && __isset.formular) {
        field.Name = "formular";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Formular);
        oprot.WriteFieldEnd();
      }
      if (Legs != null && __isset.legs) {
        field.Name = "legs";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Legs.Count));
          foreach (string _iter9 in Legs.Keys)
          {
            oprot.WriteString(_iter9);
            Legs[_iter9].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ComposeGraphKey != null && __isset.composeGraphKey) {
        field.Name = "composeGraphKey";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ComposeGraphKey);
        oprot.WriteFieldEnd();
      }
      if (__isset.composeGraphEnv) {
        field.Name = "composeGraphEnv";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ComposeGraphEnv);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastmodifyTimestamp) {
        field.Name = "lastmodifyTimestamp";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LastmodifyTimestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HostingComposeGraph(");
      sb.Append("CreateSubUserId: ");
      sb.Append(CreateSubUserId);
      sb.Append(",ComposeGraphId: ");
      sb.Append(ComposeGraphId);
      sb.Append(",Formular: ");
      sb.Append(Formular);
      sb.Append(",Legs: ");
      if (Legs == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("{");
        foreach (string _iter10 in Legs.Keys)
        {
          sb.Append(_iter10.ToString());
          sb.Append(":");
          sb.Append(Legs[_iter10].ToString());
          sb.Append(", ");
        }
        sb.Append("}");
      }
      sb.Append(",ComposeGraphKey: ");
      sb.Append(ComposeGraphKey);
      sb.Append(",ComposeGraphEnv: ");
      sb.Append(ComposeGraphEnv);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(",LastmodifyTimestamp: ");
      sb.Append(LastmodifyTimestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
