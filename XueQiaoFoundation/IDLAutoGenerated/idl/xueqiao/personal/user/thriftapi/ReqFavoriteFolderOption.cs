/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.personal.user.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReqFavoriteFolderOption : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private THashSet<long> _folderIds;
    private long _personUserId;
    private long _parentFolderId;

    public THashSet<long> FolderIds
    {
      get
      {
        return _folderIds;
      }
      set
      {
        __isset.folderIds = true;
        SetProperty(ref _folderIds, value);
      }
    }

    public long PersonUserId
    {
      get
      {
        return _personUserId;
      }
      set
      {
        __isset.personUserId = true;
        SetProperty(ref _personUserId, value);
      }
    }

    public long ParentFolderId
    {
      get
      {
        return _parentFolderId;
      }
      set
      {
        __isset.parentFolderId = true;
        SetProperty(ref _parentFolderId, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool folderIds;
      public bool personUserId;
      public bool parentFolderId;
    }

    public ReqFavoriteFolderOption() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Set) {
              {
                FolderIds = new THashSet<long>();
                TSet _set5 = iprot.ReadSetBegin();
                for( int _i6 = 0; _i6 < _set5.Count; ++_i6)
                {
                  long _elem7 = 0;
                  _elem7 = iprot.ReadI64();
                  FolderIds.Add(_elem7);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              PersonUserId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              ParentFolderId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ReqFavoriteFolderOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (FolderIds != null && __isset.folderIds) {
        field.Name = "folderIds";
        field.Type = TType.Set;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.I64, FolderIds.Count));
          foreach (long _iter8 in FolderIds)
          {
            oprot.WriteI64(_iter8);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.personUserId) {
        field.Name = "personUserId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PersonUserId);
        oprot.WriteFieldEnd();
      }
      if (__isset.parentFolderId) {
        field.Name = "parentFolderId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ParentFolderId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ReqFavoriteFolderOption(");
      sb.Append("FolderIds: ");
      if (FolderIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (long _iter9 in FolderIds)
        {
          sb.Append(_iter9.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",PersonUserId: ");
      sb.Append(PersonUserId);
      sb.Append(",ParentFolderId: ");
      sb.Append(ParentFolderId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
