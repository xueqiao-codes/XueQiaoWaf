/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.graph.xiaoha.chart.terminal.ao.thriftapi
{
  public partial class XiaohaChartTerminalAo {
    /// <summary>
    /// 此对外接口需要统一错误码信息
    /// 使用ERROR CODE 范围区分不同服务的错误码信息：
    /// personal_user_dao : 1000 - 1999
    /// xiaoha_chart_dao : 2000 - 2999
    /// token : 3000-3999
    /// </summary>
    public interface Iface {
      /// <summary>
      /// 登录
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="loginReq"></param>
      XiaohaChartLandingInfo login(PlatformArgs platformArgs, LoginReq loginReq);
      #if SILVERLIGHT
      IAsyncResult Begin_login(AsyncCallback callback, object state, PlatformArgs platformArgs, LoginReq loginReq);
      XiaohaChartLandingInfo End_login(IAsyncResult asyncResult);
      #endif
      void logout(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_logout(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo);
      void End_logout(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 通过雪橇app登录信息授权
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="appSession"></param>
      XiaohaChartLandingInfo authorizeXueQiaoApp(PlatformArgs platformArgs, XueQiaoAppSession appSession);
      #if SILVERLIGHT
      IAsyncResult Begin_authorizeXueQiaoApp(AsyncCallback callback, object state, PlatformArgs platformArgs, XueQiaoAppSession appSession);
      XiaohaChartLandingInfo End_authorizeXueQiaoApp(IAsyncResult asyncResult);
      #endif
      XiaohaChartLandingInfo signUp(PlatformArgs platformArgs, SignUpReq signUpReq);
      #if SILVERLIGHT
      IAsyncResult Begin_signUp(AsyncCallback callback, object state, PlatformArgs platformArgs, SignUpReq signUpReq);
      XiaohaChartLandingInfo End_signUp(IAsyncResult asyncResult);
      #endif
      void sendVerifyCode(PlatformArgs platformArgs, string tel);
      #if SILVERLIGHT
      IAsyncResult Begin_sendVerifyCode(AsyncCallback callback, object state, PlatformArgs platformArgs, string tel);
      void End_sendVerifyCode(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询小哈图表文件夹
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage reqChartFolder(PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_reqChartFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option, IndexedPageOption pageOption);
      xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage End_reqChartFolder(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询图表
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      xueqiao.graph.xiaoha.chart.thriftapi.ChartPage reqChart(PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option, IndexedPageOption pageOption);
      #if SILVERLIGHT
      IAsyncResult Begin_reqChart(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option, IndexedPageOption pageOption);
      xueqiao.graph.xiaoha.chart.thriftapi.ChartPage End_reqChart(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 添加个人用户的收藏夹
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="favoriteFolder"></param>
      xueqiao.personal.user.thriftapi.FavoriteFolder addFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder);
      #if SILVERLIGHT
      IAsyncResult Begin_addFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder);
      xueqiao.personal.user.thriftapi.FavoriteFolder End_addFavoriteFolder(IAsyncResult asyncResult);
      #endif
      List<xueqiao.personal.user.thriftapi.FavoriteFolder> reqFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option);
      #if SILVERLIGHT
      IAsyncResult Begin_reqFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option);
      List<xueqiao.personal.user.thriftapi.FavoriteFolder> End_reqFavoriteFolder(IAsyncResult asyncResult);
      #endif
      void removeFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId);
      #if SILVERLIGHT
      IAsyncResult Begin_removeFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId);
      void End_removeFavoriteFolder(IAsyncResult asyncResult);
      #endif
      void renameFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, string newName);
      #if SILVERLIGHT
      IAsyncResult Begin_renameFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, string newName);
      void End_renameFavoriteFolder(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 移动个人用户的收藏文件夹
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="folderId"></param>
      /// <param name="parentFolderId"></param>
      void moveFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, long parentFolderId);
      #if SILVERLIGHT
      IAsyncResult Begin_moveFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, long parentFolderId);
      void End_moveFavoriteFolder(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 添加个人用户的图表收藏
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="favoriteChart"></param>
      xueqiao.personal.user.thriftapi.FavoriteChart addFavoriteChart(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart);
      #if SILVERLIGHT
      IAsyncResult Begin_addFavoriteChart(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart);
      xueqiao.personal.user.thriftapi.FavoriteChart End_addFavoriteChart(IAsyncResult asyncResult);
      #endif
      List<xueqiao.personal.user.thriftapi.FavoriteChart> reqFavoriteChart(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option);
      #if SILVERLIGHT
      IAsyncResult Begin_reqFavoriteChart(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option);
      List<xueqiao.personal.user.thriftapi.FavoriteChart> End_reqFavoriteChart(IAsyncResult asyncResult);
      #endif
      void removeFavoriteChart(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId);
      #if SILVERLIGHT
      IAsyncResult Begin_removeFavoriteChart(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId);
      void End_removeFavoriteChart(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 移动个人用户的图表收藏
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="favoriteChartId"></param>
      /// <param name="parentFolderId"></param>
      void moveFavoriteChart(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, long parentFolderId);
      #if SILVERLIGHT
      IAsyncResult Begin_moveFavoriteChart(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, long parentFolderId);
      void End_moveFavoriteChart(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 关联已有账号
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tel"></param>
      /// <param name="verifyCode"></param>
      void linkExistAccount(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, string tel, string verifyCode);
      #if SILVERLIGHT
      IAsyncResult Begin_linkExistAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, string tel, string verifyCode);
      void End_linkExistAccount(IAsyncResult asyncResult);
      #endif
      LinkState getLinkState(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_getLinkState(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo);
      LinkState End_getLinkState(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// 此对外接口需要统一错误码信息
    /// 使用ERROR CODE 范围区分不同服务的错误码信息：
    /// personal_user_dao : 1000 - 1999
    /// xiaoha_chart_dao : 2000 - 2999
    /// token : 3000-3999
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_login(AsyncCallback callback, object state, PlatformArgs platformArgs, LoginReq loginReq)
      {
        return send_login(callback, state, platformArgs, loginReq);
      }

      public XiaohaChartLandingInfo End_login(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_login();
      }

      #endif

      /// <summary>
      /// 登录
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="loginReq"></param>
      public XiaohaChartLandingInfo login(PlatformArgs platformArgs, LoginReq loginReq)
      {
        #if !SILVERLIGHT
        send_login(platformArgs, loginReq);
        return recv_login();

        #else
        var asyncResult = Begin_login(null, null, platformArgs, loginReq);
        return End_login(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_login(AsyncCallback callback, object state, PlatformArgs platformArgs, LoginReq loginReq)
      #else
      public void send_login(PlatformArgs platformArgs, LoginReq loginReq)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
        login_args args = new login_args();
        args.PlatformArgs = platformArgs;
        args.LoginReq = loginReq;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public XiaohaChartLandingInfo recv_login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        login_result result = new login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_logout(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo)
      {
        return send_logout(callback, state, platformArgs, landingInfo);
      }

      public void End_logout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_logout();
      }

      #endif

      public void logout(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo)
      {
        #if !SILVERLIGHT
        send_logout(platformArgs, landingInfo);
        recv_logout();

        #else
        var asyncResult = Begin_logout(null, null, platformArgs, landingInfo);
        End_logout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logout(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo)
      #else
      public void send_logout(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
        logout_args args = new logout_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_logout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logout_result result = new logout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_authorizeXueQiaoApp(AsyncCallback callback, object state, PlatformArgs platformArgs, XueQiaoAppSession appSession)
      {
        return send_authorizeXueQiaoApp(callback, state, platformArgs, appSession);
      }

      public XiaohaChartLandingInfo End_authorizeXueQiaoApp(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_authorizeXueQiaoApp();
      }

      #endif

      /// <summary>
      /// 通过雪橇app登录信息授权
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="appSession"></param>
      public XiaohaChartLandingInfo authorizeXueQiaoApp(PlatformArgs platformArgs, XueQiaoAppSession appSession)
      {
        #if !SILVERLIGHT
        send_authorizeXueQiaoApp(platformArgs, appSession);
        return recv_authorizeXueQiaoApp();

        #else
        var asyncResult = Begin_authorizeXueQiaoApp(null, null, platformArgs, appSession);
        return End_authorizeXueQiaoApp(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_authorizeXueQiaoApp(AsyncCallback callback, object state, PlatformArgs platformArgs, XueQiaoAppSession appSession)
      #else
      public void send_authorizeXueQiaoApp(PlatformArgs platformArgs, XueQiaoAppSession appSession)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("authorizeXueQiaoApp", TMessageType.Call, seqid_));
        authorizeXueQiaoApp_args args = new authorizeXueQiaoApp_args();
        args.PlatformArgs = platformArgs;
        args.AppSession = appSession;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public XiaohaChartLandingInfo recv_authorizeXueQiaoApp()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        authorizeXueQiaoApp_result result = new authorizeXueQiaoApp_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authorizeXueQiaoApp failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_signUp(AsyncCallback callback, object state, PlatformArgs platformArgs, SignUpReq signUpReq)
      {
        return send_signUp(callback, state, platformArgs, signUpReq);
      }

      public XiaohaChartLandingInfo End_signUp(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_signUp();
      }

      #endif

      public XiaohaChartLandingInfo signUp(PlatformArgs platformArgs, SignUpReq signUpReq)
      {
        #if !SILVERLIGHT
        send_signUp(platformArgs, signUpReq);
        return recv_signUp();

        #else
        var asyncResult = Begin_signUp(null, null, platformArgs, signUpReq);
        return End_signUp(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_signUp(AsyncCallback callback, object state, PlatformArgs platformArgs, SignUpReq signUpReq)
      #else
      public void send_signUp(PlatformArgs platformArgs, SignUpReq signUpReq)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("signUp", TMessageType.Call, seqid_));
        signUp_args args = new signUp_args();
        args.PlatformArgs = platformArgs;
        args.SignUpReq = signUpReq;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public XiaohaChartLandingInfo recv_signUp()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        signUp_result result = new signUp_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "signUp failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendVerifyCode(AsyncCallback callback, object state, PlatformArgs platformArgs, string tel)
      {
        return send_sendVerifyCode(callback, state, platformArgs, tel);
      }

      public void End_sendVerifyCode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_sendVerifyCode();
      }

      #endif

      public void sendVerifyCode(PlatformArgs platformArgs, string tel)
      {
        #if !SILVERLIGHT
        send_sendVerifyCode(platformArgs, tel);
        recv_sendVerifyCode();

        #else
        var asyncResult = Begin_sendVerifyCode(null, null, platformArgs, tel);
        End_sendVerifyCode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendVerifyCode(AsyncCallback callback, object state, PlatformArgs platformArgs, string tel)
      #else
      public void send_sendVerifyCode(PlatformArgs platformArgs, string tel)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendVerifyCode", TMessageType.Call, seqid_));
        sendVerifyCode_args args = new sendVerifyCode_args();
        args.PlatformArgs = platformArgs;
        args.Tel = tel;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_sendVerifyCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendVerifyCode_result result = new sendVerifyCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqChartFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option, IndexedPageOption pageOption)
      {
        return send_reqChartFolder(callback, state, platformArgs, option, pageOption);
      }

      public xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage End_reqChartFolder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqChartFolder();
      }

      #endif

      /// <summary>
      /// 查询小哈图表文件夹
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage reqChartFolder(PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_reqChartFolder(platformArgs, option, pageOption);
        return recv_reqChartFolder();

        #else
        var asyncResult = Begin_reqChartFolder(null, null, platformArgs, option, pageOption);
        return End_reqChartFolder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqChartFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option, IndexedPageOption pageOption)
      #else
      public void send_reqChartFolder(PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqChartFolder", TMessageType.Call, seqid_));
        reqChartFolder_args args = new reqChartFolder_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage recv_reqChartFolder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqChartFolder_result result = new reqChartFolder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqChartFolder failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqChart(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option, IndexedPageOption pageOption)
      {
        return send_reqChart(callback, state, platformArgs, option, pageOption);
      }

      public xueqiao.graph.xiaoha.chart.thriftapi.ChartPage End_reqChart(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqChart();
      }

      #endif

      /// <summary>
      /// 查询图表
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="option"></param>
      /// <param name="pageOption"></param>
      public xueqiao.graph.xiaoha.chart.thriftapi.ChartPage reqChart(PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option, IndexedPageOption pageOption)
      {
        #if !SILVERLIGHT
        send_reqChart(platformArgs, option, pageOption);
        return recv_reqChart();

        #else
        var asyncResult = Begin_reqChart(null, null, platformArgs, option, pageOption);
        return End_reqChart(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqChart(AsyncCallback callback, object state, PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option, IndexedPageOption pageOption)
      #else
      public void send_reqChart(PlatformArgs platformArgs, xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption option, IndexedPageOption pageOption)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqChart", TMessageType.Call, seqid_));
        reqChart_args args = new reqChart_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageOption = pageOption;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.graph.xiaoha.chart.thriftapi.ChartPage recv_reqChart()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqChart_result result = new reqChart_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqChart failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder)
      {
        return send_addFavoriteFolder(callback, state, platformArgs, landingInfo, favoriteFolder);
      }

      public xueqiao.personal.user.thriftapi.FavoriteFolder End_addFavoriteFolder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_addFavoriteFolder();
      }

      #endif

      /// <summary>
      /// 添加个人用户的收藏夹
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="favoriteFolder"></param>
      public xueqiao.personal.user.thriftapi.FavoriteFolder addFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder)
      {
        #if !SILVERLIGHT
        send_addFavoriteFolder(platformArgs, landingInfo, favoriteFolder);
        return recv_addFavoriteFolder();

        #else
        var asyncResult = Begin_addFavoriteFolder(null, null, platformArgs, landingInfo, favoriteFolder);
        return End_addFavoriteFolder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder)
      #else
      public void send_addFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteFolder favoriteFolder)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addFavoriteFolder", TMessageType.Call, seqid_));
        addFavoriteFolder_args args = new addFavoriteFolder_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.FavoriteFolder = favoriteFolder;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.personal.user.thriftapi.FavoriteFolder recv_addFavoriteFolder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addFavoriteFolder_result result = new addFavoriteFolder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addFavoriteFolder failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option)
      {
        return send_reqFavoriteFolder(callback, state, platformArgs, landingInfo, option);
      }

      public List<xueqiao.personal.user.thriftapi.FavoriteFolder> End_reqFavoriteFolder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqFavoriteFolder();
      }

      #endif

      public List<xueqiao.personal.user.thriftapi.FavoriteFolder> reqFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option)
      {
        #if !SILVERLIGHT
        send_reqFavoriteFolder(platformArgs, landingInfo, option);
        return recv_reqFavoriteFolder();

        #else
        var asyncResult = Begin_reqFavoriteFolder(null, null, platformArgs, landingInfo, option);
        return End_reqFavoriteFolder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option)
      #else
      public void send_reqFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption option)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqFavoriteFolder", TMessageType.Call, seqid_));
        reqFavoriteFolder_args args = new reqFavoriteFolder_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<xueqiao.personal.user.thriftapi.FavoriteFolder> recv_reqFavoriteFolder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqFavoriteFolder_result result = new reqFavoriteFolder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqFavoriteFolder failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId)
      {
        return send_removeFavoriteFolder(callback, state, platformArgs, landingInfo, folderId);
      }

      public void End_removeFavoriteFolder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_removeFavoriteFolder();
      }

      #endif

      public void removeFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId)
      {
        #if !SILVERLIGHT
        send_removeFavoriteFolder(platformArgs, landingInfo, folderId);
        recv_removeFavoriteFolder();

        #else
        var asyncResult = Begin_removeFavoriteFolder(null, null, platformArgs, landingInfo, folderId);
        End_removeFavoriteFolder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId)
      #else
      public void send_removeFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeFavoriteFolder", TMessageType.Call, seqid_));
        removeFavoriteFolder_args args = new removeFavoriteFolder_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.FolderId = folderId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_removeFavoriteFolder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeFavoriteFolder_result result = new removeFavoriteFolder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_renameFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, string newName)
      {
        return send_renameFavoriteFolder(callback, state, platformArgs, landingInfo, folderId, newName);
      }

      public void End_renameFavoriteFolder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_renameFavoriteFolder();
      }

      #endif

      public void renameFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, string newName)
      {
        #if !SILVERLIGHT
        send_renameFavoriteFolder(platformArgs, landingInfo, folderId, newName);
        recv_renameFavoriteFolder();

        #else
        var asyncResult = Begin_renameFavoriteFolder(null, null, platformArgs, landingInfo, folderId, newName);
        End_renameFavoriteFolder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_renameFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, string newName)
      #else
      public void send_renameFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, string newName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("renameFavoriteFolder", TMessageType.Call, seqid_));
        renameFavoriteFolder_args args = new renameFavoriteFolder_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.FolderId = folderId;
        args.NewName = newName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_renameFavoriteFolder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        renameFavoriteFolder_result result = new renameFavoriteFolder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_moveFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, long parentFolderId)
      {
        return send_moveFavoriteFolder(callback, state, platformArgs, landingInfo, folderId, parentFolderId);
      }

      public void End_moveFavoriteFolder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_moveFavoriteFolder();
      }

      #endif

      /// <summary>
      /// 移动个人用户的收藏文件夹
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="folderId"></param>
      /// <param name="parentFolderId"></param>
      public void moveFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, long parentFolderId)
      {
        #if !SILVERLIGHT
        send_moveFavoriteFolder(platformArgs, landingInfo, folderId, parentFolderId);
        recv_moveFavoriteFolder();

        #else
        var asyncResult = Begin_moveFavoriteFolder(null, null, platformArgs, landingInfo, folderId, parentFolderId);
        End_moveFavoriteFolder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_moveFavoriteFolder(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, long parentFolderId)
      #else
      public void send_moveFavoriteFolder(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long folderId, long parentFolderId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("moveFavoriteFolder", TMessageType.Call, seqid_));
        moveFavoriteFolder_args args = new moveFavoriteFolder_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.FolderId = folderId;
        args.ParentFolderId = parentFolderId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_moveFavoriteFolder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        moveFavoriteFolder_result result = new moveFavoriteFolder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addFavoriteChart(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart)
      {
        return send_addFavoriteChart(callback, state, platformArgs, landingInfo, favoriteChart);
      }

      public xueqiao.personal.user.thriftapi.FavoriteChart End_addFavoriteChart(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_addFavoriteChart();
      }

      #endif

      /// <summary>
      /// 添加个人用户的图表收藏
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="favoriteChart"></param>
      public xueqiao.personal.user.thriftapi.FavoriteChart addFavoriteChart(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart)
      {
        #if !SILVERLIGHT
        send_addFavoriteChart(platformArgs, landingInfo, favoriteChart);
        return recv_addFavoriteChart();

        #else
        var asyncResult = Begin_addFavoriteChart(null, null, platformArgs, landingInfo, favoriteChart);
        return End_addFavoriteChart(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addFavoriteChart(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart)
      #else
      public void send_addFavoriteChart(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.FavoriteChart favoriteChart)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addFavoriteChart", TMessageType.Call, seqid_));
        addFavoriteChart_args args = new addFavoriteChart_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.FavoriteChart = favoriteChart;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public xueqiao.personal.user.thriftapi.FavoriteChart recv_addFavoriteChart()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addFavoriteChart_result result = new addFavoriteChart_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addFavoriteChart failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqFavoriteChart(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option)
      {
        return send_reqFavoriteChart(callback, state, platformArgs, landingInfo, option);
      }

      public List<xueqiao.personal.user.thriftapi.FavoriteChart> End_reqFavoriteChart(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqFavoriteChart();
      }

      #endif

      public List<xueqiao.personal.user.thriftapi.FavoriteChart> reqFavoriteChart(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option)
      {
        #if !SILVERLIGHT
        send_reqFavoriteChart(platformArgs, landingInfo, option);
        return recv_reqFavoriteChart();

        #else
        var asyncResult = Begin_reqFavoriteChart(null, null, platformArgs, landingInfo, option);
        return End_reqFavoriteChart(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqFavoriteChart(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option)
      #else
      public void send_reqFavoriteChart(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, xueqiao.personal.user.thriftapi.ReqFavoriteChartOption option)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqFavoriteChart", TMessageType.Call, seqid_));
        reqFavoriteChart_args args = new reqFavoriteChart_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Option = option;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<xueqiao.personal.user.thriftapi.FavoriteChart> recv_reqFavoriteChart()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqFavoriteChart_result result = new reqFavoriteChart_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqFavoriteChart failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeFavoriteChart(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId)
      {
        return send_removeFavoriteChart(callback, state, platformArgs, landingInfo, favoriteChartId);
      }

      public void End_removeFavoriteChart(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_removeFavoriteChart();
      }

      #endif

      public void removeFavoriteChart(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId)
      {
        #if !SILVERLIGHT
        send_removeFavoriteChart(platformArgs, landingInfo, favoriteChartId);
        recv_removeFavoriteChart();

        #else
        var asyncResult = Begin_removeFavoriteChart(null, null, platformArgs, landingInfo, favoriteChartId);
        End_removeFavoriteChart(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeFavoriteChart(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId)
      #else
      public void send_removeFavoriteChart(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeFavoriteChart", TMessageType.Call, seqid_));
        removeFavoriteChart_args args = new removeFavoriteChart_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.FavoriteChartId = favoriteChartId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_removeFavoriteChart()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeFavoriteChart_result result = new removeFavoriteChart_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_moveFavoriteChart(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, long parentFolderId)
      {
        return send_moveFavoriteChart(callback, state, platformArgs, landingInfo, favoriteChartId, parentFolderId);
      }

      public void End_moveFavoriteChart(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_moveFavoriteChart();
      }

      #endif

      /// <summary>
      /// 移动个人用户的图表收藏
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="favoriteChartId"></param>
      /// <param name="parentFolderId"></param>
      public void moveFavoriteChart(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, long parentFolderId)
      {
        #if !SILVERLIGHT
        send_moveFavoriteChart(platformArgs, landingInfo, favoriteChartId, parentFolderId);
        recv_moveFavoriteChart();

        #else
        var asyncResult = Begin_moveFavoriteChart(null, null, platformArgs, landingInfo, favoriteChartId, parentFolderId);
        End_moveFavoriteChart(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_moveFavoriteChart(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, long parentFolderId)
      #else
      public void send_moveFavoriteChart(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, long favoriteChartId, long parentFolderId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("moveFavoriteChart", TMessageType.Call, seqid_));
        moveFavoriteChart_args args = new moveFavoriteChart_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.FavoriteChartId = favoriteChartId;
        args.ParentFolderId = parentFolderId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_moveFavoriteChart()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        moveFavoriteChart_result result = new moveFavoriteChart_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_linkExistAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, string tel, string verifyCode)
      {
        return send_linkExistAccount(callback, state, platformArgs, landingInfo, tel, verifyCode);
      }

      public void End_linkExistAccount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_linkExistAccount();
      }

      #endif

      /// <summary>
      /// 关联已有账号
      /// </summary>
      /// <param name="platformArgs"></param>
      /// <param name="landingInfo"></param>
      /// <param name="tel"></param>
      /// <param name="verifyCode"></param>
      public void linkExistAccount(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, string tel, string verifyCode)
      {
        #if !SILVERLIGHT
        send_linkExistAccount(platformArgs, landingInfo, tel, verifyCode);
        recv_linkExistAccount();

        #else
        var asyncResult = Begin_linkExistAccount(null, null, platformArgs, landingInfo, tel, verifyCode);
        End_linkExistAccount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_linkExistAccount(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, string tel, string verifyCode)
      #else
      public void send_linkExistAccount(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo, string tel, string verifyCode)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("linkExistAccount", TMessageType.Call, seqid_));
        linkExistAccount_args args = new linkExistAccount_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Tel = tel;
        args.VerifyCode = verifyCode;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_linkExistAccount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        linkExistAccount_result result = new linkExistAccount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getLinkState(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo)
      {
        return send_getLinkState(callback, state, platformArgs, landingInfo);
      }

      public LinkState End_getLinkState(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getLinkState();
      }

      #endif

      public LinkState getLinkState(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo)
      {
        #if !SILVERLIGHT
        send_getLinkState(platformArgs, landingInfo);
        return recv_getLinkState();

        #else
        var asyncResult = Begin_getLinkState(null, null, platformArgs, landingInfo);
        return End_getLinkState(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getLinkState(AsyncCallback callback, object state, PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo)
      #else
      public void send_getLinkState(PlatformArgs platformArgs, XiaohaChartLandingInfo landingInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getLinkState", TMessageType.Call, seqid_));
        getLinkState_args args = new getLinkState_args();
        args.PlatformArgs = platformArgs;
        args.LandingInfo = landingInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public LinkState recv_getLinkState()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getLinkState_result result = new getLinkState_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLinkState failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["login"] = login_Process;
        processMap_["logout"] = logout_Process;
        processMap_["authorizeXueQiaoApp"] = authorizeXueQiaoApp_Process;
        processMap_["signUp"] = signUp_Process;
        processMap_["sendVerifyCode"] = sendVerifyCode_Process;
        processMap_["reqChartFolder"] = reqChartFolder_Process;
        processMap_["reqChart"] = reqChart_Process;
        processMap_["addFavoriteFolder"] = addFavoriteFolder_Process;
        processMap_["reqFavoriteFolder"] = reqFavoriteFolder_Process;
        processMap_["removeFavoriteFolder"] = removeFavoriteFolder_Process;
        processMap_["renameFavoriteFolder"] = renameFavoriteFolder_Process;
        processMap_["moveFavoriteFolder"] = moveFavoriteFolder_Process;
        processMap_["addFavoriteChart"] = addFavoriteChart_Process;
        processMap_["reqFavoriteChart"] = reqFavoriteChart_Process;
        processMap_["removeFavoriteChart"] = removeFavoriteChart_Process;
        processMap_["moveFavoriteChart"] = moveFavoriteChart_Process;
        processMap_["linkExistAccount"] = linkExistAccount_Process;
        processMap_["getLinkState"] = getLinkState_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        login_args args = new login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        login_result result = new login_result();
        try {
          result.Success = iface_.login(args.PlatformArgs, args.LoginReq);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("login", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logout_args args = new logout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logout_result result = new logout_result();
        try {
          iface_.logout(args.PlatformArgs, args.LandingInfo);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void authorizeXueQiaoApp_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        authorizeXueQiaoApp_args args = new authorizeXueQiaoApp_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        authorizeXueQiaoApp_result result = new authorizeXueQiaoApp_result();
        try {
          result.Success = iface_.authorizeXueQiaoApp(args.PlatformArgs, args.AppSession);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("authorizeXueQiaoApp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void signUp_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        signUp_args args = new signUp_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        signUp_result result = new signUp_result();
        try {
          result.Success = iface_.signUp(args.PlatformArgs, args.SignUpReq);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("signUp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendVerifyCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendVerifyCode_args args = new sendVerifyCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendVerifyCode_result result = new sendVerifyCode_result();
        try {
          iface_.sendVerifyCode(args.PlatformArgs, args.Tel);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("sendVerifyCode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqChartFolder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqChartFolder_args args = new reqChartFolder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqChartFolder_result result = new reqChartFolder_result();
        try {
          result.Success = iface_.reqChartFolder(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqChartFolder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqChart_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqChart_args args = new reqChart_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqChart_result result = new reqChart_result();
        try {
          result.Success = iface_.reqChart(args.PlatformArgs, args.Option, args.PageOption);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqChart", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addFavoriteFolder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addFavoriteFolder_args args = new addFavoriteFolder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addFavoriteFolder_result result = new addFavoriteFolder_result();
        try {
          result.Success = iface_.addFavoriteFolder(args.PlatformArgs, args.LandingInfo, args.FavoriteFolder);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addFavoriteFolder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqFavoriteFolder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqFavoriteFolder_args args = new reqFavoriteFolder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqFavoriteFolder_result result = new reqFavoriteFolder_result();
        try {
          result.Success = iface_.reqFavoriteFolder(args.PlatformArgs, args.LandingInfo, args.Option);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqFavoriteFolder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeFavoriteFolder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeFavoriteFolder_args args = new removeFavoriteFolder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeFavoriteFolder_result result = new removeFavoriteFolder_result();
        try {
          iface_.removeFavoriteFolder(args.PlatformArgs, args.LandingInfo, args.FolderId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("removeFavoriteFolder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void renameFavoriteFolder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        renameFavoriteFolder_args args = new renameFavoriteFolder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        renameFavoriteFolder_result result = new renameFavoriteFolder_result();
        try {
          iface_.renameFavoriteFolder(args.PlatformArgs, args.LandingInfo, args.FolderId, args.NewName);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("renameFavoriteFolder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void moveFavoriteFolder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        moveFavoriteFolder_args args = new moveFavoriteFolder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        moveFavoriteFolder_result result = new moveFavoriteFolder_result();
        try {
          iface_.moveFavoriteFolder(args.PlatformArgs, args.LandingInfo, args.FolderId, args.ParentFolderId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("moveFavoriteFolder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addFavoriteChart_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addFavoriteChart_args args = new addFavoriteChart_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addFavoriteChart_result result = new addFavoriteChart_result();
        try {
          result.Success = iface_.addFavoriteChart(args.PlatformArgs, args.LandingInfo, args.FavoriteChart);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("addFavoriteChart", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqFavoriteChart_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqFavoriteChart_args args = new reqFavoriteChart_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqFavoriteChart_result result = new reqFavoriteChart_result();
        try {
          result.Success = iface_.reqFavoriteChart(args.PlatformArgs, args.LandingInfo, args.Option);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqFavoriteChart", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeFavoriteChart_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeFavoriteChart_args args = new removeFavoriteChart_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeFavoriteChart_result result = new removeFavoriteChart_result();
        try {
          iface_.removeFavoriteChart(args.PlatformArgs, args.LandingInfo, args.FavoriteChartId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("removeFavoriteChart", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void moveFavoriteChart_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        moveFavoriteChart_args args = new moveFavoriteChart_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        moveFavoriteChart_result result = new moveFavoriteChart_result();
        try {
          iface_.moveFavoriteChart(args.PlatformArgs, args.LandingInfo, args.FavoriteChartId, args.ParentFolderId);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("moveFavoriteChart", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void linkExistAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        linkExistAccount_args args = new linkExistAccount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        linkExistAccount_result result = new linkExistAccount_result();
        try {
          iface_.linkExistAccount(args.PlatformArgs, args.LandingInfo, args.Tel, args.VerifyCode);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("linkExistAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getLinkState_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getLinkState_args args = new getLinkState_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getLinkState_result result = new getLinkState_result();
        try {
          result.Success = iface_.getLinkState(args.PlatformArgs, args.LandingInfo);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getLinkState", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private LoginReq _loginReq;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public LoginReq LoginReq
      {
        get
        {
          return _loginReq;
        }
        set
        {
          __isset.loginReq = true;
          SetProperty(ref _loginReq, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool loginReq;
      }

      public login_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LoginReq = new LoginReq();
                LoginReq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("login_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LoginReq != null && __isset.loginReq) {
          field.Name = "loginReq";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LoginReq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("login_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LoginReq: ");
        sb.Append(LoginReq== null ? "<null>" : LoginReq.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private XiaohaChartLandingInfo _success;
      private ErrorInfo _err;

      public XiaohaChartLandingInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public login_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new XiaohaChartLandingInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("login_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("login_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XiaohaChartLandingInfo _landingInfo;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XiaohaChartLandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
      }

      public logout_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new XiaohaChartLandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logout_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logout_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public logout_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logout_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class authorizeXueQiaoApp_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XueQiaoAppSession _appSession;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XueQiaoAppSession AppSession
      {
        get
        {
          return _appSession;
        }
        set
        {
          __isset.appSession = true;
          SetProperty(ref _appSession, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool appSession;
      }

      public authorizeXueQiaoApp_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AppSession = new XueQiaoAppSession();
                AppSession.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("authorizeXueQiaoApp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AppSession != null && __isset.appSession) {
          field.Name = "appSession";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          AppSession.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("authorizeXueQiaoApp_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",AppSession: ");
        sb.Append(AppSession== null ? "<null>" : AppSession.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class authorizeXueQiaoApp_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private XiaohaChartLandingInfo _success;
      private ErrorInfo _err;

      public XiaohaChartLandingInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public authorizeXueQiaoApp_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new XiaohaChartLandingInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("authorizeXueQiaoApp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("authorizeXueQiaoApp_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class signUp_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private SignUpReq _signUpReq;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public SignUpReq SignUpReq
      {
        get
        {
          return _signUpReq;
        }
        set
        {
          __isset.signUpReq = true;
          SetProperty(ref _signUpReq, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool signUpReq;
      }

      public signUp_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                SignUpReq = new SignUpReq();
                SignUpReq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("signUp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (SignUpReq != null && __isset.signUpReq) {
          field.Name = "signUpReq";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          SignUpReq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("signUp_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",SignUpReq: ");
        sb.Append(SignUpReq== null ? "<null>" : SignUpReq.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class signUp_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private XiaohaChartLandingInfo _success;
      private ErrorInfo _err;

      public XiaohaChartLandingInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public signUp_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new XiaohaChartLandingInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("signUp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("signUp_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendVerifyCode_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private string _tel;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public string Tel
      {
        get
        {
          return _tel;
        }
        set
        {
          __isset.tel = true;
          SetProperty(ref _tel, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool tel;
      }

      public sendVerifyCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Tel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendVerifyCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Tel != null && __isset.tel) {
          field.Name = "tel";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tel);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendVerifyCode_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Tel: ");
        sb.Append(Tel);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendVerifyCode_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public sendVerifyCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendVerifyCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendVerifyCode_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqChartFolder_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public reqChartFolder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.graph.xiaoha.chart.thriftapi.ReqChartFolderOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqChartFolder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqChartFolder_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqChartFolder_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage _success;
      private ErrorInfo _err;

      public xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqChartFolder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.graph.xiaoha.chart.thriftapi.ChartFolderPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqChartFolder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqChartFolder_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqChart_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption _option;
      private IndexedPageOption _pageOption;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public IndexedPageOption PageOption
      {
        get
        {
          return _pageOption;
        }
        set
        {
          __isset.pageOption = true;
          SetProperty(ref _pageOption, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageOption;
      }

      public reqChart_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.graph.xiaoha.chart.thriftapi.ReqChartOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                PageOption = new IndexedPageOption();
                PageOption.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqChart_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PageOption != null && __isset.pageOption) {
          field.Name = "pageOption";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          PageOption.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqChart_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageOption: ");
        sb.Append(PageOption== null ? "<null>" : PageOption.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqChart_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.graph.xiaoha.chart.thriftapi.ChartPage _success;
      private ErrorInfo _err;

      public xueqiao.graph.xiaoha.chart.thriftapi.ChartPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqChart_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.graph.xiaoha.chart.thriftapi.ChartPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqChart_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqChart_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addFavoriteFolder_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XiaohaChartLandingInfo _landingInfo;
      private xueqiao.personal.user.thriftapi.FavoriteFolder _favoriteFolder;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XiaohaChartLandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.personal.user.thriftapi.FavoriteFolder FavoriteFolder
      {
        get
        {
          return _favoriteFolder;
        }
        set
        {
          __isset.favoriteFolder = true;
          SetProperty(ref _favoriteFolder, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool favoriteFolder;
      }

      public addFavoriteFolder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new XiaohaChartLandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                FavoriteFolder = new xueqiao.personal.user.thriftapi.FavoriteFolder();
                FavoriteFolder.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addFavoriteFolder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FavoriteFolder != null && __isset.favoriteFolder) {
          field.Name = "favoriteFolder";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          FavoriteFolder.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addFavoriteFolder_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",FavoriteFolder: ");
        sb.Append(FavoriteFolder== null ? "<null>" : FavoriteFolder.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addFavoriteFolder_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.personal.user.thriftapi.FavoriteFolder _success;
      private ErrorInfo _err;

      public xueqiao.personal.user.thriftapi.FavoriteFolder Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public addFavoriteFolder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.personal.user.thriftapi.FavoriteFolder();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addFavoriteFolder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addFavoriteFolder_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqFavoriteFolder_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XiaohaChartLandingInfo _landingInfo;
      private xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption _option;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XiaohaChartLandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
      }

      public reqFavoriteFolder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new XiaohaChartLandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.personal.user.thriftapi.ReqFavoriteFolderOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqFavoriteFolder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqFavoriteFolder_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqFavoriteFolder_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<xueqiao.personal.user.thriftapi.FavoriteFolder> _success;
      private ErrorInfo _err;

      public List<xueqiao.personal.user.thriftapi.FavoriteFolder> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqFavoriteFolder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<xueqiao.personal.user.thriftapi.FavoriteFolder>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    xueqiao.personal.user.thriftapi.FavoriteFolder _elem2 = new xueqiao.personal.user.thriftapi.FavoriteFolder();
                    _elem2 = new xueqiao.personal.user.thriftapi.FavoriteFolder();
                    _elem2.Read(iprot);
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqFavoriteFolder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (xueqiao.personal.user.thriftapi.FavoriteFolder _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqFavoriteFolder_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (xueqiao.personal.user.thriftapi.FavoriteFolder _iter4 in Success)
          {
            sb.Append(_iter4.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeFavoriteFolder_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XiaohaChartLandingInfo _landingInfo;
      private long _folderId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XiaohaChartLandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long FolderId
      {
        get
        {
          return _folderId;
        }
        set
        {
          __isset.folderId = true;
          SetProperty(ref _folderId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool folderId;
      }

      public removeFavoriteFolder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new XiaohaChartLandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                FolderId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeFavoriteFolder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.folderId) {
          field.Name = "folderId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(FolderId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeFavoriteFolder_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",FolderId: ");
        sb.Append(FolderId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeFavoriteFolder_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public removeFavoriteFolder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeFavoriteFolder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeFavoriteFolder_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class renameFavoriteFolder_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XiaohaChartLandingInfo _landingInfo;
      private long _folderId;
      private string _newName;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XiaohaChartLandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long FolderId
      {
        get
        {
          return _folderId;
        }
        set
        {
          __isset.folderId = true;
          SetProperty(ref _folderId, value);
        }
      }

      public string NewName
      {
        get
        {
          return _newName;
        }
        set
        {
          __isset.newName = true;
          SetProperty(ref _newName, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool folderId;
        public bool newName;
      }

      public renameFavoriteFolder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new XiaohaChartLandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                FolderId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                NewName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("renameFavoriteFolder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.folderId) {
          field.Name = "folderId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(FolderId);
          oprot.WriteFieldEnd();
        }
        if (NewName != null && __isset.newName) {
          field.Name = "newName";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NewName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("renameFavoriteFolder_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",FolderId: ");
        sb.Append(FolderId);
        sb.Append(",NewName: ");
        sb.Append(NewName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class renameFavoriteFolder_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public renameFavoriteFolder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("renameFavoriteFolder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("renameFavoriteFolder_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class moveFavoriteFolder_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XiaohaChartLandingInfo _landingInfo;
      private long _folderId;
      private long _parentFolderId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XiaohaChartLandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long FolderId
      {
        get
        {
          return _folderId;
        }
        set
        {
          __isset.folderId = true;
          SetProperty(ref _folderId, value);
        }
      }

      public long ParentFolderId
      {
        get
        {
          return _parentFolderId;
        }
        set
        {
          __isset.parentFolderId = true;
          SetProperty(ref _parentFolderId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool folderId;
        public bool parentFolderId;
      }

      public moveFavoriteFolder_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new XiaohaChartLandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                FolderId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                ParentFolderId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("moveFavoriteFolder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.folderId) {
          field.Name = "folderId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(FolderId);
          oprot.WriteFieldEnd();
        }
        if (__isset.parentFolderId) {
          field.Name = "parentFolderId";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ParentFolderId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("moveFavoriteFolder_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",FolderId: ");
        sb.Append(FolderId);
        sb.Append(",ParentFolderId: ");
        sb.Append(ParentFolderId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class moveFavoriteFolder_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public moveFavoriteFolder_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("moveFavoriteFolder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("moveFavoriteFolder_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addFavoriteChart_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XiaohaChartLandingInfo _landingInfo;
      private xueqiao.personal.user.thriftapi.FavoriteChart _favoriteChart;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XiaohaChartLandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.personal.user.thriftapi.FavoriteChart FavoriteChart
      {
        get
        {
          return _favoriteChart;
        }
        set
        {
          __isset.favoriteChart = true;
          SetProperty(ref _favoriteChart, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool favoriteChart;
      }

      public addFavoriteChart_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new XiaohaChartLandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                FavoriteChart = new xueqiao.personal.user.thriftapi.FavoriteChart();
                FavoriteChart.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addFavoriteChart_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FavoriteChart != null && __isset.favoriteChart) {
          field.Name = "favoriteChart";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          FavoriteChart.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addFavoriteChart_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",FavoriteChart: ");
        sb.Append(FavoriteChart== null ? "<null>" : FavoriteChart.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addFavoriteChart_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private xueqiao.personal.user.thriftapi.FavoriteChart _success;
      private ErrorInfo _err;

      public xueqiao.personal.user.thriftapi.FavoriteChart Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public addFavoriteChart_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new xueqiao.personal.user.thriftapi.FavoriteChart();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addFavoriteChart_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addFavoriteChart_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqFavoriteChart_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XiaohaChartLandingInfo _landingInfo;
      private xueqiao.personal.user.thriftapi.ReqFavoriteChartOption _option;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XiaohaChartLandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public xueqiao.personal.user.thriftapi.ReqFavoriteChartOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool option;
      }

      public reqFavoriteChart_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new XiaohaChartLandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Option = new xueqiao.personal.user.thriftapi.ReqFavoriteChartOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqFavoriteChart_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqFavoriteChart_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqFavoriteChart_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private List<xueqiao.personal.user.thriftapi.FavoriteChart> _success;
      private ErrorInfo _err;

      public List<xueqiao.personal.user.thriftapi.FavoriteChart> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqFavoriteChart_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<xueqiao.personal.user.thriftapi.FavoriteChart>();
                  TList _list5 = iprot.ReadListBegin();
                  for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                  {
                    xueqiao.personal.user.thriftapi.FavoriteChart _elem7 = new xueqiao.personal.user.thriftapi.FavoriteChart();
                    _elem7 = new xueqiao.personal.user.thriftapi.FavoriteChart();
                    _elem7.Read(iprot);
                    Success.Add(_elem7);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqFavoriteChart_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (xueqiao.personal.user.thriftapi.FavoriteChart _iter8 in Success)
              {
                _iter8.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqFavoriteChart_result(");
        sb.Append("Success: ");
        if (Success == null)
        {
          sb.Append("<null>");
        }
        else
        {
          sb.Append("[");
          foreach (xueqiao.personal.user.thriftapi.FavoriteChart _iter9 in Success)
          {
            sb.Append(_iter9.ToString());
            sb.Append(", ");
          }
          sb.Append("]");
        }
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeFavoriteChart_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XiaohaChartLandingInfo _landingInfo;
      private long _favoriteChartId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XiaohaChartLandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long FavoriteChartId
      {
        get
        {
          return _favoriteChartId;
        }
        set
        {
          __isset.favoriteChartId = true;
          SetProperty(ref _favoriteChartId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool favoriteChartId;
      }

      public removeFavoriteChart_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new XiaohaChartLandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                FavoriteChartId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeFavoriteChart_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.favoriteChartId) {
          field.Name = "favoriteChartId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(FavoriteChartId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeFavoriteChart_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",FavoriteChartId: ");
        sb.Append(FavoriteChartId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeFavoriteChart_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public removeFavoriteChart_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeFavoriteChart_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeFavoriteChart_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class moveFavoriteChart_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XiaohaChartLandingInfo _landingInfo;
      private long _favoriteChartId;
      private long _parentFolderId;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XiaohaChartLandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public long FavoriteChartId
      {
        get
        {
          return _favoriteChartId;
        }
        set
        {
          __isset.favoriteChartId = true;
          SetProperty(ref _favoriteChartId, value);
        }
      }

      public long ParentFolderId
      {
        get
        {
          return _parentFolderId;
        }
        set
        {
          __isset.parentFolderId = true;
          SetProperty(ref _parentFolderId, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool favoriteChartId;
        public bool parentFolderId;
      }

      public moveFavoriteChart_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new XiaohaChartLandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                FavoriteChartId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                ParentFolderId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("moveFavoriteChart_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.favoriteChartId) {
          field.Name = "favoriteChartId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(FavoriteChartId);
          oprot.WriteFieldEnd();
        }
        if (__isset.parentFolderId) {
          field.Name = "parentFolderId";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ParentFolderId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("moveFavoriteChart_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",FavoriteChartId: ");
        sb.Append(FavoriteChartId);
        sb.Append(",ParentFolderId: ");
        sb.Append(ParentFolderId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class moveFavoriteChart_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public moveFavoriteChart_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("moveFavoriteChart_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("moveFavoriteChart_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class linkExistAccount_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XiaohaChartLandingInfo _landingInfo;
      private string _tel;
      private string _verifyCode;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XiaohaChartLandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }

      public string Tel
      {
        get
        {
          return _tel;
        }
        set
        {
          __isset.tel = true;
          SetProperty(ref _tel, value);
        }
      }

      public string VerifyCode
      {
        get
        {
          return _verifyCode;
        }
        set
        {
          __isset.verifyCode = true;
          SetProperty(ref _verifyCode, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
        public bool tel;
        public bool verifyCode;
      }

      public linkExistAccount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new XiaohaChartLandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Tel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                VerifyCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("linkExistAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Tel != null && __isset.tel) {
          field.Name = "tel";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tel);
          oprot.WriteFieldEnd();
        }
        if (VerifyCode != null && __isset.verifyCode) {
          field.Name = "verifyCode";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(VerifyCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("linkExistAccount_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(",Tel: ");
        sb.Append(Tel);
        sb.Append(",VerifyCode: ");
        sb.Append(VerifyCode);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class linkExistAccount_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private ErrorInfo _err;

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public linkExistAccount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("linkExistAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("linkExistAccount_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getLinkState_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private XiaohaChartLandingInfo _landingInfo;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public XiaohaChartLandingInfo LandingInfo
      {
        get
        {
          return _landingInfo;
        }
        set
        {
          __isset.landingInfo = true;
          SetProperty(ref _landingInfo, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool landingInfo;
      }

      public getLinkState_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                LandingInfo = new XiaohaChartLandingInfo();
                LandingInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLinkState_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LandingInfo != null && __isset.landingInfo) {
          field.Name = "landingInfo";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LandingInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLinkState_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",LandingInfo: ");
        sb.Append(LandingInfo== null ? "<null>" : LandingInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getLinkState_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private LinkState _success;
      private ErrorInfo _err;

      /// <summary>
      /// 
      /// <seealso cref="LinkState"/>
      /// </summary>
      public LinkState Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getLinkState_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (LinkState)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLinkState_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLinkState_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
