/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.graph.xiaoha.chart.thriftapi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReqChartFolderOption : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private THashSet<long> _chartFolderIds;
    private string _xiaohaObjId;
    private long _parentFolderId;
    private string _name;
    private THashSet<string> _keyWords;

    public THashSet<long> ChartFolderIds
    {
      get
      {
        return _chartFolderIds;
      }
      set
      {
        __isset.chartFolderIds = true;
        SetProperty(ref _chartFolderIds, value);
      }
    }

    public string XiaohaObjId
    {
      get
      {
        return _xiaohaObjId;
      }
      set
      {
        __isset.xiaohaObjId = true;
        SetProperty(ref _xiaohaObjId, value);
      }
    }

    public long ParentFolderId
    {
      get
      {
        return _parentFolderId;
      }
      set
      {
        __isset.parentFolderId = true;
        SetProperty(ref _parentFolderId, value);
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        SetProperty(ref _name, value);
      }
    }

    public THashSet<string> KeyWords
    {
      get
      {
        return _keyWords;
      }
      set
      {
        __isset.keyWords = true;
        SetProperty(ref _keyWords, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chartFolderIds;
      public bool xiaohaObjId;
      public bool parentFolderId;
      public bool name;
      public bool keyWords;
    }

    public ReqChartFolderOption() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Set) {
              {
                ChartFolderIds = new THashSet<long>();
                TSet _set20 = iprot.ReadSetBegin();
                for( int _i21 = 0; _i21 < _set20.Count; ++_i21)
                {
                  long _elem22 = 0;
                  _elem22 = iprot.ReadI64();
                  ChartFolderIds.Add(_elem22);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              XiaohaObjId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              ParentFolderId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Set) {
              {
                KeyWords = new THashSet<string>();
                TSet _set23 = iprot.ReadSetBegin();
                for( int _i24 = 0; _i24 < _set23.Count; ++_i24)
                {
                  string _elem25 = null;
                  _elem25 = iprot.ReadString();
                  KeyWords.Add(_elem25);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ReqChartFolderOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ChartFolderIds != null && __isset.chartFolderIds) {
        field.Name = "chartFolderIds";
        field.Type = TType.Set;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.I64, ChartFolderIds.Count));
          foreach (long _iter26 in ChartFolderIds)
          {
            oprot.WriteI64(_iter26);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (XiaohaObjId != null && __isset.xiaohaObjId) {
        field.Name = "xiaohaObjId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(XiaohaObjId);
        oprot.WriteFieldEnd();
      }
      if (__isset.parentFolderId) {
        field.Name = "parentFolderId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ParentFolderId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (KeyWords != null && __isset.keyWords) {
        field.Name = "keyWords";
        field.Type = TType.Set;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, KeyWords.Count));
          foreach (string _iter27 in KeyWords)
          {
            oprot.WriteString(_iter27);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ReqChartFolderOption(");
      sb.Append("ChartFolderIds: ");
      if (ChartFolderIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (long _iter28 in ChartFolderIds)
        {
          sb.Append(_iter28.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",XiaohaObjId: ");
      sb.Append(XiaohaObjId);
      sb.Append(",ParentFolderId: ");
      sb.Append(ParentFolderId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",KeyWords: ");
      if (KeyWords == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (string _iter29 in KeyWords)
        {
          sb.Append(_iter29.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(")");
      return sb.ToString();
    }

  }

}
