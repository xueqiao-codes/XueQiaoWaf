/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.quotation
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QuotationItem : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private string _platform;
    private string _contractSymbol;
    private double _openPrice;
    private double _highPrice;
    private double _lowPrice;
    private double _preClosePrice;
    private double _preSettlementPrice;
    private long _preOpenInterest;
    private long _openInterest;
    private long _volumn;
    private double _turnover;
    private long _updateTimestampMs;
    private double _lastPrice;
    private long _lastQty;
    private double _upperLimitPrice;
    private double _lowerLimitPrice;
    private double _averagePrice;
    private List<double> _bidPrice;
    private List<long> _bidQty;
    private List<double> _askPrice;
    private List<long> _askQty;
    private long _receivedTimestampMs;
    private string _receivedHostName;
    private short _receivedProcessId;
    private long _raceTimestampMs;
    private string _sledExchangeCode;
    private short _sledCommodityType;
    private string _sledCommodityCode;
    private string _sledContractCode;

    public string Platform
    {
      get
      {
        return _platform;
      }
      set
      {
        __isset.platform = true;
        SetProperty(ref _platform, value);
      }
    }

    public string ContractSymbol
    {
      get
      {
        return _contractSymbol;
      }
      set
      {
        __isset.contractSymbol = true;
        SetProperty(ref _contractSymbol, value);
      }
    }

    public double OpenPrice
    {
      get
      {
        return _openPrice;
      }
      set
      {
        __isset.openPrice = true;
        SetProperty(ref _openPrice, value);
      }
    }

    public double HighPrice
    {
      get
      {
        return _highPrice;
      }
      set
      {
        __isset.highPrice = true;
        SetProperty(ref _highPrice, value);
      }
    }

    public double LowPrice
    {
      get
      {
        return _lowPrice;
      }
      set
      {
        __isset.lowPrice = true;
        SetProperty(ref _lowPrice, value);
      }
    }

    public double PreClosePrice
    {
      get
      {
        return _preClosePrice;
      }
      set
      {
        __isset.preClosePrice = true;
        SetProperty(ref _preClosePrice, value);
      }
    }

    public double PreSettlementPrice
    {
      get
      {
        return _preSettlementPrice;
      }
      set
      {
        __isset.preSettlementPrice = true;
        SetProperty(ref _preSettlementPrice, value);
      }
    }

    public long PreOpenInterest
    {
      get
      {
        return _preOpenInterest;
      }
      set
      {
        __isset.preOpenInterest = true;
        SetProperty(ref _preOpenInterest, value);
      }
    }

    public long OpenInterest
    {
      get
      {
        return _openInterest;
      }
      set
      {
        __isset.openInterest = true;
        SetProperty(ref _openInterest, value);
      }
    }

    public long Volumn
    {
      get
      {
        return _volumn;
      }
      set
      {
        __isset.volumn = true;
        SetProperty(ref _volumn, value);
      }
    }

    public double Turnover
    {
      get
      {
        return _turnover;
      }
      set
      {
        __isset.turnover = true;
        SetProperty(ref _turnover, value);
      }
    }

    public long UpdateTimestampMs
    {
      get
      {
        return _updateTimestampMs;
      }
      set
      {
        __isset.updateTimestampMs = true;
        SetProperty(ref _updateTimestampMs, value);
      }
    }

    public double LastPrice
    {
      get
      {
        return _lastPrice;
      }
      set
      {
        __isset.lastPrice = true;
        SetProperty(ref _lastPrice, value);
      }
    }

    public long LastQty
    {
      get
      {
        return _lastQty;
      }
      set
      {
        __isset.lastQty = true;
        SetProperty(ref _lastQty, value);
      }
    }

    public double UpperLimitPrice
    {
      get
      {
        return _upperLimitPrice;
      }
      set
      {
        __isset.upperLimitPrice = true;
        SetProperty(ref _upperLimitPrice, value);
      }
    }

    public double LowerLimitPrice
    {
      get
      {
        return _lowerLimitPrice;
      }
      set
      {
        __isset.lowerLimitPrice = true;
        SetProperty(ref _lowerLimitPrice, value);
      }
    }

    public double AveragePrice
    {
      get
      {
        return _averagePrice;
      }
      set
      {
        __isset.averagePrice = true;
        SetProperty(ref _averagePrice, value);
      }
    }

    public List<double> BidPrice
    {
      get
      {
        return _bidPrice;
      }
      set
      {
        __isset.bidPrice = true;
        SetProperty(ref _bidPrice, value);
      }
    }

    public List<long> BidQty
    {
      get
      {
        return _bidQty;
      }
      set
      {
        __isset.bidQty = true;
        SetProperty(ref _bidQty, value);
      }
    }

    public List<double> AskPrice
    {
      get
      {
        return _askPrice;
      }
      set
      {
        __isset.askPrice = true;
        SetProperty(ref _askPrice, value);
      }
    }

    public List<long> AskQty
    {
      get
      {
        return _askQty;
      }
      set
      {
        __isset.askQty = true;
        SetProperty(ref _askQty, value);
      }
    }

    public long ReceivedTimestampMs
    {
      get
      {
        return _receivedTimestampMs;
      }
      set
      {
        __isset.receivedTimestampMs = true;
        SetProperty(ref _receivedTimestampMs, value);
      }
    }

    public string ReceivedHostName
    {
      get
      {
        return _receivedHostName;
      }
      set
      {
        __isset.receivedHostName = true;
        SetProperty(ref _receivedHostName, value);
      }
    }

    public short ReceivedProcessId
    {
      get
      {
        return _receivedProcessId;
      }
      set
      {
        __isset.receivedProcessId = true;
        SetProperty(ref _receivedProcessId, value);
      }
    }

    public long RaceTimestampMs
    {
      get
      {
        return _raceTimestampMs;
      }
      set
      {
        __isset.raceTimestampMs = true;
        SetProperty(ref _raceTimestampMs, value);
      }
    }

    public string SledExchangeCode
    {
      get
      {
        return _sledExchangeCode;
      }
      set
      {
        __isset.sledExchangeCode = true;
        SetProperty(ref _sledExchangeCode, value);
      }
    }

    public short SledCommodityType
    {
      get
      {
        return _sledCommodityType;
      }
      set
      {
        __isset.sledCommodityType = true;
        SetProperty(ref _sledCommodityType, value);
      }
    }

    public string SledCommodityCode
    {
      get
      {
        return _sledCommodityCode;
      }
      set
      {
        __isset.sledCommodityCode = true;
        SetProperty(ref _sledCommodityCode, value);
      }
    }

    public string SledContractCode
    {
      get
      {
        return _sledContractCode;
      }
      set
      {
        __isset.sledContractCode = true;
        SetProperty(ref _sledContractCode, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool platform;
      public bool contractSymbol;
      public bool openPrice;
      public bool highPrice;
      public bool lowPrice;
      public bool preClosePrice;
      public bool preSettlementPrice;
      public bool preOpenInterest;
      public bool openInterest;
      public bool volumn;
      public bool turnover;
      public bool updateTimestampMs;
      public bool lastPrice;
      public bool lastQty;
      public bool upperLimitPrice;
      public bool lowerLimitPrice;
      public bool averagePrice;
      public bool bidPrice;
      public bool bidQty;
      public bool askPrice;
      public bool askQty;
      public bool receivedTimestampMs;
      public bool receivedHostName;
      public bool receivedProcessId;
      public bool raceTimestampMs;
      public bool sledExchangeCode;
      public bool sledCommodityType;
      public bool sledCommodityCode;
      public bool sledContractCode;
    }

    public QuotationItem() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Platform = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ContractSymbol = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              OpenPrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              HighPrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              LowPrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              PreClosePrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              PreSettlementPrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              PreOpenInterest = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              OpenInterest = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              Volumn = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Double) {
              Turnover = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I64) {
              UpdateTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Double) {
              LastPrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              LastQty = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Double) {
              UpperLimitPrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.Double) {
              LowerLimitPrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.Double) {
              AveragePrice = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.List) {
              {
                BidPrice = new List<double>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  double _elem2 = (double)0;
                  _elem2 = iprot.ReadDouble();
                  BidPrice.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.List) {
              {
                BidQty = new List<long>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  long _elem5 = 0;
                  _elem5 = iprot.ReadI64();
                  BidQty.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.List) {
              {
                AskPrice = new List<double>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  double _elem8 = (double)0;
                  _elem8 = iprot.ReadDouble();
                  AskPrice.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.List) {
              {
                AskQty = new List<long>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  long _elem11 = 0;
                  _elem11 = iprot.ReadI64();
                  AskQty.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.I64) {
              ReceivedTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 101:
            if (field.Type == TType.String) {
              ReceivedHostName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 102:
            if (field.Type == TType.I16) {
              ReceivedProcessId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 120:
            if (field.Type == TType.I64) {
              RaceTimestampMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 135:
            if (field.Type == TType.String) {
              SledExchangeCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 136:
            if (field.Type == TType.I16) {
              SledCommodityType = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 137:
            if (field.Type == TType.String) {
              SledCommodityCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 138:
            if (field.Type == TType.String) {
              SledContractCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QuotationItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Platform != null && __isset.platform) {
        field.Name = "platform";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Platform);
        oprot.WriteFieldEnd();
      }
      if (ContractSymbol != null && __isset.contractSymbol) {
        field.Name = "contractSymbol";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContractSymbol);
        oprot.WriteFieldEnd();
      }
      if (__isset.openPrice) {
        field.Name = "openPrice";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(OpenPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.highPrice) {
        field.Name = "highPrice";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(HighPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.lowPrice) {
        field.Name = "lowPrice";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LowPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.preClosePrice) {
        field.Name = "preClosePrice";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PreClosePrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.preSettlementPrice) {
        field.Name = "preSettlementPrice";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PreSettlementPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.preOpenInterest) {
        field.Name = "preOpenInterest";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PreOpenInterest);
        oprot.WriteFieldEnd();
      }
      if (__isset.openInterest) {
        field.Name = "openInterest";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(OpenInterest);
        oprot.WriteFieldEnd();
      }
      if (__isset.volumn) {
        field.Name = "volumn";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Volumn);
        oprot.WriteFieldEnd();
      }
      if (__isset.turnover) {
        field.Name = "turnover";
        field.Type = TType.Double;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Turnover);
        oprot.WriteFieldEnd();
      }
      if (__isset.updateTimestampMs) {
        field.Name = "updateTimestampMs";
        field.Type = TType.I64;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UpdateTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastPrice) {
        field.Name = "lastPrice";
        field.Type = TType.Double;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LastPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastQty) {
        field.Name = "lastQty";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastQty);
        oprot.WriteFieldEnd();
      }
      if (__isset.upperLimitPrice) {
        field.Name = "upperLimitPrice";
        field.Type = TType.Double;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(UpperLimitPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.lowerLimitPrice) {
        field.Name = "lowerLimitPrice";
        field.Type = TType.Double;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LowerLimitPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.averagePrice) {
        field.Name = "averagePrice";
        field.Type = TType.Double;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(AveragePrice);
        oprot.WriteFieldEnd();
      }
      if (BidPrice != null && __isset.bidPrice) {
        field.Name = "bidPrice";
        field.Type = TType.List;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Double, BidPrice.Count));
          foreach (double _iter12 in BidPrice)
          {
            oprot.WriteDouble(_iter12);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (BidQty != null && __isset.bidQty) {
        field.Name = "bidQty";
        field.Type = TType.List;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, BidQty.Count));
          foreach (long _iter13 in BidQty)
          {
            oprot.WriteI64(_iter13);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (AskPrice != null && __isset.askPrice) {
        field.Name = "askPrice";
        field.Type = TType.List;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Double, AskPrice.Count));
          foreach (double _iter14 in AskPrice)
          {
            oprot.WriteDouble(_iter14);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (AskQty != null && __isset.askQty) {
        field.Name = "askQty";
        field.Type = TType.List;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, AskQty.Count));
          foreach (long _iter15 in AskQty)
          {
            oprot.WriteI64(_iter15);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.receivedTimestampMs) {
        field.Name = "receivedTimestampMs";
        field.Type = TType.I64;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ReceivedTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (ReceivedHostName != null && __isset.receivedHostName) {
        field.Name = "receivedHostName";
        field.Type = TType.String;
        field.ID = 101;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ReceivedHostName);
        oprot.WriteFieldEnd();
      }
      if (__isset.receivedProcessId) {
        field.Name = "receivedProcessId";
        field.Type = TType.I16;
        field.ID = 102;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ReceivedProcessId);
        oprot.WriteFieldEnd();
      }
      if (__isset.raceTimestampMs) {
        field.Name = "raceTimestampMs";
        field.Type = TType.I64;
        field.ID = 120;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RaceTimestampMs);
        oprot.WriteFieldEnd();
      }
      if (SledExchangeCode != null && __isset.sledExchangeCode) {
        field.Name = "sledExchangeCode";
        field.Type = TType.String;
        field.ID = 135;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SledExchangeCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.sledCommodityType) {
        field.Name = "sledCommodityType";
        field.Type = TType.I16;
        field.ID = 136;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(SledCommodityType);
        oprot.WriteFieldEnd();
      }
      if (SledCommodityCode != null && __isset.sledCommodityCode) {
        field.Name = "sledCommodityCode";
        field.Type = TType.String;
        field.ID = 137;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SledCommodityCode);
        oprot.WriteFieldEnd();
      }
      if (SledContractCode != null && __isset.sledContractCode) {
        field.Name = "sledContractCode";
        field.Type = TType.String;
        field.ID = 138;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SledContractCode);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QuotationItem(");
      sb.Append("Platform: ");
      sb.Append(Platform);
      sb.Append(",ContractSymbol: ");
      sb.Append(ContractSymbol);
      sb.Append(",OpenPrice: ");
      sb.Append(OpenPrice);
      sb.Append(",HighPrice: ");
      sb.Append(HighPrice);
      sb.Append(",LowPrice: ");
      sb.Append(LowPrice);
      sb.Append(",PreClosePrice: ");
      sb.Append(PreClosePrice);
      sb.Append(",PreSettlementPrice: ");
      sb.Append(PreSettlementPrice);
      sb.Append(",PreOpenInterest: ");
      sb.Append(PreOpenInterest);
      sb.Append(",OpenInterest: ");
      sb.Append(OpenInterest);
      sb.Append(",Volumn: ");
      sb.Append(Volumn);
      sb.Append(",Turnover: ");
      sb.Append(Turnover);
      sb.Append(",UpdateTimestampMs: ");
      sb.Append(UpdateTimestampMs);
      sb.Append(",LastPrice: ");
      sb.Append(LastPrice);
      sb.Append(",LastQty: ");
      sb.Append(LastQty);
      sb.Append(",UpperLimitPrice: ");
      sb.Append(UpperLimitPrice);
      sb.Append(",LowerLimitPrice: ");
      sb.Append(LowerLimitPrice);
      sb.Append(",AveragePrice: ");
      sb.Append(AveragePrice);
      sb.Append(",BidPrice: ");
      if (BidPrice == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (double _iter16 in BidPrice)
        {
          sb.Append(_iter16.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",BidQty: ");
      if (BidQty == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (long _iter17 in BidQty)
        {
          sb.Append(_iter17.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",AskPrice: ");
      if (AskPrice == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (double _iter18 in AskPrice)
        {
          sb.Append(_iter18.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",AskQty: ");
      if (AskQty == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (long _iter19 in AskQty)
        {
          sb.Append(_iter19.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",ReceivedTimestampMs: ");
      sb.Append(ReceivedTimestampMs);
      sb.Append(",ReceivedHostName: ");
      sb.Append(ReceivedHostName);
      sb.Append(",ReceivedProcessId: ");
      sb.Append(ReceivedProcessId);
      sb.Append(",RaceTimestampMs: ");
      sb.Append(RaceTimestampMs);
      sb.Append(",SledExchangeCode: ");
      sb.Append(SledExchangeCode);
      sb.Append(",SledCommodityType: ");
      sb.Append(SledCommodityType);
      sb.Append(",SledCommodityCode: ");
      sb.Append(SledCommodityCode);
      sb.Append(",SledContractCode: ");
      sb.Append(SledContractCode);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
