/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.broker
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BrokerAccessInfo : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _entryId;
    private int _brokerId;
    private xueqiao.broker.BrokerPlatform _platform;
    private string _engName;
    private string _cnName;
    private string _note;
    private xueqiao.broker.TechPlatformEnv _techPlatformEnv;
    private string _accessName;

    public int EntryId
    {
      get
      {
        return _entryId;
      }
      set
      {
        __isset.entryId = true;
        SetProperty(ref _entryId, value);
      }
    }

    public int BrokerId
    {
      get
      {
        return _brokerId;
      }
      set
      {
        __isset.brokerId = true;
        SetProperty(ref _brokerId, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.broker.BrokerPlatform"/>
    /// </summary>
    public xueqiao.broker.BrokerPlatform Platform
    {
      get
      {
        return _platform;
      }
      set
      {
        __isset.platform = true;
        SetProperty(ref _platform, value);
      }
    }

    public string EngName
    {
      get
      {
        return _engName;
      }
      set
      {
        __isset.engName = true;
        SetProperty(ref _engName, value);
      }
    }

    public string CnName
    {
      get
      {
        return _cnName;
      }
      set
      {
        __isset.cnName = true;
        SetProperty(ref _cnName, value);
      }
    }

    public string Note
    {
      get
      {
        return _note;
      }
      set
      {
        __isset.note = true;
        SetProperty(ref _note, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.broker.TechPlatformEnv"/>
    /// </summary>
    public xueqiao.broker.TechPlatformEnv TechPlatformEnv
    {
      get
      {
        return _techPlatformEnv;
      }
      set
      {
        __isset.techPlatformEnv = true;
        SetProperty(ref _techPlatformEnv, value);
      }
    }

    public string AccessName
    {
      get
      {
        return _accessName;
      }
      set
      {
        __isset.accessName = true;
        SetProperty(ref _accessName, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool entryId;
      public bool brokerId;
      public bool platform;
      public bool engName;
      public bool cnName;
      public bool note;
      public bool techPlatformEnv;
      public bool accessName;
    }

    public BrokerAccessInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              EntryId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              BrokerId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Platform = (xueqiao.broker.BrokerPlatform)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              EngName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              CnName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Note = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              TechPlatformEnv = (xueqiao.broker.TechPlatformEnv)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              AccessName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BrokerAccessInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.entryId) {
        field.Name = "entryId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EntryId);
        oprot.WriteFieldEnd();
      }
      if (__isset.brokerId) {
        field.Name = "brokerId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BrokerId);
        oprot.WriteFieldEnd();
      }
      if (__isset.platform) {
        field.Name = "platform";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Platform);
        oprot.WriteFieldEnd();
      }
      if (EngName != null && __isset.engName) {
        field.Name = "engName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EngName);
        oprot.WriteFieldEnd();
      }
      if (CnName != null && __isset.cnName) {
        field.Name = "cnName";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CnName);
        oprot.WriteFieldEnd();
      }
      if (Note != null && __isset.note) {
        field.Name = "note";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Note);
        oprot.WriteFieldEnd();
      }
      if (__isset.techPlatformEnv) {
        field.Name = "techPlatformEnv";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TechPlatformEnv);
        oprot.WriteFieldEnd();
      }
      if (AccessName != null && __isset.accessName) {
        field.Name = "accessName";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BrokerAccessInfo(");
      sb.Append("EntryId: ");
      sb.Append(EntryId);
      sb.Append(",BrokerId: ");
      sb.Append(BrokerId);
      sb.Append(",Platform: ");
      sb.Append(Platform);
      sb.Append(",EngName: ");
      sb.Append(EngName);
      sb.Append(",CnName: ");
      sb.Append(CnName);
      sb.Append(",Note: ");
      sb.Append(Note);
      sb.Append(",TechPlatformEnv: ");
      sb.Append(TechPlatformEnv);
      sb.Append(",AccessName: ");
      sb.Append(AccessName);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
