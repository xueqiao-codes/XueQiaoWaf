/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.broker
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReqBrokerAccessOption : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private List<int> _brokerId;
    private List<int> _brokerAccessIds;
    private xueqiao.broker.BrokerPlatform _platform;
    private THashSet<xueqiao.broker.BrokerPlatform> _platforms;

    public List<int> BrokerId
    {
      get
      {
        return _brokerId;
      }
      set
      {
        __isset.brokerId = true;
        SetProperty(ref _brokerId, value);
      }
    }

    public List<int> BrokerAccessIds
    {
      get
      {
        return _brokerAccessIds;
      }
      set
      {
        __isset.brokerAccessIds = true;
        SetProperty(ref _brokerAccessIds, value);
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="xueqiao.broker.BrokerPlatform"/>
    /// </summary>
    public xueqiao.broker.BrokerPlatform Platform
    {
      get
      {
        return _platform;
      }
      set
      {
        __isset.platform = true;
        SetProperty(ref _platform, value);
      }
    }

    public THashSet<xueqiao.broker.BrokerPlatform> Platforms
    {
      get
      {
        return _platforms;
      }
      set
      {
        __isset.platforms = true;
        SetProperty(ref _platforms, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool brokerId;
      public bool brokerAccessIds;
      public bool platform;
      public bool platforms;
    }

    public ReqBrokerAccessOption() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                BrokerId = new List<int>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  int _elem2 = 0;
                  _elem2 = iprot.ReadI32();
                  BrokerId.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                BrokerAccessIds = new List<int>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  int _elem5 = 0;
                  _elem5 = iprot.ReadI32();
                  BrokerAccessIds.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Platform = (xueqiao.broker.BrokerPlatform)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Set) {
              {
                Platforms = new THashSet<xueqiao.broker.BrokerPlatform>();
                TSet _set6 = iprot.ReadSetBegin();
                for( int _i7 = 0; _i7 < _set6.Count; ++_i7)
                {
                  xueqiao.broker.BrokerPlatform _elem8 = (xueqiao.broker.BrokerPlatform)0;
                  _elem8 = (xueqiao.broker.BrokerPlatform)iprot.ReadI32();
                  Platforms.Add(_elem8);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ReqBrokerAccessOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BrokerId != null && __isset.brokerId) {
        field.Name = "brokerId";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, BrokerId.Count));
          foreach (int _iter9 in BrokerId)
          {
            oprot.WriteI32(_iter9);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (BrokerAccessIds != null && __isset.brokerAccessIds) {
        field.Name = "brokerAccessIds";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, BrokerAccessIds.Count));
          foreach (int _iter10 in BrokerAccessIds)
          {
            oprot.WriteI32(_iter10);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.platform) {
        field.Name = "platform";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Platform);
        oprot.WriteFieldEnd();
      }
      if (Platforms != null && __isset.platforms) {
        field.Name = "platforms";
        field.Type = TType.Set;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.I32, Platforms.Count));
          foreach (xueqiao.broker.BrokerPlatform _iter11 in Platforms)
          {
            oprot.WriteI32((int)_iter11);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ReqBrokerAccessOption(");
      sb.Append("BrokerId: ");
      if (BrokerId == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (int _iter12 in BrokerId)
        {
          sb.Append(_iter12.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",BrokerAccessIds: ");
      if (BrokerAccessIds == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (int _iter13 in BrokerAccessIds)
        {
          sb.Append(_iter13.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",Platform: ");
      sb.Append(Platform);
      sb.Append(",Platforms: ");
      if (Platforms == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (xueqiao.broker.BrokerPlatform _iter14 in Platforms)
        {
          sb.Append(_iter14.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(")");
      return sb.ToString();
    }

  }

}
