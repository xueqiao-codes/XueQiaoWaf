/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.broker
{
  public partial class BrokerService {
    public interface Iface {
      BrokerPage reqBroker(PlatformArgs platformArgs, ReqBrokerOption option, int pageIndex, int pageSize);
      #if SILVERLIGHT
      IAsyncResult Begin_reqBroker(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqBrokerOption option, int pageIndex, int pageSize);
      BrokerPage End_reqBroker(IAsyncResult asyncResult);
      #endif
      BrokerAccessPage reqBrokerAccess(PlatformArgs platformArgs, ReqBrokerAccessOption option, int pageIndex, int pageSize);
      #if SILVERLIGHT
      IAsyncResult Begin_reqBrokerAccess(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqBrokerAccessOption option, int pageIndex, int pageSize);
      BrokerAccessPage End_reqBrokerAccess(IAsyncResult asyncResult);
      #endif
      BrokerAccessInfoPage reqBrokerAccessInfo(PlatformArgs platformArgs, ReqBrokerAccessInfoOption option, int pageIndex, int pageSize);
      #if SILVERLIGHT
      IAsyncResult Begin_reqBrokerAccessInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqBrokerAccessInfoOption option, int pageIndex, int pageSize);
      BrokerAccessInfoPage End_reqBrokerAccessInfo(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqBroker(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqBrokerOption option, int pageIndex, int pageSize)
      {
        return send_reqBroker(callback, state, platformArgs, option, pageIndex, pageSize);
      }

      public BrokerPage End_reqBroker(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqBroker();
      }

      #endif

      public BrokerPage reqBroker(PlatformArgs platformArgs, ReqBrokerOption option, int pageIndex, int pageSize)
      {
        #if !SILVERLIGHT
        send_reqBroker(platformArgs, option, pageIndex, pageSize);
        return recv_reqBroker();

        #else
        var asyncResult = Begin_reqBroker(null, null, platformArgs, option, pageIndex, pageSize);
        return End_reqBroker(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqBroker(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqBrokerOption option, int pageIndex, int pageSize)
      #else
      public void send_reqBroker(PlatformArgs platformArgs, ReqBrokerOption option, int pageIndex, int pageSize)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqBroker", TMessageType.Call, seqid_));
        reqBroker_args args = new reqBroker_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public BrokerPage recv_reqBroker()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqBroker_result result = new reqBroker_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqBroker failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqBrokerAccess(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqBrokerAccessOption option, int pageIndex, int pageSize)
      {
        return send_reqBrokerAccess(callback, state, platformArgs, option, pageIndex, pageSize);
      }

      public BrokerAccessPage End_reqBrokerAccess(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqBrokerAccess();
      }

      #endif

      public BrokerAccessPage reqBrokerAccess(PlatformArgs platformArgs, ReqBrokerAccessOption option, int pageIndex, int pageSize)
      {
        #if !SILVERLIGHT
        send_reqBrokerAccess(platformArgs, option, pageIndex, pageSize);
        return recv_reqBrokerAccess();

        #else
        var asyncResult = Begin_reqBrokerAccess(null, null, platformArgs, option, pageIndex, pageSize);
        return End_reqBrokerAccess(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqBrokerAccess(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqBrokerAccessOption option, int pageIndex, int pageSize)
      #else
      public void send_reqBrokerAccess(PlatformArgs platformArgs, ReqBrokerAccessOption option, int pageIndex, int pageSize)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqBrokerAccess", TMessageType.Call, seqid_));
        reqBrokerAccess_args args = new reqBrokerAccess_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public BrokerAccessPage recv_reqBrokerAccess()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqBrokerAccess_result result = new reqBrokerAccess_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqBrokerAccess failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reqBrokerAccessInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqBrokerAccessInfoOption option, int pageIndex, int pageSize)
      {
        return send_reqBrokerAccessInfo(callback, state, platformArgs, option, pageIndex, pageSize);
      }

      public BrokerAccessInfoPage End_reqBrokerAccessInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reqBrokerAccessInfo();
      }

      #endif

      public BrokerAccessInfoPage reqBrokerAccessInfo(PlatformArgs platformArgs, ReqBrokerAccessInfoOption option, int pageIndex, int pageSize)
      {
        #if !SILVERLIGHT
        send_reqBrokerAccessInfo(platformArgs, option, pageIndex, pageSize);
        return recv_reqBrokerAccessInfo();

        #else
        var asyncResult = Begin_reqBrokerAccessInfo(null, null, platformArgs, option, pageIndex, pageSize);
        return End_reqBrokerAccessInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reqBrokerAccessInfo(AsyncCallback callback, object state, PlatformArgs platformArgs, ReqBrokerAccessInfoOption option, int pageIndex, int pageSize)
      #else
      public void send_reqBrokerAccessInfo(PlatformArgs platformArgs, ReqBrokerAccessInfoOption option, int pageIndex, int pageSize)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reqBrokerAccessInfo", TMessageType.Call, seqid_));
        reqBrokerAccessInfo_args args = new reqBrokerAccessInfo_args();
        args.PlatformArgs = platformArgs;
        args.Option = option;
        args.PageIndex = pageIndex;
        args.PageSize = pageSize;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public BrokerAccessInfoPage recv_reqBrokerAccessInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reqBrokerAccessInfo_result result = new reqBrokerAccessInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reqBrokerAccessInfo failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["reqBroker"] = reqBroker_Process;
        processMap_["reqBrokerAccess"] = reqBrokerAccess_Process;
        processMap_["reqBrokerAccessInfo"] = reqBrokerAccessInfo_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void reqBroker_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqBroker_args args = new reqBroker_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqBroker_result result = new reqBroker_result();
        try {
          result.Success = iface_.reqBroker(args.PlatformArgs, args.Option, args.PageIndex, args.PageSize);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqBroker", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqBrokerAccess_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqBrokerAccess_args args = new reqBrokerAccess_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqBrokerAccess_result result = new reqBrokerAccess_result();
        try {
          result.Success = iface_.reqBrokerAccess(args.PlatformArgs, args.Option, args.PageIndex, args.PageSize);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqBrokerAccess", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reqBrokerAccessInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reqBrokerAccessInfo_args args = new reqBrokerAccessInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reqBrokerAccessInfo_result result = new reqBrokerAccessInfo_result();
        try {
          result.Success = iface_.reqBrokerAccessInfo(args.PlatformArgs, args.Option, args.PageIndex, args.PageSize);
        } catch (ErrorInfo err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reqBrokerAccessInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqBroker_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqBrokerOption _option;
      private int _pageIndex;
      private int _pageSize;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqBrokerOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public int PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          SetProperty(ref _pageIndex, value);
        }
      }

      public int PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          SetProperty(ref _pageSize, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageIndex;
        public bool pageSize;
      }

      public reqBroker_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqBrokerOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PageIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                PageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqBroker_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageSize);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqBroker_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageIndex: ");
        sb.Append(PageIndex);
        sb.Append(",PageSize: ");
        sb.Append(PageSize);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqBroker_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private BrokerPage _success;
      private ErrorInfo _err;

      public BrokerPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqBroker_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BrokerPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqBroker_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqBroker_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqBrokerAccess_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqBrokerAccessOption _option;
      private int _pageIndex;
      private int _pageSize;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqBrokerAccessOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public int PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          SetProperty(ref _pageIndex, value);
        }
      }

      public int PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          SetProperty(ref _pageSize, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageIndex;
        public bool pageSize;
      }

      public reqBrokerAccess_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqBrokerAccessOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PageIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                PageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqBrokerAccess_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageSize);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqBrokerAccess_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageIndex: ");
        sb.Append(PageIndex);
        sb.Append(",PageSize: ");
        sb.Append(PageSize);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqBrokerAccess_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private BrokerAccessPage _success;
      private ErrorInfo _err;

      public BrokerAccessPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqBrokerAccess_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BrokerAccessPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqBrokerAccess_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqBrokerAccess_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqBrokerAccessInfo_args : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private PlatformArgs _platformArgs;
      private ReqBrokerAccessInfoOption _option;
      private int _pageIndex;
      private int _pageSize;

      public PlatformArgs PlatformArgs
      {
        get
        {
          return _platformArgs;
        }
        set
        {
          __isset.platformArgs = true;
          SetProperty(ref _platformArgs, value);
        }
      }

      public ReqBrokerAccessInfoOption Option
      {
        get
        {
          return _option;
        }
        set
        {
          __isset.option = true;
          SetProperty(ref _option, value);
        }
      }

      public int PageIndex
      {
        get
        {
          return _pageIndex;
        }
        set
        {
          __isset.pageIndex = true;
          SetProperty(ref _pageIndex, value);
        }
      }

      public int PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          SetProperty(ref _pageSize, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool platformArgs;
        public bool option;
        public bool pageIndex;
        public bool pageSize;
      }

      public reqBrokerAccessInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PlatformArgs = new PlatformArgs();
                PlatformArgs.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Option = new ReqBrokerAccessInfoOption();
                Option.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PageIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                PageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqBrokerAccessInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PlatformArgs != null && __isset.platformArgs) {
          field.Name = "platformArgs";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PlatformArgs.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Option != null && __isset.option) {
          field.Name = "option";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Option.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageIndex) {
          field.Name = "pageIndex";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.pageSize) {
          field.Name = "pageSize";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PageSize);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqBrokerAccessInfo_args(");
        sb.Append("PlatformArgs: ");
        sb.Append(PlatformArgs== null ? "<null>" : PlatformArgs.ToString());
        sb.Append(",Option: ");
        sb.Append(Option== null ? "<null>" : Option.ToString());
        sb.Append(",PageIndex: ");
        sb.Append(PageIndex);
        sb.Append(",PageSize: ");
        sb.Append(PageSize);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reqBrokerAccessInfo_result : TBase, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
      {
        if (Equals(field, value)) { return false; }
        field = value;
        RaisePropertyChanged(propertyName);
        return true;
      }

      protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
      {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
      }
      private BrokerAccessInfoPage _success;
      private ErrorInfo _err;

      public BrokerAccessInfoPage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          SetProperty(ref _success, value);
        }
      }

      public ErrorInfo Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          SetProperty(ref _err, value);
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reqBrokerAccessInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BrokerAccessInfoPage();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new ErrorInfo();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reqBrokerAccessInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reqBrokerAccessInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
