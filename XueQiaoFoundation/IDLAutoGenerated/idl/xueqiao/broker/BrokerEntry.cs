/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;

namespace xueqiao.broker
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BrokerEntry : TBase, INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
      if (Equals(field, value)) { return false; }
      field = value;
      RaisePropertyChanged(propertyName);
      return true;
    }

    protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    private int _brokerId;
    private string _engName;
    private string _cnName;
    private string _note;
    private List<TechPlatformEnv> _techPlatformEnvs;
    private List<BrokerPlatform> _techPlatforms;
    private long _lastModityTimestamp;
    private long _createTimestamp;

    public int BrokerId
    {
      get
      {
        return _brokerId;
      }
      set
      {
        __isset.brokerId = true;
        SetProperty(ref _brokerId, value);
      }
    }

    public string EngName
    {
      get
      {
        return _engName;
      }
      set
      {
        __isset.engName = true;
        SetProperty(ref _engName, value);
      }
    }

    public string CnName
    {
      get
      {
        return _cnName;
      }
      set
      {
        __isset.cnName = true;
        SetProperty(ref _cnName, value);
      }
    }

    public string Note
    {
      get
      {
        return _note;
      }
      set
      {
        __isset.note = true;
        SetProperty(ref _note, value);
      }
    }

    public List<TechPlatformEnv> TechPlatformEnvs
    {
      get
      {
        return _techPlatformEnvs;
      }
      set
      {
        __isset.techPlatformEnvs = true;
        SetProperty(ref _techPlatformEnvs, value);
      }
    }

    public List<BrokerPlatform> TechPlatforms
    {
      get
      {
        return _techPlatforms;
      }
      set
      {
        __isset.techPlatforms = true;
        SetProperty(ref _techPlatforms, value);
      }
    }

    public long LastModityTimestamp
    {
      get
      {
        return _lastModityTimestamp;
      }
      set
      {
        __isset.lastModityTimestamp = true;
        SetProperty(ref _lastModityTimestamp, value);
      }
    }

    public long CreateTimestamp
    {
      get
      {
        return _createTimestamp;
      }
      set
      {
        __isset.createTimestamp = true;
        SetProperty(ref _createTimestamp, value);
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool brokerId;
      public bool engName;
      public bool cnName;
      public bool note;
      public bool techPlatformEnvs;
      public bool techPlatforms;
      public bool lastModityTimestamp;
      public bool createTimestamp;
    }

    public BrokerEntry() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              BrokerId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              EngName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              CnName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Note = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                TechPlatformEnvs = new List<TechPlatformEnv>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  TechPlatformEnv _elem2 = (TechPlatformEnv)0;
                  _elem2 = (TechPlatformEnv)iprot.ReadI32();
                  TechPlatformEnvs.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                TechPlatforms = new List<BrokerPlatform>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  BrokerPlatform _elem5 = (BrokerPlatform)0;
                  _elem5 = (BrokerPlatform)iprot.ReadI32();
                  TechPlatforms.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              LastModityTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              CreateTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BrokerEntry");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.brokerId) {
        field.Name = "brokerId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BrokerId);
        oprot.WriteFieldEnd();
      }
      if (EngName != null && __isset.engName) {
        field.Name = "engName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EngName);
        oprot.WriteFieldEnd();
      }
      if (CnName != null && __isset.cnName) {
        field.Name = "cnName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CnName);
        oprot.WriteFieldEnd();
      }
      if (Note != null && __isset.note) {
        field.Name = "note";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Note);
        oprot.WriteFieldEnd();
      }
      if (TechPlatformEnvs != null && __isset.techPlatformEnvs) {
        field.Name = "techPlatformEnvs";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, TechPlatformEnvs.Count));
          foreach (TechPlatformEnv _iter6 in TechPlatformEnvs)
          {
            oprot.WriteI32((int)_iter6);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModityTimestamp) {
        field.Name = "lastModityTimestamp";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModityTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTimestamp) {
        field.Name = "createTimestamp";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTimestamp);
        oprot.WriteFieldEnd();
      }
      if (TechPlatforms != null && __isset.techPlatforms) {
        field.Name = "techPlatforms";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, TechPlatforms.Count));
          foreach (BrokerPlatform _iter7 in TechPlatforms)
          {
            oprot.WriteI32((int)_iter7);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BrokerEntry(");
      sb.Append("BrokerId: ");
      sb.Append(BrokerId);
      sb.Append(",EngName: ");
      sb.Append(EngName);
      sb.Append(",CnName: ");
      sb.Append(CnName);
      sb.Append(",Note: ");
      sb.Append(Note);
      sb.Append(",TechPlatformEnvs: ");
      if (TechPlatformEnvs == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (TechPlatformEnv _iter8 in TechPlatformEnvs)
        {
          sb.Append(_iter8.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",TechPlatforms: ");
      if (TechPlatforms == null)
      {
        sb.Append("<null>");
      }
      else
      {
        sb.Append("[");
        foreach (BrokerPlatform _iter9 in TechPlatforms)
        {
          sb.Append(_iter9.ToString());
          sb.Append(", ");
        }
        sb.Append("]");
      }
      sb.Append(",LastModityTimestamp: ");
      sb.Append(LastModityTimestamp);
      sb.Append(",CreateTimestamp: ");
      sb.Append(CreateTimestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
