/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ErrorInfo : TException, TBase, INotifyPropertyChanged
{
  public event PropertyChangedEventHandler PropertyChanged;
  protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
  {
    if (Equals(field, value)) { return false; }
    field = value;
    RaisePropertyChanged(propertyName);
    return true;
  }

  protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
  {
    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
  }
  private string _clientMsg;
  private EClientActionType _clientActionType;

  public int ErrorCode { get; set; }

  public string ErrorMsg { get; set; }

  public string ClientMsg
  {
    get
    {
      return _clientMsg;
    }
    set
    {
      __isset.clientMsg = true;
      SetProperty(ref _clientMsg, value);
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="EClientActionType"/>
  /// </summary>
  public EClientActionType ClientActionType
  {
    get
    {
      return _clientActionType;
    }
    set
    {
      __isset.clientActionType = true;
      SetProperty(ref _clientActionType, value);
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool clientMsg;
    public bool clientActionType;
  }

  public ErrorInfo() {
  }

  public ErrorInfo(int errorCode, string errorMsg) : this() {
    this.ErrorCode = errorCode;
    this.ErrorMsg = errorMsg;
  }

  public void Read (TProtocol iprot)
  {
    bool isset_errorCode = false;
    bool isset_errorMsg = false;
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.I32) {
            ErrorCode = iprot.ReadI32();
            isset_errorCode = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            ErrorMsg = iprot.ReadString();
            isset_errorMsg = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.String) {
            ClientMsg = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.I32) {
            ClientActionType = (EClientActionType)iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
    if (!isset_errorCode)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_errorMsg)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("ErrorInfo");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    field.Name = "errorCode";
    field.Type = TType.I32;
    field.ID = 1;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32(ErrorCode);
    oprot.WriteFieldEnd();
    field.Name = "errorMsg";
    field.Type = TType.String;
    field.ID = 2;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(ErrorMsg);
    oprot.WriteFieldEnd();
    if (ClientMsg != null && __isset.clientMsg) {
      field.Name = "clientMsg";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ClientMsg);
      oprot.WriteFieldEnd();
    }
    if (__isset.clientActionType) {
      field.Name = "clientActionType";
      field.Type = TType.I32;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)ClientActionType);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("ErrorInfo(");
    sb.Append("ErrorCode: ");
    sb.Append(ErrorCode);
    sb.Append(",ErrorMsg: ");
    sb.Append(ErrorMsg);
    sb.Append(",ClientMsg: ");
    sb.Append(ClientMsg);
    sb.Append(",ClientActionType: ");
    sb.Append(ClientActionType);
    sb.Append(")");
    return sb.ToString();
  }

}

