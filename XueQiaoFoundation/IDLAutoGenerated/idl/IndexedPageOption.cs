/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;


/// <summary>
/// 索引从0开始，利用pageIndex和pageSize不断流转的分页方式
/// </summary>
#if !SILVERLIGHT
[Serializable]
#endif
public partial class IndexedPageOption : TBase, INotifyPropertyChanged
{
  public event PropertyChangedEventHandler PropertyChanged;
  protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
  {
    if (Equals(field, value)) { return false; }
    field = value;
    RaisePropertyChanged(propertyName);
    return true;
  }

  protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
  {
    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
  }
  private bool _needTotalCount;
  private int _pageIndex;
  private int _pageSize;

  public bool NeedTotalCount
  {
    get
    {
      return _needTotalCount;
    }
    set
    {
      __isset.needTotalCount = true;
      SetProperty(ref _needTotalCount, value);
    }
  }

  public int PageIndex
  {
    get
    {
      return _pageIndex;
    }
    set
    {
      __isset.pageIndex = true;
      SetProperty(ref _pageIndex, value);
    }
  }

  public int PageSize
  {
    get
    {
      return _pageSize;
    }
    set
    {
      __isset.pageSize = true;
      SetProperty(ref _pageSize, value);
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool needTotalCount;
    public bool pageIndex;
    public bool pageSize;
  }

  public IndexedPageOption() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.Bool) {
            NeedTotalCount = iprot.ReadBool();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.I32) {
            PageIndex = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.I32) {
            PageSize = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("IndexedPageOption");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (__isset.needTotalCount) {
      field.Name = "needTotalCount";
      field.Type = TType.Bool;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(NeedTotalCount);
      oprot.WriteFieldEnd();
    }
    if (__isset.pageIndex) {
      field.Name = "pageIndex";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(PageIndex);
      oprot.WriteFieldEnd();
    }
    if (__isset.pageSize) {
      field.Name = "pageSize";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(PageSize);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("IndexedPageOption(");
    sb.Append("NeedTotalCount: ");
    sb.Append(NeedTotalCount);
    sb.Append(",PageIndex: ");
    sb.Append(PageIndex);
    sb.Append(",PageSize: ");
    sb.Append(PageSize);
    sb.Append(")");
    return sb.ToString();
  }

}

