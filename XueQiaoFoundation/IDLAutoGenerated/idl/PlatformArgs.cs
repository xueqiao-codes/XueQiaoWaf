/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices; 
using Thrift.Protocol;
using Thrift.Transport;


/// <summary>
/// 平台级参数，方便以后进行治理和查错
/// </summary>
#if !SILVERLIGHT
[Serializable]
#endif
public partial class PlatformArgs : TBase, INotifyPropertyChanged
{
  public event PropertyChangedEventHandler PropertyChanged;
  protected bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
  {
    if (Equals(field, value)) { return false; }
    field = value;
    RaisePropertyChanged(propertyName);
    return true;
  }

  protected void RaisePropertyChanged([CallerMemberName] string propertyName = null)
  {
    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
  }
  private string _sourceDesc;
  private int _sourceIpV4;
  private string _remoteAddress;
  private int _remotePort;
  private string _xForwardAddress;
  private string _sourceIp;
  private int _timeoutMs;
  private EClientLang _clientLang;
  private Dictionary<string, string> _extraParams;

  public string SourceDesc
  {
    get
    {
      return _sourceDesc;
    }
    set
    {
      __isset.sourceDesc = true;
      SetProperty(ref _sourceDesc, value);
    }
  }

  public int SourceIpV4
  {
    get
    {
      return _sourceIpV4;
    }
    set
    {
      __isset.sourceIpV4 = true;
      SetProperty(ref _sourceIpV4, value);
    }
  }

  public string RemoteAddress
  {
    get
    {
      return _remoteAddress;
    }
    set
    {
      __isset.remoteAddress = true;
      SetProperty(ref _remoteAddress, value);
    }
  }

  public int RemotePort
  {
    get
    {
      return _remotePort;
    }
    set
    {
      __isset.remotePort = true;
      SetProperty(ref _remotePort, value);
    }
  }

  public string XForwardAddress
  {
    get
    {
      return _xForwardAddress;
    }
    set
    {
      __isset.xForwardAddress = true;
      SetProperty(ref _xForwardAddress, value);
    }
  }

  public string SourceIp
  {
    get
    {
      return _sourceIp;
    }
    set
    {
      __isset.sourceIp = true;
      SetProperty(ref _sourceIp, value);
    }
  }

  public int TimeoutMs
  {
    get
    {
      return _timeoutMs;
    }
    set
    {
      __isset.timeoutMs = true;
      SetProperty(ref _timeoutMs, value);
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="EClientLang"/>
  /// </summary>
  public EClientLang ClientLang
  {
    get
    {
      return _clientLang;
    }
    set
    {
      __isset.clientLang = true;
      SetProperty(ref _clientLang, value);
    }
  }

  public Dictionary<string, string> ExtraParams
  {
    get
    {
      return _extraParams;
    }
    set
    {
      __isset.extraParams = true;
      SetProperty(ref _extraParams, value);
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool sourceDesc;
    public bool sourceIpV4;
    public bool remoteAddress;
    public bool remotePort;
    public bool xForwardAddress;
    public bool sourceIp;
    public bool timeoutMs;
    public bool clientLang;
    public bool extraParams;
  }

  public PlatformArgs() {
    this._clientLang = EClientLang.CN;
    this.__isset.clientLang = true;
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            SourceDesc = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.I32) {
            SourceIpV4 = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.String) {
            RemoteAddress = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.I32) {
            RemotePort = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.String) {
            XForwardAddress = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 6:
          if (field.Type == TType.String) {
            SourceIp = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 7:
          if (field.Type == TType.I32) {
            TimeoutMs = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 8:
          if (field.Type == TType.I32) {
            ClientLang = (EClientLang)iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 9:
          if (field.Type == TType.Map) {
            {
              ExtraParams = new Dictionary<string, string>();
              TMap _map0 = iprot.ReadMapBegin();
              for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
              {
                string _key2;
                string _val3;
                _key2 = iprot.ReadString();
                _val3 = iprot.ReadString();
                ExtraParams[_key2] = _val3;
              }
              iprot.ReadMapEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("PlatformArgs");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (SourceDesc != null && __isset.sourceDesc) {
      field.Name = "sourceDesc";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(SourceDesc);
      oprot.WriteFieldEnd();
    }
    if (__isset.sourceIpV4) {
      field.Name = "sourceIpV4";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(SourceIpV4);
      oprot.WriteFieldEnd();
    }
    if (RemoteAddress != null && __isset.remoteAddress) {
      field.Name = "remoteAddress";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(RemoteAddress);
      oprot.WriteFieldEnd();
    }
    if (__isset.remotePort) {
      field.Name = "remotePort";
      field.Type = TType.I32;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(RemotePort);
      oprot.WriteFieldEnd();
    }
    if (XForwardAddress != null && __isset.xForwardAddress) {
      field.Name = "xForwardAddress";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(XForwardAddress);
      oprot.WriteFieldEnd();
    }
    if (SourceIp != null && __isset.sourceIp) {
      field.Name = "sourceIp";
      field.Type = TType.String;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(SourceIp);
      oprot.WriteFieldEnd();
    }
    if (__isset.timeoutMs) {
      field.Name = "timeoutMs";
      field.Type = TType.I32;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(TimeoutMs);
      oprot.WriteFieldEnd();
    }
    if (__isset.clientLang) {
      field.Name = "clientLang";
      field.Type = TType.I32;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)ClientLang);
      oprot.WriteFieldEnd();
    }
    if (ExtraParams != null && __isset.extraParams) {
      field.Name = "extraParams";
      field.Type = TType.Map;
      field.ID = 9;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraParams.Count));
        foreach (string _iter4 in ExtraParams.Keys)
        {
          oprot.WriteString(_iter4);
          oprot.WriteString(ExtraParams[_iter4]);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("PlatformArgs(");
    sb.Append("SourceDesc: ");
    sb.Append(SourceDesc);
    sb.Append(",SourceIpV4: ");
    sb.Append(SourceIpV4);
    sb.Append(",RemoteAddress: ");
    sb.Append(RemoteAddress);
    sb.Append(",RemotePort: ");
    sb.Append(RemotePort);
    sb.Append(",XForwardAddress: ");
    sb.Append(XForwardAddress);
    sb.Append(",SourceIp: ");
    sb.Append(SourceIp);
    sb.Append(",TimeoutMs: ");
    sb.Append(TimeoutMs);
    sb.Append(",ClientLang: ");
    sb.Append(ClientLang);
    sb.Append(",ExtraParams: ");
    if (ExtraParams == null)
    {
      sb.Append("<null>");
    }
    else
    {
      sb.Append("{");
      foreach (string _iter5 in ExtraParams.Keys)
      {
        sb.Append(_iter5.ToString());
        sb.Append(":");
        sb.Append(ExtraParams[_iter5].ToString());
        sb.Append(", ");
      }
      sb.Append("}");
    }
    sb.Append(")");
    return sb.ToString();
  }

}

